<?xml version="1.0" encoding="UTF-8"?><PACKAGE_SPEC xmlns="http://www.metricstream.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.metricstream.com ms_application_schema.xsd">
<!--$Revision: 1.30.2.12.2.2.2.9.2.8 $-->
<!--$Author: prao $-->
<PLATFORM_DETAILS>
<PLATFORM_VERSION>6.1</PLATFORM_VERSION>
<BUILD_VERSION>4.2.2.0</BUILD_VERSION>
</PLATFORM_DETAILS>
<STORED_PROCEDURE_NAME>MS_RGA_ALERT_OBJECT_RELATION_P</STORED_PROCEDURE_NAME>
<OBJECT_ID>MS_RGA_ALERT_OBJECT_RELATION_P</OBJECT_ID>
<OBJECT_TYPE>PACKAGE</OBJECT_TYPE>
<TEXT>PACKAGE MS_RGA_ALERT_OBJECT_RELATION_P IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name  : MS_RGA_ALERT_OBJECT_RELATION_P
    Creation Time : Thu Jan 08 15:56:55 IST 2015
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_RGA_ALERT_OBJECT_RELATION_P' ;
    GV_program_name VARCHAR2(100);
   
   
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id  IN                      NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id         IN                      VARCHAR2,
            iop_log_no              IN   OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY     CLOB,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2,
            iop_error_seq         IN     OUT                NUMBER,
            ip_pid                IN                        NUMBER
        );
   


END MS_RGA_ALERT_OBJECT_RELATION_P ;
 </TEXT>
<TEXT_BODY>PACKAGE BODY MS_RGA_ALERT_OBJECT_RELATION_P IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Body.
    Author : Data Designer ETL Engine
   -------------------------------------------------------------------------- */
   
   
/* --------------------------------------------------------------------------------
    GENERATE_UPDATE_HIERARCHY : Procedure to get the update the xml data hierarchy
   ------------------------------------------------------------------------------ */

    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        );
        
    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        )
    AS
        LV_error_code               NUMBER;
        LV_error_message            VARCHAR2(1000);
        UPDATE_HIERARCHY_EXCEP      EXCEPTION;
        LV_xml                      XMLTYPE := iop_xml;
		LV_namespace                varchar2(100) := 'xmlns="http://www.metricstream.com/appstudio/msa"';
        lv_program_name             VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UPDATE_HIERARCHY';


/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
      
    	           	    SELECT DELETEXML(LV_XML,'datapacket/data/orb/row/orb_alert_title',LV_namespace) INTO LV_XML FROM DUAL;
	           
	FOR rec in (SELECT DISTINCT 
        	    	  	 alert_title
        FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
      'msa:datapacket/msa:data/msa:nonmultirow'       PASSING LV_xml
    COLUMNS
            	 alert_title  VARCHAR2(4000)    PATH  'msa:alert_title'
       ))
   
   LOOP
               	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/orb/row','orb_alert_title',XMLTYPE('&lt;orb_alert_title ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'&gt;'||rec.alert_title||'&lt;/orb_alert_title&gt;'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	    END LOOP;
	iop_xml := LV_xml;
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_pid);
    EXCEPTION
        WHEN UPDATE_HIERARCHY_EXCEP THEN

            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE_HIERARCHY_EXCEP Exception Raised ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO  MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
			MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UPDATE_HIERARCHY;
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
        LV_error_code NUMBER;
        LV_error_message VARCHAR2(1000);
        NEXT_ID_GEN_EXCEPTION EXCEPTION;
        lv_program_name VARCHAR2(100);
        ln_error_seq NUMBER:=1;

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'GET_NEXT_ID';

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;

    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_process_instance_id);
      
             
 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_process_instance_id);
    EXCEPTION
        WHEN NEXT_ID_GEN_EXCEPTION THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] NEXT_ID_GEN_EXCEPTION Exception Raised ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] WHEN OTHERS ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END GET_NEXT_ID;


 

  	    	 
  	    	 
  	    	              
/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY         CLOB,
            iop_log_no            IN     OUT                    NUMBER,
            op_error_code                OUT                    NUMBER,
            op_error_message             OUT                    VARCHAR2,
            iop_error_seq         IN     OUT                    NUMBER,
            ip_pid                IN                            NUMBER

        )
    AS

/* --------------------------------------------------------------------------
     ETL procedure created by the ETL Engine of APP BUILDER.
     The procedure takes care of loading the data that is sent
     by the FLOW BUILDER and store the same in MS TABLES.
     Data is already processed and stored accordingly in the iop_data
     object structure. The object can have one or more records.
     The ETL is designed to take care of one or more records.
     If the data has to be manipulated before populating the main
     MS TABLES, please use the HOOKS that are generated by the
     FLOW BUILDER.
   -------------------------------------------------------------------------- */
        LV_progress VARCHAR2(3) := NULL;
        LV_cntr_1   NUMBER      := NULL;
        LV_cntr_2   NUMBER      := NULL;
        LV_debug    BOOLEAN     := FALSE;
        LV_XML      XMLTYPE     := XMLTYPE(iop_xml_data);
        LV_err_code NUMBER      := NULL;
        LV_err_msg  VARCHAR2(4000);
        lV_program_name VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
              AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
      
    /************* Add the cursors for all the regions ******************/
      
        				
		CURSOR CU_RGA_ALERT_OBJECT_RE_REL is (SELECT 
				   	   			   	    	  ORB_ALERT_TITLE
		   	   		   			   	   			   	    	,  ORB_FORM_URL
		   	   		   			   	   			   	    	,  OBJECT_NAME
		   	   		   			   	   			   	    	,  FIELD
		   	   		   			   	   			   	    	,  REL_VALID_FROM
		   	   		   			   	   			   	    	,  ADDITIONAL_DETAILS_WITH_ID
		   	   		   			   	   			   	    	,  SELF_REL_TYPE
		   	   		   			   	   			   	    	,  ADDITIONAL_DETAILS
		   	   		   			   	   			   	    	,  APPLICABLE_TO
		   	   		   			   	   			   	    	,  MSAI_125
		   	   		   			   	   			   	    	,  REL_INST_ID
		   	   		   			   	   			   	    	,  TGT_OBJ_ID
		   	   		   			   	   			   	    	,  ROW_NUM
		   	   		   			   	   			   	    	,  ADDITIONAL_COLUMN5
		   	   		   			   	   			   	    	,  OBJECT_COMMENTS
		   	   		   			   	   			   	    	,  TGT_OBJ_NAME
		   	   		   			   	   			   	    	,  REL_VALID_UNTIL
		   	   		   			   	   			   	    	,  OBJECT_ID
		   	   		   			   	   			   	    	,  REL_SOURCE_OBJECT_ID
		   	   		   			   	   			   	    	,  TGT_OBJ_TYPE
		   	   		   			   	   			   	    	,  REL_COMMENTS
		   	   		   			   	   			   	    	,  REL_SOURCE_ID
		   	   		   			   	   			   	    	,  REL_CONFIG_ID
		   	   		   			   	   			   	    	,  OBJECT_TYPES
		   	   		   	 		FROM XMLTABLE(XMLNAMESPACES( 'http://www.metricstream.com/appstudio/msa'  as "msa"),'msa:datapacket/msa:data/msa:orb/msa:row'
		PASSING LV_xml
		COLUMNS
	    	    	   			  ORB_ALERT_TITLE  VARCHAR2(4000)   PATH 'msa:orb_alert_title' 	    	   			,  ORB_FORM_URL  VARCHAR2(4000)   PATH 'msa:orb_form_url' 	    	   			,  OBJECT_NAME  VARCHAR2(4000)   PATH 'msa:object_name' 	    	   			,  FIELD  VARCHAR2(4000)   PATH 'msa:field' 	    	   			,  REL_VALID_FROM  VARCHAR2(4000)   PATH 'msa:rel_valid_from' 	    	   			,  ADDITIONAL_DETAILS_WITH_ID  VARCHAR2(4000)   PATH 'msa:additional_details_with_id' 	    	   			,  SELF_REL_TYPE  VARCHAR2(4000)   PATH 'msa:self_rel_type' 	    	   			,  ADDITIONAL_DETAILS  VARCHAR2(4000)   PATH 'msa:additional_details' 	    	   			,  APPLICABLE_TO  VARCHAR2(4000)   PATH 'msa:applicable_to' 	    	   			,  MSAI_125  VARCHAR2(4000)   PATH 'msa:msai_125' 	    	   			,  REL_INST_ID  VARCHAR2(4000)   PATH 'msa:rel_inst_id' 	    	   			,  TGT_OBJ_ID  VARCHAR2(4000)   PATH 'msa:tgt_obj_id' 	    	   			,  ROW_NUM  VARCHAR2(4000)   PATH 'msa:row_num' 	    	   			,  ADDITIONAL_COLUMN5  VARCHAR2(4000)   PATH 'msa:additional_column5' 	    	   			,  OBJECT_COMMENTS  VARCHAR2(4000)   PATH 'msa:object_comments' 	    	   			,  TGT_OBJ_NAME  VARCHAR2(4000)   PATH 'msa:tgt_obj_name' 	    	   			,  REL_VALID_UNTIL  VARCHAR2(4000)   PATH 'msa:rel_valid_until' 	    	   			,  OBJECT_ID  VARCHAR2(4000)   PATH 'msa:object_id' 	    	   			,  REL_SOURCE_OBJECT_ID  VARCHAR2(4000)   PATH 'msa:rel_source_object_id' 	    	   			,  TGT_OBJ_TYPE  VARCHAR2(4000)   PATH 'msa:tgt_obj_type' 	    	   			,  REL_COMMENTS  VARCHAR2(4000)   PATH 'msa:rel_comments' 	    	   			,  REL_SOURCE_ID  VARCHAR2(4000)   PATH 'msa:rel_source_id' 	    	   			,  REL_CONFIG_ID  VARCHAR2(4000)   PATH 'msa:rel_config_id' 	    	   			,  OBJECT_TYPES  VARCHAR2(4000)   PATH 'msa:object_types' 	    			));	  
		TYPE LT_RGA_ALERT_OBJECT_RE_REL IS TABLE OF CU_RGA_ALERT_OBJECT_RE_REL%ROWTYPE;
		TY_RGA_ALERT_OBJECT_RE_REL  LT_RGA_ALERT_OBJECT_RE_REL; 
		
		        
   /************* End of cursors for all the regions ******************/
    
   /************ Add the cursors for all object relationships *****************************/
    	  		      BEGIN

/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------
    Note: Defining SAVEPOINT TO ROLLBACK transactions done by ETL.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        LV_progress := '001';
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'CALL_ETL';


/* --------------------------------------------------------------------------
    Note: Default DEBUG FLAG is set to FALSE to avoid unneccessary logging of data.
            If any issues found in ETL, to understand what goes into the ETL
            then set this variable to TRUE and run the ETL in the flow.
            It allows to log the entire relevant data set.
   -------------------------------------------------------------------------- */
        LV_debug := FALSE;

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);
        
        UPDATE_HIERARCHY
        (
           iop_log_no          =&gt; LV_log_no.APP_LOG_NO,
           iop_xml             =&gt; LV_XML,
           op_error_code       =&gt; LV_err_code,
           op_error_message    =&gt; LV_err_msg,
           iop_error_sequence  =&gt; iop_error_seq,
           ip_pid              =&gt; ip_pid
        );

        IF(LV_err_code !=0) THEN
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'W','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Failed while updating Hierarchy ', ip_pid);
        END IF;
        
        /* capture all cursors here */
					       OPEN CU_RGA_ALERT_OBJECT_RE_REL;
	       FETCH CU_RGA_ALERT_OBJECT_RE_REL BULK COLLECT INTO TY_RGA_ALERT_OBJECT_RE_REL;
	       CLOSE CU_RGA_ALERT_OBJECT_RE_REL; 
	    		
		
        LV_cntr_1 := 0;
      
/* --------------------------------------------------------------------------
        Cursor to fetch non multirow details from XML
   -------------------------------------------------------------------------- */
		        FOR iop_data in ( SELECT  INSTANCE_ID
                                 ,METRIC_ID
                                 ,TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_RUN_DATE
                                 ,TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
                                 ,LATEST_FLAG
                                 ,CREATED_BY
                                 ,TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE
                                 ,PROCESS_FLOW_STATUS
                                 ,PROCESS_INSTANCE_ID
                                 ,ELECTRONICALLY_SIGNED
	                             ,INSTANCE_REC_NUM
											 					   	  , CUSTOM_FIELD1
					    											 					   	  , ALERT_ID
					    											 					   	  , CUSTOM_FIELD3
					    											 					   	  , ALERT_TITLE
					    											 					   	  , CUSTOM_FIELD2
					    											 					   	  , OBJ_CHNG_HSTRY
					    											 					   	  , SUBS_RESPONSE_ID
					    											 					   	  , COMMENT_HISTORY
					    											 					   	  , ADD_ITEM
					    											 					   	  , DD_EVENT_USER_NAME
					    											 					   	  , DD_CURRENT_USER_NAME
					    											 					   	  , DD_OBJECT_TYPE
					    											 					   	  , DD_PROCESS_CODE
					    										FROM XMLTABLE(XMLNAMESPACES(  'http://www.metricstream.com/appstudio/msa'  as "msa"),
                                'msa:datapacket/msa:data/msa:nonmultirow' 
                               PASSING LV_XML
                               COLUMNS
                                INSTANCE_ID                      NUMBER          PATH  'msa:instance_id'
                               ,METRIC_ID                        NUMBER          PATH  'msa:metric_id'
                               ,METRIC_RUN_DATE                  VARCHAR2(40)    PATH  'msa:metric_run_date'
                               ,METRIC_COMPLETED_DATE            VARCHAR2(40)    PATH  'msa:metric_completed_date'
                               ,LATEST_FLAG                      VARCHAR2(1)     PATH  'msa:latest_flag'
                               ,CREATED_BY                       NUMBER          PATH  'msa:created_by'
                               ,CREATION_DATE                    VARCHAR2(40)    PATH  'msa:creation_date'
                               ,PROCESS_FLOW_STATUS              NUMBER          PATH  'msa:process_flow_status'
                               ,PROCESS_INSTANCE_ID              NUMBER          PATH  'msa:process_instance_id'
                               ,ELECTRONICALLY_SIGNED            NUMBER          PATH  'msa:electronically_signed'
                               ,INSTANCE_REC_NUM                 NUMBER          PATH  'msa:instance_rec_num'    
														, CUSTOM_FIELD1  VARCHAR2(4000)	 PATH   'msa:custom_field1' 
																						, ALERT_ID  VARCHAR2(4000)	 PATH   'msa:alert_id' 
																						, CUSTOM_FIELD3  VARCHAR2(4000)	 PATH   'msa:custom_field3' 
																						, ALERT_TITLE  VARCHAR2(4000)	 PATH   'msa:alert_title' 
																						, CUSTOM_FIELD2  VARCHAR2(4000)	 PATH   'msa:custom_field2' 
																						, OBJ_CHNG_HSTRY  CLOB			 	 PATH   'msa:obj_chng_hstry_htm' 
																						, SUBS_RESPONSE_ID  VARCHAR2(4000)	 PATH   'msa:subs_response_id' 
																						, COMMENT_HISTORY  CLOB			 	 PATH   'msa:comment_history_htm' 
																						, ADD_ITEM  VARCHAR2(4000)	 PATH   'msa:add_item' 
																						, DD_EVENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_event_user_name'
																						, DD_CURRENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_current_user_name'
																						, DD_OBJECT_TYPE  VARCHAR2(4000) PATH 'msa:dd_object_type'
																						, DD_PROCESS_CODE  VARCHAR2(4000) PATH 'msa:dd_process_code'
																			))      
					
				LOOP
			           LV_cntr_1 := LV_cntr_1 + 1;
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Data Found in iop_data. ', ip_pid);
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ')', ip_pid);
    

		 /* --------------------------------------------------------------------------
		       Loop through the data object to load the data into MS tables.
		        Header info is being loaded into the system.
		  -------------------------------------------------------------------------- */ 
 			  			 	
		/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
		  -------------------------------------------------------------------------- */ 	
		  		 		
  									    		IF LV_debug THEN
												

	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CUSTOM_FIELD1, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.ALERT_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CUSTOM_FIELD3, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.ALERT_TITLE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CUSTOM_FIELD2, ip_pid);
				    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SUBS_RESPONSE_ID, ip_pid);
				    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.ADD_ITEM, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    				             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
			             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
    			    	END IF;
    			    	
    			    							MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  
  MERGE 
    INTO MS_RGA_ALERT_OBJECT_RE T 
  		USING (
  				SELECT     
          iop_data.CUSTOM_FIELD1 AS CUSTOM_FIELD1
    	          , iop_data.ALERT_ID AS ALERT_ID
    	          , iop_data.CUSTOM_FIELD3 AS CUSTOM_FIELD3
    	          , iop_data.ALERT_TITLE AS ALERT_TITLE
    	          , iop_data.CUSTOM_FIELD2 AS CUSTOM_FIELD2
    	          , iop_data.OBJ_CHNG_HSTRY AS OBJ_CHNG_HSTRY
    	          , iop_data.SUBS_RESPONSE_ID AS SUBS_RESPONSE_ID
    	          , iop_data.COMMENT_HISTORY AS COMMENT_HISTORY
    	          , iop_data.ADD_ITEM AS ADD_ITEM
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.ALERT_TITLE = V.ALERT_TITLE
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.CUSTOM_FIELD1=V.CUSTOM_FIELD1
 ,T.ALERT_ID=V.ALERT_ID
 ,T.CUSTOM_FIELD3=V.CUSTOM_FIELD3
 ,T.CUSTOM_FIELD2=V.CUSTOM_FIELD2
 ,T.OBJ_CHNG_HSTRY=V.OBJ_CHNG_HSTRY
 ,T.SUBS_RESPONSE_ID=V.SUBS_RESPONSE_ID
 ,T.COMMENTHISTORY=V.COMMENT_HISTORY
 ,T.ADD_OBJECTS=V.ADD_ITEM
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.CUSTOM_FIELD1
 ,T.ALERT_ID
 ,T.CUSTOM_FIELD3
 ,T.ALERT_TITLE
 ,T.CUSTOM_FIELD2
 ,T.OBJ_CHNG_HSTRY
 ,T.SUBS_RESPONSE_ID
 ,T.COMMENTHISTORY
 ,T.ADD_OBJECTS
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.CUSTOM_FIELD1
        ,V.ALERT_ID
        ,V.CUSTOM_FIELD3
        ,V.ALERT_TITLE
        ,V.CUSTOM_FIELD2
        ,V.OBJ_CHNG_HSTRY
        ,V.SUBS_RESPONSE_ID
        ,V.COMMENT_HISTORY
        ,V.ADD_ITEM
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
						
																		
		  		  		  		            
          							 	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING UPDATE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	UPDATE MS_RGA_ALERT_OBJECT_RE_REL 
 	SET DD_STATUS_FLAG   = 'N'
 	WHERE			
			ALERT_TITLE= iop_data.ALERT_TITLE	
	 	 ;
	 
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in UPDATE : ' || SQL%ROWCOUNT, 'D');
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

	                            
          						   	
               			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_RGA_ALERT_OBJECT_RE_REL.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).ORB_ALERT_TITLE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).ORB_FORM_URL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).OBJECT_NAME, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).FIELD, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).REL_VALID_FROM, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).ADDITIONAL_DETAILS_WITH_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).SELF_REL_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).ADDITIONAL_DETAILS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).APPLICABLE_TO, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).MSAI_125, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).REL_INST_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).TGT_OBJ_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).ROW_NUM, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).ADDITIONAL_COLUMN5, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).OBJECT_COMMENTS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).TGT_OBJ_NAME, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).REL_VALID_UNTIL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).OBJECT_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).REL_SOURCE_OBJECT_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).TGT_OBJ_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).REL_COMMENTS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).REL_SOURCE_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).REL_CONFIG_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_ALERT_OBJECT_RE_REL(j).OBJECT_TYPES, ip_pid);
			 END LOOP;
 				END IF;
				
								MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  FORALL i IN TY_RGA_ALERT_OBJECT_RE_REL.FIRST..TY_RGA_ALERT_OBJECT_RE_REL.LAST 
  
  MERGE 
    INTO MS_RGA_ALERT_OBJECT_RE_REL T 
  		USING (
  				SELECT     
          TY_RGA_ALERT_OBJECT_RE_REL(i).ORB_ALERT_TITLE AS ALERT_TITLE
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).ORB_FORM_URL AS ORB_FORM_URL
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).OBJECT_NAME AS OBJECT_NAME
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).FIELD AS FIELD
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).REL_VALID_FROM AS REL_VALID_FROM
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).ADDITIONAL_DETAILS_WITH_ID AS ADDITIONAL_DETAILS_WITH_ID
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).SELF_REL_TYPE AS SELF_REL_TYPE
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).ADDITIONAL_DETAILS AS ADDITIONAL_DETAILS
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).APPLICABLE_TO AS APPLICABLE_TO
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).MSAI_125 AS MSAI_125
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).REL_INST_ID AS REL_INST_ID
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).TGT_OBJ_ID AS TGT_OBJ_ID
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).ROW_NUM AS ROW_NUM
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).ADDITIONAL_COLUMN5 AS ADDITIONAL_COLUMN5
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).OBJECT_COMMENTS AS OBJECT_COMMENTS
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).TGT_OBJ_NAME AS TGT_OBJ_NAME
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).REL_VALID_UNTIL AS REL_VALID_UNTIL
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).OBJECT_ID AS OBJECT_ID
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).REL_SOURCE_OBJECT_ID AS REL_SOURCE_OBJECT_ID
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).TGT_OBJ_TYPE AS TGT_OBJ_TYPE
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).REL_COMMENTS AS REL_COMMENTS
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).REL_SOURCE_ID AS REL_SOURCE_ID
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).REL_CONFIG_ID AS REL_CONFIG_ID
    	          , TY_RGA_ALERT_OBJECT_RE_REL(i).OBJECT_TYPES AS OBJECT_TYPES
    	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.ALERT_TITLE = V.ALERT_TITLE
 AND  T.OBJECT_ID = V.OBJECT_ID
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.ORB_FORM_URL=V.ORB_FORM_URL
 ,T.OBJECT_NAME=V.OBJECT_NAME
 ,T.FIELD=V.FIELD
 ,T.REL_VALID_FROM=V.REL_VALID_FROM
 ,T.ADDITIONAL_DETAILS_WITH_ID=V.ADDITIONAL_DETAILS_WITH_ID
 ,T.SELF_REL_TYPE=V.SELF_REL_TYPE
 ,T.ADDITIONAL_DETAILS=V.ADDITIONAL_DETAILS
 ,T.APPLICABLE_TO=V.APPLICABLE_TO
 ,T.ADD_ITEM=V.MSAI_125
 ,T.REL_INST_ID=V.REL_INST_ID
 ,T.TGT_OBJ_ID=V.TGT_OBJ_ID
 ,T.ROW_NUM=V.ROW_NUM
 ,T.ADDITIONAL_COLUMN5=V.ADDITIONAL_COLUMN5
 ,T.OBJECTCOMMENTS=V.OBJECT_COMMENTS
 ,T.TGT_OBJ_NAME=V.TGT_OBJ_NAME
 ,T.REL_VALID_UNTIL=V.REL_VALID_UNTIL
 ,T.REL_SOURCE_OBJECT_ID=V.REL_SOURCE_OBJECT_ID
 ,T.TGT_OBJ_TYPE=V.TGT_OBJ_TYPE
 ,T.REL_COMMENTS=V.REL_COMMENTS
 ,T.REL_SOURCE_ID=V.REL_SOURCE_ID
 ,T.REL_CONFIG_ID=V.REL_CONFIG_ID
 ,T.OBJECT_TYPES=V.OBJECT_TYPES
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.ALERT_TITLE
 ,T.ORB_FORM_URL
 ,T.OBJECT_NAME
 ,T.FIELD
 ,T.REL_VALID_FROM
 ,T.ADDITIONAL_DETAILS_WITH_ID
 ,T.SELF_REL_TYPE
 ,T.ADDITIONAL_DETAILS
 ,T.APPLICABLE_TO
 ,T.ADD_ITEM
 ,T.REL_INST_ID
 ,T.TGT_OBJ_ID
 ,T.ROW_NUM
 ,T.ADDITIONAL_COLUMN5
 ,T.OBJECTCOMMENTS
 ,T.TGT_OBJ_NAME
 ,T.REL_VALID_UNTIL
 ,T.OBJECT_ID
 ,T.REL_SOURCE_OBJECT_ID
 ,T.TGT_OBJ_TYPE
 ,T.REL_COMMENTS
 ,T.REL_SOURCE_ID
 ,T.REL_CONFIG_ID
 ,T.OBJECT_TYPES
)
VALUES 
  ('Y'         
     ,V.ALERT_TITLE
        ,V.ORB_FORM_URL
        ,V.OBJECT_NAME
        ,V.FIELD
        ,V.REL_VALID_FROM
        ,V.ADDITIONAL_DETAILS_WITH_ID
        ,V.SELF_REL_TYPE
        ,V.ADDITIONAL_DETAILS
        ,V.APPLICABLE_TO
        ,V.MSAI_125
        ,V.REL_INST_ID
        ,V.TGT_OBJ_ID
        ,V.ROW_NUM
        ,V.ADDITIONAL_COLUMN5
        ,V.OBJECT_COMMENTS
        ,V.TGT_OBJ_NAME
        ,V.REL_VALID_UNTIL
        ,V.OBJECT_ID
        ,V.REL_SOURCE_OBJECT_ID
        ,V.TGT_OBJ_TYPE
        ,V.REL_COMMENTS
        ,V.REL_SOURCE_ID
        ,V.REL_CONFIG_ID
        ,V.OBJECT_TYPES
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
								               									  
				   						  	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
    
    DELETE MS_RGA_ALERT_OBJECT_RE_REL 
    WHERE DD_STATUS_FLAG = 'N'
  	  			AND ALERT_TITLE = iop_data.ALERT_TITLE
  	  	  ;
  	   
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in DELETE : ' || SQL%ROWCOUNT, 'D');
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
	   			   		
    END LOOP;	 
        EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in call ETL ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END CALL_ETL;        

END MS_RGA_ALERT_OBJECT_RELATION_P ;   </TEXT_BODY>
</PACKAGE_SPEC>
