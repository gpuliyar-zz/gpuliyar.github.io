<?xml version="1.0" encoding="UTF-8"?><PACKAGE_SPEC xmlns="http://www.metricstream.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.metricstream.com ms_application_schema.xsd">
<!--$Revision: 1.30.2.12.2.2.2.9.2.8 $-->
<!--$Author: prao $-->
<PLATFORM_DETAILS>
<PLATFORM_VERSION>6.0</PLATFORM_VERSION>
<BUILD_VERSION>4.11.0</BUILD_VERSION>
</PLATFORM_DETAILS>
<STORED_PROCEDURE_NAME>MS_MDF_MS_RGA_L_TRAN_1_PKG</STORED_PROCEDURE_NAME>
<OBJECT_ID>MS_MDF_MS_RGA_L_TRAN_1_PKG</OBJECT_ID>
<OBJECT_TYPE>PACKAGE</OBJECT_TYPE>
<TEXT>PACKAGE ms_mdf_ms_rga_l_tran_1_pkg
IS
    ----------------------------------------------------------------------------------------------------
    --                        MetricStream (India) InfoTech Private Limited
    ----------------------------------------------------------------------------------------------------
    -- Package Name         : ms_mdf_ms_rga_l_tran_1_pkg
    -- 
    -- Author               : AppStudio
    --
    -- Comments             : Contains code generated to be used by the flow named
    --                        MS_RGA_LOG_ISSUES [MS_RGA_LOG_ISSUES]
    --                        This code should NOT be modified as it will be over-written
    --                        in the event of a re-deployment
    ----------------------------------------------------------------------------------------------------


    ----------------------------------------------------------------------------------------------------
    --  Procedure Declarations
    ----------------------------------------------------------------------------------------------------    
   

    PROCEDURE create_edit_to_publish
                    (pc_flow_code          IN VARCHAR2
                    ,pn_flow_version       IN NUMBER
                    ,pt_pid                IN ms_apps_mdf_engine_pkg.datapacket_table
                    ,pn_target_pid         IN NUMBER
                    ,pn_orig_target_pid    IN NUMBER
					,pc_process_code       IN VARCHAR2
                    ,pn_metric_id          IN NUMBER
                    ,xt_parameters         IN ms_apps_mdf_engine_pkg.parameter_lookup_tabletype
                    ,xt_rules              IN ms_apps_mdf_engine_pkg.rule_lookup_tabletype
                    ,xt_assignees          IN ms_apps_mdf_engine_pkg.assignee_lookup_tabletype
                    ,px_templates          IN XMLTYPE
                    ,px_stage              IN XMLTYPE
                    ,px_tostage            IN XMLTYPE
                    ,px_transition         IN XMLTYPE
					,px_transition_process IN XMLTYPE
                    ,pn_enterprise_id      IN NUMBER
                    ,xb_transition_status  IN OUT BOOLEAN
                    ,xn_error_handle_id    IN OUT NUMBER
                    ,xn_error_seq          IN OUT NUMBER
                    ,xn_error_code         OUT NUMBER
                    );                       


    PROCEDURE end_flow_to_end_flow
                    (pc_flow_code          IN VARCHAR2
                    ,pn_flow_version       IN NUMBER
                    ,pt_pid                IN ms_apps_mdf_engine_pkg.datapacket_table
                    ,pn_target_pid         IN NUMBER
                    ,pn_orig_target_pid    IN NUMBER
					,pc_process_code       IN VARCHAR2
                    ,pn_metric_id          IN NUMBER
                    ,xt_parameters         IN ms_apps_mdf_engine_pkg.parameter_lookup_tabletype
                    ,xt_rules              IN ms_apps_mdf_engine_pkg.rule_lookup_tabletype
                    ,xt_assignees          IN ms_apps_mdf_engine_pkg.assignee_lookup_tabletype
                    ,px_templates          IN XMLTYPE
                    ,px_stage              IN XMLTYPE
                    ,px_tostage            IN XMLTYPE
                    ,px_transition         IN XMLTYPE
					,px_transition_process IN XMLTYPE
                    ,pn_enterprise_id      IN NUMBER
                    ,xb_transition_status  IN OUT BOOLEAN
                    ,xn_error_handle_id    IN OUT NUMBER
                    ,xn_error_seq          IN OUT NUMBER
                    ,xn_error_code         OUT NUMBER
                    );                       


    ----------------------------------------------------------------------------------------------------
    --  Globals
    ----------------------------------------------------------------------------------------------------                               
    gc_namespace VARCHAR2(100) := 'xmlns="http://www.metricstream.com/appstudio/mdf"';
	gc_data_namespace VARCHAR2(100) := 'xmlns="http://www.metricstream.com/appstudio/msa"';

END ms_mdf_ms_rga_l_tran_1_pkg;
 </TEXT>
<TEXT_BODY>PACKAGE BODY ms_mdf_ms_rga_l_tran_1_pkg
IS
   

    ----------------------------------------------------------------------------------------------------
    -- Procedure Name       : create_edit_to_publish
    -- 
    -- Author               : AppStudio
    --
    -- Comments             : Auto generated code. Do NOT modify
    ----------------------------------------------------------------------------------------------------
    PROCEDURE create_edit_to_publish
                    (pc_flow_code          IN VARCHAR2
                    ,pn_flow_version       IN NUMBER
                    ,pt_pid                IN ms_apps_mdf_engine_pkg.datapacket_table
                    ,pn_target_pid         IN NUMBER
                    ,pn_orig_target_pid    IN NUMBER
					,pc_process_code       IN VARCHAR2
                    ,pn_metric_id          IN NUMBER
                    ,xt_parameters         IN ms_apps_mdf_engine_pkg.parameter_lookup_tabletype
                    ,xt_rules              IN ms_apps_mdf_engine_pkg.rule_lookup_tabletype
                    ,xt_assignees          IN ms_apps_mdf_engine_pkg.assignee_lookup_tabletype
                    ,px_templates          IN XMLTYPE
                    ,px_stage              IN XMLTYPE
                    ,px_tostage            IN XMLTYPE
                    ,px_transition         IN XMLTYPE
					,px_transition_process IN XMLTYPE
                    ,pn_enterprise_id      IN NUMBER
                    ,xb_transition_status  IN OUT BOOLEAN
                    ,xn_error_handle_id    IN OUT NUMBER
                    ,xn_error_seq          IN OUT NUMBER
                    ,xn_error_code         OUT NUMBER
                    )
    IS
        lc_modulename               VARCHAR2(100) := '[ ms_mdf_ms_rga_l_tran_1_pkg.create_edit_to_publish ] ';
        
        ln_pid_strategy                 NUMBER;
        ln_index                        NUMBER;
        ln_lookup_index                 VARCHAR2(300);
        ln_process_instance_id          NUMBER;
        ln_orig_process_instance_id     NUMBER;
        ln_instance_id                  NUMBER;
        ln_instance_rec_num             NUMBER := 0;
        lb_insert_occurred              BOOLEAN;
        ln_metric_id                    NUMBER;
        ln_created_by                   NUMBER := 100000;        
        ln_error_code                   NUMBER;
		lc_error_message                VARCHAR2(4000);
        le_abort                        EXCEPTION;
        le_rules_passed                 EXCEPTION;
        lb_all_rules_passed             BOOLEAN;
		lb_any_rulegroup_passed         BOOLEAN := FALSE;
		ln_pointer                      VARCHAR2(1000);
		lb_cursor_flag                  BOOLEAN := false;
		lc_plsql_string     			VARCHAR2(4000) := NULL;
		lc_to_stage_object              VARCHAR2(4000) := NULL;
		lc_etl_name                     VARCHAR2(100) := NULL;
        
        lt_hook_proc_name               ms_apps_mdf_engine_pkg.stringarray_tabletype;
        lt_posthook_proc_name               ms_apps_mdf_engine_pkg.stringarray_tabletype;
		lt_split_data                   ms_apps_mdf_engine_pkg.stringarray_tabletype;

        lt_parameters                   ms_apps_mdf_engine_pkg.parameter_lookup_tabletype := xt_parameters;
        lt_rules                        ms_apps_mdf_engine_pkg.rule_lookup_tabletype := xt_rules;
        lt_assignees                    ms_apps_mdf_engine_pkg.assignee_lookup_tabletype := xt_assignees; 
		lt_rulegroups_passed            ms_apps_mdf_engine_pkg.rule_lookup_tabletype;
       
        lt_in_data                     CLOB;
		lt_in_data_orig                CLOB;
        lt_out_data                    CLOB;
		lcb_temp_data                  XMLTYPE;
		ln_out_data_count              NUMBER;
		
		lc_from_stage                  VARCHAR2(100) := 'CREATE_EDIT';
        lc_to_stage                    VARCHAR2(100) := 'END_FLOW';  
		    lv_err_variable             VARCHAR2(100);

        CURSOR  lcu_transition_rules(px_rulegroup XMLTYPE)
        IS
        SELECT  rules.EXTRACT('rule/code/text()',gc_namespace).GETSTRINGVAL() rule_code
        FROM TABLE(XMLSEQUENCE((SELECT px_rulegroup.EXTRACT('rulegroup/rules/rule[enabled="Y"]',gc_namespace) FROM DUAL))) rules;

        CURSOR  lcu_transition_rulegroups
        IS
        SELECT rulegroups.EXTRACT('rulegroup/code/text()',gc_namespace).GETSTRINGVAL() rulegroup_code 
              ,rulegroups.GETCLOBVAL() rulegroup_xml
        FROM TABLE(XMLSEQUENCE((SELECT px_transition.EXTRACT('transition/rulegroups/rulegroup[enabled="Y"]',gc_namespace) FROM DUAL))) rulegroups;
		
		CURSOR  lcu_out_data_packet(px_out_data XMLTYPE)
        IS
		SELECT data_rows.getClobVal() as row_data 
		FROM TABLE(XMLSEQUENCE((px_out_data.extract('datapacket/data',gc_data_namespace)))) data_rows;
        
    BEGIN
    
        xn_error_code := 0;
        
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'I'
                                         ,pc_error_text =&gt; lc_modulename||'Entered Transition Procedure'
                                         ,pn_pid =&gt; pn_target_pid);        
         
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'D'
                                         ,pc_error_text =&gt; lc_modulename||'Printing Input Parameters'
                                         ,pn_pid =&gt; pn_target_pid);
                                         
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'D'
                                         ,pc_error_text =&gt; lc_modulename||'pc_flow_code='||pc_flow_code ||' pn_flow_version='||pn_flow_version
                                         ,pn_pid =&gt; pn_target_pid);
        
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'D'
                                         ,pc_error_text =&gt; lc_modulename||'pn_target_pid='||pn_target_pid ||' pn_orig_target_pid='|| pn_orig_target_pid
                                         ,pn_pid =&gt; pn_target_pid);
                                         
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'D'
                                         ,pc_error_text =&gt; lc_modulename||'pc_process_code = '||pc_process_code||' pn_metric_id='||pn_metric_id
                                         ,pn_pid =&gt; pn_target_pid);  
                                         
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'D'
                                         ,pc_error_text =&gt; lc_modulename||'pn_enterprise_id = '||pn_enterprise_id
                                         ,pn_pid =&gt; pn_target_pid);                                                                                                 
        
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'D'
                                         ,pc_error_text =&gt; lc_modulename||'Rules that govern this transition ...'
                                         ,pn_pid =&gt; pn_target_pid); 
        
        BEGIN 
            lb_all_rules_passed := TRUE;
            
            FOR lcu_rulegroups_rec IN lcu_transition_rulegroups
            LOOP
				
				lb_cursor_flag := true;
				
                ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                ,pn_error_sequence =&gt; xn_error_seq
                                                ,pc_error_type =&gt; 'D'
                                                ,pc_error_text =&gt; lc_modulename||'Rulegroup Found'
                                                ,pn_pid =&gt; pn_target_pid);  
                lb_all_rules_passed := TRUE;

                FOR lcu_rules_rec IN lcu_transition_rules(XMLTYPE(lcu_rulegroups_rec.rulegroup_xml))
                LOOP
                    ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                    ,pn_error_sequence =&gt; xn_error_seq
                                                    ,pc_error_type =&gt; 'D'
                                                    ,pc_error_text =&gt; lc_modulename||'Rule ['||lcu_rules_rec.rule_code||'] Value = '||lt_rules(lcu_rules_rec.rule_code)
                                                    ,pn_pid =&gt; pn_target_pid);
                    IF lt_rules(lcu_rules_rec.rule_code) = 'FAILED' THEN
                        lb_all_rules_passed := FALSE;
                    END IF;
                END LOOP;            
                IF lb_all_rules_passed = TRUE THEN
                    lt_rulegroups_passed(lcu_rulegroups_rec.rulegroup_code) := 'PASSED';
                    
                    lb_any_rulegroup_passed := TRUE;
                    
                    ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                    ,pn_error_sequence =&gt; xn_error_seq
                                                    ,pc_error_type =&gt; 'D'
                                                    ,pc_error_text =&gt; lc_modulename||'Rulegroup '||lcu_rulegroups_rec.rulegroup_code||' : '||lt_rulegroups_passed(lcu_rulegroups_rec.rulegroup_code)
                                                    ,pn_pid =&gt; pn_target_pid);                                                    

                ELSE
                    lt_rulegroups_passed(lcu_rulegroups_rec.rulegroup_code) := 'FAILED';
					
                    ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                    ,pn_error_sequence =&gt; xn_error_seq
                                                    ,pc_error_type =&gt; 'D'
                                                    ,pc_error_text =&gt; lc_modulename||'Rulegroup '||lcu_rulegroups_rec.rulegroup_code||' : failed; next one will be tried'
                                                    ,pn_pid =&gt; pn_target_pid);                
                END IF;
            END LOOP;

			IF NOT lb_cursor_flag
			THEN
			
				ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                    ,pn_error_sequence =&gt; xn_error_seq
                                                    ,pc_error_type =&gt; 'D'
                                                    ,pc_error_text =&gt; lc_modulename||'Rulegroups not found'
                                                    ,pn_pid =&gt; pn_target_pid);
			
			END IF;
			
        EXCEPTION
            WHEN le_rules_passed THEN
                NULL; --Exception used to jump out of looping            
        END;
        
        IF NOT lb_any_rulegroup_passed AND lb_cursor_flag THEN
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'Some rules FAILED. This transition will NOT occur'
                                             ,pn_pid =&gt; pn_target_pid);         
            RETURN;
        ELSIF (lb_any_rulegroup_passed) or (NOT lb_any_rulegroup_passed AND NOT lb_cursor_flag)
		THEN
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'This transition will occur'
                                             ,pn_pid =&gt; pn_target_pid);             
            xb_transition_status := TRUE;
		ELSE 
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'Some rules PASSED. This transition will occur'
                                             ,pn_pid =&gt; pn_target_pid);             
            xb_transition_status := TRUE;
        END IF;
		
		BEGIN
			select px_tostage.EXTRACT('stage/object/text()',gc_namespace).GETSTRINGVAL()
			  into lc_to_stage_object
			  from dual;
  	    EXCEPTION
        WHEN NO_DATA_FOUND THEN
                ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                 ,pn_error_sequence =&gt; xn_error_seq
                                                 ,pc_error_type =&gt; 'E'
                                                 ,pc_error_text =&gt; lc_modulename||'Could not determine the Push Infolet of the Destination stage.'||SQLERRM
                                                 ,pn_pid =&gt; pn_target_pid);
  			       lv_err_variable := 'APPS-TRAN-17' ; 
        Raise le_abort;
        WHEN OTHERS THEN
                ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                 ,pn_error_sequence =&gt; xn_error_seq
                                                 ,pc_error_type =&gt; 'E'
                                                 ,pc_error_text =&gt; lc_modulename||' Exception Error while obtaining Stage object value.Oracle Error = '||SQLERRM
                                                 ,pn_pid =&gt; pn_target_pid); 
        
                lv_err_variable := 'APPS-TRAN-18' ; 
        Raise le_abort;                                          
		END;
		
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'D'
                                         ,pc_error_text =&gt; lc_modulename||'Obtaining metric_id of Destination Push Infolet ['||lc_to_stage_object||' ]'
                                         ,pn_pid =&gt; pn_target_pid);
		BEGIN
        
			SELECT  metric_id
			INTO    ln_metric_id
			FROM    si_metrics_t
			WHERE   UPPER(metric_name) = UPPER(lc_to_stage_object);
		
		EXCEPTION
          WHEN NO_DATA_FOUND THEN
                    ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                     ,pn_error_sequence =&gt; xn_error_seq
                                                     ,pc_error_type =&gt; 'W'
                                                     ,pc_error_text =&gt; lc_modulename||'Could not determine the metric_id of Destination Push Infolet ['||lc_to_stage_object||' ]'||SQLERRM
                                                     ,pn_pid =&gt; pn_target_pid); 
    			
                    lv_err_variable := 'APPS-TRAN-19' ;   
          Raise le_abort;
          WHEN OTHERS THEN
                    ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                     ,pn_error_sequence =&gt; xn_error_seq
                                                     ,pc_error_type =&gt; 'E'
                                                     ,pc_error_text =&gt; lc_modulename||'Exceptional Error while determining the metric_id of Destination Push Infolet ['||lc_to_stage_object||' ]'
                                                     ,pn_pid =&gt; pn_target_pid); 
        Raise le_abort;                                          
		END;
		
		lb_cursor_flag := FALSE;
        
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'D'
                                         ,pc_error_text =&gt; lc_modulename||'Preparing the XML for the submitted data.'
                                         ,pn_pid =&gt; pn_target_pid);         

        BEGIN
		
			SELECT MS_APPS_MDF_INFOLETOUTPUT_PKG.GET_XML(pn_metric_id,pt_pid(1).pid,pt_pid(1).iid)
			  INTO lt_in_data
			  FROM DUAL;
			  
			lt_in_data_orig := lt_in_data;
			
		EXCEPTION
		WHEN OTHERS THEN
			
			ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
											 ,pn_error_sequence =&gt; xn_error_seq
											 ,pc_error_type =&gt; 'E'
											 ,pc_error_text =&gt; lc_modulename||'Error while preparing the XML from MS_APPS_MDF_INFOLETOUTPUT_PKG.GET_XML for the submitted data. Oracle Error = '||SQLERRM
											 ,pn_pid =&gt; pn_target_pid);                              
			RAISE le_abort; 
		END;
		
		ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
										 ,pn_error_sequence =&gt; xn_error_seq
										 ,pc_error_type =&gt; 'D'
										 ,pc_error_text =&gt; lc_modulename||'Attempting to find the Hook(s) for this transition'
										 ,pn_pid =&gt; pn_target_pid);
		
		BEGIN
    		
			SELECT  transitions.EXTRACT('hook/name/text()',gc_namespace).GETSTRINGVAL() as hook_proc_name 
			BULK COLLECT INTO lt_hook_proc_name
			FROM TABLE(XMLSEQUENCE((px_transition_process.EXTRACT('transition/hooks/hook[enabled="Y"]',gc_namespace)))) transitions;

        EXCEPTION
			WHEN NO_DATA_FOUND THEN
				
				ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
								 ,pn_error_sequence =&gt; xn_error_seq
								 ,pc_error_type =&gt; 'W'
								 ,pc_error_text =&gt; lc_modulename||'No hook is specified for this transition.' ||SQLERRM
								 ,pn_pid =&gt; pn_target_pid);
				
							 
            WHEN OTHERS THEN
                
				ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
								 ,pn_error_sequence =&gt; xn_error_seq
								 ,pc_error_type =&gt; 'E'
								 ,pc_error_text =&gt; lc_modulename||'Could not determine the hook package. Oracle Error = '||SQLERRM
								 ,pn_pid =&gt; pn_target_pid);      
				lv_err_variable := 'APPS-TRAN-20' ;  
				RAISE le_abort;
        END;
			
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
  										 ,pn_error_sequence =&gt; xn_error_seq
  										 ,pc_error_type =&gt; 'D'
  										 ,pc_error_text =&gt; lc_modulename||'lt_hook_proc_name.count = '||lt_hook_proc_name.count
  										 ,pn_pid =&gt; pn_target_pid);
                     
		IF lt_hook_proc_name.count &gt;0
        THEN
        
			FOR i in 1..lt_hook_proc_name.count
			LOOP
				ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
										 ,pn_error_sequence =&gt; xn_error_seq
										 ,pc_error_type =&gt; 'D'
										 ,pc_error_text =&gt; lc_modulename||'Attempting to call the Hook for this transition. Hook name [ '||lt_hook_proc_name(i)||' ]'
										 ,pn_pid =&gt; pn_target_pid); 
					
				lc_plsql_string := 'BEGIN '||lt_hook_proc_name(i)||'(lt_in_data_orig =&gt; :lt_in_data_orig, lt_in_data =&gt; :lt_in_data, lt_out_data =&gt; :lt_out_data, pc_process_code =&gt; :pc_process_code, lc_from_stage =&gt; :lc_from_stage, lc_to_stage =&gt; :lc_to_stage, xn_error_handle_id =&gt; :xn_error_handle_id, xn_error_seq =&gt; :xn_error_seq, xn_error_code =&gt; :ln_error_code); END;';
		
				BEGIN
				
					EXECUTE IMMEDIATE   lc_plsql_string 
								  USING   lt_in_data_orig, IN OUT lt_in_data, IN OUT lt_out_data, pc_process_code , lc_from_stage, lc_to_stage, IN OUT xn_error_handle_id, IN OUT xn_error_seq, OUT ln_error_code;
				
				
				EXCEPTION
					WHEN OTHERS THEN
						ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
														 ,pn_error_sequence =&gt; xn_error_seq
														 ,pc_error_type =&gt; 'E'
														 ,pc_error_text =&gt; lc_modulename||'Exceptional error during call to Hook [ '||lt_hook_proc_name(i)||' ]. Please handle the exceptions in the hook. Oracle Error = '||SQLERRM
														 ,pn_pid =&gt; pn_target_pid);                              
						lv_err_variable := 'APPS-TRAN-21' ; 
            RAISE le_abort;                                             
				END;
				
				IF ln_error_code &lt;&gt; 0 THEN
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
													 ,pn_error_sequence =&gt; xn_error_seq
													 ,pc_error_type =&gt; 'E'
													 ,pc_error_text =&gt; lc_modulename||'Hook [ '||lt_hook_proc_name(i)||' ] returned an error (request to stop execution). Cannot continue'
													 ,pn_pid =&gt; pn_target_pid);                              
					lv_err_variable := 'APPS-TRAN-22' ;
          RAISE le_abort;                             
				END IF;
				
			END LOOP;
			
			ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
											 ,pn_error_sequence =&gt; xn_error_seq
											 ,pc_error_type =&gt; 'D'
											 ,pc_error_text =&gt; lc_modulename||'Hook(s) sucessfully executed for this transition.'
											 ,pn_pid =&gt; pn_target_pid);
		
		ELSIF lt_hook_proc_name.count = 0 AND pn_metric_id = ln_metric_id THEN
			
			ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
											 ,pn_error_sequence =&gt; xn_error_seq
											 ,pc_error_type =&gt; 'D'
											 ,pc_error_text =&gt; lc_modulename||'No hook Specified . Assigning data from source Push Infolet to destination Push Infolet.'
											 ,pn_pid =&gt; pn_target_pid);
			
			lt_out_data := lt_in_data_orig;
			
		ELSIF lt_hook_proc_name.count = 0 AND pn_metric_id &lt;&gt; ln_metric_id THEN
			
			ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
											 ,pn_error_sequence =&gt; xn_error_seq
											 ,pc_error_type =&gt; 'E'
											 ,pc_error_text =&gt; lc_modulename||'No hook Specified . Source Push Infolet does not match with destination Push Infolet. Cannot continue'
											 ,pn_pid =&gt; pn_target_pid);
      lv_err_variable := 'APPS-TRAN-23' ;
      RAISE le_abort;                  
    END IF; 
		
		IF ln_error_code = 0 OR ln_error_code IS NULL THEN
			
			BEGIN
				ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
									 ,pn_error_sequence =&gt; xn_error_seq
									 ,pc_error_type =&gt; 'D'
									 ,pc_error_text =&gt; lc_modulename||'Attempting to find the ETL for this transition'
									 ,pn_pid =&gt; pn_target_pid);
		
				SELECT  px_transition_process.EXTRACT('transition/etl/name/text()',gc_namespace).GETSTRINGVAL() as etl_name 
				  INTO lc_etl_name
				  FROM dual;
				  
				
				IF lc_etl_name IS NOT NULL
				THEN
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
													 ,pn_error_sequence =&gt; xn_error_seq
													 ,pc_error_type =&gt; 'D'
													 ,pc_error_text =&gt; lc_modulename||'Found the ETL for this transition ['||lc_etl_name||']'
													 ,pn_pid =&gt; pn_target_pid);
				ELSE
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
													 ,pn_error_sequence =&gt; xn_error_seq
													 ,pc_error_type =&gt; 'D'
													 ,pc_error_text =&gt; lc_modulename||'No ETL found.'
													 ,pn_pid =&gt; pn_target_pid);
				END IF;
				  
				
	
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
													 ,pn_error_sequence =&gt; xn_error_seq
													 ,pc_error_type =&gt; 'D'
													 ,pc_error_text =&gt; lc_modulename||'No ETL found.'||SQLERRM
													 ,pn_pid =&gt; pn_target_pid);
				
				WHEN OTHERS THEN
					
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
													 ,pn_error_sequence =&gt; xn_error_seq
													 ,pc_error_type =&gt; 'E'
													 ,pc_error_text =&gt; lc_modulename||'Error while determining the ETL name. Oracle Error = '||SQLERRM
													 ,pn_pid =&gt; pn_target_pid);
					
					RAISE le_abort;
					
			END;
			
			IF lc_etl_name IS NOT NULL THEN
				
				ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
									 ,pn_error_sequence =&gt; xn_error_seq
									 ,pc_error_type =&gt; 'D'
									 ,pc_error_text =&gt; lc_modulename||'Attempting to call the ETL for this transition. ETL name [ '||lc_etl_name||' ]'
									 ,pn_pid =&gt; pn_target_pid); 
			
				lc_plsql_string := 'BEGIN '||lc_etl_name||'(iop_xml_data =&gt; :lt_in_data, iop_log_no =&gt; :xn_error_handle_id, op_error_code =&gt; :ln_error_code, op_error_message =&gt; :lc_error_message, iop_error_seq =&gt; :xn_error_seq , ip_pid =&gt; :pn_target_pid); END;';
	
				BEGIN
				
					EXECUTE IMMEDIATE   lc_plsql_string 
								  USING   IN OUT lt_in_data, IN OUT xn_error_handle_id, OUT ln_error_code, OUT lc_error_message, IN OUT xn_error_seq , IN pn_target_pid;
				
				
				EXCEPTION
					WHEN OTHERS THEN
						ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
														 ,pn_error_sequence =&gt; xn_error_seq
														 ,pc_error_type =&gt; 'E'
														 ,pc_error_text =&gt; lc_modulename||'Exceptional error during call to ETL [ '||lc_etl_name||' ]. Please handle the exceptions in the ETL. Oracle Error = '||SQLERRM
														 ,pn_pid =&gt; pn_target_pid);                              
						RAISE le_abort;                                             
				END;
				
				IF ln_error_code &lt;&gt; 0 THEN
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
													 ,pn_error_sequence =&gt; xn_error_seq
													 ,pc_error_type =&gt; 'E'
													 ,pc_error_text =&gt; lc_modulename||'ETL [ '||lc_etl_name||' ] returned an error (request to stop execution). Cannot continue'
													 ,pn_pid =&gt; pn_target_pid);                              
					lv_err_variable := 'APPS-TRAN-24' ;
          RAISE le_abort;   
				
				ELSIF ln_error_code = 0 OR ln_error_code IS NULL THEN
					
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
									 ,pn_error_sequence =&gt; xn_error_seq
									 ,pc_error_type =&gt; 'D'
									 ,pc_error_text =&gt; lc_modulename||'ETL sucessfully executed for this transition.'
									 ,pn_pid =&gt; pn_target_pid);
				END IF;
			
			END IF;
		
		END IF;
		
        
		SELECT  count(*)
        INTO ln_out_data_count
        FROM TABLE(XMLSEQUENCE((xmltype(lt_out_data).EXTRACT('datapacket/data',gc_data_namespace)))) data_pack;

        IF ln_out_data_count &gt; 1 THEN
            ln_pid_strategy := 2;
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'The Hook returned multiple data packets. Splitting will occur.'
                                             ,pn_pid =&gt; pn_target_pid);            
            
        ELSIF ln_out_data_count = 1 THEN
            ln_pid_strategy := 1;
            ln_process_instance_id := pn_target_pid;
            ln_orig_process_instance_id := pn_orig_target_pid;
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'The Hook returned single data packet. Splitting will NOT occur.'
                                             ,pn_pid =&gt; pn_target_pid);            
        ELSE
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'E'
                                             ,pc_error_text =&gt; lc_modulename||'The Hook did not return any data packets (pt_out_data is empty). Cannot continue'
                                             ,pn_pid =&gt; pn_target_pid);
            
            
            lv_err_variable := 'APPS-TRAN-25' ;
            RAISE le_abort;        
        END IF;
		
		ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'D'
                                         ,pc_error_text =&gt; lc_modulename||'Attempting to process each data packet returned'
                                         ,pn_pid =&gt; pn_target_pid);        
        
        FOR lcu_out_data_packet_rec IN lcu_out_data_packet(XMLTYPE(lt_out_data))
	    LOOP
	        lt_assignees := xt_assignees;
			
            SELECT  si_metric_results_s.nextval
            INTO    ln_instance_id
            FROM    DUAL; 
            
            IF ln_pid_strategy = 2 THEN
                ln_orig_process_instance_id := pn_target_pid;
                SELECT  si_process_instance_id_s.nextval
                INTO    ln_process_instance_id
                FROM    DUAL;
                
                ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                 ,pn_error_sequence =&gt; xn_error_seq
                                                 ,pc_error_type =&gt; 'D'
                                                 ,pc_error_text =&gt; lc_modulename||'Inserting new Process Instance Id ['||ln_process_instance_id||'] into ms_apps_mdf_flow_hierarchy'
                                                 ,pn_pid =&gt; pn_target_pid);     

                BEGIN                
                    INSERT INTO ms_apps_mdf_flow_hierarchy(parent_pid
                                                          ,child_pid
                                                          ,submit_id
                                                          )
                                                    VALUES(pn_target_pid
                                                          ,ln_process_instance_id
                                                          ,ln_instance_id
                                                          );                                                      
                EXCEPTION
                    WHEN OTHERS THEN
                        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                         ,pn_error_sequence =&gt; xn_error_seq
                                                         ,pc_error_type =&gt; 'E'
                                                         ,pc_error_text =&gt; lc_modulename||'Exceptional error when inserting flow split information into  ms_apps_mdf_flow_hierarchy. Oracle Error = '||SQLERRM||'. Cannot Continue'
                                                         ,pn_pid =&gt; pn_target_pid);                              
                        RAISE le_abort;                                             
                END;                                                      
            END IF;
			select UPDATEXML(XMLTYPE(lcu_out_data_packet_rec.row_data),'data/nonmultirow/process_instance_id/text()',ln_process_instance_id,
			                                                             'data/nonmultirow/metric_id/text()',ln_metric_id,'data/nonmultirow/instance_id/ 
                                                                                  text()',ln_instance_id,'data/nonmultirow/created_by/text()',
                                                                                  ln_created_by,gc_data_namespace)
                               into lcb_temp_data
                         from dual;		
			--lcu_out_data_packet_rec.row_data := lcb_temp_data;
            
            
			BEGIN
				
				lc_error_message := NULL;
				
				lc_error_message := MS_APPS_MDF_INFOLETOUTPUT_PKG.INSERT_XML(px_tostage.EXTRACT('stage/view/text()',gc_namespace).GETSTRINGVAL(),ln_metric_id,ln_process_instance_id,ln_instance_id,lcb_temp_data.getClobval());
			
				IF lc_error_message != 'SUCCESS' OR lc_error_message IS NULL THEN
				
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                         ,pn_error_sequence =&gt; xn_error_seq
                                                         ,pc_error_type =&gt; 'E'
                                                         ,pc_error_text =&gt; lc_modulename||'Exceptional error when inserting data into Desination Push Infolet. Oracle Error = '||lc_error_message||'. Cannot Continue'
                                                         ,pn_pid =&gt; pn_target_pid);                              
                    
                    lv_err_variable := 'APPS-TRAN-26' ;
                    RAISE le_abort; 
				
				END IF;
			EXCEPTION
				WHEN OTHERS THEN
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
													 ,pn_error_sequence =&gt; xn_error_seq
													 ,pc_error_type =&gt; 'E'
													 ,pc_error_text =&gt; lc_modulename||'Exceptional error during the call to INSERT_XML for inserting data into Desination Push Infolet. Oracle Error = '||lc_error_message||'. Cannot Continue'
													 ,pn_pid =&gt; pn_target_pid); 
         
         lv_err_variable := 'APPS-TRAN-27' ;
         RAISE le_abort;                   
					
			END;
               
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'Calling ms_apps_mdf_engine_pkg.find_parameters'
                                             ,pn_pid =&gt; pn_target_pid);             

            ms_apps_mdf_engine_pkg.find_parameters(ln_process_instance_id
                                                  ,ln_instance_id
                                                  ,ln_metric_id
                                                  ,px_tostage
												  ,px_tostage.EXTRACT('stage/view/text()',gc_namespace).GETSTRINGVAL()
                                                  ,px_tostage.EXTRACT('stage/displayview/text()',gc_namespace).GETSTRINGVAL()
                                                  ,pc_process_code 
                                                  ,px_tostage.EXTRACT('stage/code/text()',gc_namespace).GETSTRINGVAL()
                                                  ,lt_parameters
                                                  ,xn_error_handle_id
                                                  ,xn_error_seq
                                                  ,ln_error_code
                                                  );
            												  
                                                  
            IF ln_error_code &lt;&gt; 0 THEN
                ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                 ,pn_error_sequence =&gt; xn_error_seq
                                                 ,pc_error_type =&gt; 'E'
                                                 ,pc_error_text =&gt; lc_modulename||'Errors occurred during execution of procedure ms_apps_mdf_engine_pkg.find_parameters. Cannot continue'
                                                 ,pn_pid =&gt; pn_target_pid);                              
                RAISE le_abort;                             
            END IF;
            
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'Calling ms_apps_mdf_engine_pkg.find_assignees'
                                             ,pn_pid =&gt; pn_target_pid);              
          
             ms_apps_mdf_engine_pkg.find_assignees(ln_process_instance_id
                                                  ,ln_instance_id
                                                  ,ln_metric_id
                                                  ,px_tostage
                                                  ,px_tostage.EXTRACT('stage/view/text()',gc_namespace).GETSTRINGVAL()
                                                  ,pc_process_code 
                                                  ,px_tostage.EXTRACT('stage/code/text()',gc_namespace).GETSTRINGVAL()
                                                  ,lt_assignees
                                                  ,xn_error_handle_id
                                                  ,xn_error_seq
                                                  ,ln_error_code
                                                  );    
               
            IF ln_error_code &lt;&gt; 0 THEN
                ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                 ,pn_error_sequence =&gt; xn_error_seq
                                                 ,pc_error_type =&gt; 'E'
                                                 ,pc_error_text =&gt; lc_modulename||'Errors occurred during execution of procedure ms_apps_mdf_engine_pkg.find_assignees. Cannot continue'
                                                 ,pn_pid =&gt; pn_target_pid);                              
                RAISE le_abort;                             
            END IF;

            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'Calling ms_apps_mdf_engine_pkg.make_assignments'
                                             ,pn_pid =&gt; pn_target_pid); 

            ms_apps_mdf_engine_pkg.make_assignments(pn_enterprise_id
                                                    ,ln_process_instance_id
                                                    ,ln_metric_id
                                                    ,ln_instance_id     
                                                    ,px_transition            
                                                    ,px_transition_process       
                                                    ,lt_assignees
                                                    ,lt_parameters
		                                    ,lt_rulegroups_passed
                                                    ,xn_error_handle_id
                                                    ,xn_error_seq
                                                    ,ln_error_code
                                                    );  
			
                                                    
            IF ln_error_code &lt;&gt; 0 THEN
                ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                 ,pn_error_sequence =&gt; xn_error_seq
                                                 ,pc_error_type =&gt; 'E'
                                                 ,pc_error_text =&gt; lc_modulename||'Errors occurred during execution of procedure ms_apps_mdf_engine_pkg.make_assignments. Cannot continue'
                                                 ,pn_pid =&gt; pn_target_pid);                              
                RAISE le_abort;                             
            END IF;
            
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'Calling ms_apps_mdf_engine_pkg.send_emails'
                                             ,pn_pid =&gt; pn_target_pid);             

            ms_apps_mdf_engine_pkg.send_emails(pn_enterprise_id
                                              ,px_transition
                                              ,px_templates
                                              ,lt_assignees
                                              ,lt_parameters
											  ,lt_rulegroups_passed
                                              ,xn_error_handle_id
                                              ,xn_error_seq
                                              ,ln_error_code
                                              ); 

            IF ln_error_code &lt;&gt; 0 THEN
                ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                 ,pn_error_sequence =&gt; xn_error_seq
                                                 ,pc_error_type =&gt; 'E'
                                                 ,pc_error_text =&gt; lc_modulename||'Errors occurred during execution of procedure ms_apps_mdf_engine_pkg.send_emails. Cannot continue'
                                                 ,pn_pid =&gt; pn_target_pid);                              
                RAISE le_abort;                             
            END IF; 

            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'Calling ms_apps_mdf_engine_pkg.set_stage'
                                             ,pn_pid =&gt; pn_target_pid); 

            ms_apps_mdf_engine_pkg.set_stage(pc_process_code
                                            ,pn_flow_version
                                            ,ln_orig_process_instance_id
                                            ,nvl(pt_pid(1).orig_iid,pt_pid(1).iid)
                                            ,ln_process_instance_id
                                            ,ln_instance_id
                                            ,px_tostage.EXTRACT('stage/code/text()',gc_namespace).GETSTRINGVAL()
                                            ,px_tostage.EXTRACT('stage/approvaltype/text()',gc_namespace).GETSTRINGVAL()
                                            ,xn_error_handle_id
                                            ,xn_error_seq
                                            ,ln_error_code
                                            );
                                            
            IF ln_error_code &lt;&gt; 0 THEN
                ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                 ,pn_error_sequence =&gt; xn_error_seq
                                                 ,pc_error_type =&gt; 'E'
                                                 ,pc_error_text =&gt; lc_modulename||'Errors occurred during execution of ms_apps_mdf_engine.set_stage. Cannot continue'
                                                 ,pn_pid =&gt; pn_target_pid);                              
                RAISE le_abort;                             
            END IF;

-------------changes made--- new hook called post hook added
ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
										 ,pn_error_sequence =&gt; xn_error_seq
										 ,pc_error_type =&gt; 'D'
										 ,pc_error_text =&gt; lc_modulename||'Attempting to find the Post Hook for this transition'
										 ,pn_pid =&gt; pn_target_pid);
		
		BEGIN
    		
			SELECT  transitions.EXTRACT('posthook/name/text()',gc_namespace).GETSTRINGVAL() as posthook_proc_name 
			BULK COLLECT INTO lt_posthook_proc_name
			FROM TABLE(XMLSEQUENCE((px_transition_process.EXTRACT('transition/hooks/posthook[enabled="Y"]',gc_namespace)))) transitions;

        EXCEPTION
			WHEN NO_DATA_FOUND THEN
				
				ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
								 ,pn_error_sequence =&gt; xn_error_seq
								 ,pc_error_type =&gt; 'D'
								 ,pc_error_text =&gt; lc_modulename||'No Post Hook is specified for this transition.'||SQLERRM
								 ,pn_pid =&gt; pn_target_pid);
				
							 
            WHEN OTHERS THEN
                
				ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
								 ,pn_error_sequence =&gt; xn_error_seq
								 ,pc_error_type =&gt; 'E'
								 ,pc_error_text =&gt; lc_modulename||'Could not determine the Post Hook package. Oracle Error = '||SQLERRM
								 ,pn_pid =&gt; pn_target_pid);      
				
				RAISE le_abort;
        END;
		
		IF lt_posthook_proc_name.count &gt;0
        THEN
        
			FOR i in 1..lt_posthook_proc_name.count
			LOOP
				ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
										 ,pn_error_sequence =&gt; xn_error_seq
										 ,pc_error_type =&gt; 'D'
										 ,pc_error_text =&gt; lc_modulename||'Attempting to call the Post Hook for this transition. Post Hook name [ '||lt_posthook_proc_name(i)||' ]'
										 ,pn_pid =&gt; pn_target_pid); 
					
				lc_plsql_string := 'BEGIN '||lt_posthook_proc_name(i)||'(lt_in_data_orig =&gt; :lt_in_data_orig, lt_in_data =&gt; :lt_in_data,pc_process_code =&gt; :pc_process_code,ln_orig_process_instance_id =&gt; :ln_orig_process_instance_id, ln_process_instance_id =&gt; :ln_process_instance_id, xn_error_handle_id =&gt; :xn_error_handle_id, xn_error_seq =&gt; :xn_error_seq, xn_error_code =&gt; :ln_error_code); END;';
				BEGIN
				
					EXECUTE IMMEDIATE   lc_plsql_string 
								  USING  lt_in_data_orig, lt_in_data, pc_process_code ,ln_orig_process_instance_id, IN OUT ln_process_instance_id,  IN OUT xn_error_handle_id, IN OUT xn_error_seq, OUT ln_error_code;
				
				
				EXCEPTION
					WHEN OTHERS THEN
						ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
														 ,pn_error_sequence =&gt; xn_error_seq
														 ,pc_error_type =&gt; 'E'
														 ,pc_error_text =&gt; lc_modulename||'Exceptional error during call to Post Hook [ '||lt_posthook_proc_name(i)||' ]. Please handle the exceptions in the Post hook. Oracle Error = '||SQLERRM
														 ,pn_pid =&gt; pn_target_pid);                              
						RAISE le_abort;                                             
				END;
				
				IF ln_error_code &lt;&gt; 0 THEN
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
													 ,pn_error_sequence =&gt; xn_error_seq
													 ,pc_error_type =&gt; 'E'
													 ,pc_error_text =&gt; lc_modulename||'Hook [ '||lt_posthook_proc_name(i)||' ] returned an error (request to stop execution). Cannot continue'
													 ,pn_pid =&gt; pn_target_pid);                              
					lv_err_variable := 'APPS-TRAN-28' ;
          RAISE le_abort;                             
				END IF;
				
			END LOOP;
		ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
											 ,pn_error_sequence =&gt; xn_error_seq
											 ,pc_error_type =&gt; 'D'
											 ,pc_error_text =&gt; lc_modulename||'Post Hook sucessfully executed for this transition.'
											 ,pn_pid =&gt; pn_target_pid);
		
		ELSIF lt_posthook_proc_name.count = 0 THEN
			
			ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
											 ,pn_error_sequence =&gt; xn_error_seq
											 ,pc_error_type =&gt; 'D'
											 ,pc_error_text =&gt; lc_modulename||'No Post Hook is specified for this transition.'
											 ,pn_pid =&gt; pn_target_pid);
			
		
		END IF; 
        END LOOP;
       
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'I'
                                         ,pc_error_text =&gt; lc_modulename||'Exiting Transition Package Successfully'
                                         ,pn_pid =&gt; pn_target_pid);          
        
    EXCEPTION
        WHEN le_abort THEN
            xn_error_code := -1; 
            ms_apps_mdf_engine_pkg.gc_err_variable := lv_err_variable;   
        WHEN OTHERS THEN
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'E'
                                             ,pc_error_text =&gt; lc_modulename||'Exceptional Error. Cannot continue. Returning to Caller. Oracle Error = '||SQLERRM
                                             ,pn_pid =&gt; pn_target_pid); 
            xn_error_code := -1;    
    END create_edit_to_publish;
    --===================================================================================================
    

    ----------------------------------------------------------------------------------------------------
    -- Procedure Name       : end_flow_to_end_flow
    -- 
    -- Author               : AppStudio
    --
    -- Comments             : Auto generated code. Do NOT modify
    ----------------------------------------------------------------------------------------------------
    PROCEDURE end_flow_to_end_flow
                    (pc_flow_code          IN VARCHAR2
                    ,pn_flow_version       IN NUMBER
                    ,pt_pid                IN ms_apps_mdf_engine_pkg.datapacket_table
                    ,pn_target_pid         IN NUMBER
                    ,pn_orig_target_pid    IN NUMBER
					,pc_process_code       IN VARCHAR2
                    ,pn_metric_id          IN NUMBER
                    ,xt_parameters         IN ms_apps_mdf_engine_pkg.parameter_lookup_tabletype
                    ,xt_rules              IN ms_apps_mdf_engine_pkg.rule_lookup_tabletype
                    ,xt_assignees          IN ms_apps_mdf_engine_pkg.assignee_lookup_tabletype
                    ,px_templates          IN XMLTYPE
                    ,px_stage              IN XMLTYPE
                    ,px_tostage            IN XMLTYPE
                    ,px_transition         IN XMLTYPE
					,px_transition_process IN XMLTYPE
                    ,pn_enterprise_id      IN NUMBER
                    ,xb_transition_status  IN OUT BOOLEAN
                    ,xn_error_handle_id    IN OUT NUMBER
                    ,xn_error_seq          IN OUT NUMBER
                    ,xn_error_code         OUT NUMBER
                    )
    IS
        lc_modulename               VARCHAR2(100) := '[ ms_mdf_ms_rga_l_tran_1_pkg.end_flow_to_end_flow ] ';
        
        ln_pid_strategy                 NUMBER;
        ln_index                        NUMBER;
        ln_lookup_index                 VARCHAR2(300);
        ln_process_instance_id          NUMBER;
        ln_orig_process_instance_id     NUMBER;
        ln_instance_id                  NUMBER;
        ln_instance_rec_num             NUMBER := 0;
        lb_insert_occurred              BOOLEAN;
        ln_metric_id                    NUMBER;
        ln_created_by                   NUMBER := 100000;        
        ln_error_code                   NUMBER;
		lc_error_message                VARCHAR2(4000);
        le_abort                        EXCEPTION;
        le_rules_passed                 EXCEPTION;
        lb_all_rules_passed             BOOLEAN;
		lb_any_rulegroup_passed         BOOLEAN := FALSE;
		ln_pointer                      VARCHAR2(1000);
		lb_cursor_flag                  BOOLEAN := false;
		lc_plsql_string     			VARCHAR2(4000) := NULL;
		lc_to_stage_object              VARCHAR2(4000) := NULL;
		lc_etl_name                     VARCHAR2(100) := NULL;
        
        lt_hook_proc_name               ms_apps_mdf_engine_pkg.stringarray_tabletype;
        lt_posthook_proc_name               ms_apps_mdf_engine_pkg.stringarray_tabletype;
		lt_split_data                   ms_apps_mdf_engine_pkg.stringarray_tabletype;

        lt_parameters                   ms_apps_mdf_engine_pkg.parameter_lookup_tabletype := xt_parameters;
        lt_rules                        ms_apps_mdf_engine_pkg.rule_lookup_tabletype := xt_rules;
        lt_assignees                    ms_apps_mdf_engine_pkg.assignee_lookup_tabletype := xt_assignees; 
		lt_rulegroups_passed            ms_apps_mdf_engine_pkg.rule_lookup_tabletype;
       
        lt_in_data                     CLOB;
		lt_in_data_orig                CLOB;
        lt_out_data                    CLOB;
		lcb_temp_data                  XMLTYPE;
		ln_out_data_count              NUMBER;
		
		lc_from_stage                  VARCHAR2(100) := 'END_FLOW';
        lc_to_stage                    VARCHAR2(100) := 'END_FLOW';  
		    lv_err_variable             VARCHAR2(100);

        CURSOR  lcu_transition_rules(px_rulegroup XMLTYPE)
        IS
        SELECT  rules.EXTRACT('rule/code/text()',gc_namespace).GETSTRINGVAL() rule_code
        FROM TABLE(XMLSEQUENCE((SELECT px_rulegroup.EXTRACT('rulegroup/rules/rule[enabled="Y"]',gc_namespace) FROM DUAL))) rules;

        CURSOR  lcu_transition_rulegroups
        IS
        SELECT rulegroups.EXTRACT('rulegroup/code/text()',gc_namespace).GETSTRINGVAL() rulegroup_code 
              ,rulegroups.GETCLOBVAL() rulegroup_xml
        FROM TABLE(XMLSEQUENCE((SELECT px_transition.EXTRACT('transition/rulegroups/rulegroup[enabled="Y"]',gc_namespace) FROM DUAL))) rulegroups;
		
		CURSOR  lcu_out_data_packet(px_out_data XMLTYPE)
        IS
		SELECT data_rows.getClobVal() as row_data 
		FROM TABLE(XMLSEQUENCE((px_out_data.extract('datapacket/data',gc_data_namespace)))) data_rows;
        
    BEGIN
    
        xn_error_code := 0;
        
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'I'
                                         ,pc_error_text =&gt; lc_modulename||'Entered Transition Procedure'
                                         ,pn_pid =&gt; pn_target_pid);        
         
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'D'
                                         ,pc_error_text =&gt; lc_modulename||'Printing Input Parameters'
                                         ,pn_pid =&gt; pn_target_pid);
                                         
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'D'
                                         ,pc_error_text =&gt; lc_modulename||'pc_flow_code='||pc_flow_code ||' pn_flow_version='||pn_flow_version
                                         ,pn_pid =&gt; pn_target_pid);
        
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'D'
                                         ,pc_error_text =&gt; lc_modulename||'pn_target_pid='||pn_target_pid ||' pn_orig_target_pid='|| pn_orig_target_pid
                                         ,pn_pid =&gt; pn_target_pid);
                                         
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'D'
                                         ,pc_error_text =&gt; lc_modulename||'pc_process_code = '||pc_process_code||' pn_metric_id='||pn_metric_id
                                         ,pn_pid =&gt; pn_target_pid);  
                                         
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'D'
                                         ,pc_error_text =&gt; lc_modulename||'pn_enterprise_id = '||pn_enterprise_id
                                         ,pn_pid =&gt; pn_target_pid);                                                                                                 
        
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'D'
                                         ,pc_error_text =&gt; lc_modulename||'Rules that govern this transition ...'
                                         ,pn_pid =&gt; pn_target_pid); 
        
        BEGIN 
            lb_all_rules_passed := TRUE;
            
            FOR lcu_rulegroups_rec IN lcu_transition_rulegroups
            LOOP
				
				lb_cursor_flag := true;
				
                ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                ,pn_error_sequence =&gt; xn_error_seq
                                                ,pc_error_type =&gt; 'D'
                                                ,pc_error_text =&gt; lc_modulename||'Rulegroup Found'
                                                ,pn_pid =&gt; pn_target_pid);  
                lb_all_rules_passed := TRUE;

                FOR lcu_rules_rec IN lcu_transition_rules(XMLTYPE(lcu_rulegroups_rec.rulegroup_xml))
                LOOP
                    ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                    ,pn_error_sequence =&gt; xn_error_seq
                                                    ,pc_error_type =&gt; 'D'
                                                    ,pc_error_text =&gt; lc_modulename||'Rule ['||lcu_rules_rec.rule_code||'] Value = '||lt_rules(lcu_rules_rec.rule_code)
                                                    ,pn_pid =&gt; pn_target_pid);
                    IF lt_rules(lcu_rules_rec.rule_code) = 'FAILED' THEN
                        lb_all_rules_passed := FALSE;
                    END IF;
                END LOOP;            
                IF lb_all_rules_passed = TRUE THEN
                    lt_rulegroups_passed(lcu_rulegroups_rec.rulegroup_code) := 'PASSED';
                    
                    lb_any_rulegroup_passed := TRUE;
                    
                    ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                    ,pn_error_sequence =&gt; xn_error_seq
                                                    ,pc_error_type =&gt; 'D'
                                                    ,pc_error_text =&gt; lc_modulename||'Rulegroup '||lcu_rulegroups_rec.rulegroup_code||' : '||lt_rulegroups_passed(lcu_rulegroups_rec.rulegroup_code)
                                                    ,pn_pid =&gt; pn_target_pid);                                                    

                ELSE
                    lt_rulegroups_passed(lcu_rulegroups_rec.rulegroup_code) := 'FAILED';
					
                    ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                    ,pn_error_sequence =&gt; xn_error_seq
                                                    ,pc_error_type =&gt; 'D'
                                                    ,pc_error_text =&gt; lc_modulename||'Rulegroup '||lcu_rulegroups_rec.rulegroup_code||' : failed; next one will be tried'
                                                    ,pn_pid =&gt; pn_target_pid);                
                END IF;
            END LOOP;

			IF NOT lb_cursor_flag
			THEN
			
				ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                    ,pn_error_sequence =&gt; xn_error_seq
                                                    ,pc_error_type =&gt; 'D'
                                                    ,pc_error_text =&gt; lc_modulename||'Rulegroups not found'
                                                    ,pn_pid =&gt; pn_target_pid);
			
			END IF;
			
        EXCEPTION
            WHEN le_rules_passed THEN
                NULL; --Exception used to jump out of looping            
        END;
        
        IF NOT lb_any_rulegroup_passed AND lb_cursor_flag THEN
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'Some rules FAILED. This transition will NOT occur'
                                             ,pn_pid =&gt; pn_target_pid);         
            RETURN;
        ELSIF (lb_any_rulegroup_passed) or (NOT lb_any_rulegroup_passed AND NOT lb_cursor_flag)
		THEN
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'This transition will occur'
                                             ,pn_pid =&gt; pn_target_pid);             
            xb_transition_status := TRUE;
		ELSE 
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'Some rules PASSED. This transition will occur'
                                             ,pn_pid =&gt; pn_target_pid);             
            xb_transition_status := TRUE;
        END IF;
		
		BEGIN
			select px_tostage.EXTRACT('stage/object/text()',gc_namespace).GETSTRINGVAL()
			  into lc_to_stage_object
			  from dual;
  	    EXCEPTION
        WHEN NO_DATA_FOUND THEN
                ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                 ,pn_error_sequence =&gt; xn_error_seq
                                                 ,pc_error_type =&gt; 'E'
                                                 ,pc_error_text =&gt; lc_modulename||'Could not determine the Push Infolet of the Destination stage.'||SQLERRM
                                                 ,pn_pid =&gt; pn_target_pid);
  			       lv_err_variable := 'APPS-TRAN-17' ; 
        Raise le_abort;
        WHEN OTHERS THEN
                ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                 ,pn_error_sequence =&gt; xn_error_seq
                                                 ,pc_error_type =&gt; 'E'
                                                 ,pc_error_text =&gt; lc_modulename||' Exception Error while obtaining Stage object value.Oracle Error = '||SQLERRM
                                                 ,pn_pid =&gt; pn_target_pid); 
        
                lv_err_variable := 'APPS-TRAN-18' ; 
        Raise le_abort;                                          
		END;
		
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'D'
                                         ,pc_error_text =&gt; lc_modulename||'Obtaining metric_id of Destination Push Infolet ['||lc_to_stage_object||' ]'
                                         ,pn_pid =&gt; pn_target_pid);
		BEGIN
        
			SELECT  metric_id
			INTO    ln_metric_id
			FROM    si_metrics_t
			WHERE   UPPER(metric_name) = UPPER(lc_to_stage_object);
		
		EXCEPTION
          WHEN NO_DATA_FOUND THEN
                    ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                     ,pn_error_sequence =&gt; xn_error_seq
                                                     ,pc_error_type =&gt; 'W'
                                                     ,pc_error_text =&gt; lc_modulename||'Could not determine the metric_id of Destination Push Infolet ['||lc_to_stage_object||' ]'||SQLERRM
                                                     ,pn_pid =&gt; pn_target_pid); 
    			
                    lv_err_variable := 'APPS-TRAN-19' ;   
          Raise le_abort;
          WHEN OTHERS THEN
                    ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                     ,pn_error_sequence =&gt; xn_error_seq
                                                     ,pc_error_type =&gt; 'E'
                                                     ,pc_error_text =&gt; lc_modulename||'Exceptional Error while determining the metric_id of Destination Push Infolet ['||lc_to_stage_object||' ]'
                                                     ,pn_pid =&gt; pn_target_pid); 
        Raise le_abort;                                          
		END;
		
		lb_cursor_flag := FALSE;
        
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'D'
                                         ,pc_error_text =&gt; lc_modulename||'Preparing the XML for the submitted data.'
                                         ,pn_pid =&gt; pn_target_pid);         

        BEGIN
		
			SELECT MS_APPS_MDF_INFOLETOUTPUT_PKG.GET_XML(pn_metric_id,pt_pid(1).pid,pt_pid(1).iid)
			  INTO lt_in_data
			  FROM DUAL;
			  
			lt_in_data_orig := lt_in_data;
			
		EXCEPTION
		WHEN OTHERS THEN
			
			ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
											 ,pn_error_sequence =&gt; xn_error_seq
											 ,pc_error_type =&gt; 'E'
											 ,pc_error_text =&gt; lc_modulename||'Error while preparing the XML from MS_APPS_MDF_INFOLETOUTPUT_PKG.GET_XML for the submitted data. Oracle Error = '||SQLERRM
											 ,pn_pid =&gt; pn_target_pid);                              
			RAISE le_abort; 
		END;
		
		ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
										 ,pn_error_sequence =&gt; xn_error_seq
										 ,pc_error_type =&gt; 'D'
										 ,pc_error_text =&gt; lc_modulename||'Attempting to find the Hook(s) for this transition'
										 ,pn_pid =&gt; pn_target_pid);
		
		BEGIN
    		
			SELECT  transitions.EXTRACT('hook/name/text()',gc_namespace).GETSTRINGVAL() as hook_proc_name 
			BULK COLLECT INTO lt_hook_proc_name
			FROM TABLE(XMLSEQUENCE((px_transition_process.EXTRACT('transition/hooks/hook[enabled="Y"]',gc_namespace)))) transitions;

        EXCEPTION
			WHEN NO_DATA_FOUND THEN
				
				ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
								 ,pn_error_sequence =&gt; xn_error_seq
								 ,pc_error_type =&gt; 'W'
								 ,pc_error_text =&gt; lc_modulename||'No hook is specified for this transition.' ||SQLERRM
								 ,pn_pid =&gt; pn_target_pid);
				
							 
            WHEN OTHERS THEN
                
				ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
								 ,pn_error_sequence =&gt; xn_error_seq
								 ,pc_error_type =&gt; 'E'
								 ,pc_error_text =&gt; lc_modulename||'Could not determine the hook package. Oracle Error = '||SQLERRM
								 ,pn_pid =&gt; pn_target_pid);      
				lv_err_variable := 'APPS-TRAN-20' ;  
				RAISE le_abort;
        END;
			
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
  										 ,pn_error_sequence =&gt; xn_error_seq
  										 ,pc_error_type =&gt; 'D'
  										 ,pc_error_text =&gt; lc_modulename||'lt_hook_proc_name.count = '||lt_hook_proc_name.count
  										 ,pn_pid =&gt; pn_target_pid);
                     
		IF lt_hook_proc_name.count &gt;0
        THEN
        
			FOR i in 1..lt_hook_proc_name.count
			LOOP
				ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
										 ,pn_error_sequence =&gt; xn_error_seq
										 ,pc_error_type =&gt; 'D'
										 ,pc_error_text =&gt; lc_modulename||'Attempting to call the Hook for this transition. Hook name [ '||lt_hook_proc_name(i)||' ]'
										 ,pn_pid =&gt; pn_target_pid); 
					
				lc_plsql_string := 'BEGIN '||lt_hook_proc_name(i)||'(lt_in_data_orig =&gt; :lt_in_data_orig, lt_in_data =&gt; :lt_in_data, lt_out_data =&gt; :lt_out_data, pc_process_code =&gt; :pc_process_code, lc_from_stage =&gt; :lc_from_stage, lc_to_stage =&gt; :lc_to_stage, xn_error_handle_id =&gt; :xn_error_handle_id, xn_error_seq =&gt; :xn_error_seq, xn_error_code =&gt; :ln_error_code); END;';
		
				BEGIN
				
					EXECUTE IMMEDIATE   lc_plsql_string 
								  USING   lt_in_data_orig, IN OUT lt_in_data, IN OUT lt_out_data, pc_process_code , lc_from_stage, lc_to_stage, IN OUT xn_error_handle_id, IN OUT xn_error_seq, OUT ln_error_code;
				
				
				EXCEPTION
					WHEN OTHERS THEN
						ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
														 ,pn_error_sequence =&gt; xn_error_seq
														 ,pc_error_type =&gt; 'E'
														 ,pc_error_text =&gt; lc_modulename||'Exceptional error during call to Hook [ '||lt_hook_proc_name(i)||' ]. Please handle the exceptions in the hook. Oracle Error = '||SQLERRM
														 ,pn_pid =&gt; pn_target_pid);                              
						lv_err_variable := 'APPS-TRAN-21' ; 
            RAISE le_abort;                                             
				END;
				
				IF ln_error_code &lt;&gt; 0 THEN
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
													 ,pn_error_sequence =&gt; xn_error_seq
													 ,pc_error_type =&gt; 'E'
													 ,pc_error_text =&gt; lc_modulename||'Hook [ '||lt_hook_proc_name(i)||' ] returned an error (request to stop execution). Cannot continue'
													 ,pn_pid =&gt; pn_target_pid);                              
					lv_err_variable := 'APPS-TRAN-22' ;
          RAISE le_abort;                             
				END IF;
				
			END LOOP;
			
			ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
											 ,pn_error_sequence =&gt; xn_error_seq
											 ,pc_error_type =&gt; 'D'
											 ,pc_error_text =&gt; lc_modulename||'Hook(s) sucessfully executed for this transition.'
											 ,pn_pid =&gt; pn_target_pid);
		
		ELSIF lt_hook_proc_name.count = 0 AND pn_metric_id = ln_metric_id THEN
			
			ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
											 ,pn_error_sequence =&gt; xn_error_seq
											 ,pc_error_type =&gt; 'D'
											 ,pc_error_text =&gt; lc_modulename||'No hook Specified . Assigning data from source Push Infolet to destination Push Infolet.'
											 ,pn_pid =&gt; pn_target_pid);
			
			lt_out_data := lt_in_data_orig;
			
		ELSIF lt_hook_proc_name.count = 0 AND pn_metric_id &lt;&gt; ln_metric_id THEN
			
			ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
											 ,pn_error_sequence =&gt; xn_error_seq
											 ,pc_error_type =&gt; 'E'
											 ,pc_error_text =&gt; lc_modulename||'No hook Specified . Source Push Infolet does not match with destination Push Infolet. Cannot continue'
											 ,pn_pid =&gt; pn_target_pid);
      lv_err_variable := 'APPS-TRAN-23' ;
      RAISE le_abort;                  
    END IF; 
		
		IF ln_error_code = 0 OR ln_error_code IS NULL THEN
			
			BEGIN
				ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
									 ,pn_error_sequence =&gt; xn_error_seq
									 ,pc_error_type =&gt; 'D'
									 ,pc_error_text =&gt; lc_modulename||'Attempting to find the ETL for this transition'
									 ,pn_pid =&gt; pn_target_pid);
		
				SELECT  px_transition_process.EXTRACT('transition/etl/name/text()',gc_namespace).GETSTRINGVAL() as etl_name 
				  INTO lc_etl_name
				  FROM dual;
				  
				
				IF lc_etl_name IS NOT NULL
				THEN
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
													 ,pn_error_sequence =&gt; xn_error_seq
													 ,pc_error_type =&gt; 'D'
													 ,pc_error_text =&gt; lc_modulename||'Found the ETL for this transition ['||lc_etl_name||']'
													 ,pn_pid =&gt; pn_target_pid);
				ELSE
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
													 ,pn_error_sequence =&gt; xn_error_seq
													 ,pc_error_type =&gt; 'D'
													 ,pc_error_text =&gt; lc_modulename||'No ETL found.'
													 ,pn_pid =&gt; pn_target_pid);
				END IF;
				  
				
	
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
													 ,pn_error_sequence =&gt; xn_error_seq
													 ,pc_error_type =&gt; 'D'
													 ,pc_error_text =&gt; lc_modulename||'No ETL found.'||SQLERRM
													 ,pn_pid =&gt; pn_target_pid);
				
				WHEN OTHERS THEN
					
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
													 ,pn_error_sequence =&gt; xn_error_seq
													 ,pc_error_type =&gt; 'E'
													 ,pc_error_text =&gt; lc_modulename||'Error while determining the ETL name. Oracle Error = '||SQLERRM
													 ,pn_pid =&gt; pn_target_pid);
					
					RAISE le_abort;
					
			END;
			
			IF lc_etl_name IS NOT NULL THEN
				
				ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
									 ,pn_error_sequence =&gt; xn_error_seq
									 ,pc_error_type =&gt; 'D'
									 ,pc_error_text =&gt; lc_modulename||'Attempting to call the ETL for this transition. ETL name [ '||lc_etl_name||' ]'
									 ,pn_pid =&gt; pn_target_pid); 
			
				lc_plsql_string := 'BEGIN '||lc_etl_name||'(iop_xml_data =&gt; :lt_in_data, iop_log_no =&gt; :xn_error_handle_id, op_error_code =&gt; :ln_error_code, op_error_message =&gt; :lc_error_message, iop_error_seq =&gt; :xn_error_seq , ip_pid =&gt; :pn_target_pid); END;';
	
				BEGIN
				
					EXECUTE IMMEDIATE   lc_plsql_string 
								  USING   IN OUT lt_in_data, IN OUT xn_error_handle_id, OUT ln_error_code, OUT lc_error_message, IN OUT xn_error_seq , IN pn_target_pid;
				
				
				EXCEPTION
					WHEN OTHERS THEN
						ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
														 ,pn_error_sequence =&gt; xn_error_seq
														 ,pc_error_type =&gt; 'E'
														 ,pc_error_text =&gt; lc_modulename||'Exceptional error during call to ETL [ '||lc_etl_name||' ]. Please handle the exceptions in the ETL. Oracle Error = '||SQLERRM
														 ,pn_pid =&gt; pn_target_pid);                              
						RAISE le_abort;                                             
				END;
				
				IF ln_error_code &lt;&gt; 0 THEN
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
													 ,pn_error_sequence =&gt; xn_error_seq
													 ,pc_error_type =&gt; 'E'
													 ,pc_error_text =&gt; lc_modulename||'ETL [ '||lc_etl_name||' ] returned an error (request to stop execution). Cannot continue'
													 ,pn_pid =&gt; pn_target_pid);                              
					lv_err_variable := 'APPS-TRAN-24' ;
          RAISE le_abort;   
				
				ELSIF ln_error_code = 0 OR ln_error_code IS NULL THEN
					
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
									 ,pn_error_sequence =&gt; xn_error_seq
									 ,pc_error_type =&gt; 'D'
									 ,pc_error_text =&gt; lc_modulename||'ETL sucessfully executed for this transition.'
									 ,pn_pid =&gt; pn_target_pid);
				END IF;
			
			END IF;
		
		END IF;
		
        
		SELECT  count(*)
        INTO ln_out_data_count
        FROM TABLE(XMLSEQUENCE((xmltype(lt_out_data).EXTRACT('datapacket/data',gc_data_namespace)))) data_pack;

        IF ln_out_data_count &gt; 1 THEN
            ln_pid_strategy := 2;
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'The Hook returned multiple data packets. Splitting will occur.'
                                             ,pn_pid =&gt; pn_target_pid);            
            
        ELSIF ln_out_data_count = 1 THEN
            ln_pid_strategy := 1;
            ln_process_instance_id := pn_target_pid;
            ln_orig_process_instance_id := pn_orig_target_pid;
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'The Hook returned single data packet. Splitting will NOT occur.'
                                             ,pn_pid =&gt; pn_target_pid);            
        ELSE
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'E'
                                             ,pc_error_text =&gt; lc_modulename||'The Hook did not return any data packets (pt_out_data is empty). Cannot continue'
                                             ,pn_pid =&gt; pn_target_pid);
            
            
            lv_err_variable := 'APPS-TRAN-25' ;
            RAISE le_abort;        
        END IF;
		
		ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'D'
                                         ,pc_error_text =&gt; lc_modulename||'Attempting to process each data packet returned'
                                         ,pn_pid =&gt; pn_target_pid);        
        
        FOR lcu_out_data_packet_rec IN lcu_out_data_packet(XMLTYPE(lt_out_data))
	    LOOP
	        lt_assignees := xt_assignees;
			
            SELECT  si_metric_results_s.nextval
            INTO    ln_instance_id
            FROM    DUAL; 
            
            IF ln_pid_strategy = 2 THEN
                ln_orig_process_instance_id := pn_target_pid;
                SELECT  si_process_instance_id_s.nextval
                INTO    ln_process_instance_id
                FROM    DUAL;
                
                ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                 ,pn_error_sequence =&gt; xn_error_seq
                                                 ,pc_error_type =&gt; 'D'
                                                 ,pc_error_text =&gt; lc_modulename||'Inserting new Process Instance Id ['||ln_process_instance_id||'] into ms_apps_mdf_flow_hierarchy'
                                                 ,pn_pid =&gt; pn_target_pid);     

                BEGIN                
                    INSERT INTO ms_apps_mdf_flow_hierarchy(parent_pid
                                                          ,child_pid
                                                          ,submit_id
                                                          )
                                                    VALUES(pn_target_pid
                                                          ,ln_process_instance_id
                                                          ,ln_instance_id
                                                          );                                                      
                EXCEPTION
                    WHEN OTHERS THEN
                        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                         ,pn_error_sequence =&gt; xn_error_seq
                                                         ,pc_error_type =&gt; 'E'
                                                         ,pc_error_text =&gt; lc_modulename||'Exceptional error when inserting flow split information into  ms_apps_mdf_flow_hierarchy. Oracle Error = '||SQLERRM||'. Cannot Continue'
                                                         ,pn_pid =&gt; pn_target_pid);                              
                        RAISE le_abort;                                             
                END;                                                      
            END IF;
			select UPDATEXML(XMLTYPE(lcu_out_data_packet_rec.row_data),'data/nonmultirow/process_instance_id/text()',ln_process_instance_id,
			                                                             'data/nonmultirow/metric_id/text()',ln_metric_id,'data/nonmultirow/instance_id/ 
                                                                                  text()',ln_instance_id,'data/nonmultirow/created_by/text()',
                                                                                  ln_created_by,gc_data_namespace)
                               into lcb_temp_data
                         from dual;		
			--lcu_out_data_packet_rec.row_data := lcb_temp_data;
            
            
			BEGIN
				
				lc_error_message := NULL;
				
				lc_error_message := MS_APPS_MDF_INFOLETOUTPUT_PKG.INSERT_XML(px_tostage.EXTRACT('stage/view/text()',gc_namespace).GETSTRINGVAL(),ln_metric_id,ln_process_instance_id,ln_instance_id,lcb_temp_data.getClobval());
			
				IF lc_error_message != 'SUCCESS' OR lc_error_message IS NULL THEN
				
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                         ,pn_error_sequence =&gt; xn_error_seq
                                                         ,pc_error_type =&gt; 'E'
                                                         ,pc_error_text =&gt; lc_modulename||'Exceptional error when inserting data into Desination Push Infolet. Oracle Error = '||lc_error_message||'. Cannot Continue'
                                                         ,pn_pid =&gt; pn_target_pid);                              
                    
                    lv_err_variable := 'APPS-TRAN-26' ;
                    RAISE le_abort; 
				
				END IF;
			EXCEPTION
				WHEN OTHERS THEN
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
													 ,pn_error_sequence =&gt; xn_error_seq
													 ,pc_error_type =&gt; 'E'
													 ,pc_error_text =&gt; lc_modulename||'Exceptional error during the call to INSERT_XML for inserting data into Desination Push Infolet. Oracle Error = '||lc_error_message||'. Cannot Continue'
													 ,pn_pid =&gt; pn_target_pid); 
         
         lv_err_variable := 'APPS-TRAN-27' ;
         RAISE le_abort;                   
					
			END;
               
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'Calling ms_apps_mdf_engine_pkg.find_parameters'
                                             ,pn_pid =&gt; pn_target_pid);             

            ms_apps_mdf_engine_pkg.find_parameters(ln_process_instance_id
                                                  ,ln_instance_id
                                                  ,ln_metric_id
                                                  ,px_tostage
												  ,px_tostage.EXTRACT('stage/view/text()',gc_namespace).GETSTRINGVAL()
                                                  ,px_tostage.EXTRACT('stage/displayview/text()',gc_namespace).GETSTRINGVAL()
                                                  ,pc_process_code 
                                                  ,px_tostage.EXTRACT('stage/code/text()',gc_namespace).GETSTRINGVAL()
                                                  ,lt_parameters
                                                  ,xn_error_handle_id
                                                  ,xn_error_seq
                                                  ,ln_error_code
                                                  );
            												  
                                                  
            IF ln_error_code &lt;&gt; 0 THEN
                ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                 ,pn_error_sequence =&gt; xn_error_seq
                                                 ,pc_error_type =&gt; 'E'
                                                 ,pc_error_text =&gt; lc_modulename||'Errors occurred during execution of procedure ms_apps_mdf_engine_pkg.find_parameters. Cannot continue'
                                                 ,pn_pid =&gt; pn_target_pid);                              
                RAISE le_abort;                             
            END IF;
            
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'Calling ms_apps_mdf_engine_pkg.find_assignees'
                                             ,pn_pid =&gt; pn_target_pid);              
          
             ms_apps_mdf_engine_pkg.find_assignees(ln_process_instance_id
                                                  ,ln_instance_id
                                                  ,ln_metric_id
                                                  ,px_tostage
                                                  ,px_tostage.EXTRACT('stage/view/text()',gc_namespace).GETSTRINGVAL()
                                                  ,pc_process_code 
                                                  ,px_tostage.EXTRACT('stage/code/text()',gc_namespace).GETSTRINGVAL()
                                                  ,lt_assignees
                                                  ,xn_error_handle_id
                                                  ,xn_error_seq
                                                  ,ln_error_code
                                                  );    
               
            IF ln_error_code &lt;&gt; 0 THEN
                ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                 ,pn_error_sequence =&gt; xn_error_seq
                                                 ,pc_error_type =&gt; 'E'
                                                 ,pc_error_text =&gt; lc_modulename||'Errors occurred during execution of procedure ms_apps_mdf_engine_pkg.find_assignees. Cannot continue'
                                                 ,pn_pid =&gt; pn_target_pid);                              
                RAISE le_abort;                             
            END IF;

            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'Calling ms_apps_mdf_engine_pkg.make_assignments'
                                             ,pn_pid =&gt; pn_target_pid); 

            ms_apps_mdf_engine_pkg.make_assignments(pn_enterprise_id
                                                    ,ln_process_instance_id
                                                    ,ln_metric_id
                                                    ,ln_instance_id     
                                                    ,px_transition            
                                                    ,px_transition_process       
                                                    ,lt_assignees
                                                    ,lt_parameters
		                                    ,lt_rulegroups_passed
                                                    ,xn_error_handle_id
                                                    ,xn_error_seq
                                                    ,ln_error_code
                                                    );  
			
                                                    
            IF ln_error_code &lt;&gt; 0 THEN
                ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                 ,pn_error_sequence =&gt; xn_error_seq
                                                 ,pc_error_type =&gt; 'E'
                                                 ,pc_error_text =&gt; lc_modulename||'Errors occurred during execution of procedure ms_apps_mdf_engine_pkg.make_assignments. Cannot continue'
                                                 ,pn_pid =&gt; pn_target_pid);                              
                RAISE le_abort;                             
            END IF;
            
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'Calling ms_apps_mdf_engine_pkg.send_emails'
                                             ,pn_pid =&gt; pn_target_pid);             

            ms_apps_mdf_engine_pkg.send_emails(pn_enterprise_id
                                              ,px_transition
                                              ,px_templates
                                              ,lt_assignees
                                              ,lt_parameters
											  ,lt_rulegroups_passed
                                              ,xn_error_handle_id
                                              ,xn_error_seq
                                              ,ln_error_code
                                              ); 

            IF ln_error_code &lt;&gt; 0 THEN
                ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                 ,pn_error_sequence =&gt; xn_error_seq
                                                 ,pc_error_type =&gt; 'E'
                                                 ,pc_error_text =&gt; lc_modulename||'Errors occurred during execution of procedure ms_apps_mdf_engine_pkg.send_emails. Cannot continue'
                                                 ,pn_pid =&gt; pn_target_pid);                              
                RAISE le_abort;                             
            END IF; 

            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'D'
                                             ,pc_error_text =&gt; lc_modulename||'Calling ms_apps_mdf_engine_pkg.set_stage'
                                             ,pn_pid =&gt; pn_target_pid); 

            ms_apps_mdf_engine_pkg.set_stage(pc_process_code
                                            ,pn_flow_version
                                            ,ln_orig_process_instance_id
                                            ,nvl(pt_pid(1).orig_iid,pt_pid(1).iid)
                                            ,ln_process_instance_id
                                            ,ln_instance_id
                                            ,px_tostage.EXTRACT('stage/code/text()',gc_namespace).GETSTRINGVAL()
                                            ,px_tostage.EXTRACT('stage/approvaltype/text()',gc_namespace).GETSTRINGVAL()
                                            ,xn_error_handle_id
                                            ,xn_error_seq
                                            ,ln_error_code
                                            );
                                            
            IF ln_error_code &lt;&gt; 0 THEN
                ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                                 ,pn_error_sequence =&gt; xn_error_seq
                                                 ,pc_error_type =&gt; 'E'
                                                 ,pc_error_text =&gt; lc_modulename||'Errors occurred during execution of ms_apps_mdf_engine.set_stage. Cannot continue'
                                                 ,pn_pid =&gt; pn_target_pid);                              
                RAISE le_abort;                             
            END IF;

-------------changes made--- new hook called post hook added
ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
										 ,pn_error_sequence =&gt; xn_error_seq
										 ,pc_error_type =&gt; 'D'
										 ,pc_error_text =&gt; lc_modulename||'Attempting to find the Post Hook for this transition'
										 ,pn_pid =&gt; pn_target_pid);
		
		BEGIN
    		
			SELECT  transitions.EXTRACT('posthook/name/text()',gc_namespace).GETSTRINGVAL() as posthook_proc_name 
			BULK COLLECT INTO lt_posthook_proc_name
			FROM TABLE(XMLSEQUENCE((px_transition_process.EXTRACT('transition/hooks/posthook[enabled="Y"]',gc_namespace)))) transitions;

        EXCEPTION
			WHEN NO_DATA_FOUND THEN
				
				ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
								 ,pn_error_sequence =&gt; xn_error_seq
								 ,pc_error_type =&gt; 'D'
								 ,pc_error_text =&gt; lc_modulename||'No Post Hook is specified for this transition.'||SQLERRM
								 ,pn_pid =&gt; pn_target_pid);
				
							 
            WHEN OTHERS THEN
                
				ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
								 ,pn_error_sequence =&gt; xn_error_seq
								 ,pc_error_type =&gt; 'E'
								 ,pc_error_text =&gt; lc_modulename||'Could not determine the Post Hook package. Oracle Error = '||SQLERRM
								 ,pn_pid =&gt; pn_target_pid);      
				
				RAISE le_abort;
        END;
		
		IF lt_posthook_proc_name.count &gt;0
        THEN
        
			FOR i in 1..lt_posthook_proc_name.count
			LOOP
				ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
										 ,pn_error_sequence =&gt; xn_error_seq
										 ,pc_error_type =&gt; 'D'
										 ,pc_error_text =&gt; lc_modulename||'Attempting to call the Post Hook for this transition. Post Hook name [ '||lt_posthook_proc_name(i)||' ]'
										 ,pn_pid =&gt; pn_target_pid); 
					
				lc_plsql_string := 'BEGIN '||lt_posthook_proc_name(i)||'(lt_in_data_orig =&gt; :lt_in_data_orig, lt_in_data =&gt; :lt_in_data,pc_process_code =&gt; :pc_process_code,ln_orig_process_instance_id =&gt; :ln_orig_process_instance_id, ln_process_instance_id =&gt; :ln_process_instance_id, xn_error_handle_id =&gt; :xn_error_handle_id, xn_error_seq =&gt; :xn_error_seq, xn_error_code =&gt; :ln_error_code); END;';
				BEGIN
				
					EXECUTE IMMEDIATE   lc_plsql_string 
								  USING  lt_in_data_orig, lt_in_data, pc_process_code ,ln_orig_process_instance_id, IN OUT ln_process_instance_id,  IN OUT xn_error_handle_id, IN OUT xn_error_seq, OUT ln_error_code;
				
				
				EXCEPTION
					WHEN OTHERS THEN
						ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
														 ,pn_error_sequence =&gt; xn_error_seq
														 ,pc_error_type =&gt; 'E'
														 ,pc_error_text =&gt; lc_modulename||'Exceptional error during call to Post Hook [ '||lt_posthook_proc_name(i)||' ]. Please handle the exceptions in the Post hook. Oracle Error = '||SQLERRM
														 ,pn_pid =&gt; pn_target_pid);                              
						RAISE le_abort;                                             
				END;
				
				IF ln_error_code &lt;&gt; 0 THEN
					ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
													 ,pn_error_sequence =&gt; xn_error_seq
													 ,pc_error_type =&gt; 'E'
													 ,pc_error_text =&gt; lc_modulename||'Hook [ '||lt_posthook_proc_name(i)||' ] returned an error (request to stop execution). Cannot continue'
													 ,pn_pid =&gt; pn_target_pid);                              
					lv_err_variable := 'APPS-TRAN-28' ;
          RAISE le_abort;                             
				END IF;
				
			END LOOP;
		ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
											 ,pn_error_sequence =&gt; xn_error_seq
											 ,pc_error_type =&gt; 'D'
											 ,pc_error_text =&gt; lc_modulename||'Post Hook sucessfully executed for this transition.'
											 ,pn_pid =&gt; pn_target_pid);
		
		ELSIF lt_posthook_proc_name.count = 0 THEN
			
			ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
											 ,pn_error_sequence =&gt; xn_error_seq
											 ,pc_error_type =&gt; 'D'
											 ,pc_error_text =&gt; lc_modulename||'No Post Hook is specified for this transition.'
											 ,pn_pid =&gt; pn_target_pid);
			
		
		END IF; 
        END LOOP;
       
        ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                         ,pn_error_sequence =&gt; xn_error_seq
                                         ,pc_error_type =&gt; 'I'
                                         ,pc_error_text =&gt; lc_modulename||'Exiting Transition Package Successfully'
                                         ,pn_pid =&gt; pn_target_pid);          
        
    EXCEPTION
        WHEN le_abort THEN
            xn_error_code := -1; 
            ms_apps_mdf_engine_pkg.gc_err_variable := lv_err_variable;   
        WHEN OTHERS THEN
            ms_apps_mdf_errors_pkg.insert_log(pn_error_handle_id =&gt; xn_error_handle_id
                                             ,pn_error_sequence =&gt; xn_error_seq
                                             ,pc_error_type =&gt; 'E'
                                             ,pc_error_text =&gt; lc_modulename||'Exceptional Error. Cannot continue. Returning to Caller. Oracle Error = '||SQLERRM
                                             ,pn_pid =&gt; pn_target_pid); 
            xn_error_code := -1;    
    END end_flow_to_end_flow;
    --===================================================================================================
    

END ms_mdf_ms_rga_l_tran_1_pkg;
 </TEXT_BODY>
</PACKAGE_SPEC>
