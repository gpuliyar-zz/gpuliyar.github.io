<?xml version="1.0" encoding="UTF-8"?><PACKAGE_SPEC xmlns="http://www.metricstream.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.metricstream.com ms_application_schema.xsd">
<PLATFORM_DETAILS>
<PLATFORM_VERSION>6.1</PLATFORM_VERSION>
<BUILD_VERSION>5.4.2.0</BUILD_VERSION>
</PLATFORM_DETAILS>
<STORED_PROCEDURE_NAME><![CDATA[MS_RGA_PROC_VIEW_MANAGE_ALERTS]]></STORED_PROCEDURE_NAME>
<OBJECT_ID><![CDATA[MS_RGA_PROC_VIEW_MANAGE_ALERTS]]></OBJECT_ID>
<OBJECT_TYPE><![CDATA[PACKAGE]]></OBJECT_TYPE>
<TEXT><![CDATA[PACKAGE ms_rga_proc_view_manage_alerts
AS  
/**
* ======================================================================<br/>
* Project: GRC Intelligence<br/>
* Description: This package keeps track of alerts which gets checked/unchecked for review or followup <br/>
* DB impact: YES<br/>
* Commit inside: YES<br/>
* Rollback inside: NO<br/>
* ----------------------------------------------------------------------<br/>
* * ======================================================================<br/>
* @headcom
* */

/**
* Keeps track of all the alerts that gets checked/uncheked for review on user level. <br/>
* @param i_reviewed_channels feed data id
* @param i_user_name  user name
* @param i_review_value reveiw value (checked/unchecked)
* @param o_error_code Error Code
* @param o_error_message error message
*/ 
   PROCEDURE update_reviewed_channels (
      i_reviewed_channels   IN       VARCHAR2,
      i_user_name             IN      varchar2,
      i_review_value             IN      number,
      o_error_code          OUT      NUMBER,
      o_error_message        OUT      VARCHAR2
   );
/**
* Keeps track of all the alerts that gets checked/uncheked for Followup on user level. <br/>
* @param i_followup_channels feed data id
* @param i_user_name  user name
* @param i_followup_value followup value (Checked/Unchecked)
* @param o_error_code  Error Code
* @param o_error_message  error message
*/ 
   PROCEDURE update_followup_channels (
      i_followup_channels   IN       VARCHAR2,
      i_user_name             IN      varchar2,
      i_followup_value             IN      number,
      o_error_code          OUT      NUMBER,
      o_error_message        OUT      VARCHAR2
   );

END ms_rga_proc_view_manage_alerts; ]]></TEXT>
<TEXT_BODY><![CDATA[PACKAGE BODY ms_rga_proc_view_manage_alerts
AS

   PROCEDURE update_reviewed_channels (
      i_reviewed_channels   IN       VARCHAR2,
      i_user_name             IN      VARCHAR2,
      i_review_value             IN      number,
      o_error_code          OUT      NUMBER,
      o_error_message       OUT      VARCHAR2
                        )AS
   
      x_reviewed_channels   varchar2_array;
      x_reviewed_count      NUMBER         := 0;
      x_user_id             number;
      x_user_name           varchar2(1000);
      x_reviewed_flag       number;
  
   BEGIN
   
   
x_user_name:=ms_apps_utilities.get_user_name(I_USER_NAME);

MERGE 
    INTO ms_rga_feed_user_info T 
  		USING (
  				SELECT     
          i_reviewed_channels AS FEED_DATA_ID,
    	          x_USER_NAME AS USER_NAME,
                i_review_value As Reviewed_status,
                sysdate as Reviewed_Date
               FROM DUAL
	      ) V
	      ON
	      (
T.USER_NAME = V.USER_NAME
AND T.FEED_DATA_ID = V.FEED_DATA_ID
) 
 WHEN  MATCHED THEN
 UPDATE SET REVIEWED_STATUS   = V.reviewed_status,
            Reviewed_date=V.REVIEWed_DATE
            
	WHEN
	NOT MATCHED THEN
	INSERT
	(  user_name ,
     Feed_data_id ,
     Reviewed_status ,
     Reviewed_date
   )
VALUES 
  (  V.USER_NAME
    ,v.feed_data_id
    ,v.reviewed_status
    ,V.REVIEWed_DATE
  );     

 
      COMMIT;
      o_error_message := 'Procedure Completed Successfully';
      o_error_code := 0;
   EXCEPTION
      WHEN OTHERS
      THEN
         o_error_message :='Exception Occured in the Procedure UPDATE_REVIEWED_CHANNELS';
         o_error_code := 1;
   END update_reviewed_channels;

   PROCEDURE update_followup_channels (
      i_followup_channels   IN       VARCHAR2,
      i_user_name           IN      VARCHAR2,
      i_followup_value              IN      number,
      o_error_code          OUT      NUMBER,
      o_error_message       OUT      VARCHAR2
   )
   AS
      x_followup_channels   varchar2_array;
      x_followup_count      NUMBER         := 0;
      x_user_id             number;
      x_user_name           varchar2(1000);
      x_followup_flag       number;
   BEGIN         -- pipe seprated responseid  for reviewed channels comes here
  
x_user_name:=ms_apps_utilities.get_user_name(I_USER_NAME);

 MERGE 
    INTO ms_rga_feed_user_info T 
  		USING (
  				SELECT     
          i_followup_channels AS FEED_DATA_ID,
    	          x_USER_NAME AS USER_NAME,
                i_followup_value as Followup_Status,
                sysdate as Followup_Date
               FROM DUAL
	      ) V
	      ON
	      (
T.USER_NAME = V.USER_NAME
AND T.FEED_DATA_ID = V.FEED_DATA_ID
) 
 WHEN  MATCHED THEN
 UPDATE SET Followup_status=v.Followup_status,
            FOLLOWUP_Date=v.FOLLOWUP_Date
            
	WHEN
	NOT MATCHED THEN
	INSERT
	(  user_name ,
     Feed_data_id ,
     Followup_status,
     FOLLOWUP_Date
   )
VALUES 
  ( V.USER_NAME,
    v.feed_data_id,
    v.Followup_status,
    v.FOLLOWUP_Date
   
  );
        
      COMMIT;
      o_error_message := 'Procedure Completed Successfully';
      o_error_code := 0;
   EXCEPTION
      WHEN OTHERS
      THEN
         o_error_message :='Exception Occured in the Procedure UPDATE_REVIEWED_CHANNELS';
         o_error_code := 1;
   END;

   /*Procedure Pr_Update_Rec_Status(i_SubsIds_N_Stat   In  Varchar2,
                                  i_User_Name        In  Varchar2 Default Null, -- Not Required
                                  i_Flag_Value       In  Number   Default Null, -- Not Required
                                  o_error_code       Out Number,
                                  o_error_message    Out Varchar2)
   Is
   Begin

   --insert into temp(val1,val2,val3) values(i_SubsIds_N_Stat,'review',  i_Flag_Value);

       If i_SubsIds_N_Stat Is Not Null And Length(i_SubsIds_N_Stat)>1
       Then
          For each_Subs_Rec In (Select Subs_Resp_Id,
                                       Decode(Review_Status,'9',Null,Review_Status) Review_Status,
                                       Decode(Followup_Status,'9',Null,Followup_Status) Followup_Status
                                From  (Select Substr(Column_Value, 1, 20) Subs_Resp_Id,
                                              Substr(Column_Value, 22, 1) Review_Status,
                                              Substr(Column_Value, 24, 1) Followup_Status
                                       From   Table(Ms_Apps_Utilities.Parse_String(i_SubsIds_N_Stat,'|'))))
          Loop
             Begin

           --   insert into temp(val1,val2,val3) values(i_SubsIds_N_Stat,'review',  i_Flag_Value);

                 Update Ms_Rga_Subscription_Response
                 Set    Reviewed  = Nvl(each_Subs_Rec.Review_Status,Reviewed),
                        Follow_Up = Nvl(each_Subs_Rec.Followup_Status,Follow_Up)
                 Where  Subs_Response_Id = each_Subs_Rec.Subs_Resp_Id
                 And    ((Nvl(Reviewed,'-1') <> Nvl(each_Subs_Rec.Review_Status,'-1')) Or (Nvl(Follow_Up,'-1') <> Nvl(each_Subs_Rec.Followup_Status,'-1')));
             Exception
                     When Others Then
                          Null;
             End;
          End Loop;
         -- insert into temp(val1,val2,val3) values(o_error_message,'review',  o_error_code);
          Commit;
          o_error_message := 'Procedure Pr_Update_Rec_Status completed successfully. - ';
          o_error_code    := 0;


       End If; 
       
   Exception
           When Others Then
                o_error_message := 'Exception Occured in the procedure Pr_Update_Rec_Status.'||SQLERRM;
                o_error_code    := SQLCODE;
   End Pr_Update_Rec_Status;*/

END ms_rga_proc_view_manage_alerts; ]]></TEXT_BODY>
</PACKAGE_SPEC>
