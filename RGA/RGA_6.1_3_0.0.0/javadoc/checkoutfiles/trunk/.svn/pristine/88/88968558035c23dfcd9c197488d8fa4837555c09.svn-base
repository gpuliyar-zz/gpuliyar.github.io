<?xml version="1.0" encoding="UTF-8"?><PACKAGE_SPEC xmlns="http://www.metricstream.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.metricstream.com ms_application_schema.xsd">
<PLATFORM_DETAILS>
<PLATFORM_VERSION>6.1</PLATFORM_VERSION>
<BUILD_VERSION>5.4.2.0</BUILD_VERSION>
</PLATFORM_DETAILS>
<STORED_PROCEDURE_NAME><![CDATA[MS_RGA_UTILITIES]]></STORED_PROCEDURE_NAME>
<OBJECT_ID><![CDATA[MS_RGA_UTILITIES]]></OBJECT_ID>
<OBJECT_TYPE><![CDATA[PACKAGE]]></OBJECT_TYPE>
<TEXT><![CDATA[PACKAGE ms_rga_utilities
AS
/**
* ======================================================================<br/>
* Project: GRC Intelligence<br/>
* Description: Utility package used for RGA related APIs <br/>
* DB impact: YES<br/>
* Commit inside: YES<br/>
* Rollback inside: NO<br/>
* ----------------------------------------------------------------------<br/>
* * ======================================================================<br/>
* @headcom
* */

-- constants--
  g_Success_Code Constant NUMBER                             := Ms_Apps_Constants.g_Success;
  g_Success_Mesg Constant VARCHAR2(100)                      := Ms_Apps_Constants.g_Success_Mesg;
  g_Module_Name  Constant VARCHAR2(10)                       := 'RGA';
  g_Package_Name Constant VARCHAR2(50)                       := 'MS_RGA_UTILITIES';
  g_Action       VARCHAR2(12)                                := NULL;
  g_Email_Template Si_Email_Queue.Template%Type              := 'MS_RGA/MS_RGA_NOTIFY_USERS.htm';
  g_Email_Template_Notified Si_Email_Queue.Template%Type     :='MS_RGA/MS_RGA_NOTIFY_USERS_FROM_USERS.htm';
  g_Email_Channel_Template Si_Email_Queue.Template%Type      := 'MS_RGA/MS_RGA_CHANNEL_DTLS.htm';
  g_Email_Chan_Failure_Template Si_Email_Queue.Template%Type := 'MS_RGA/MS_RGA_CHANNEL_DTLS_FAILURE.htm';
  
  /** -------------------------------
  * USAGE of DEBUG MESSAGE PRIORITY
  * -------------------------------
  * 1 indicates Highest priority, 2 indicates Medium priority and 3 indicates lowest priority.
  * Debug Priority can be over-ridden at the Module level, Package level or at the individual Msg level.
  * Examples :-
  * 1.) If Module priority is set at 3, every Msg(high, medium, low) is logged at all levels.
  * 2.) If Module priority is set at 1 and Package priority is 2, no message from that pkg is logged
  *     If an individual msg over-rides pkg priority and has priority higher than or equal to module's
  *     priority, then that msg is logged.
  * -----------------------------------------------------------------------------------------------------
  */
  -- constants----
  g_High                NUMBER := 1;
  g_Medium              NUMBER := 2;
  g_Low                 NUMBER := 3;
  -- Only high priority messages should be logged.
  g_ModuleDebugPriority NUMBER := g_High; 
/**
* Gets selected URL checked for Review/Followup status in My Alert Report. <br/>
* @param i_type Review/followup flag (R/F)
* @param i_string  Feed data id
* @param i_rowno   Feed data id
* @return  <b>complete url of the checked alert</b> <br/>
*/ 

FUNCTION get_select_url_checked
  (
    i_type   IN VARCHAR2,
    i_string IN VARCHAR2,
    i_rowno  IN VARCHAR2)
  RETURN VARCHAR2;
/**
* Gets selected url unchecked for review/followup status in My Alert Report. <br/>
* @param i_type Review/followup flag (R/F)
* @param i_string  Feed data id
* @param i_rowno   Feed data id
* @return <b>complete url of the unchecked alert</b> <br/>
*/
FUNCTION get_select_url_unchecked
  (
    i_type   IN VARCHAR2,
    i_string IN VARCHAR2,
    i_rowno  IN VARCHAR2)
  RETURN VARCHAR2;
/**
* Returns the channel name by getting the channel id as input. <br/>
* @param i_channel_id channel id
* @return <b>Channel name</b> <br/>
*/
FUNCTION get_channel_name
  (
    i_channel_id IN VARCHAR2)
  RETURN VARCHAR2;
/**
* This generates url for editing report output data. <br/>
* @param i_metric_id   metric_id
* @param i_process_instance_id  process_instance_id
* @param i_hyper_text    Hyper text
* @return <b>complete edited URL as hyperlink</b> <br/>
* @deprecated
*/ 
/*
FUNCTION get_edit_url
  (
    i_metric_id           IN NUMBER,
    i_process_instance_id IN NUMBER,
    i_hyper_text          IN VARCHAR2 DEFAULT NULL)
  RETURN VARCHAR2;
*/
/** Sends email
* @param x_priority Priority
* @param x_recipients Reciepients
* @param x_enterprise_id Enterprise id
* @param x_subject Subject
* @param  x_template  Templat
* @param x_param_names Param names
* @param x_param_values Param values
* @param x_error_code Error code
* @param x_error_message Erroe message
*/
PROCEDURE send_email
  (
    x_priority IN NUMBER,
    /* 3-Low, 2-Normal, 1-High */
    x_recipients    IN varchar2_array,
    x_enterprise_id IN NUMBER,
    x_subject       IN VARCHAR2,
    x_template      IN VARCHAR2,
    x_param_names   IN varchar2_array,
    x_param_values  IN clob_array,
    x_error_code    IN OUT NUMBER,
    x_error_message IN OUT VARCHAR2);
--sends E-mail Individually 
PROCEDURE send_email_individually
  (
    x_priority IN NUMBER,
    /* 3-Low, 2-Normal, 1-High */
    x_recipients IN varchar2_array,
    /* defined in create_tables.sql */
    x_enterprise_id IN NUMBER,
    x_subject       IN VARCHAR2,
    x_template      IN VARCHAR2,
    x_param_names   IN varchar2_array,
    /* defined in create_tables.sql */
    x_param_values IN OUT clob_array,
    /* defined in create_tables.sql */
    x_error_code    IN OUT NUMBER,
    x_error_message IN OUT VARCHAR2);
    
-- no comments
PROCEDURE send_email_infolet_inv_status
  (
    INFOLET_INVOKED           IN NUMBER,
    INFOLET_INVOCATION_STATUS IN VARCHAR2,
    INSTANCE_ID               IN NUMBER,
    PROCESS_INSTANCE_ID       IN NUMBER,
    CHANNEL_ID                IN VARCHAR2,
    CREATION_DATE             IN DATE,
    LAST_UPDATED_DATE         IN DATE,
    SUBJECT                   IN VARCHAR2,
    RECIPIENT                 IN VARCHAR2,
    SENDER                    IN VARCHAR2,
    SERVER                    IN VARCHAR2,
    ERROR_CODE OUT VARCHAR2,
    ERROR_DESC OUT VARCHAR2);
    -- no comments
PROCEDURE email_infolet_inv_status
  (
    i_instance_id IN NUMBER,
    o_error_message OUT NOCOPY VARCHAR2);
    -- no comments
PROCEDURE email_infolet_inv_failure
  (
    i_channel_id IN VARCHAR2,
    o_error_message OUT NOCOPY VARCHAR2,
    i_server IN VARCHAR2);
    
 /** Monitors progress of a process by capturing logs
* @param i_Msg Message to be captured
* @param i_Priority Priority
* @param i_Msg_Type Mesage type
* @throws others If any exceptions recorded during execution
*/
PROCEDURE pr_monitor_progress
  (
    i_Msg      IN VARCHAR2,
    i_Priority IN NUMBER DEFAULT g_ModuleDebugPriority,
    i_Msg_Type IN VARCHAR2 DEFAULT Ms_Apps_Utilities.g_stmt);
/**
* Enriches/delimits the keyword list for keyword filter. <br/>
* @param i_keyword_listList of keywords for filter
* @param i_delimiter  keyword separator
* @return <b>Enriched delimited keyword for keyword filteration</b> <br/>
* @throws others If any exceptions recorded during execution
*/
FUNCTION Fn_Enrich_Keyword_List
  (
    i_keyword_list IN VARCHAR2,
    i_delimiter    IN VARCHAR2)
  RETURN VARCHAR2;
  /**
* Build keyword List as per Context grammar specifications of Oracle Text. <br/>
* @param i_keyword_listList of keywords for filter
* @param i_delimiter  keyword separator
* @return <b>Enriched delimited keyword for keyword filteration</b> <br/>
* @throws NO_DATA_FOUND If keyword list has no alphabets/numbers
* @throws OTHERS If any exceptions recorded during execution
*/
FUNCTION Fn_Ctx_Search
  (
    i_keyword_list IN VARCHAR2,
    i_delimiter    IN VARCHAR2)
  RETURN VARCHAR2;
/**
* generates url for editing report output data. <br/>
* @param i_metric_id  Metric id
* @param i_process_instance_id  Process instance id
* @param i_hyper_text Hyper text
* @param i_Subs_Resp_Id  Subscription response id
* @param i_Feed_Data_Id  Feed data id
* @param i_Received_On Recieved on
* @param i_Channel_Id   Channle id
* @return  <b>url for navigating to log issue form</b> <br/>
*/
FUNCTION Get_Url_Log_Issue
  (
    i_metric_id           IN NUMBER,
    i_process_instance_id IN NUMBER,
    i_hyper_text          IN VARCHAR2 DEFAULT NULL,
    i_Subs_Resp_Id        IN VARCHAR2,
    i_Feed_Data_Id        IN NUMBER,
    i_Received_On         IN DATE,
    i_Channel_Id          IN VARCHAR2)
  RETURN VARCHAR2;
/**
* generates url for editing report output data. <br/>
* @param i_metric_id  Metric id
* @param i_process_instance_id  Process instance id
* @param i_hyper_text Hyper text
* @param i_Subs_Resp_Id  Subscription response id
* @param i_Feed_Data_Id  Feed data id
* @param i_Received_On Recieved on
* @param i_Channel_Id   Channle id
* @return <b>url for navigating to log issue form</b> <br/>
*/
FUNCTION Get_Url_Log_Issue1
  (
    i_metric_id           IN NUMBER,
    i_process_instance_id IN NUMBER,
    i_hyper_text          IN VARCHAR2 DEFAULT NULL,
    i_Subs_Resp_Id        IN VARCHAR2,
    i_Feed_Data_Id        IN NUMBER,
    i_Received_On         IN DATE,
    i_Channel_Id          IN VARCHAR2)
  RETURN VARCHAR2;
/**
* This generates url to create or edit orb relations. <br/>
* @param i_metric_id  Metric id
* @param i_process_instance_id  Process instance id
* @param i_hyper_text Hyper text
* @param i_Subs_Resp_Id  Subscription response id
* @param i_Feed_Data_Id  Feed data id
* @param i_Received_On Recieved on
* @param i_Channel_Id   Channle id
* @return <b>url to create or edit orb relations</b> <br/>
*/
  FUNCTION Get_Url_ORB_Link
  (
    i_metric_id           IN NUMBER,
    i_process_instance_id IN NUMBER,
    i_hyper_text          IN VARCHAR2 DEFAULT NULL,
    i_Subs_Resp_Id        IN VARCHAR2,
    i_Feed_Data_Id        IN NUMBER,
    i_Received_On         IN DATE,
    i_Channel_Id          IN VARCHAR2)
  RETURN VARCHAR2;
/**
* This generates url for editing report output data for Notify users. <br/>
* @param i_metric_id  Metric id
* @param i_process_instance_id  Process instance id
* @param i_hyper_text Hyper text
* @param i_Subs_Resp_Id  Subscription response id
* @param i_Feed_Data_Id  Feed data id
* @param i_Received_On Recieved on
* @param i_Channel_Id   Channle id
* @return <b>url to create or edit Notify users</b> <br/>
*/
FUNCTION Get_Url_Notify_Users
  (
    i_metric_id           IN NUMBER,
    i_process_instance_id IN NUMBER,
    i_hyper_text          IN VARCHAR2 DEFAULT NULL,
    i_Subs_Resp_Id        IN VARCHAR2,
    i_Feed_Data_Id        IN NUMBER,
    i_Received_On         IN DATE,
    i_Channel_Id          IN VARCHAR2)
  RETURN VARCHAR2;

/**
* This generates url for editing email_Content. <br/>
* @param i_metric_id  Metric id
* @param i_process_instance_id  Process instance id
* @param i_hyper_text Hyper text
* @param i_Feed_Data_Id  Feed data id
* @return  <b>url to create or edit Email_Content</b> <br/>
*/
FUNCTION Get_Url_Email_Content1
  (
    i_metric_id           IN NUMBER,
    i_process_instance_id IN NUMBER,
    i_hyper_text          IN VARCHAR2 DEFAULT NULL,
    i_Feed_Data_Id        IN NUMBER)
  RETURN VARCHAR2;
/**
* This generates url for editing Email_Content. <br/>
* @param i_metric_id  Metric id
* @param i_process_instance_id  Process instance id
* @param i_hyper_text Hyper text
* @param i_Feed_Data_Id  Feed data id
* @return <b>url to create or edit Email_Content</b> <br/>
*/
FUNCTION Get_Url_Email_Content
  (
    i_metric_id           IN NUMBER,
    i_process_instance_id IN NUMBER,
    i_hyper_text          IN VARCHAR2 DEFAULT NULL,
    i_Feed_Data_Id        IN NUMBER
   )
  RETURN VARCHAR2;
-- no comments
FUNCTION Get_Url_GRCIntegration_AOC(i_metric_id           IN Number,
                             i_process_instance_id IN Number,
                             i_hyper_text          IN Varchar2 DEFAULT NULL,
                             i_Subs_Resp_Id        In Varchar2,
                             i_Feed_Data_Id        In Number,
                             i_Received_On         In Date,
                             i_Channel_Id          In Varchar2)
    RETURN VARCHAR2;  
/**
* Generates Feed id sequentially. <br/>
* @param i_Rowid row id
* @return  <b>feed data id ID</b> <br/>
*/
FUNCTION Get_Next_Feed_Id
  (
    i_Rowid Rowid)
  RETURN NUMBER DETERMINISTIC;
/**
* Updates the feed fetch timestamp for server urls. <br/>
* @param i_Server_Add_Url server url
* @param i_LastRespTimestamp last response timestamp
* @param i_rowno   Feed data id
* @return return code,   <b>1 is successful COMPLETION</b> <br/>
*                        <b>0 Is Unsuccessful Completion</b> <br/>
*/
FUNCTION Fn_Update_Feed_Timestamps
  (
    i_Server_Add_Url    IN VARCHAR2,
    i_LastRespTimestamp IN VARCHAR2)
  RETURN NUMBER;
-- NO COMMENTS
FUNCTION Get_View_Edit_RptUrl
  (
    i_Metric_Name         IN VARCHAR2,
    i_Process_Instance_Id IN NUMBER,
    i_channel_name        IN VARCHAR2)
  RETURN VARCHAR2;
/**
* Builds the url for form navigation. <br/>
* @param ip_push_infolet push infolet
* @param ip_process_instance_id Process instance id
* @param ip_edit_flag Edit flag
* @param ip_hyper_text Hyper text
* @return  <b>url for form navigation</b> <br/>
*/
FUNCTION build_form_url
  (
    ip_push_infolet        IN VARCHAR2,
    ip_process_instance_id IN NUMBER,
    ip_edit_flag           IN VARCHAR2,
    ip_hyper_text          IN VARCHAR2 DEFAULT NULL)
  RETURN VARCHAR2;
/**
* Gets Infolet id from name. <br/>
* @param ip_push_infolet push infolet name
* @return  <b>Infolet id</b> <br/>
*/
FUNCTION get_infolet_id
  (
    ip_push_infolet IN VARCHAR2)
  RETURN NUMBER;
/**
* Gets user name from user id. <br/>
* @param i_user_id user id
* @return  <b>user name</b> <br/>
*/
FUNCTION get_user_name
  (
    i_user_id IN NUMBER)
  RETURN VARCHAR2;
/**
* Gets user name having alert notifictaion. <br/>
* @param i_subs_response_id subscription id
* @return  <b>user name</b> <br/>
* @deprecated
*/
FUNCTION GET_USER
  (
    i_subs_response_id VARCHAR2)
  RETURN VARCHAR2;
/**
* Gets user name having alert notifictaion. <br/>
* @param i_login_id login user id
* @param i_feed_data_id Feed data id
* @return  <b>user name</b> <br/>
*/
FUNCTION GET_NOTIFIED_USERS
  (i_login_id VARCHAR2,i_feed_data_id NUMBER)
    --changes
  RETURN VARCHAR2;
/**
* Generates rss url. <br/>
* @param i_hyper_text rss hyper text
* @return <b>complete url of the RSS</b> <br/>
*/
FUNCTION get_rss_url
  (
    i_hyper_text IN VARCHAR2 DEFAULT NULL)
  RETURN VARCHAR2;
/**
* Gets send notification setting for the subscription. <br/>
* @param i_subs_id subscription id
* @param i_user_id user id
* @return <b>yes, if user to be notified by email</b> <br/>
*         <b>no, if user not to be notified by email</b> <br/>
*/
FUNCTION fn_noty_user
  (
    i_subs_id VARCHAR,
    i_user_id IN NUMBER)
  RETURN VARCHAR2;
/**
* Gets virtual report id for SYSTEMI user reports. <br/>
* @param  p_report_name report name
* @return  <b>no .of user reports for systemi,for successful execution</b> <br/>
*           <b>NULL for UNSUCCESSFUL EXECUTION</b> <br/>
*/
FUNCTION insert_virtual_rep_id
  (
    p_report_name VARCHAR2)
  RETURN NUMBER;
/**
* Sends email notifictaion for the alerts to the users to be notified. <br/>
* @param i_pf_id Process instance id
* @param i_metric_id  Metric id
* @param i_feed_data_id Feed data id
* @param o_error_code Error code
* @param o_error_message Error message
* @throws NO_DATA_FOUND If no notification mails to be sent
* @throes OTHERS if some other error is encounterd
*/
PROCEDURE email_notify_users
  (
    i_pf_id        IN NUMBER,
    i_metric_id    IN NUMBER,
    i_feed_data_id IN NUMBER,
    o_error_code OUT NOCOPY    NUMBER,
    o_error_message OUT NOCOPY VARCHAR2);
/**
* Gets the aggregate statistics count. <br/>
* @param i_server_url server URL
* @param i_source_type  channel source type
* @param i_input_mod   alert processing status
* @return return number, <b>Number of aggregated alerts</b> <br/>
*/
FUNCTION Get_Aggr_Stats_Count
  (
    i_server_url  VARCHAR2,
    i_source_type VARCHAR2,
    i_input_mode  CHAR)
  RETURN NUMBER;
/**
* Gets the number of subscription for a channel. <br/>
* @param P_Channel_Id channel id
* @return  <b>Number of subscription for the channel</b> <br/>
*           <b>0 in case of unsuccessful termination</b> <br/>
*/
FUNCTION Fn_No_Of_Subscriptions
  (
    P_CHANNEL_ID IN VARCHAR2)
  RETURN NUMBER;
/**
* Gets the issue type displayed value. <br/>
* @param in_val issue type stored value.
* @return return varchhar2, <b>issue type displayed value</b> <br/>
*/
FUNCTION get_ism_issue_type
         (in_val IN VARCHAR2)
return VARCHAR2 RESULT_CACHE;
/**
* Gets the organization name . <br/>
* @param in_val Organization entity id
* @return return varchar2, <b>Organization name</b> <br/>
*/
  
FUNCTION get_app_own_name
         (in_val varchar2)
return VARCHAR2 RESULT_CACHE;
-- no commentss
FUNCTION diff_mlov_filt_comma_str (
      ip_main_string   IN   VARCHAR2,
      lv_query_list    IN   varchar2_array
   )
      RETURN NUMBER;
/**
* Generates feed sequence id. <br/>
* @return<b>Feed sequence number</b> <br/>
*/
Function generate_sequence return number;
/**
* returns the parameter value for the given parameter type and parameter name for the Org. <br/>
* @param i_org_entity_id organization entity id
* @param i_parameter_type parameter type
* @param i_parameter_name parameeter name
* @throws NO_DATA_FOUND when parameter value not found for the type and name
* @throws OTHERS when any other error encountered
* @return <b>Parameter value</b> <br/>
*/
  FUNCTION get_parameter_value (
      i_org_entity_id    IN   NUMBER,
      i_parameter_type   IN   VARCHAR2,
      i_parameter_name   IN   VARCHAR2
   )
      RETURN VARCHAR2 RESULT_CACHE ;
/**
* generates url for editing report output data by invoking notify users form . <br/>
* @param i_login_id login user id
* @param i_feed_Data_id  feed dats id
* @param i_Received_On   recieved on
* @param i_channnel_id channel id
* @return  <b>complete URL editing report output data by invoking notify users form</b> <br/>
*/
  FUNCTION GET_URL_NOTIFY_USERS_FORM (
                               -- I_SUBS_RESP_ID        IN VARCHAR2,
                                i_LOGIN_ID            IN VARCHAR2,
                                I_FEED_DATA_ID        IN VARCHAR2,
                                i_Received_On         In varchar2,
                                I_CHANNEL_ID          IN VARCHAR2)
    RETURN VARCHAR2;
/**
* generates URL for editing report output data by invoking log issue form . <br/>
* @param i_login_id login user id
* @param i_feed_Data_id   feed dats id
* @param i_Received_On   recieved on
* @param i_channnel_id  channel id
* @return  <b>complete URL editing report output data by invoking log issue form</b> <br/>
*/   
    FUNCTION GET_URL_LOG_ISSUE_FORM (
                              --i_Subs_Resp_Id        In Varchar2,
                              i_LOGIN_ID            IN VARCHAR2,
                              i_Feed_Data_Id        In varchar2,
                              i_Received_On         In varchar2,
                              I_CHANNEL_ID          IN VARCHAR2)
    RETURN VARCHAR2;
/**
* generates URL for editing report output data by invoking ORB form . <br/>
* @param i_login_id login user id
* @param i_feed_Data_id  feed dats id
* @param i_Received_On   recieved on
* @param i_channnel_id channel id
* @return <b>complete URL editing report output data by invoking ORB form</b> <br/>
*/   
      FUNCTION GET_URL_ORB_FORM (
                              --i_Subs_Resp_Id        In Varchar2,
                              i_LOGIN_ID            IN VARCHAR2,
                              i_Feed_Data_Id        In Varchar2,
                              i_Received_On         In Varchar2,
                              I_CHANNEL_ID          IN VARCHAR2)
    RETURN VARCHAR2;
/**
* generates url for editing report output data by invoking EMAIL CONTENT form . <br/>
* @param i_feed_Data_id  feed dats id
* @return  <b>complete URL editing report output data by invoking EMAIL CONTENT form</b> <br/>
*/  
    FUNCTION Get_Url_Email_Content_form(
                                       I_FEED_DATA_ID        IN NUMBER)
    RETURN VARCHAR2;

-- Generates the url for form call 
    FUNCTION GET_CALL_FORM_LINK(
                                I_PARAM1 IN VARCHAR2,
                                I_PARAM2 IN VARCHAR2,
                                I_PARAM3 IN VARCHAR2,
                                I_PARAM4 IN VARCHAR2,
                                I_PARAM5 IN VARCHAR2,
                                I_ICON   IN VARCHAR2,
                                i_ICON_TITLE IN VARCHAR2
                                )
    RETURN VARCHAR2;

-- genrates the url for alert action   
    FUNCTION GET_ALERT_ACTIONS_LINK(
                                I_PARAM1 IN VARCHAR2,
                                I_PARAM2 IN VARCHAR2,
                                I_PARAM3 IN VARCHAR2,
                                I_PARAM4 IN VARCHAR2
                                )
     RETURN VARCHAR2;                           
-- no comments
       
     FUNCTION ALERT_ORB_COUNT_FOR_FLT(
                                      I_FILTER_TYPE IN VARCHAR2,
                                      I_FEED_DATA_ID IN VARCHAR2,
                                      I_PARAM_VAL IN VARCHAR2)
    RETURN NUMBER; 
/**
* checks is the alert body/subjects match the keyword filter . <br/>
* @param i_body alert body
* @param i_subject alert subject
* @param i_filter_key  filter keywords
* @return <b>true, if the alert matches the keyword, or there is no filter keyword</b> <br/>
*         <b>false, if the KEYWORD filter FAILS</b> <br/>
*/    
    FUNCTION FN_MATCH_KEYWORD (
                                  I_BODY  IN  CLOB,
                                  I_SUBJECT IN  VARCHAR2,
                                  I_FILTER_KEY  IN VARCHAR2
                                  )
    RETURN VARCHAR2;
        
/**
* generates URL for editing report output data by invoking Manage Alerts . <br/>
* @param i_login_id login user id
* @param i_feed_Data_id  feed dats id
* @param i_Received_On   recieved on
* @param i_channnel_id channel id
* @return <b>complete URL editing report output data by invoking Manage Alerts</b> <br/>
*/ 

FUNCTION Get_Url_Manage_Alerts(
                              --i_Subs_Resp_Id        In Varchar2,
                              i_LOGIN_ID            In Varchar2,
                              i_Feed_Data_Id        In Varchar2,
                              i_Received_On         In Varchar2,
                              I_CHANNEL_ID          IN VARCHAR2)
    RETURN VARCHAR2; 

/**
* takes care of the form security  . <br/>
* @param ip_pushform_id pushform_id 
* @param ip_process_instance_id  process_instance_id 
* @param ip_user_name   user_name-
* @return <b>number 2 VIEW MODE -- 1 EDIT MODE -- 0 RESTRICT</b> <br/>
*/
    FUNCTION CHECK_FORM_ACCESS
        (
            ip_pushform_id                         IN            NUMBER,
            ip_process_instance_id                 IN            NUMBER,
            ip_user_name                           IN            VARCHAR2
        )
    RETURN NUMBER;
/**
* Returns the issue rating  . <br/>
* @param IP_ISSUE_RATING_GRCI issue rating in number
* @return <b>ISSUE RATING IN TEXT</b> <br/>
*/
    FUNCTION GET_ISSUE_RATING
        (
            IP_ISSUE_RATING_GRCI                 IN            VARCHAR2
        )
    RETURN VARCHAR2 RESULT_CACHE;
    
-------------------------------------------------------------------------------
-- Name: get_form_name
-- Desc: Returns name of the form
-------------------------------------------------------------------------------
FUNCTION GET_FORM_NAME(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    PN_ID         NUMBER )
  RETURN VARCHAR2;
  
  -------------------------------------------------------------------------------
-- Name: get_objectname
-- Desc: Returns name of the object
-------------------------------------------------------------------------------
FUNCTION GET_OBJECT_NAME(
    PC_FLOW_CODE  VARCHAR2)
  RETURN VARCHAR2;
  
FUNCTION objectName_substr_for_assgnmnt(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    PN_ID         NUMBER )
  return varchar2;  
  
  /**
* Gets subscription setting for the subscription. <br/>
* @param i_status status
* @param i_user_id user id
* @return <b>yes, if subscribe</b> <br/>
*         <b>no, if not subscribed</b> <br/>
*/
FUNCTION fn_subscription_status
  (
    i_status VARCHAR,
    i_user_id IN NUMBER)
  RETURN VARCHAR2;

END ms_rga_utilities; ]]></TEXT>
<TEXT_BODY><![CDATA[PACKAGE BODY ms_rga_utilities As
/**
* ======================================================================<br/>
* Project: GRC Intelligence<br/>
* Description: Utility package used for RGA related APIs <br/>
* DB impact: YES<br/>
* Commit inside: YES<br/>
* Rollback inside: NO<br/>
* ----------------------------------------------------------------------<br/>
* * ======================================================================<br/>
* @headcom
* */
--
-- package-level variables
  g_Running_Log_Nmbr Number;
  
/**
* Gets the organization name . <br/>
* @param in_val Organization entity id
* @return return VARCHAR2, <b>Organization name</b> <br/>
*/
  
  FUNCTION get_app_own_name(in_val varchar2) return VARCHAR2 RESULT_CACHE
  IS
     ln_var1 VARCHAR2(1000);
     ln_var2 VARCHAR2(1000);
     ln_var3 number(10);

  BEGIN
       ln_var2 := TRIM(in_val);

       SELECT ORG_ENTITY_NAME INTO ln_var1 FROM SI_ORG_ENTITIES_T
       WHERE ORG_ENTITY_ID = ln_var2
       AND ENTERPRISE_ID IN (SELECT ENTERPRISE_ID FROM SI_ENT);

  RETURN ln_var1;

  END get_app_own_name;
  
/**
* Gets the iSSUE type displayed value. <br/>
* @param in_val iSSUE type stored value.
* @return return VARCHAR2, <b>iSSUE type displayed value</b> <br/>
*/

  FUNCTION get_ism_issue_type(in_val varchar2)
           return VARCHAR2 RESULT_CACHE
  IS
       ln_var1 VARCHAR2(1000);
       ln_var2 VARCHAR2(1000);
       ln_var3 number(10);

  BEGIN
       ln_var2 := TRIM(in_val);

       SELECT T.DISPLAYED_VALUE INTO ln_var1  FROM MS_QS_LIST_OF_VALUES T
       WHERE T.LOV_ID IN (SELECT LOV_ID FROM MS_QS_LOV_NAMES
                          WHERE LOV_NAME = 'MS RGA List of Issue Types' AND LOCALE_ID = 1009)
       AND T.STORED_VALUE =  ln_var2;

       RETURN ln_var1;
   END get_ism_issue_type;
/**
* Gets selected URL unchecked for REVIEW/FOLLOWUP status in My Alert Report. <br/>
* @param i_type Review/FOLLOWUP flag (R/F)
* @param i_string  Feed data id
* @param i_rowno   Feed data id
* @return return VARCHAR2, <b>complete URL of the unchecked alert</b> <br/>
*/

  FUNCTION get_select_url_unchecked(i_type   IN VARCHAR2,
                                    i_string IN VARCHAR2,
                                    i_rowno  IN VARCHAR2
                                    
                                    ) RETURN VARCHAR2 IS
    x_url VARCHAR2(2000);
  BEGIN
  
    IF i_type = 'R' THEN
      x_url := '<input id="CHK_' || i_type || '_' || i_string ||
               '" type="checkbox" name="reviewedChk" unchecked value=' || '"' ||
               i_rowno || '"' ||
               ' onClick="javascript:populateReviewed(this)">';
    
    ELSE
    
      x_url := '<input id="CHK_' || i_type || '_' || i_string ||
               '" type="checkbox" name="followedChk" unchecked value=' || '"' ||
               i_rowno || '"' ||
               ' onClick="javascript:populateFollowup(this)">';
    
    END IF;
  
    RETURN x_url;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END get_select_url_unchecked;

/**
* Gets the aggregate statistics count. <br/>
* @param i_server_url server URL
* @param i_source_type  channel source type
* @param i_input_mod   alert processing status
* @return return number, <b>Number of aggregated alerts</b> <br/>
* @throws
*/

  Function Get_Aggr_Stats_Count(i_server_url  varchar2,
                                i_source_type varchar2,
                                i_input_mode  char) Return Number is
  
    v_total_new_alerts_recieved   Number := 0;
    v_total_new_alerts_accepted   Number := 0;
    v_tot_new_alerts_not_accepted Number := 0;
  
  begin
/**    Find the new records inserted in the aggregator stats for each server/source_type
          combination
    
    1. Ensure that MS_RGA_GRCI_LOG Infolet is run so that it will load the new logged
    information in aggr_stats.csv file into the DB

    Find the latest entries in log table by comparing the
    max(instance_id) with 2nd max(instance_id)    */ 
    
    if (i_source_type = 'RSS')
     Then
    
      select acceptd,
             (updates - acceptd - rejectd),
             acceptd - (updates - acceptd - rejectd)
        into v_total_new_alerts_recieved,
             v_tot_new_alerts_not_accepted,
             v_total_new_alerts_accepted
        from ms_rga_log_summary_v t00
       where (t00.process_instance_id, t00.instance_id) in
             (select max(t1.process_instance_id), max(t1.instance_id)
                from ms_rga_log_summary_v t1)
         and not exists
       (select instance_rec_num
                from ms_rga_log_summary_v t
               where (t.process_instance_id, t.instance_id) in
                     (select max(t1.process_instance_id), max(t1.instance_id)
                        from ms_rga_log_summary_v t1
                       where (t1.process_instance_id, t1.instance_id) not in
                             (select max(t2.process_instance_id),
                                     max(t2.instance_id)
                                from ms_rga_log_summary_v t2))
                 and t00.instance_rec_num = t.instance_rec_num)
         and t00.TYPE = 'RSS'
         and t00.SERVER = i_server_url;
    
    ELSIF (i_source_type = 'EMAIL')
     THEN
    
      select acceptd,
             (updates - acceptd - rejectd),
             acceptd - (updates - acceptd - rejectd)
        into v_total_new_alerts_recieved,
             v_tot_new_alerts_not_accepted,
             v_total_new_alerts_accepted
        from ms_rga_log_summary_v t00, ms_rga_channel_dtls_src t01
       where (t00.process_instance_id, t00.instance_id) in
             (select max(t1.process_instance_id), max(t1.instance_id)
                from ms_rga_log_summary_v t1)
         and not exists
       (select instance_rec_num
                from ms_rga_log_summary_v t
               where (t.process_instance_id, t.instance_id) in
                     (select max(t1.process_instance_id), max(t1.instance_id)
                        from ms_rga_log_summary_v t1
                       where (t1.process_instance_id, t1.instance_id) not in
                             (select max(t2.process_instance_id),
                                     max(t2.instance_id)
                                from ms_rga_log_summary_v t2))
                 and t00.instance_rec_num = t.instance_rec_num)
         and t00.SERVER = i_server_url
         and t00.TYPE = 'EMAIL'
         and nvl(Lower(Substr(channel_username,
                              Instr(channel_username, '<', 1, 1) + 1,
                              (Instr(channel_username,
                                     '@',
                                     Instr(channel_username, '<', 1, 1) + 1,
                                     1) -
                              (Instr(channel_username, '<', 1, 1) + 1)))),
                 Lower(channel_username)) =
             substr(t00.server, 1, Instr(server, '@') - 1)
         and t01.server_address =
             substr(t00.server, Instr(server, '@') + 1);
    End if;
  
    if (i_input_mode = 'A') Then
      Return v_total_new_alerts_recieved;
    elsif (i_input_mode = 'N') Then
      Return v_tot_new_alerts_not_accepted;
    elsif (i_input_mode = 'R') Then
      Return v_total_new_alerts_accepted;
    end if;
  
  exception
    when others then
      Return 0;
      
    
  end;




  Function Fn_No_Of_Subscriptions(P_CHANNEL_ID In Varchar2) Return Number Is
    v_subscription_count Number;
  Begin
  
    select count(1)
      into v_subscription_count
      from ms_rga_subs_channel_chn t
     where t.channel_name = P_CHANNEL_ID;
  
    Return v_subscription_count;
  
  Exception
    When Others Then
      Return 0;
  End Fn_No_Of_Subscriptions;


  FUNCTION get_select_url_checked(i_type   IN VARCHAR2,
                                  i_string IN VARCHAR2,
                                  i_rowno  IN VARCHAR2
                                  
                                  ) RETURN VARCHAR2 IS
    x_url VARCHAR2(2000);
  BEGIN
  
    IF i_type = 'R' THEN
      x_url := '<input id="CHK_' || i_type || '_' || HTF.escape_sc(i_string) ||
               '" type="checkbox" name="reviewedChk" checked value=' || '"' ||
               i_rowno || '"' ||
               ' onClick="javascript:populateReviewed(this)">';
    
    ELSE
    
      x_url := '<input id="CHK_' || i_type || '_' || HTF.escape_sc(i_string) ||
               '" type="checkbox" name="followedChk" checked value=' || '"' ||
               i_rowno || '"' ||
               ' onClick="javascript:populateFollowup(this)">';
    
    END IF;
  
    RETURN x_url;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END get_select_url_checked;
  
  

 /* 
  FUNCTION get_edit_url(i_metric_id           IN NUMBER,
                        i_process_instance_id IN NUMBER,
                        i_hyper_text          IN VARCHAR2 DEFAULT NULL)
    RETURN VARCHAR2 IS
    x_url VARCHAR2(1000);
  BEGIN
    --This generates URL for editing report output data.
    IF (i_hyper_text IS NULL) THEN
      x_url := '<a target="_self" href="javascript:callreportdetails(''Pushinfolet?id=' ||
               i_metric_id || CHR(38) || 'proc=' || i_process_instance_id ||
               CHR(38) || 'flag=1' || CHR(38) || 'emd=1' || CHR(38) ||
               'wrapper=no'')"><img border="0" src="/si_image/new_pencil.gif"></a>';
    ELSE
      x_url := '<a target="_self" href="javascript:callreportdetails(''Pushinfolet?id=' ||
               i_metric_id || CHR(38) || 'proc=' || i_process_instance_id ||
               CHR(38) || 'flag=1' || CHR(38) || 'emd=1' || CHR(38) ||
               'wrapper=no'')">' || HTF.escape_sc(i_hyper_text) || '</a>';
    END IF;
  
    RETURN x_url;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END get_edit_url;

*/

  FUNCTION get_channel_name(i_channel_id IN VARCHAR2) RETURN VARCHAR2 AS
    x_channel_name VARCHAR2(4000);
  BEGIN
    SELECT distinct channel_name
      INTO x_channel_name
      FROM ms_rga_channel_master a
     WHERE a.channel_id = i_channel_id;
  
    RETURN x_channel_name;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  procedure send_email_infolet_inv_status(INFOLET_INVOKED           IN NUMBER,
                                          INFOLET_INVOCATION_STATUS IN VARCHAR2,
                                          INSTANCE_ID               IN NUMBER,
                                          PROCESS_INSTANCE_ID       IN NUMBER,
                                          CHANNEL_ID                IN VARCHAR2,
                                          CREATION_DATE             IN DATE,
                                          LAST_UPDATED_DATE         IN DATE,
                                          SUBJECT                   IN VARCHAR2,
                                          RECIPIENT                 IN VARCHAR2,
                                          SENDER                    IN VARCHAR2,
                                          SERVER                    IN VARCHAR2,
                                          ERROR_CODE                OUT VARCHAR2,
                                          ERROR_DESC                OUT VARCHAR2)  is
  begin
    ERROR_CODE := 0;
    ERROR_DESC := 'SUCCESS';
  
    insert into ms_rga_infolet_invocation_dtls
      (INFOLET_INVOKED,
       INFOLET_INVOCATION_STATUS,
       INSTANCE_ID,
       PROCESS_INSTANCE_ID,
       CHANNEL_ID,
       CREATION_DATE,
       LAST_UPDATED_DATE,
       SUBJECT,
       RECIPIENT,
       SENDER,
       SERVER)
    values
      (INFOLET_INVOKED,
       INFOLET_INVOCATION_STATUS,
       INSTANCE_ID,
       PROCESS_INSTANCE_ID,
       CHANNEL_ID,
       CREATION_DATE,
       LAST_UPDATED_DATE,
       SUBJECT,
       RECIPIENT,
       SENDER,
       SERVER);
  
    commit;
  
    if (INSTANCE_ID > 0) then
    
      ms_rga_utilities.email_infolet_inv_status(i_instance_id   => INSTANCE_ID,
                                                o_error_message => ERROR_DESC);
    
    elsif (CHANNEL_ID is not null and SERVER is not null) then
    
      ms_rga_utilities.email_infolet_inv_failure(i_channel_id    => CHANNEL_ID,
                                                 i_server        => server,
                                                 o_error_message => ERROR_DESC);
    else
      ERROR_DESC := 'NO INSTANCE_ID or CHANNEL_ID found to proceed further, hence returning';
    end if;
  
  exception
    when others then
      ERROR_CODE := SQLCODE;
      ERROR_DESC := SQLERRM;
      dbms_output.put_line('Error Encountered with ERROR_CODE' ||
                           ERROR_CODE || ' and ERROR_DESCRIPTION as ' ||
                           ERROR_DESC);
  end;






  PROCEDURE email_infolet_inv_status(i_instance_id   IN NUMBER,
                                     o_error_message OUT NOCOPY VARCHAR2) IS
    x_recipients                varchar2_array := varchar2_array();
    x_param_names               varchar2_array := varchar2_array();
    x_param_values              clob_array := clob_array();
    x_notify_users_successful   VARCHAR2(2000);
    x_notify_users_unsuccessful VARCHAR2(2000);
    x_stmt_number               PLS_INTEGER;
    x_error_code                PLS_INTEGER;
    x_error_message             VARCHAR2(1000);
    x_subject                   clob;
    x_subject_body              clob;
    x_attachment                varchar2(4000) := 'FAILED PARSING';
    x_infolet_name              VARCHAR2(4000) := 'FAILED PARSING';
    x_infolet_inv_status        VARCHAR2(4000) := 'FAILED PARSING';
    x_channel_name              VARCHAR2(4000) := 'FAILED PARSING';
    x_metric_id                 VARCHAR2(4000) := 'FAILED PARSING';
    x_email_note                si_messages_t.MESSAGE_TEXT%TYPE;
    x_boiler_plate              si_messages_t.MESSAGE_TEXT%TYPE;
    x_copyright                 si_messages_t.MESSAGE_TEXT%TYPE;
    x_feed_subject              CLOB := 'FAILED PARSING';
    x_feed_processed_date       DATE;
    send_email_excp EXCEPTION;
    x           NUMBER := 0;
    x_user_name varchar2(4000) := 'FAILED PARSING';
    x_sender    varchar2(4000) := 'FAILED PARSING';
    x_recipient varchar2(4000) := 'FAILED PARSING';
    x_server    varchar2(4000) := 'FAILED PARSING';
  
  BEGIN
    x_stmt_number   := 1;
    o_error_message := 'SUCCESS';
  
    BEGIN
      SELECT t1.NOTIFY_USERS_SUCCESSFUL,
             t1.NOTIFY_USERS_UNSUCCESSFUL,
             ms_apps_utilities.get_user_full_name(t1.dd_event_user_name),
             (select metric_name
                from si_metrics_t
               where metric_id = t1.STRUCT_CONT_HAND_INFOLET),
             t1.CHANNEL_NAME,
             t.infolet_invocation_status,
             t1.METRIC_ID,
             t.subject,
             t.last_updated_date,
             t.sender,
             t.server,
             t.recipient
      
        INTO x_notify_users_successful,
             x_notify_users_unsuccessful,
             x_user_name,
             x_infolet_name,
             x_channel_name,
             x_infolet_inv_status,
             x_metric_id,
             x_feed_subject,
             x_feed_processed_date,
             x_sender,
             x_server,
             x_recipient
        FROM MS_RGA_INFOLET_INVOCATION_DTLS t, MS_RGA_CHANNEL_DTLS_V t1
       WHERE t.instance_id = i_instance_id
         and t1.OBJECT_ID = t.channel_id
         and rownum = 1
         and (t1.PROCESS_INSTANCE_ID, t1.INSTANCE_ID) in
             (select max(process_instance_id), max(instance_id)
                from MS_RGA_CHANNEL_DTLS_V tu
               where tu.OBJECT_ID = t.channel_id);
    
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        x_error_message := SQLERRM;
        o_error_message := 'Error in Procedure email_notify_users and statement number' ||
                           x_stmt_number || ' Error Msg is ' ||
                           x_error_message;
    END;
  
    x_stmt_number := 2;
  
    BEGIN
    
      if (upper(x_infolet_inv_status) like '%SUCCESS%') then
        x_subject      := 'Content Processing - Successful';
        x_subject_body := 'A new content has been successfully processed.';
      
      else
        x_subject      := 'Content Processing - Unsuccessful';
        x_subject_body := 'A new feed could not be processed successfully.';
      end if;
    
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        o_error_message := 'Error in Procedure email_notify_users and statement number' ||
                           x_stmt_number || ' Error Msg is ' ||
                           x_error_message;
    END;
  
    x_stmt_number := 3;
  
    x_email_note   := 'THIS IS A SYSTEM GENERATED EMAIL. PLEASE DO NOT REPLY. '; --'Note : This message and all attachments should be considered confidential and proprietary to Quality Stream.';
    x_boiler_plate := 'Alert automatically generated by MetricStream.';
    x_copyright    := 'Copyright @ MetricStream Inc. 1999-2013 All rights reserved.';
  
    x_stmt_number := 4;
  
    x_param_names.EXTEND(15);
    /* Set the email subject and set up the parameter names array */
    x_param_names(1) := 'USER_FULL_NAME';
    x_param_names(2) := 'EMAIL_NOTE';
    x_param_names(3) := 'BOILERPLATE_TEXT';
    x_param_names(4) := 'COPYRIGHT_INFORMATION';
    x_param_names(5) := 'SUBJECT_HEADER';
    x_param_names(6) := 'SUBJECT_BODY';
    x_param_names(7) := 'PROC_INSTANCE_ID';
    x_param_names(8) := 'PUSH_INFO_ID';
    x_param_names(9) := 'ATTACH_FILE';
    x_param_names(10) := 'FEED_SUBJECT';
    x_param_names(11) := 'FEED_PROCESSED_DATE';
    x_param_names(12) := 'FEED_CHANNEL_NAME';
    x_param_names(13) := 'SENDER';
    x_param_names(14) := 'SERVER';
    x_param_names(15) := 'RECIPIENT';
  
    x_stmt_number := 40;
  
    x_param_values.EXTEND(15);
    /*Assign the values into the parameter values array*/
    x_param_values(1) := x_user_name;
    x_param_values(2) := x_email_note;
    x_param_values(3) := x_boiler_plate;
    x_param_values(4) := x_copyright;
    x_param_values(5) := x_subject;
    x_param_values(6) := x_subject_body;
    x_param_values(7) := TO_CHAR(i_instance_id);
    x_param_values(8) := TO_CHAR(x_metric_id); --(x_infolet_id);
    x_param_values(9) := x_attachment;
    x_param_values(10) := x_feed_subject;
    x_param_values(11) := to_char(x_feed_processed_date);
    x_param_values(12) := x_channel_name;
    x_param_values(13) := x_sender;
    x_param_values(14) := x_server;
    x_param_values(15) := x_recipient;
  
    x_stmt_number := 45;
  
    IF x_error_code <> ms_rga_utilities.g_success_code THEN
      RAISE send_email_excp;
    END IF;
  
    -- o_error_message := ms_rga_utilities.g_success_mesg;
  
    x_stmt_number := 46;
  
    if (upper(x_infolet_inv_status) not like '%SUCCESS%') then
    
      begin
      
        if (x_notify_users_unsuccessful is not null) then
          FOR i IN (SELECT COLUMN_VALUE AS user_id
                      FROM TABLE(CAST((SELECT ms_apps_utilities.parse_string(x_notify_users_unsuccessful,
                                                                             ',')
                                         FROM DUAL) AS ms_varchar2_array))
                     WHERE COLUMN_VALUE IS NOT NULL) LOOP
            x_recipients.EXTEND;
            x := x + 1;
            x_recipients(x) := i.user_id;
          
          END LOOP;
        
        end if;
      
      exception
        WHEN OTHERS THEN
          o_error_message := 'Error in Procedure email_notify_users and statement number' ||
                             x_stmt_number || ' Error Msg is ' ||
                             x_error_message;
      end;
    
    end if;
  
    if (x_notify_users_successful is not null and
       upper(x_infolet_inv_status) like '%SUCCESS%') then
    
      FOR i IN (SELECT COLUMN_VALUE AS user_id
                  FROM TABLE(CAST((SELECT ms_apps_utilities.parse_string(x_notify_users_successful,
                                                                         ',')
                                     FROM DUAL) AS ms_varchar2_array))) LOOP
        x_recipients.EXTEND;
        x := x + 1;
        x_recipients(x) := i.user_id; --ms_apps_utilities.get_user_name(i.user_id);
      END LOOP;
    
    end if;
  
    if (x_recipients.count > 0) then
      ms_rga_utilities.send_email_individually(1,
                                               x_recipients,
                                               100000,
                                               x_subject,
                                               ms_rga_utilities.g_Email_Channel_Template,
                                               x_param_names,
                                               x_param_values,
                                               x_error_code,
                                               x_error_message);
    end if;
    commit;
  EXCEPTION
    WHEN send_email_excp THEN
      o_error_message := 'Error in Procedure notify_users and statement number' ||
                         x_stmt_number || ' Error Msg is ' ||
                         x_error_message;
    WHEN OTHERS THEN
      o_error_message := 'Error Occurred in notify_users at stmt number 3' ||
                         x_stmt_number || '. Error Message: ' ||
                         SUBSTR(SQLERRM, 1, 250);
  END email_infolet_inv_status;






  PROCEDURE email_infolet_inv_failure(i_channel_id    IN VARCHAR2,
                                      o_error_message OUT NOCOPY VARCHAR2,
                                      i_server        IN VARCHAR2) IS
  
    x_recipients                varchar2_array := varchar2_array();
    x_param_names               varchar2_array := varchar2_array();
    x_param_values              clob_array := clob_array();
    x_notify_users_successful   VARCHAR2(2000);
    x_notify_users_unsuccessful VARCHAR2(2000);
    x_stmt_number               PLS_INTEGER;
    x_error_code                PLS_INTEGER;
    x_error_message             VARCHAR2(1000);
    x_subject                   clob;
    x_subject_body              clob;
    x_attachment                varchar2(4000) := 'FAILED PARSING';
    x_infolet_name              VARCHAR2(4000) := 'FAILED PARSING';
    x_infolet_inv_status        VARCHAR2(4000) := 'FAILED PARSING';
    x_channel_name              VARCHAR2(4000) := 'FAILED PARSING';
    x_metric_id                 VARCHAR2(4000) := 'FAILED PARSING';
    x_email_note                si_messages_t.MESSAGE_TEXT%TYPE;
    x_boiler_plate              si_messages_t.MESSAGE_TEXT%TYPE;
    x_copyright                 si_messages_t.MESSAGE_TEXT%TYPE;
    x_feed_subject              CLOB := 'FAILED PARSING';
    x_feed_processed_date       DATE;
    send_email_excp EXCEPTION;
    x           NUMBER := 0;
    x_user_name varchar2(4000) := 'FAILED PARSING';
    x_sender    varchar2(4000) := 'FAILED PARSING';
    x_recipient varchar2(4000) := 'FAILED PARSING';
    x_server    varchar2(4000) := 'FAILED PARSING';
  
  BEGIN
    x_stmt_number   := 1;
    o_error_message := 'SUCCESS';
  
    BEGIN
      SELECT t1.NOTIFY_USERS_SUCCESSFUL,
             t1.NOTIFY_USERS_UNSUCCESSFUL,
             ms_apps_utilities.get_user_full_name(t1.dd_event_user_name),
             (select metric_name
                from si_metrics_t
               where metric_id = t1.STRUCT_CONT_HAND_INFOLET),
             t1.CHANNEL_NAME,
             'FAILURE',
             t1.METRIC_ID,
             t.subject,
             sysdate,
             t.sender,
             t.server,
             t.recipient
      
        INTO x_notify_users_successful,
             x_notify_users_unsuccessful,
             x_user_name,
             x_infolet_name,
             x_channel_name,
             x_infolet_inv_status,
             x_metric_id,
             x_feed_subject,
             x_feed_processed_date,
             x_sender,
             x_server,
             x_recipient
        FROM MS_RGA_INFOLET_INVOCATION_DTLS t, MS_RGA_CHANNEL_DTLS_V t1
       WHERE t1.OBJECT_ID(+) = t.channel_id
         and t.channel_id = i_channel_id
         and rownum = 1
         and t1.SERVER_ADDRESS = t.server
         and (t1.PROCESS_INSTANCE_ID, t1.INSTANCE_ID) in
             (select max(process_instance_id), max(instance_id)
                from MS_RGA_CHANNEL_DTLS_V tu
               where tu.OBJECT_ID = t.channel_id
                 and tu.SERVER_ADDRESS = i_server);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        o_error_message := 'Error in Procedure email_notify_users and statement number' ||
                           x_stmt_number || ' Error Msg is ' ||
                           x_error_message;
    END;
  
    x_stmt_number  := 2;
    x_subject      := 'Content Processing - Unsuccessful';
    x_subject_body := 'A new feed could not be processed successfully.';
    x_stmt_number  := 3;
    x_email_note   := 'THIS IS A SYSTEM GENERATED EMAIL. PLEASE DO NOT REPLY.'; --'Note : This message and all attachments should be considered confidential and proprietary to Quality Stream.';
    x_boiler_plate := 'Alert automatically generated by MetricStream.';
    x_copyright    := 'Copyright @ MetricStream Inc. 1999-2013 All rights reserved.';
  
    x_stmt_number := 4;
  
    /* Set the email subject and set up the parameter names array */
    x_param_names.EXTEND(15);
    /* Set the email subject and set up the parameter names array */
    x_param_names(1) := 'USER_FULL_NAME';
    x_param_names(2) := 'EMAIL_NOTE';
    x_param_names(3) := 'BOILERPLATE_TEXT';
    x_param_names(4) := 'COPYRIGHT_INFORMATION';
    x_param_names(5) := 'SUBJECT_HEADER';
    x_param_names(6) := 'SUBJECT_BODY';
    x_param_names(7) := 'PROC_INSTANCE_ID';
    x_param_names(8) := 'PUSH_INFO_ID';
    x_param_names(9) := 'ATTACH_FILE';
    x_param_names(10) := 'FEED_SUBJECT';
    x_param_names(11) := 'FEED_PROCESSED_DATE';
    x_param_names(12) := 'FEED_CHANNEL_NAME';
    x_param_names(13) := 'SENDER';
    x_param_names(14) := 'SERVER';
    x_param_names(15) := 'RECIPIENT';
    x_stmt_number := 40;
  
    x_param_values.EXTEND(15);
    /*Assign the values into the parameter values array*/
    x_param_values(1) := x_user_name;
    x_param_values(2) := x_email_note;
    x_param_values(3) := x_boiler_plate;
    x_param_values(4) := x_copyright;
    x_param_values(5) := x_subject;
    x_param_values(6) := x_subject_body;
    x_param_values(7) := '100000';
    x_param_values(8) := TO_CHAR(x_metric_id); --(x_infolet_id);
    x_param_values(9) := x_attachment;
    x_param_values(10) := x_feed_subject;
    x_param_values(11) := to_char(x_feed_processed_date);
    x_param_values(12) := x_channel_name;
    x_param_values(13) := x_sender;
    x_param_values(14) := x_server;
    x_param_values(15) := x_recipient;
    x_stmt_number := 45;
  
    IF x_error_code <> ms_rga_utilities.g_success_code THEN
      RAISE send_email_excp;
    END IF;
  
    o_error_message := ms_rga_utilities.g_success_mesg;
  
    x_stmt_number := 46;
  
    if (upper(x_infolet_inv_status) not like '%SUCCESS%' and
       x_infolet_inv_status is not null) then
    
      begin
        if (x_notify_users_unsuccessful is not null) then
          FOR i IN (SELECT COLUMN_VALUE AS user_id
                      FROM TABLE(CAST((SELECT ms_apps_utilities.parse_string(x_notify_users_unsuccessful,
                                                                             ',')
                                         FROM DUAL) AS ms_varchar2_array))
                     WHERE COLUMN_VALUE IS NOT NULL) LOOP
            x_recipients.EXTEND;
            x := x + 1;
            x_recipients(x) := i.user_id;
          
          END LOOP;
        end if;
      
      exception
        WHEN OTHERS THEN
          o_error_message := 'Error in Procedure email_notify_users and statement number' ||
                             x_stmt_number || ' Error Msg is ' ||
                             x_error_message;
      end;
    
    end if;
  
    if (x_recipients.count > 0) then
      ms_rga_utilities.send_email_individually(1,
                                               x_recipients,
                                               100000,
                                               x_subject,
                                               ms_rga_utilities.g_Email_Chan_Failure_Template,
                                               x_param_names,
                                               x_param_values,
                                               x_error_code,
                                               x_error_message);
    end if;
    commit;
  EXCEPTION
    WHEN send_email_excp THEN
      o_error_message := 'Error in Procedure notify_users and statement number' ||
                         x_stmt_number || ' Error Msg is ' ||
                         x_error_message;
    WHEN OTHERS THEN
      o_error_message := 'Error Occurred in notify_users at stmt number 3' ||
                         x_stmt_number || '. Error Message: ' ||
                         SUBSTR(SQLERRM, 1, 250);
  END email_infolet_inv_failure;






  PROCEDURE send_email(x_priority   IN NUMBER, /* 3-Low, 2-Normal, 1-High */
                       x_recipients IN varchar2_array,
                       /* defined in create_tables.sql */
                       x_enterprise_id IN NUMBER,
                       x_subject       IN VARCHAR2,
                       x_template      IN VARCHAR2,
                       x_param_names   IN varchar2_array,
                       /* defined in create_tables.sql */
                       x_param_values IN clob_array,
                       /* defined in create_tables.sql */
                       x_error_code    IN OUT NUMBER,
                       x_error_message IN OUT VARCHAR2) IS
    x_stmt_number      PLS_INTEGER;
    x_recipients_count NUMBER := x_recipients.COUNT;
    x_params_count     NUMBER := x_param_names.COUNT;
    x_recipients_str   VARCHAR2(4000) := '';
    x_delim            VARCHAR2(1) := ',';
    x_message_id       NUMBER;
    x_action_id        NUMBER := -90; /* stored proc email */
    e_proc_exception EXCEPTION;
  BEGIN
    IF (x_recipients_count > 0) THEN
      FOR i IN 1 .. x_recipients_count LOOP
        x_recipients_str := x_recipients_str || x_recipients(i);
      
        IF (i < x_recipients_count) THEN
          x_recipients_str := x_recipients_str || x_delim;
        END IF;
      END LOOP;
    END IF;
  
    x_stmt_number := 10;
  
    SELECT si_email_queue_s.NEXTVAL INTO x_message_id FROM SYS.DUAL;
  
    x_stmt_number := 20;
  
    INSERT INTO si_email_queue
      (priority,
       creation_date,
       message_id,
       status_flag,
       failed_attempts,
       created_by,
       recipients,
       enterprise,
       subject,
       TEMPLATE,
       action_id,
       last_updated_by,
       last_update_date)
    VALUES
      (x_priority,
       SYSDATE,
       x_message_id,
       'W',
       0,
       -1,
       x_recipients_str,
       x_enterprise_id,
       x_subject,
       x_template,
       x_action_id,
       -1,
       SYSDATE);
  
    x_stmt_number := 30;
  
    FOR j IN 1 .. x_params_count LOOP
      INSERT INTO si_sp_email_info
        (message_id, param_sequence, param_name, param_value)
      VALUES
        (x_message_id, j, x_param_names(j), x_param_values(j));
    END LOOP;
  
    x_error_code    := g_success_code;
    x_error_message := g_Success_Mesg;
  EXCEPTION
    WHEN OTHERS THEN
      x_error_message := 'Error Occurred in MS_RGA_UTILITIES.SEND_EMAIL at stmt number ' ||
                         x_stmt_number || '. Error Message: ' ||
                         SUBSTR(SQLERRM, 1, 250);
      x_error_code    := SQLCODE;
  END send_email;





  PROCEDURE send_email_individually(x_priority   IN NUMBER, /* 3-Low, 2-Normal, 1-High */
                                    x_recipients IN varchar2_array,
                                    /* defined in create_tables.sql */
                                    x_enterprise_id IN NUMBER,
                                    x_subject       IN VARCHAR2,
                                    x_template      IN VARCHAR2,
                                    x_param_names   IN varchar2_array,
                                    /* defined in create_tables.sql */
                                    x_param_values IN OUT clob_array,
                                    /* defined in create_tables.sql */
                                    x_error_code    IN OUT NUMBER,
                                    x_error_message IN OUT VARCHAR2) IS
    x_stmt_number      PLS_INTEGER;
    x_recipients_count NUMBER := x_recipients.COUNT;
    x_params_count     NUMBER := x_param_names.COUNT;
    x_recipients_str   VARCHAR2(4000) := '';
    x_delim            VARCHAR2(1) := ',';
    x_message_id       NUMBER;
    x_action_id        NUMBER := -90; /* stored proc email */
    e_proc_exception EXCEPTION;
    X_User_Name Varchar2(4000);
  BEGIN
    FOR i in 1 .. x_recipients_count LOOP
    
      x_recipients_str := x_recipients(i);
    
      begin
        select first_name || ' ' || last_name
          into X_User_Name
          from si_users_t
         where user_name = x_recipients_str;
      exception
        when others then
          X_User_Name := 'User';
      end;
    
      x_param_values(1) := X_User_Name; --Changing the User Name x_param_names(1)='USER_FULL_NAME'
      SELECT si_email_queue_s.NEXTVAL INTO x_message_id FROM SYS.DUAL;
    
      INSERT INTO si_email_queue
        (priority,
         creation_date,
         message_id,
         status_flag,
         failed_attempts,
         created_by,
         recipients,
         enterprise,
         subject,
         TEMPLATE,
         action_id,
         last_updated_by,
         last_update_date)
      VALUES
        (x_priority,
         SYSDATE,
         x_message_id,
         'W',
         0,
         -1,
         x_recipients_str,
         x_enterprise_id,
         x_subject,
         x_template,
         x_action_id,
         -1,
         SYSDATE);
    
      FOR j IN 1 .. x_params_count LOOP
        INSERT INTO si_sp_email_info
          (message_id, param_sequence, param_name, param_value)
        VALUES
          (x_message_id, j, x_param_names(j), x_param_values(j));
      END LOOP;
    
    END LOOP;
  
    x_error_code    := g_success_code;
    x_error_message := g_Success_Mesg;
  EXCEPTION
    WHEN OTHERS THEN
      x_error_message := 'Error Occurred in MS_RGA_UTILITIES.SEND_EMAIL at stmt number ' ||
                         x_stmt_number || '. Error Message: ' ||
                         SUBSTR(SQLERRM, 1, 250);
      x_error_code    := SQLCODE;
  END send_email_individually;





  PROCEDURE pr_monitor_progress(i_Msg      In Varchar2,
                                i_Priority In Number Default g_ModuleDebugPriority,
                                i_Msg_Type In Varchar2 Default Ms_Apps_Utilities.g_stmt)
  
    --i_Rec_Key In Varchar2 Default Null)
   Is
    -- $If $$Debug_On $Then
    x_Action       VARCHAR2(4000) := NULL;
    x_Module       VARCHAR2(4000) := NULL;
    x_User         VARCHAR2(4000) := NULL;
    x_Program_Name Varchar2(4000) := NULL;
    x_Msg          VARCHAR2(4000) := NULL;
    x_Msg1          Varchar2(4000) := NULL;
    -- $end
  BEGIN
    --$If $$Debug_On $then
    x_Msg1 := 'M ==> '|| i_Msg;
    If i_Priority <= g_ModuleDebugPriority Then    
      g_Running_Log_Nmbr := 1 + g_Running_Log_Nmbr;
    
      Begin
        Select Upper(Sys_Context('USERENV', 'ACTION')) Action,
               Upper(Sys_Context('USERENV', 'MODULE')) Module,
               User
          Into x_Action, x_Module, x_User
          From Dual;
      Exception
        When Others Then
          x_Action := 'LOG';
      End;
    
      x_Program_Name := Substr(i_Msg, 1, Instr(i_Msg, '=> ', 1, 1) - 1);
    
      If x_Program_Name Is Null Then
        x_Program_Name := Substr(i_Msg, 1, 50);
      End If;
    
      x_Msg := Substr(i_Msg, Instr(i_Msg, '=> ', 1, 1) + 3);
 
      Ms_Apps_Utilities.Insert_Log(i_Message      => x_Msg,
                                   i_Module_Name  => x_Module,
                                   i_Program_Name => Substr(Nvl(x_Program_Name,
                                                                Ms_Rga_Utilities.g_Package_Name),
                                                            1,
                                                            80),
                                   i_Log_Type     => i_Msg_Type,
                                   i_Log_Key      => x_Action,
                                   i_Log_Sequence => g_Running_Log_Nmbr);

    ELSE
        NULL;
    
      -- Debug message should not be logged since priority of the message
      -- is lesser than the module's debug priority.
    --  Null;
    End If;
  
    --$else
    -- Null;
    -- $end
  EXCEPTION
    WHEN Others THEN
      x_msg := substr (sqlerrm, 1, 3500) || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      commit;
END pr_monitor_progress;


  FUNCTION Fn_Enrich_Keyword_List(i_keyword_list In Varchar2,
                                  i_delimiter    In Varchar2) RETURN VARCHAR2 IS
    x_proc_name             VARCHAR2(100) := 'Fn_Enrich_Keyword_List=> ';
    x_enriched_keyword_list VARCHAR2(4000) := NULL;
    x_input_string          VARCHAR2(4000) := i_keyword_list;
    x_temp                  VARCHAR2(4000) := NULL;
    x_delimiter             CHAR(1) := i_delimiter;
    x_special_symbols       VARCHAR2(500) := NULL;
 
  BEGIN
 
    select decode(x_delimiter,',','(([\_%.:|;])|(-)|(\^)|(\$)|(\~)|(\#)|(\?)|(\*)|(\+)|(\/)|(\=))',
                              '~','(([\_%.:|;])|(-)|(\^)|(\$)|(\,)|(\#))',
                              '#','(([\_%.:|;])|(-)|(\^)|(\$)|(\,)|(\~))') into x_special_symbols from dual; 
    /* PMD FIX
    IF x_delimiter = ',' THEN
      x_special_symbols := '(([\_%.:|;])|(-)|(\^)|(\$)|(\~)|(\#)|(\?)|(\*)|(\+)|(\/)|(\=))';
    ELSIF x_delimiter = '~' THEN
      x_special_symbols := '(([\_%.:|;])|(-)|(\^)|(\$)|(\,)|(\#))';
    ELSIF x_delimiter = '#' THEN
      x_special_symbols := '(([\_%.:|;])|(-)|(\^)|(\$)|(\,)|(\~))';
    END IF;
  */
      -- Step 1 : Barring delimiter, prefix \ to all other special symbols (.\_*+-:|;).
    SELECT REGEXP_REPLACE(x_input_string, x_special_symbols, ('\\\1'))
      INTO x_temp
      FROM DUAL;
  
    --pr_monitor_progress (x_proc_name || 'After Step 1 : > ' || x_temp);
    x_input_string := x_temp;
  
    -- Step 2 : Replace ] with ~~.
    SELECT REGEXP_REPLACE(x_input_string,
                          '([' || CHR(93) || CHR(93) || ')',
                          ('~#'))
      INTO x_temp
      FROM DUAL;
  
    --pr_monitor_progress (x_proc_name || 'After Step 2 : > ' || x_temp);
    x_input_string := x_temp;
  
    -- Step 3 : Sandwich {, [, (, }, ], ) inside [].
    SELECT REGEXP_REPLACE(x_input_string, '([})[({])', ('[\1]'))
      INTO x_temp
      FROM DUAL;
  
    --pr_monitor_progress (x_proc_name || 'After Step 3 : > ' || x_temp);
    x_input_string := x_temp;
  
    -- Step 4 : Replace ~~ with [' || CHR(93) || CHR(93) || '.
    SELECT REGEXP_REPLACE(x_input_string,
                          '(~#)',
                          ('[' || CHR(93) || CHR(93) || ''))
      INTO x_temp
      FROM DUAL;
  
    --pr_monitor_progress (x_proc_name || 'After Step 4 : > ' || x_temp);
    x_input_string := x_temp;
  
    -- Step 5.0 : Prefix and suffix 1 space ' ' to the delimiter(,[comma] or ~[tilde]).
    -- This is a pre-condition for next step.
    SELECT REGEXP_REPLACE(x_input_string,
                          '(' || x_delimiter || ')',
                          ' ' || x_delimiter || ' ')
      INTO x_temp
      FROM DUAL;
  
    --pr_monitor_progress (x_proc_name || 'After Step 5.0 : > ' || x_temp);
    x_input_string := x_temp;
  
    -- Step 5.1 : Replace Delimiter(,[comma] or ~[tilde]) with Alteration symbol '|'.
    SELECT REGEXP_REPLACE(x_input_string,
                          '([[:space:' || CHR(93) || CHR(93) || '{1})(' ||
                          x_delimiter || ')([[:space:' || CHR(93) || CHR(93) ||
                          '{1})',
                          ')|(')
      INTO x_temp
      FROM DUAL;
  
    --pr_monitor_progress (x_proc_name || 'After Step 5.1 : > ' || x_temp);
    x_input_string := x_temp;
  
    --Start : Commented below lines by vishnu on 10/17/2012
    --Reason : for avoiding characters or delimiters other ","(comma) to behave as a single keyword string
    /*  -- Step 6.0 : Substitute multiple spaces with a single space
             SELECT REGEXP_REPLACE (x_input_string, '([[:space:' || CHR(93) || CHR(93) || '+)', (')|('))
               INTO x_temp
               FROM DUAL;
    
             --pr_monitor_progress (x_proc_name || 'After Step 6.0 : > ' || x_temp);
             x_input_string := x_temp;
    */
    --End : Commented below lines by vishnu on 10/17/2012
  
    --Start : Added below line by vishnu to avoid any space pattern in the formatted input string
  
    --SELECT REPLACE(x_input_string, '  ', '') INTO x_temp FROM DUAL;
    x_input_string := x_temp;
  
    --End : Added below line by vishnu to avoid any space pattern in the formatted input string
  
    -- Step 7 : Impose authenticty on Regex expression.
    -- Remove unnecessary blocks of "()|" combination - empty blocks do not serve any purpose in Regex.
    SELECT REPLACE(x_input_string, '()|', ('')) INTO x_temp FROM DUAL;
  
    x_input_string := x_temp;
  
    SELECT REPLACE(x_input_string, '( )|', ('')) INTO x_temp FROM DUAL;
  
    --pr_monitor_progress (x_proc_name || 'After Step 7.1 : > ' || x_temp);
    x_input_string := x_temp;
  
    -- Remove unnecessary blocks of "|()" combination - empty blocks do not serve any purpose in Regex.
    SELECT REPLACE(x_input_string, '|()', ('')) INTO x_temp FROM DUAL;
  
    --pr_monitor_progress (x_proc_name || 'After Step 7.2 : > ' || x_temp);
    x_input_string := x_temp;
  
    -- Step 8 : Ensuring that the final regex expression is a valid expression.

    select decode(SUBSTR(x_input_string, 1, 2),')|',SUBSTR(x_input_string, 3)
                                              ,'|(',SUBSTR(x_input_string, 2), x_input_string) into x_temp from dual; 

     /*   PMD FIX                                         
    IF SUBSTR(x_input_string, 1, 2) IN (')|') THEN
      x_temp := SUBSTR(x_input_string, 3);
    ELSIF SUBSTR(x_input_string, 1, 2) IN ('|(') THEN
      x_temp := SUBSTR(x_input_string, 2);
    END IF;
    */
   --pr_monitor_progress (x_proc_name || 'After Step 8.1 : > ' || x_temp);
    x_input_string := x_temp;
 
     SELECT DECODE(SUBSTR(x_input_string, -2),'|(',SUBSTR(x_input_string, 1, LENGTH(x_input_string) - 2),
                                             ')|',SUBSTR(x_input_string, 1, LENGTH(x_input_string) - 1),x_input_string) INTO x_temp FROM DUAL; 
  
 /* PMD FIX
    IF SUBSTR(x_input_string, -2) IN ('|(') THEN
      x_temp := SUBSTR(x_input_string, 1, LENGTH(x_input_string) - 2);
    ELSIF SUBSTR(x_input_string, -2) IN (')|') THEN
      x_temp := SUBSTR(x_input_string, 1, LENGTH(x_input_string) - 1);
    END IF; 
  */
    --pr_monitor_progress (x_proc_name || 'After Step 8.2 : > ' || x_temp);
    x_input_string := x_temp;
  
    IF SUBSTR(x_input_string, 1, 1) != ('(') THEN
      x_temp := '((' || x_input_string;
    ELSE
      x_temp := '(' || x_input_string;
    END IF;
  
    --pr_monitor_progress (x_proc_name || 'After Step 8.3 : > ' || x_temp);
    x_input_string := x_temp;
  
    IF SUBSTR(x_input_string, -1) != (')') THEN
      x_temp := x_input_string || '))';
    ELSE
      x_temp := x_input_string || ')';
    END IF;
  
    /*
    Bug Id : 65467
    
    Resolution :
    Added below 4 statements by vishnu on 11/28/2012 to search for the exact pattern of the word
    instead of searching a part of it.
    */
  
    /*SELECT REPLACE(x_temp, ')|(', ' )|(') INTO x_temp FROM DUAL;
      SELECT REPLACE(x_temp, '))', ' ))') INTO x_temp FROM DUAL;
      SELECT REPLACE(x_temp, '  ', ' ') INTO x_temp FROM DUAL;
    */
  
    SELECT REPLACE(x_temp, ' )|( ', ')|(') INTO x_temp FROM DUAL;
    SELECT REPLACE(x_temp, ')|( ', ')|(') INTO x_temp FROM DUAL;
    SELECT REPLACE(x_temp, ' )|(', ')|(') INTO x_temp FROM DUAL;
    SELECT REPLACE(x_temp, ' ))', '))') INTO x_temp FROM DUAL;
    SELECT REPLACE(x_temp, '(( ', '((') INTO x_temp FROM DUAL;
    SELECT REPLACE(x_temp, '(()|(', '(') INTO x_temp FROM DUAL;
    SELECT REPLACE(x_temp, ')|())', ')') INTO x_temp FROM DUAL;
  
    pr_monitor_progress(x_proc_name || 'Final regexed expression : > ' ||
                        x_temp,
                        g_Low);
    x_input_string          := x_temp;
    x_enriched_keyword_list := x_input_string;
  
    RETURN x_enriched_keyword_list;
  
  EXCEPTION
    WHEN OTHERS THEN
      pr_monitor_progress(x_proc_name ||
                          DBMS_UTILITY.format_error_backtrace,
                          g_Medium);
      pr_monitor_progress(x_proc_name ||
                          'In Others Exception : Failed to enrich regex.',
                          g_Medium);
      RETURN x_enriched_keyword_list;
  END Fn_Enrich_Keyword_List;





  /*Build keyword List as per Context grammar specifications of Oracle Text.*/
  Function Fn_Ctx_Search(i_keyword_list In Varchar2,
                         i_delimiter    In Varchar2) Return Varchar2 Is
    x_ContextGramr_TextQuery Varchar2(4000);
  Begin
    Select '{' || Regexp_Replace(i_keyword_list,
                                 '([[:space:' || CHR(93) || CHR(93) || '*)(' ||
                                 trim(i_delimiter) || ')([[:space:' ||
                                 CHR(93) || CHR(93) || '*)',
                                 '},{') || '}' As EmbracedKeywordList
      Into x_ContextGramr_TextQuery
      From Dual
     Where Regexp_Like(i_keyword_list, '[a-z0-9]', 'i');
  
    Return x_ContextGramr_TextQuery;
  
  Exception
    When No_Data_Found Then
      Pr_Monitor_Progress(Dbms_Utility.Format_Error_Stack);
      Return i_keyword_list;
    When Others Then
      Pr_Monitor_Progress(Dbms_Utility.Format_Error_Stack);
      Return i_keyword_list;
  End Fn_Ctx_Search;





  FUNCTION Get_Url_Log_Issue1(i_metric_id           IN Number,
                              i_process_instance_id IN Number,
                              i_hyper_text          IN Varchar2 DEFAULT NULL,
                              i_Subs_Resp_Id        In Varchar2,
                              i_Feed_Data_Id        In Number,
                              i_Received_On         In Date,
                              i_Channel_Id          In Varchar2)
    RETURN VARCHAR2 IS
    x_url VARCHAR2(1000);
    x_temp varchar2(1000);
    x_count NUMBER(5);
    x_metric_id NUMBER;
    x_rec_on   NUMBER;
    x_feed     NUMBER;
    x_resp_id      NUMBER;
  BEGIN
    --This generates URL for editing report output data.
    --added this line in order to display new log issue form each time you click on log issue icon in alert summary report
    /*x_url := '<a target="_self" href="javascript:callreportdetails(''Pushinfolet?id=' ||
             i_metric_id || CHR(38) || 'proc=' || i_process_instance_id ||
             CHR(38) || 'x_v32=' || i_Subs_Resp_Id || CHR(38) || 'x_v29=' ||
             i_Feed_Data_Id || CHR(38) || 'x_v33=' ||
             TO_CHAR(i_Received_On, 'dd/mm/yyyy') --i_Received_On
             || CHR(38) || 'x_v24=' || (case when length(Get_Channel_Name(i_Channel_Id)) > 60 then substr(Get_Channel_Name(i_Channel_Id), 1, 60) || '...' when length(Get_Channel_Name(i_Channel_Id)) <= 60 then Get_Channel_Name(i_Channel_Id) end) || CHR(38) || 'flag=1' || CHR(38) || 'emd=1' || CHR(38) || 'wrapper=no'')">' || '<img border="0" src="/si_image/Issue-Icon.gif">' || '</a>';
  */
  --added this line in order to display new log issue form each time you click on log issue icon in alert summary report
  
  /* Below 2 line code for the Channel Name with less than 60 characters having '&' symbol */
  x_temp := HTF.escape_sc(Get_Channel_Name(i_Channel_Id));
 -- select REPLACE(x_temp,'&','%26') into x_temp from dual;
begin 
  select metric_id INTO x_metric_id from si_metrics_t where metric_name = 'MS_RGA_LOG_ISSUES';
  select column_sequence into x_rec_on from si_metric_columns where metric_id = x_metric_id and result_column_name = 'CUSTOM_FIELD1';
  select column_sequence into x_feed from si_metric_columns where metric_id = x_metric_id and result_column_name = 'FEED_DATA_ID';
  select column_sequence into x_resp_id from si_metric_columns where metric_id = x_metric_id and result_column_name = 'SUBS_RESPONSE_ID_GRCI';
exception
when others then
  x_metric_id := null;
  x_rec_on := null;
  x_feed := null;
  x_resp_id := null;
end;
  
  x_url := '<a target="_self" href="javascript:callreportdetails(''Pushinfolet?id=' ||
             i_metric_id || CHR(38) || 'proc=' || '' ||
             CHR(38) || 'x_v' || x_resp_id || '=' || i_Subs_Resp_Id || CHR(38) || 'x_v' || x_feed || '=' ||
             i_Feed_Data_Id || CHR(38) || 'x_v' || x_rec_on || '=' ||
             TO_CHAR(i_Received_On, 'dd/mm/yyyy') --i_Received_On
             || CHR(38)||'ChName/*-*/'|| (case when length(Get_Channel_Name(i_Channel_Id)) > 60 then substr(Get_Channel_Name(i_Channel_Id), 1, 60) || '...' when length(Get_Channel_Name(i_Channel_Id)) <= 60 then htf.escape_sc(x_temp) end)||'ChName/*-*/' || CHR(38) || 'flag=1' || CHR(38) || 'emd=1' || CHR(38) || 'wrapper=no'')">' || '<img border="0" src="/si_image/Issue-Icon.gif" title="Log Issue">' || '</a>';
  
  
    RETURN x_url;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END Get_Url_Log_Issue1;

  FUNCTION Get_Url_ORB_Link(i_metric_id           IN Number,
                              i_process_instance_id IN Number,
                              i_hyper_text          IN Varchar2 DEFAULT NULL,
                              i_Subs_Resp_Id        In Varchar2,
                              i_Feed_Data_Id        In Number,
                              i_Received_On         In Date,
                              i_Channel_Id          In Varchar2)
    RETURN VARCHAR2 IS
    x_url VARCHAR2(1000);
    x_temp varchar2(1000);
    x_count NUMBER(5);
    x_metric_id NUMBER;
    x_curr_stg     NUMBER;   
    x_rel_id     NUMBER;
    x_resp_id      NUMBER;
    x_link_count NUMBER;
    x_link_image VARCHAR2(30);
    x_obj_name varchar2(200);
    x_image_text varchar2(20);
    x_pid number;
  BEGIN
    --This generates URL to create or edit ORB relations
  
  x_temp := HTF.escape_sc(Get_Channel_Name(i_Channel_Id));
 
  
    begin 
      select metric_id INTO x_metric_id from si_metrics_t where metric_name = 'MS_RGA_ALERT_OBJECT_RELATIONS';
      select column_sequence into x_curr_stg from si_metric_columns where metric_id = x_metric_id and result_column_name = 'DD_CURRENT_STAGE';
      select column_sequence into x_rel_id from si_metric_columns where metric_id = x_metric_id and result_column_name = 'ALERT_ID';
      select column_sequence into x_resp_id from si_metric_columns where metric_id = x_metric_id and result_column_name = 'SUBS_RESPONSE_ID';
      select count(*) into x_link_count from ms_rga_alert_object_relatio_v t1 where
      t1.instance_id =(select max(t2.instance_id) from ms_rga_alert_object_relatio_v t2 where t2.alert_id=i_Feed_Data_Id);
    exception
    when others then
      x_metric_id := null;
      x_curr_stg := null;
    end;  
    
    if x_link_count =0 then
    x_link_image:='unlinked_blue.png';
    x_image_text:= 'Unlinked';
    elsif x_link_count =1 then
    select tgt_obj_name into x_obj_name from ms_rga_alert_object_relatio_v t1 where 
    t1.instance_id =(select max(t2.instance_id) from ms_rga_alert_object_relatio_v t2 where t2.alert_id=i_Feed_Data_Id);
    if x_obj_name is null then
     x_link_image:='unlinked_blue.png';
    x_image_text:= 'Unlinked';
    else
     x_image_text:= 'Linked';
    x_link_image:='linked_yellow.png';
    x_pid:=i_process_instance_id;
    end if;
    else
    x_image_text:= 'Linked';
    x_link_image:='linked_yellow.png';
    x_pid:=i_process_instance_id;
end if;    
    
  
  x_url := '<a target="_self" href="javascript:callreportdetails(''Pushinfolet?id=' ||
             i_metric_id || CHR(38) || 'proc=' || x_pid ||
             CHR(38) || 'x_v' || x_resp_id || '=' || CHR(38) || 'x_v' || x_rel_id || '=' ||
             i_Feed_Data_Id || CHR(38) || 'x_v999=' ||
             TO_CHAR(i_Received_On, 'dd/mm/yyyy') --i_Received_On
             || CHR(38)||'ChName/*-*/'|| (case when length(Get_Channel_Name(i_Channel_Id)) > 60 then substr(Get_Channel_Name(i_Channel_Id), 1, 60) || '...' when length(Get_Channel_Name(i_Channel_Id)) <= 60 then htf.escape_sc(x_temp) end)||'ChName/*-*/' || CHR(38) || 'flag=1' || CHR(38) || 'emd=1' || CHR(38) || 'wrapper=no'')">' || '<img border="0" src="/si_image/MS_RGA/'||x_link_image||'" height="20" width="20" title="'||x_image_text||'">' || '</a>';
  
  
    RETURN x_url;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END Get_Url_ORB_Link;


  FUNCTION Get_Url_Log_Issue(i_metric_id           IN Number,
                             i_process_instance_id IN Number,
                             i_hyper_text          IN Varchar2 DEFAULT NULL,
                             i_Subs_Resp_Id        In Varchar2,
                             i_Feed_Data_Id        In Number,
                             i_Received_On         In Date,
                             i_Channel_Id          In Varchar2)
    RETURN VARCHAR2 IS
    x_url VARCHAR2(1000);
  BEGIN
    --This generates URL for editing report output data.
    x_url := '<a target="_self" href="javascript:callreportdetails(''Pushinfolet?id=' ||
             i_metric_id || CHR(38) || 'proc=' || i_process_instance_id ||
             CHR(38) || 'x_v1=' || i_Subs_Resp_Id || CHR(38) || 'x_v22=' ||
             i_Feed_Data_Id || CHR(38) || 'x_v19=' ||
             TO_CHAR(i_Received_On, 'dd/mm/yyyy') --i_Received_On
             || CHR(38) || 'x_v20=' || Get_Channel_Name(i_Channel_Id) ||
             CHR(38) || 'flag=1' || CHR(38) || 'emd=1' || CHR(38) ||
             'wrapper=no'')">' ||
             '<img border="0" src="/si_image/Issue-Icon.gif" title="Log Issue" > ' || '</a>';
  
    RETURN x_url;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END Get_Url_Log_Issue;



  FUNCTION Get_Url_Notify_Users(i_metric_id           IN NUMBER,
                                i_process_instance_id IN NUMBER,
                                i_hyper_text          IN VARCHAR2 DEFAULT NULL,
                                i_Subs_Resp_Id        In Varchar2,
                                i_Feed_Data_Id        In Number,
                                i_Received_On         In Date,
                                i_Channel_Id          In Varchar2)
    RETURN VARCHAR2 IS
    x_url VARCHAR2(4000);
    x_metric_id NUMBER;
    x_resp_id   NUMBER;
    x_rec_dt     NUMBER;
    x_feed_data      NUMBER;    
  BEGIN
    --This generates URL for editing report output data.
    
    begin 
      select metric_id INTO x_metric_id from si_metrics_t where metric_name = 'MS_RGA_NOTIFY_USERS';
      select column_sequence into x_resp_id from si_metric_columns where metric_id = x_metric_id and result_column_name = 'SUSB_RESPONSE_ID';
      select column_sequence into x_rec_dt from si_metric_columns where metric_id = x_metric_id and result_column_name = 'RECEIVED_ON';
      select column_sequence into x_feed_data from si_metric_columns where metric_id = x_metric_id and result_column_name = 'FEED_DATA_ID';
    exception
    when others then
      x_metric_id := null;
      x_resp_id := null;
      x_rec_dt := null;
      x_feed_data := null;
    end;  
    
    IF (i_hyper_text IS NULL AND i_process_instance_id is not null) THEN
      x_url := '<a target="_self" href="javascript:callreportdetails(''Pushinfolet?id=' ||
               i_metric_id || CHR(38) || 'proc=' || i_process_instance_id ||
               CHR(38) || 'x_v' || x_resp_id || '=' || i_Subs_Resp_Id || CHR(38) || 'x_v' || x_feed_data || '=' ||
               i_Feed_Data_Id || CHR(38) || 'x_v' || x_rec_dt || '=' ||
               (TO_CHAR(i_Received_On, 'mm/dd/yyyy')) --'06/23/2010 00:00:00'
               || CHR(38) || 'ChName/*-*/' || (case when length(Get_Channel_Name(i_Channel_Id)) > 60 then substr(Get_Channel_Name((i_Channel_Id)), 1, 60) || '...' when length(Get_Channel_Name(i_Channel_Id)) <= 60 then Get_Channel_Name(HTF.escape_sc(i_Channel_Id)) end)||'ChName/*-*/' || CHR(38) || 'flag=1' || CHR(38) || 'emd=1' || CHR(38) || 'wrapper=no'')">' || '<img border="0" src="/si_image/user.png" title="Notify User(s)">' || '</a>';
    
    ELSE
      x_url := '<a target="_self" href="javascript:callreportdetails(''Pushinfolet?id=' ||
               i_metric_id || CHR(38) || 'proc=' || i_process_instance_id ||
               CHR(38) || 'x_v' || x_resp_id || '=' || i_Subs_Resp_Id || CHR(38) || 'x_v' || x_feed_data || '=' ||
               i_Feed_Data_Id || CHR(38) || 'x_v' || x_rec_dt || '=' ||
               (TO_CHAR(i_Received_On, 'mm/dd/yyyy')) --i_Received_On --'06/23/2010 00:00:00'--TO_CHAR(i_Received_On,'dd/mm/yyyy')--i_Received_On
               || CHR(38) || 'ChName/*-*/' || (case when length(Get_Channel_Name(i_Channel_Id)) > 60 then substr(Get_Channel_Name((i_Channel_Id)), 1, 60) || '...' when length(Get_Channel_Name(i_Channel_Id)) <= 60 then Get_Channel_Name(HTF.escape_sc(i_Channel_Id)) end)|| 'ChName/*-*/' || CHR(38) || 'flag=1' || CHR(38) || 'emd=1' || CHR(38) || 'wrapper=no'')">' || '<img border="0" src="/si_image/user.png" title="Notify User(s)">' || '</a>';
    END IF;
  
    RETURN x_url;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END GET_URL_NOTIFY_USERS;
  

  
  FUNCTION Get_Url_Email_Content1(i_metric_id           In Number,
                                 i_process_instance_id In Number,
                                 i_hyper_text          IN VARCHAR2 DEFAULT NULL,
                                 i_Feed_Data_Id        In Number)
    RETURN VARCHAR2 IS
    x_url VARCHAR2(10000);
    ddss VARCHAR2(10000);
    x_seq     number;
  Begin
      select column_sequence into x_seq
      from si_metric_columns 
      where metric_id = (select metric_id from si_metrics_t where metric_name = 'MS_RGA_EMAIL_CONTENT')
      and result_column_name = 'FEED_ID';
      
      x_url := '<a target="_self" href="javascript:callreportdetails1(''Pushinfolet?id=' ||
             i_metric_id || CHR(38) || 'x_v' || x_seq || '=' || i_Feed_Data_Id || CHR(38) ||
             'flag=1' || CHR(38) || 'emd=1' || CHR(38) || 'wrapper=no'')">' ||
             '<img border="0" src="/si_image/Mail-Icon.gif" title="Content">' || '</a>';
  
    RETURN x_url;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'sample';
  END Get_Url_Email_Content1;

  FUNCTION Get_Url_Email_Content(i_metric_id           In Number,
                                 i_process_instance_id In Number,
                                 i_hyper_text          IN VARCHAR2 DEFAULT NULL,
                                 i_Feed_Data_Id        In Number)
    RETURN VARCHAR2 IS
    x_url VARCHAR2(1000);
  
  Begin
  
    --This generates URL for editing report output data.
    x_url := '<a target="_self" href="javascript:callreportdetails(''Pushinfolet?id=' ||
             i_metric_id || CHR(38) || 'x_v9=' || i_Feed_Data_Id || CHR(38) ||
             'flag=1' || CHR(38) || 'emd=1' || CHR(38) || 'wrapper=no'')">' ||
             '<img border="0" src="/si_image/Mail-Icon.gif">' || '</a>';
  
    RETURN x_url;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END Get_Url_Email_Content;

FUNCTION Get_Url_GRCIntegration_AOC(i_metric_id           IN Number,
                             i_process_instance_id IN Number,
                             i_hyper_text          IN Varchar2 DEFAULT NULL,
                             i_Subs_Resp_Id        In Varchar2,
                             i_Feed_Data_Id        In Number,
                             i_Received_On         In Date,
                             i_Channel_Id          In Varchar2)
    RETURN VARCHAR2 IS
    x_url VARCHAR2(1000);
  BEGIN
    --This generates URL for editing report output data.
   /* x_url := '<a target="_self" href="javascript:callreportdetails(''Pushinfolet?id=' ||
             i_metric_id || CHR(38) || 'proc=' || i_process_instance_id ||
             CHR(38) || 'x_v1=' || i_Subs_Resp_Id || CHR(38) || 'x_v22=' ||
             '' || CHR(38) || 'x_v19=' ||
             '' --i_Received_On
             || CHR(38) || 'x_v20=' || '' ||
             CHR(38) || 'flag=1' || CHR(38) || 'emd=1' || CHR(38) ||
             'wrapper=no'')">' ||
             '<img id="imgid" border="0" src="/images/icons/store--plus.png">' || '</a>'; */
             
             
     x_url := '<a href="#">' ||
             '<img class="imgClass" border="0" src="/images/icons/store--plus.png">' || '</a>';             
  
    RETURN x_url;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END Get_Url_GRCIntegration_AOC;





  Function Get_Next_Feed_Id(i_Rowid Rowid) Return Number DETERMINISTIC Is
    x_Feed_Data_Id Number := 0;
  Begin
    Select Ms_Rga_FeedDataId_Seq.Nextval Into x_Feed_Data_Id From Dual;
  
    Return x_Feed_Data_Id;
  Exception
    When Others Then
      pr_monitor_progress('In other exception of Get_Next_Feed_Id - ' ||
                          Sqlerrm);
      Return 0;
  End Get_Next_Feed_Id;





  Function Get_View_Edit_RptUrl(i_Metric_Name         In varchar2,
                                i_Process_Instance_Id In Number,
                                i_channel_name        in varchar2)
    Return Varchar2 Is
    x_url       varchar2(1000);
    l_metric_id number;
  Begin
  
    select metric_id
      into l_metric_id
      from si_metrics_t
     where metric_name = i_metric_name;
    x_Url := '<a href=JavaScript:viewlink_function(''Fastform' || chr(63) ||
             'id=' || l_metric_id || CHR(38) || 'proc=' ||
             i_process_instance_id || CHR(38) || 'flag=1' || CHR(38) ||
             'wrapper=no' || chr(38) || HTF.escape_sc(i_channel_name) || '</a>';
    Return x_Url;
  
  Exception
    When Others Then
      return null;
  End Get_View_Edit_RptUrl;





  FUNCTION get_infolet_id(ip_push_infolet IN VARCHAR2) RETURN NUMBER AS
    lv_metric_id NUMBER;
  BEGIN
    SELECT metric_id
      INTO lv_metric_id
      FROM si_metrics_t
     WHERE metric_name = ip_push_infolet;
  
    RETURN lv_metric_id;
  EXCEPTION
    WHEN OTHERS THEN
      return 0;
  end get_infolet_id;
  
  
  
  
  
  FUNCTION build_form_url(ip_push_infolet        IN VARCHAR2,
                          ip_process_instance_id IN NUMBER,
                          ip_edit_flag           in varchar2,
                          ip_hyper_text          IN VARCHAR2 DEFAULT NULL)
    RETURN VARCHAR2 AS
    x_url      VARCHAR2(4000) := NULL;
    x_count    NUMBER := 0;
    x_stmt_num NUMBER := 0;
  begin
  
    select '<a target="_self" href="javascript:callreportdetails(''Pushinfolet' ||
            Chr(63) || 'id=' || get_infolet_id(ip_push_infolet) || CHR(38) ||
            'proc=' || ip_process_instance_id
           --            || CHR (38)
           --            || 'instid='
           --            || ip_instance_id
            || CHR(38) || 'edit_flag=' || ip_edit_flag || chr(38) ||
            'flag=3' || chr(38) || 'emd=1'')">' || HTF.escape_sc(ip_hyper_text) || '</a>'
      INTO x_url
      from dual;
  
    x_stmt_num := 50;
    DBMS_OUTPUT.put_line(x_stmt_num || ' x_url ' || x_url);
    RETURN x_url;
  EXCEPTION
    WHEN OTHERS THEN
      x_stmt_num := 60;
      return ip_hyper_text;
  END build_form_url;





  FUNCTION get_user_name(i_user_id IN NUMBER) RETURN VARCHAR2 IS
    x_user_name si_users_t.user_name%TYPE;
  BEGIN
    --This statement returns the user id for the user name.
    SELECT user_name
      INTO x_user_name
      FROM si_users_t
     WHERE user_id = i_user_id;
  
    RETURN x_user_name;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END get_user_name;





  FUNCTION GET_USER(i_subs_response_id VARCHAR2) RETURN VARCHAR2 AS
    i_uname  VARCHAR2(1000) DEFAULT NULL;
    i_users  VARCHAR2(1000) DEFAULT NULL;
    i_result VARCHAR2(1000) DEFAULT NULL;
    i_date   VARCHAR2(1000) DEFAULT NULL;
  BEGIN
    FOR rec IN (SELECT DD_CREATED_BY USER_NAME,
                       trunc(DD_CREATED_ON) MODIFIED_ON
                  FROM MS_RGA_NOTIFY_USERS
                 where SUSB_RESPONSE_ID = i_subs_response_id) LOOP
      i_date := trunc(rec.modified_on);
      IF instr(rec.USER_NAME, '@') > 0 THEN
        i_uname := ' NOTIFIED TO ' || rec.USER_NAME;
      ELSE
        i_uname := ' NOTIFIED TO ' ||
                   ms_apps_utilities.get_user_full_name(rec.USER_NAME);
      END IF;
    
      IF NVL(LENGTH(i_users), 0) <= 0 THEN
        i_users := i_date || i_uname;
      ELSE
        i_users := i_users || ',' || i_date || i_uname;
      END IF;
    
    END LOOP;
    IF i_users IS NOT NULL THEN
      i_result := i_users;
    ELSE
      i_result := i_users;
    END IF;
    RETURN i_result;
  END GET_USER;




-- changes
  --FUNCTION GET_NOTIFIED_USERS(i_subs_response_id VARCHAR2) RETURN VARCHAR2 AS
  FUNCTION GET_NOTIFIED_USERS(i_login_id VARCHAR2,i_feed_data_id NUMBER) RETURN VARCHAR2 AS
  -- changes
    i_result     VARCHAR2(4000) DEFAULT NULL;
    i_return_var VARCHAR2(4000);
  BEGIN
  
    select 'Notified to ' || nvl(listagg(notification, ',') within
                                 group(order by created_on desc) || ' On ' ||
                                 TO_CHAR(CREATED_ON, 'MM/DD/YYYY'),
                                 ' ')
    
      into I_RETURN_VAR
      from (select nvl(trunc(t.dd_modified_on), trunc(t.dd_created_on)) created_on,
                   listagg(t.notify_other_users, ',') within
             group(
             order by t.dd_created_on) notification
              from MS_RGA_NOTIFY_USERS t
              -- changes
             --where t.susb_response_id = i_subs_response_id
               where t.dd_created_by = i_login_id 
              and t.feed_data_id     = i_feed_data_id
              -- changes
               and t.notify_other_users is not null
             group by nvl(trunc(t.dd_modified_on), trunc(t.dd_created_on))
            union
            select nvl(trunc(t.dd_modified_on), trunc(t.dd_created_on)) created_on,
                   listagg(t1.notify_system_users, ',') within
             group(
             order by t.dd_created_on) notification
              from ms_rga_notify_users t, ms_rga_notify_users_phn t1
             where t.object_id = t1.object_id
               and t1.notify_system_users is not null
               --changes
               --and t.susb_response_id = i_subs_response_id
               and t.dd_created_by    = i_login_id
               and t.feed_data_id     = i_feed_data_id
               --changes
             group by nvl(trunc(t.dd_modified_on), trunc(t.dd_created_on)))
     group by created_on;
  
    RETURN i_return_var;
  
  exception
    when others then
      RETURN '';
    
  END GET_NOTIFIED_USERS;





  Function insert_virtual_rep_id(p_report_name varchar2) RETURN NUMBER IS
    x_report_id NUMBER;
    y_report_id NUMBER;
    x_cnt       NUMBER;
    PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    FOR cur_user IN (SELECT DISTINCT user_id
                       FROM si_user_infocenter
                      WHERE virtual_infocenter_id IN
                            (SELECT infocenter_id
                               FROM si_user_infocenter
                              WHERE user_id =
                                    (SELECT user_id
                                       FROM si_users_t
                                      WHERE user_name = 'SYSTEMI')
                                AND infocenter_name IN ('GRC Intelligence'))) LOOP
      SELECT report_id
        INTO y_report_id
        FROM si_reports a, si_users b
       WHERE a.created_by = b.user_id
         AND user_name = 'SYSTEMI'
         AND report_name = p_report_name;
      SELECT COUNT(1)
        INTO x_cnt
        FROM si_user_reports
       WHERE user_id = cur_user.user_id
         AND virtual_report_id = y_report_id;
      dbms_output.put_line('Count is ' || x_cnt);
      IF x_cnt = 0 THEN
        dbms_output.put_line('insert for User id ' || cur_user.user_id);
        INSERT INTO si_user_reports
        VALUES
          (cur_user.user_id,
           si_reports_s.NEXTVAL,
           SYSDATE,
           NULL,
           100000,
           SYSDATE,
           100000,
           SYSDATE,
           NULL,
           NULL,
           y_report_id);
      END IF;
    END LOOP;
    commit;
    return x_cnt;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END insert_virtual_rep_id;
  /*
  
  <a target="_blank" href="http://rss.cnn.com/rss/edition.rss">http://rss.cnn.com/rss/edition.rss</a>
  
  */





  PROCEDURE email_notify_users(i_pf_id         IN NUMBER,
                               i_metric_id     IN NUMBER,
                               i_feed_data_id  IN NUMBER,
                               o_error_code    OUT NOCOPY NUMBER,
                               o_error_message OUT NOCOPY VARCHAR2) IS
    x_recipients          varchar2_array := varchar2_array();
    x_param_names         varchar2_array := varchar2_array();
    x_param_values        clob_array := clob_array();
    x_notify_system_users VARCHAR2(2000);
    x_notify_other_users  VARCHAR2(2000);
    x_max_instance_id     PLS_INTEGER;
    x_stmt_number         PLS_INTEGER;
    x_error_code          PLS_INTEGER;
    --x_metric_name           VARCHAR2 (2000);
    x_error_message VARCHAR2(1000);
    x_subject       clob;
    x_subject_body  clob;
    x_attachment    varchar2(4000);
    --x_infolet_id            NUMBER;
    x_email_note   si_messages_t.MESSAGE_TEXT%TYPE;
    x_boiler_plate si_messages_t.MESSAGE_TEXT%TYPE;
    x_copyright    si_messages_t.MESSAGE_TEXT%TYPE;
    send_email_excp EXCEPTION;
    x           NUMBER := 0;
    x_user_name varchar2(4000);
  BEGIN
    x_stmt_number := 5;
  
    BEGIN
      SELECT MAX(instance_id)
        INTO x_max_instance_id
        FROM ms_rga_notify_users_v
       WHERE process_instance_id = i_pf_id;
    
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        o_error_code    := SQLCODE;
        o_error_message := 'Error in Procedure email_notify_users and statement number' ||
                           x_stmt_number || ' Error Msg is ' ||
                           x_error_message;
    END;
  
    x_stmt_number := 15;
  
    BEGIN
      SELECT NOTIFY_SYSTEM_USERS,
             NOTIFY_OTHER_USERS,
             ms_apps_utilities.get_user_full_name(dd_event_user_name)
        INTO x_notify_system_users, x_notify_other_users, x_user_name
        FROM ms_rga_notify_users_v
       WHERE process_instance_id = i_pf_id
         AND instance_id = x_max_instance_id
         And object_id is not null; --commented by vishnu on 11/12/2012 to avoid 1422 error
    
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        o_error_code    := SQLCODE;
        o_error_message := 'Error in Procedure email_notify_users and statement number' ||
                           x_stmt_number || ' Error Msg is ' ||
                           x_error_message;
    END;
  
    x_stmt_number := 20;
  
    BEGIN
      SELECT SUBJECT, BODY, ATTACHMENT
        INTO x_subject, x_subject_body, x_attachment
        FROM MS_RGA_FEED_AGGREGATOR_V
       WHERE feed_data_id = i_feed_data_id;
    
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        o_error_code    := SQLCODE;
        o_error_message := 'Error in Procedure email_notify_users and statement number' ||
                           x_stmt_number || ' Error Msg is ' ||
                           x_error_message;
    END;
  
    x_stmt_number := 25;
  
    x_email_note   := 'Note : This message and all attachments should be considered confidential and proprietary to Quality Stream.';
    x_boiler_plate := 'Alert automatically generated by MetricStream.';
    x_copyright    := 'Copyright @ MetricStream Inc. 1999-2013 All rights reserved.';
  
    x_stmt_number := 30;
  
    /* SELECT ms_apps_utilities.get_infolet_id ('MS RGA NOTIFY USERS')
    INTO x_infolet_id
    FROM DUAL;*/
  
    x_stmt_number := 35;
    x_param_names.EXTEND(9);
    /* Set the email subject and set up the parameter names array */
    x_param_names(1) := 'USER_FULL_NAME';
    x_param_names(2) := 'EMAIL_NOTE';
    x_param_names(3) := 'BOILERPLATE_TEXT';
    x_param_names(4) := 'COPYRIGHT_INFORMATION';
    x_param_names(5) := 'SUBJECT_HEADER';
    x_param_names(6) := 'SUBJECT_BODY';
    x_param_names(7) := 'PROC_INSTANCE_ID';
    x_param_names(8) := 'PUSH_INFO_ID';
    x_param_names(9) := 'ATTACHMENT';
    x_stmt_number := 40;
  
    x_param_values.EXTEND(9);
    /*Assign the values into the parameter values array*/
    x_param_values(1) := x_user_name;
    x_param_values(2) := x_email_note;
    x_param_values(3) := x_boiler_plate;
    x_param_values(4) := x_copyright;
    x_param_values(5) := x_subject;
    x_param_values(6) := x_subject_body;
    x_param_values(7) := TO_CHAR(i_pf_id);
    x_param_values(8) := TO_CHAR(i_metric_id); --(x_infolet_id);
    x_param_values(9) := x_attachment;
  
    x_stmt_number := 45;
  
    IF x_error_code <> ms_rga_utilities.g_success_code THEN
      RAISE send_email_excp;
    END IF;
  
    o_error_code    := ms_rga_utilities.g_success_code;
    o_error_message := ms_rga_utilities.g_success_mesg;
  
    FOR i IN (SELECT COLUMN_VALUE AS user_id
                FROM TABLE(CAST((SELECT ms_apps_utilities.parse_string(x_notify_system_users,
                                                                       ',')
                                   FROM DUAL) AS ms_varchar2_array))
               WHERE COLUMN_VALUE IS NOT NULL) LOOP
      x_recipients.EXTEND;
      x := x + 1;
      x_recipients(x) := ms_apps_utilities.get_user_name(i.user_id);
    END LOOP;
  
    /*Ms_Rga_Utilities.Send_Email(2,
    X_Recipients,
    100000,
    X_Subject,
    'RGA/MS_RGA_NOTIFY_USERS.htm',
    X_Param_Names,
    X_Param_Values,
    X_Error_Code,
    X_Error_Message);*/
    x_stmt_number := 40;
  
    FOR i IN (SELECT COLUMN_VALUE AS user_id
                FROM TABLE(CAST((SELECT ms_apps_utilities.parse_string(x_notify_other_users,
                                                                       ',')
                                   FROM DUAL) AS ms_varchar2_array))) LOOP
      x_recipients.EXTEND;
      x := x + 1;
      x_recipients(x) := i.user_id; --ms_apps_utilities.get_user_name(i.user_id);
    END LOOP;
  
    ms_rga_utilities.send_email(2,
                                x_recipients,
                                100000,
                                x_subject,
                                ms_rga_utilities.g_email_template,
                                --'RGA/MS_RGA_NOTIFY_USERS.htm',
                                x_param_names,
                                x_param_values,
                                x_error_code,
                                x_error_message);
  EXCEPTION
    WHEN send_email_excp THEN
      o_error_code    := SQLCODE;
      o_error_message := 'Error in Procedure notify_users and statement number' ||
                         x_stmt_number || ' Error Msg is ' ||
                         x_error_message;
    WHEN OTHERS THEN
      o_error_code    := SQLCODE;
      o_error_message := 'Error Occurred in notify_users at stmt number' ||
                         x_stmt_number || '. Error Message: ' ||
                         SUBSTR(SQLERRM, 1, 250);
  END email_notify_users;





  FUNCTION fn_noty_user(
                        
                        i_subs_id VARCHAR,
                        i_user_id IN NUMBER) RETURN VARCHAR2 IS
    x_notify_by_email     VARCHAR2(100);
    x_notify_by_email_val VARCHAR2(100);
  BEGIN
    --This statement returns  the user id for the user name.
 
   SELECT notify_by_email
      INTO x_notify_by_email
      FROM MS_RGA_SUBS_CHANNEL_CHN
     WHERE SUBSCRIPTION_ID = i_subs_id
       AND ms_apps_utilities.get_user_id(chn_created_by) = i_user_id
    /*AND STATUS=1*/
    ;
  
  select DECODE(x_notify_by_email, 0, 2)
      into x_notify_by_email_val
      from dual;
  
  SELECT a.displayed_value into x_notify_by_email_val
FROM MS_QS_LOV_DISPLAY_VALUES_V a,SI_USERS_T B, SI_LOCALES C
WHERE A.lov_name='MS RGA Yes No'
AND A.LOCALE_ID = C.LOCALE_ID
and B.LOCALE = C.LOCALE_STRING
and B.USER_ID = i_user_id
and A.stored_value=x_notify_by_email;
  
  
    RETURN x_notify_by_email_val; --x_notify_by_email;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;





  FUNCTION get_rss_url(i_hyper_text IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2 IS
    x_url    VARCHAR2(4000);
    test_url VARCHAR2(4000);
  BEGIN
    /* Added IF loop and conditions by  Girish for Bug : 69821 */
    if ((substr(i_hyper_text, 1, 4)) = 'http') then
    
      x_url := '<a target="_blank" href="' || (case when length(i_hyper_text) > 1000 then substr(i_hyper_text, 1, 3750) || '...' when length(i_hyper_text) <= 3750 then i_hyper_text end) || '">' || htf.escape_sc(substr(i_hyper_text, 1, 100)) || '</a>';
    
    else
    
      x_url := '<a target="_blank" href="' || 'http://' || (case when length(i_hyper_text) > 1000 then substr(i_hyper_text, 1, 3750) || '...' when length(i_hyper_text) <= 3750 then i_hyper_text end) || '">' || htf.escape_sc(substr(i_hyper_text, 1, 100)) || '</a>';
    
    end if;
  
    RETURN x_url;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN SQLERRM;
  END get_rss_url;





  Function Fn_Update_Feed_Timestamps(i_Server_Add_Url    In Varchar2,
                                     i_LastRespTimestamp In Varchar2)
    Return Number Is
    Pragma Autonomous_Transaction;
    x_Url_Exists Number := 0;
  Begin
    pr_monitor_progress('Fn_Update_Feed_Timestamps=> ' || i_Server_Add_Url || '~' ||
                        i_LastRespTimestamp);
  
    Merge Into Ms_Rga_Url_Latest_Timestamp a
    Using (Select i_Server_Add_Url Server_Add_Url From Dual) b
    On (a.Server_Add_Url = b.Server_Add_Url)
    When Matched Then
      Update Set Last_Response_Timestamp = i_LastRespTimestamp
    When Not Matched Then
      Insert
        (Server_Add_Url, Last_Response_Timestamp)
      Values
        (i_Server_Add_Url, i_LastRespTimestamp);
  
    If Sql%Found Then
      pr_monitor_progress('Fn_Update_Feed_Timestamps=> dml successfully performed.');
      Commit;
    End If;
  
    Return 1;
  Exception
    When Others Then
      pr_monitor_progress('In other exception of Fn_Update_Feed_Timestamps - ' ||
                          Sqlerrm);
      Return 0;
  End Fn_Update_Feed_Timestamps;

/*Begin
  g_Running_Log_Nmbr := 0;*/
  
  Function Diff_Mlov_Filt_Comma_Str(Ip_Main_String In Varchar2,
                  Lv_Query_List  In Varchar2_Array)
  Return Number As
  Lv_Main_List Varchar2_Array := Varchar2_Array();
  Begin
  Select Column_Value Bulk Collect
  Into   Lv_Main_List
  From   Table(Ms_Apps_Utilities.Parse_String(Ip_Main_String,
                        ','));
  
  If Lv_Main_List.Count > 0
  Then
    If Lv_Query_List.Count > 0
    Then
    For i In 1 .. Lv_Query_List.Count
    Loop
      For j In 1 .. Lv_Main_List.Count
      Loop
      If Lv_Query_List(i) = Lv_Main_List(j)
      Then
			  Return 1;
			End If;
		  End Loop;
		End Loop;
	  End If;
	End If;
  
	Return 0;
  Exception
	When Others Then
	  Return 0;
  End Diff_Mlov_Filt_Comma_Str;
  
Function generate_sequence return number
as 
v_Sequence number;
begin
v_Sequence:=MS_RGA_AGGREGATOR_FEED_SEQ.Nextval;
return v_Sequence;
end;

 FUNCTION get_parameter_value (
      i_org_entity_id    IN   NUMBER,
      i_parameter_type   IN   VARCHAR2,
      i_parameter_name   IN   VARCHAR2
   )
      RETURN VARCHAR2 RESULT_CACHE
   IS
      x_parameter_value   ms_qs_parameter_values.parameter_value%TYPE;
   BEGIN
      BEGIN
         --This select statement returns the parameter value for the given parameter type and parameter name for the Org.
         SELECT pvalue.parameter_value
           INTO x_parameter_value
           FROM ms_qs_parameter_values pvalue,
                ms_qs_parameter_types ptype,
                ms_qs_parameter_names pname
          WHERE UPPER (ptype.parameter_type) = UPPER (i_parameter_type)
            AND pname.parameter_id = pvalue.parameter_id
            AND ptype.parameter_type_id = pvalue.parameter_type_id
            AND ptype.parameter_type_id = pname.parameter_type_id
            AND UPPER (pname.parameter_name) = UPPER (i_parameter_name)
            AND pvalue.org_entity_id = i_org_entity_id;

         RETURN x_parameter_value;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            --If parameter is not set at the Org level, then, the parameter value at enterprise level is returned
            SELECT pvalue.parameter_value
              INTO x_parameter_value
              FROM ms_qs_parameter_values pvalue,
                   ms_qs_parameter_types ptype,
                   ms_qs_parameter_names pname
             WHERE UPPER (ptype.parameter_type) = UPPER (i_parameter_type)
               AND pname.parameter_id = pvalue.parameter_id
               AND ptype.parameter_type_id = pvalue.parameter_type_id
               AND ptype.parameter_type_id = pname.parameter_type_id
               AND UPPER (pname.parameter_name) = UPPER (i_parameter_name)
               AND pvalue.org_entity_id = 1;

            RETURN x_parameter_value;
      END;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
   END get_parameter_value; 
 
 
----The follow functions added on 30-Oct-14 by kvjm 


  FUNCTION GET_URL_NOTIFY_USERS_FORM(
                                --I_SUBS_RESP_ID        IN VARCHAR2,
                                I_LOGIN_ID            IN VARCHAR2,
                                I_FEED_DATA_ID        IN varchar2,
                                i_Received_On         In varchar2,
                                i_Channel_Id          In Varchar2)
    RETURN VARCHAR2 IS
    x_url VARCHAR2(4000);
    x_metric_id NUMBER;
    x_resp_id   NUMBER;
    x_rec_dt     NUMBER;
    X_FEED_DATA      NUMBER;   
    X_PROCESS_INSTANCE_ID NUMBER;
    x_channel_name varchar2(1000);
    x_Received_On  varchar2(100);
  BEGIN
    --This generates URL for editing report output data.
    
    begin 
      select metric_id INTO x_metric_id from si_metrics_t where metric_name = 'MS_RGA_NOTIFY_USERS';
      --select column_sequence into x_resp_id from si_metric_columns where metric_id = x_metric_id and result_column_name = 'SUSB_RESPONSE_ID';
      select column_sequence into x_rec_dt from si_metric_columns where metric_id = x_metric_id and result_column_name = 'RECEIVED_ON';
      select column_sequence into x_feed_data from si_metric_columns where metric_id = x_metric_id and result_column_name = 'FEED_DATA_ID';
      
      SELECT MAX(MRNU.DD_PROCESS_INSTANCE_ID) INTO X_PROCESS_INSTANCE_ID  FROM MS_RGA_NOTIFY_USERS MRNU  
      --WHERE MRNU.SUSB_RESPONSE_ID=I_SUBS_RESP_ID;
      WHERE MRNU.DD_CREATED_BY=I_LOGIN_ID
      AND MRNU.FEED_DATA_ID=I_FEED_DATA_ID
      ;
      
      X_CHANNEL_NAME:=GET_CHANNEL_NAME(I_CHANNEL_ID);
      
    exception
    when others then
      x_metric_id := null;
      x_resp_id := null;
      x_rec_dt := null;
      x_feed_data := null;
    end;  
      -- to convert the date format to MON/DD/YYYY
    SELECT TO_CHAR(RESPONSE_DATE,'Mon/DD/YYYY') into x_Received_On FROM
    (SELECT RESPONSE_DATE fROM MS_RGA_CHANNEL_RESPONSE_DTLS WHERE FEED_DATA_ID=I_FEED_DATA_ID);
    
       /*
      x_url := '<a target="_self" href="javascript:callreportdetails(''Pushinfolet?id=' ||
               x_metric_id || CHR(38) || 'proc=' || x_process_instance_id ||
               CHR(38) || 'x_v' || x_resp_id || '=' || i_Subs_Resp_Id || CHR(38) || 'x_v' || x_feed_data || '=' ||
               i_Feed_Data_Id || CHR(38) || 'x_v' || x_rec_dt || '=' ||
               --(TO_CHAR(i_Received_On, 'mm/dd/yyyy')) --'06/23/2010 00:00:00'
               i_Received_On
               || CHR(38) || 'ChName/*-*/--' || (CASE WHEN LENGTH(GET_CHANNEL_NAME(I_CHANNEL_ID)) > 60 THEN SUBSTR(GET_CHANNEL_NAME((I_CHANNEL_ID)), 1, 60) || '...' WHEN LENGTH(GET_CHANNEL_NAME(I_CHANNEL_ID)) <= 60 THEN GET_CHANNEL_NAME(HTF.ESCAPE_SC(I_CHANNEL_ID)) END)||'ChName/*-*/' || CHR(38) || 'flag=1' || CHR(38) || 'emd=1' || CHR(38) || 'wrapper=no'')">' || '<img border="0" src="/si_image/user.png" title="Notify User(s)">' || '</a>';
    
  
  x_url := 'Pushinfolet?id=' ||
               X_METRIC_ID 
               || CHR(38) || 'proc=' || X_PROCESS_INSTANCE_ID 
               --|| CHR(38) || 'x_v' || X_RESP_ID || '=' || I_SUBS_RESP_ID 
               || CHR(38) || 'x_v' || X_FEED_DATA || '='|| I_FEED_DATA_ID 
               || CHR(38) || 'x_v' || X_REC_DT || '=' ||x_Received_On
               || CHR(38) || 'ChName/*-*/' || SUBSTR(X_CHANNEL_NAME,1,60)||(CASE WHEN LENGTH(X_CHANNEL_NAME) > 60 THEN  '...' END)||'ChName/*-*/' ;

  
    RETURN x_url;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END GET_URL_NOTIFY_USERS_FORM;
  

  FUNCTION GET_URL_LOG_ISSUE_FORM(
                              --i_Subs_Resp_Id        In Varchar2,
                              i_LOGIN_ID            In Varchar2,
                              i_Feed_Data_Id        In varchar2,
                              i_Received_On         In varchar2,
                              i_Channel_Id          In Varchar2)
    RETURN VARCHAR2 IS
    x_url VARCHAR2(1000);

    X_METRIC_ID NUMBER;
    x_rec_on   NUMBER;
    x_feed     NUMBER;
    X_RESP_ID      NUMBER;
    X_PROCESS_INSTANCE_ID  NUMBER;
    x_channel_name varchar2(1000);
    x_Received_On  varchar2(100);
  BEGIN
    --This generates URL for editing report output data.
  
  /* Below 2 line code for the Channel Name with less than 60 characters having '&' symbol */

      begin 
        select metric_id INTO x_metric_id from si_metrics_t where metric_name = 'MS_RGA_LOG_ISSUES';
        select column_sequence into x_rec_on from si_metric_columns where metric_id = x_metric_id and result_column_name = 'CUSTOM_FIELD1';
        select column_sequence into x_feed from si_metric_columns where metric_id = x_metric_id and result_column_name = 'FEED_DATA_ID';
        --select column_sequence into x_resp_id from si_metric_columns where metric_id = x_metric_id and result_column_name = 'SUBS_RESPONSE_ID_GRCI';
      
        SELECT MAX(t.dd_process_instance_id) into x_process_instance_id
        FROM ms_rga_log_issues t, ms_rga_log_issues_fnd t1
        WHERE T.OBJECT_ID           = T1.OBJECT_ID
        --AND t1.subs_response_id_grci=i_Subs_Resp_Id
        AND t1.ISSUE_CREATED_BY=i_LOGIN_ID
        AND t1.FEED_DATA_ID=i_FEED_DATA_ID
        ;

        X_CHANNEL_NAME:=GET_CHANNEL_NAME(I_CHANNEL_ID);
        
      exception
      when others then
        x_metric_id := null;
        x_rec_on := null;
        x_feed := null;
        x_resp_id := null;
      end;
    -- to convert the date format to MON/DD/YYYY
    SELECT TO_CHAR(RESPONSE_DATE,'Mon/DD/YYYY') into x_Received_On FROM
    (SELECT RESPONSE_DATE fROM MS_RGA_CHANNEL_RESPONSE_DTLS WHERE FEED_DATA_ID=I_FEED_DATA_ID);
  
  /*x_url := '<a target="_self" href="javascript:callreportdetails(''Pushinfolet?id=' ||
             x_metric_id || CHR(38) || 'proc=' || '' ||
             CHR(38) || 'x_v' || x_resp_id || '=' || i_Subs_Resp_Id || CHR(38) || 'x_v' || x_feed || '=' ||
             i_Feed_Data_Id || CHR(38) || 'x_v' || x_rec_on || '=' ||
             i_Received_On
             || CHR(38)||'ChName/*-*/--'|| (case when length(Get_Channel_Name(i_Channel_Id)) > 60 then substr(Get_Channel_Name(i_Channel_Id), 1, 60) || '...' when length(Get_Channel_Name(i_Channel_Id)) <= 60 then htf.escape_sc(x_temp) end)||'ChName/*-*/' || CHR(38) || 'flag=1' || CHR(38) || 'emd=1' || CHR(38) || 'wrapper=no'')">' || '<img border="0" src="/si_image/Issue-Icon.gif" title="Log Issue">' || '</a>';
  
  X_URL := 'Pushinfolet?id=' ||X_METRIC_ID 
            || CHR(38) || 'proc=' || '' 
            --|| CHR(38) || 'x_v' || X_RESP_ID || '=' || I_SUBS_RESP_ID 
            || CHR(38) || 'x_v' || X_FEED || '=' ||I_FEED_DATA_ID 
            || CHR(38) || 'x_v' || x_rec_on || '=' ||x_Received_On
            || CHR(38) || 'ChName/*-*/' || SUBSTR(X_CHANNEL_NAME,1,60)||(CASE WHEN LENGTH(X_CHANNEL_NAME) > 60 THEN  '...' END)||'ChName/*-*/' ;
  
  
    RETURN x_url;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END GET_URL_LOG_ISSUE_FORM;


  FUNCTION GET_URL_ORB_FORM(
                              --i_Subs_Resp_Id        In Varchar2,
                              i_LOGIN_ID            In Varchar2,
                              i_Feed_Data_Id        In Varchar2,
                              i_Received_On         In Varchar2,
                              i_Channel_Id          In Varchar2)
    RETURN VARCHAR2 IS
    x_url VARCHAR2(1000);

    x_metric_id NUMBER;
    x_curr_stg     NUMBER;   
    x_rel_id     NUMBER;
    X_RESP_ID      NUMBER;
    x_rec_dt       NUMBER;
    x_pid number;
    x_channel_name varchar2(1000);
    x_Received_On  varchar2(100);
  BEGIN
    --This generates URL to create or edit ORB relations
  
    begin 
      select metric_id INTO x_metric_id from si_metrics_t where metric_name = 'MS_RGA_ALERT_OBJECT_RELATIONS';
      select column_sequence into x_curr_stg from si_metric_columns where metric_id = x_metric_id and result_column_name = 'DD_CURRENT_STAGE';
      select column_sequence into x_rel_id from si_metric_columns where metric_id = x_metric_id and result_column_name = 'ALERT_ID';
      --select column_sequence into x_resp_id from si_metric_columns where metric_id = x_metric_id and result_column_name = 'SUBS_RESPONSE_ID';
  
      SELECT MAX(T1.PROCESS_INSTANCE_ID)
      into x_pid
      FROM ms_rga_alert_object_relatio_v t1
      WHERE t1.alert_id=i_Feed_Data_Id;

      X_CHANNEL_NAME:=GET_CHANNEL_NAME(I_CHANNEL_ID);
      
    exception
    when others then
      x_metric_id := null;
      x_curr_stg := null;
    END;  
    
   -- to convert the date format to MON/DD/YYYY
    SELECT TO_CHAR(RESPONSE_DATE,'Mon/DD/YYYY') into x_Received_On FROM
    (SELECT RESPONSE_DATE fROM MS_RGA_CHANNEL_RESPONSE_DTLS WHERE FEED_DATA_ID=I_FEED_DATA_ID);
    
  x_url := 'Pushinfolet?id=' || x_metric_id 
            || CHR(38) || 'proc=' || X_PID 
            --|| CHR(38) || 'x_v' || X_RESP_ID || '=' 
            || CHR(38) || 'x_v' || X_REL_ID || '=' ||I_FEED_DATA_ID 
            || CHR(38) || 'Recievedon' ||x_Received_On || 'Recievedon' 
            || CHR(38) || 'ChName/*-*/' || SUBSTR(X_CHANNEL_NAME,1,60)||(CASE WHEN LENGTH(X_CHANNEL_NAME) > 60 THEN  '...' END)||'ChName/*-*/' ;
 
    RETURN x_url;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END GET_URL_ORB_FORM;

  FUNCTION Get_Url_Email_Content_form(
                                       i_Feed_Data_Id        In Number)
    RETURN VARCHAR2 IS
    x_url VARCHAR2(10000);
    X_SEQ     NUMBER;
    X_METRIC_ID NUMBER;
  Begin
  
      X_METRIC_ID:=MS_APPS_UTILITIES.GET_INFOLET_ID('MS_RGA_EMAIL_CONTENT');
      
      select column_sequence into x_seq
      from si_metric_columns 
      where metric_id = (select metric_id from si_metrics_t where metric_name = 'MS_RGA_EMAIL_CONTENT')
      AND RESULT_COLUMN_NAME = 'FEED_ID';
      
      X_URL := '<a target="_self" href="javascript:callreportdetails1(''Pushinfolet?id=' ||
             X_metric_id || CHR(38) || 'x_v' || x_seq || '=' || i_Feed_Data_Id || CHR(38) ||
             'flag=1' || CHR(38) || 'emd=1' || CHR(38) || 'wrapper=no'')">' ||
             '<img border="0" src="/si_image/Mail-Icon.gif" title="Content">' || '</a>';
      

    RETURN x_url;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'sample';
  END Get_Url_Email_Content_fORM;

    FUNCTION GET_CALL_FORM_LINK(
                                I_PARAM1 IN VARCHAR2,
                                I_PARAM2 IN VARCHAR2,
                                I_PARAM3 IN VARCHAR2,
                                I_PARAM4 IN VARCHAR2,
                                I_PARAM5 IN VARCHAR2,
                                I_ICON   IN VARCHAR2,
                                i_ICON_TITLE IN VARCHAR2
                                )
    RETURN VARCHAR2 IS
    X_URL VARCHAR2(1000);
    X_height_width varchar2(1000);
    BEGIN
    select decode(I_ICON,'MS_RGA/unlinked_blue.png',' height=20 width=20 ','')
    INTO X_HEIGHT_WIDth
    from dual;
    
    X_URL:='<a target="_self" href="javascript:callForm('''||I_PARAM1||''','''||I_PARAM2||''','''||I_PARAM3||''','''||I_PARAM4||''','''||I_PARAM5||''')">' || '<img border="0" src="/si_image/'||I_ICON||'"'|| x_height_width||' title="'||I_ICON_TITLE||'">' || '</a>' ;
    
    RETURN X_URL;
    
    END;
    
    FUNCTION GET_ALERT_ACTIONS_LINK(
                                I_PARAM1 IN VARCHAR2,
                                I_PARAM2 IN VARCHAR2,
                                I_PARAM3 IN VARCHAR2,
                                I_PARAM4 IN VARCHAR2
                                )
     RETURN VARCHAR2
     IS
     BEGIN
     return '<a target="_self" href=#'||I_PARAM1||'#'||I_PARAM2||'#'||I_PARAM3||'#'||I_PARAM4||'><img border="0" src="/si_image/MS_RGA/Actions.png" title="Alert Action"></a>';
     
     END;
  
     FUNCTION ALERT_ORB_COUNT_FOR_FLT(
                                      I_FILTER_TYPE IN VARCHAR2,
                                      I_FEED_DATA_ID IN VARCHAR2,
                                      I_PARAM_VAL IN VARCHAR2)
    RETURN NUMBER IS
    X_COUNT NUMBER:=0;
    BEGIN
    
    IF I_FILTER_TYPE='CREATED_BY' THEN
    SELECT COUNT(1)
      INTO X_COUNT
      from ms_rga_alert_object_relatio_v t1
      where t1.alert_id=I_FEED_DATA_ID
      and t1.instance_id=(SELECT MAX(t3.instance_id)
            FROM ms_rga_alert_object_relatio_v t3
            WHERE t3.alert_id=I_FEED_DATA_ID
            )
      and upper(dd_event_user_name) like '%'||upper(I_PARAM_VAL)||'%';
            
    ELSIF I_FILTER_TYPE='CREATED_DATE' THEN   
      SELECT COUNT(1)
      INTO X_COUNT
      from ms_rga_alert_object_relatio_v t1
      where t1.alert_id=I_FEED_DATA_ID
      and t1.instance_id=(SELECT MAX(t3.instance_id)
            FROM ms_rga_alert_object_relatio_v t3
            WHERE t3.alert_id=I_FEED_DATA_ID
            )
      and trunc(creation_date) <= trunc(to_date(I_PARAM_VAL,'Mon-dd-yyyy'));
     
    ELSIF I_FILTER_TYPE='LINK_STATUS' THEN 
     SELECT SIGN(COUNT(1))
      INTO X_COUNT
      from ms_rga_alert_object_relatio_v t1
      where t1.alert_id=I_FEED_DATA_ID
      and t1.instance_id=(SELECT MAX(t3.instance_id)
            FROM ms_rga_alert_object_relatio_v t3
            WHERE T3.ALERT_ID=I_FEED_DATA_ID
            );
    END IF;

    RETURN X_COUNT;
    
    END;
    
    
    
------End of functions added on 30-Oct-14 by kvjm 

-- FILTER CHECK FUNCTION ADDED FOR PERFORMANCE  TUNING OF GRCI

FUNCTION FN_CHECK_FILTER_KEY (I_STRING IN VARCHAR2,I_PATTERN IN VARCHAR2) RETURN VARCHAR2 IS 
MY_T MS_VARCHAR2_ARRAY:=MS_VARCHAR2_ARRAY('[^A-Za-z1-9]' || I_PATTERN ||'[^A-Za-z1-9]',
                                          '( )' || I_PATTERN ||'$',
                                           '^' || I_PATTERN || '( )',
                                           '^' || I_PATTERN || '$'
                                          );
RET_VALUE VARCHAR2(100):='FALSE';
BEGIN

SELECT DECODE(MAX(NVL(RESLT,0)),1,'TRUE','FALSE') INTO RET_VALUE FROM(
                      SELECT 1 RESLT FROM TABLE(MY_T) WHERE Regexp_Like(I_STRING,COLUMN_VALUE,'i')
                                                                      );
                      
RETURN RET_VALUE;

 exception
        when others then
           RETURN RET_VALUE;
END  FN_CHECK_FILTER_KEY;


 FUNCTION FN_MATCH_KEYWORD (
                                  I_BODY  IN  CLOB,
                                  I_SUBJECT IN  VARCHAR2,
                                  I_FILTER_KEY  IN VARCHAR2
                                  )
  Return varchar2 Is
  
  x_Proc_Name          Varchar2(100) := 'Fn_check_filter_cond=> ';
	X_filter_key     	   varchar2(4000) :='';
	x_Regexed_List       Varchar2(4000)	:='';
	o_result			       Varchar2(100)  :='FALSE';
	
	begin
		
		X_filter_key:=i_filter_key;
		If X_filter_key is null then
			o_result:='TRUE';
		else 
			x_Regexed_List := Ms_Rga_Utilities.Fn_Enrich_Keyword_List(X_filter_key,',');
      o_result:=FN_CHECK_FILTER_KEY(i_subject,x_Regexed_List);
      if o_result='TRUE' then 
        null;
      else   
         o_result:=FN_CHECK_FILTER_KEY(i_body,x_Regexed_List);   
      end if; 
    end if;  
      /*
			if (Regexp_Like(i_body,
                              '[^A-Za-z1-9]' || x_Regexed_List ||
                              '[^A-Za-z1-9]',
                              'i') or
                 Regexp_Like(i_subject,
                              '[^A-Za-z1-9]' || x_Regexed_List ||
                              '[^A-Za-z1-9]',
                              'i') or
                 Regexp_Like(i_body,
                              '( )' || x_Regexed_List || '$',
                              'i') or
                 Regexp_Like(i_subject,
                              '( )' || x_Regexed_List || '$',
                              'i') or
                 Regexp_Like(i_body,
                              '^' || x_Regexed_List || '( )',
                              'i') or
                 Regexp_Like(i_subject,
                              '^' || x_Regexed_List || '( )',
                              'i') or
                 Regexp_Like(i_body,
                              '^' || x_Regexed_List || '$',
                              'i') or
                 Regexp_Like(i_subject, '^' || x_Regexed_List || '$', 'i')) then 
				 
				o_result:='TRUE';
			
			end if;
		end if;	
    */
        
		RETURN o_result;
		
	 exception
        when others then
           RETURN o_result;
   end FN_MATCH_KEYWORD;
  ------End of FILTER CHECK FUNCTION ADDED FOR PERFORMANCE  TUNING OF GRCI BY DEBDULAL SAMANTA  


FUNCTION Get_Url_Manage_Alerts(
                              --i_Subs_Resp_Id        In Varchar2,
                              i_LOGIN_ID            In Varchar2,
                              i_Feed_Data_Id        In Varchar2,
                              i_Received_On         In Varchar2,
                              i_Channel_Id          In Varchar2)
    RETURN VARCHAR2 IS
    x_url VARCHAR2(1000);

    x_metric_id NUMBER;
    x_curr_stg     NUMBER;   
    x_rel_id     NUMBER;
    X_RESP_ID      NUMBER;
    x_rec_dt       NUMBER;
    x_pid         number := null;
    x_PROCESS_INSTANCE_ID number :=null;
    x_channel_name varchar2(1000);
   x_instance_id         NUMBER := null;
   x_count               number :=1;
   x_assign_user varchar2(1000):=null;
   X_TAB_PID           NUMBER:=NULL;
  BEGIN
    --This generates URL to create or edit Manage Alerts
  
  
    begin 
      select metric_id INTO x_metric_id from si_metrics_t where metric_name = 'MS_RGA_MY_ALERTS';
      select column_sequence into x_curr_stg from si_metric_columns where metric_id = x_metric_id and result_column_name = 'DD_CURRENT_STAGE';
      SELECT COLUMN_SEQUENCE INTO X_REL_ID FROM SI_METRIC_COLUMNS WHERE METRIC_ID = X_METRIC_ID AND RESULT_COLUMN_NAME = 'FEED_DATA_ID';
      select column_sequence into x_rec_dt from si_metric_columns where metric_id = x_metric_id and result_column_name = 'ALERT_DATE';
      X_CHANNEL_NAME:=GET_CHANNEL_NAME(I_CHANNEL_ID);
      
      begin
          select MAX(DD_PROCESS_INSTANCE_ID ) INTO X_TAB_PID FROM MS_RGA_MANAGE_ALERTS WHERE FEED_dATA_ID = I_FEED_DATA_ID ;
      exception 
      when others then 
          X_TAB_PID:= null;
      end;
      
  	   SELECT MAX(MRMA.PROCESS_INSTANCE_ID),MAX(INSTANCE_ID)
       INTO x_pid,x_instance_id
       FROM MS_RGA_MY_ALERTS_V MRMA  
       WHERE PROCESS_INSTANCE_ID=(SELECT MAX(PROCESS_INSTANCE_ID) FROM MS_RGA_MY_ALERTS_V WHERE FEED_DATA_ID=I_FEED_DATA_ID);
   
    exception
    when others then
      x_metric_id := null;
      x_curr_stg := null;
      X_REL_ID := NULL;
      x_rec_dt := null;
      x_pid := null;
   end;  
    
IF X_PID IS NOT NULL THEN

  IF X_TAB_PID IS NOT NULL THEN--PUBLISHED
      
           x_url := 'Pushinfolet?id=' ||   X_METRIC_ID 
            || CHR(38) || 'proc=' || X_TAB_PID
            || CHR(38) || 'fromrpt=Y' 
       
           ; 
  
  ELSE
  x_url := 'Pushinfolet?id=' ||   X_METRIC_ID 
                || CHR(38) || 'proc=' || x_pid
                || CHR(38) || 'fromrpt=Y' ;

   end if;
else 

x_url := 'Pushinfolet?id=' ||   X_METRIC_ID 
                || CHR(38) || 'proc=' || x_pid
                || CHR(38) || 'fromrpt=Y' 
                || CHR(38) || 'x_v' || X_REL_ID || '='|| I_FEED_DATA_ID 
                || CHR(38) || 'x_v' || X_REC_DT || '=' ||I_RECEIVED_ON
               || CHR(38) || 'ChName/*-*-/' || SUBSTR(X_CHANNEL_NAME,1,60)||(CASE WHEN LENGTH(X_CHANNEL_NAME) > 60 THEN  '...' END)||'ChName/*-*-/' ; 
end if;
  
  /*     
         begin
      
        SELECT ms_apps_utilities.get_user_NAME(USER_ID)
        INTO x_assign_user
        FROM SI_EVENT_ASSIGNMENTS EA WHERE EA.PROCESS_INSTANCE_ID=x_pid
                                                    --  and ea.user_id=ms_apps_utilities.get_user_id(i_LOGIN_ID)
                                                      AND EA.STATUS<>2
                                                      AND EA.ASSIGNMENT_ID > 0
                                          ;
          exception
          when others then 
        x_assign_user := null;
         end;
         */
         /*
           if     x_assign_user is not null  then 
            if x_assign_user = i_LOGIN_ID then 
              x_url := 'Pushinfolet?id=' ||   X_METRIC_ID 
                || CHR(38) || 'proc=' || x_pid
                || CHR(38) || 'fromrpt=Y' ;
            --      || CHR(38) || 'instid='  || x_instance_id
           --    || CHR(38) || 'x_v' || X_REL_ID || '='|| I_FEED_DATA_ID 
           --    || CHR(38) || 'x_v' || X_REC_DT || '=' ||I_RECEIVED_ON
           */
          -- || CHR(38) || 'ChName/*-*/' || SUBSTR(X_CHANNEL_NAME,1,60)||(CASE WHEN LENGTH(X_CHANNEL_NAME) > 60 THEN  '...' END)||'ChName/*-*/' 

/*          
            else 
            --x_url := '1';
             x_url := 'Pushinfolet?id=' ||   X_METRIC_ID 
                || CHR(38) || 'proc=' || x_pid
                || CHR(38) || 'fromrpt=Y' ;
            end if; 
      ELSE 
      -- NO ASSIGNMENTS BUT PID PRESENT IN VIEW.. OPEN WITH PID
      x_url := 'Pushinfolet?id=' ||   X_METRIC_ID 
                || CHR(38) || 'proc=' || x_pid
                || CHR(38) || 'fromrpt=Y';
     end if; 
     
  end if;
else    --New Form

x_url := 'Pushinfolet?id=' ||   X_METRIC_ID 
                || CHR(38) || 'proc=' || x_pid
                || CHR(38) || 'fromrpt=Y' 
                || CHR(38) || 'x_v' || X_REL_ID || '='|| I_FEED_DATA_ID 
                || CHR(38) || 'x_v' || X_REC_DT || '=' ||I_RECEIVED_ON
               || CHR(38) || 'ChName/*-*-/' || SUBSTR(X_CHANNEL_NAME,1,60)||(CASE WHEN LENGTH(X_CHANNEL_NAME) > 60 THEN  '...' END)||'ChName/*-*-/' ; 


end if;
*/
  
   RETURN x_url;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;	  
     END Get_Url_Manage_Alerts;  	


 FUNCTION CHECK_FORM_ACCESS
        (
            ip_pushform_id                         IN            NUMBER,
            ip_process_instance_id                 IN            NUMBER,
            ip_user_name                           IN            VARCHAR2
        )
    RETURN NUMBER
    AS
        LV_count NUMBER:=null;
        LV_ERROR_CODE NUMBER;
        LV_ERROR_MESSAGE VARCHAR2(4000);
    BEGIN
        SELECT COUNT(1)
          INTO LV_count
          FROM SI_EVENT_ASSIGNMENTS
         WHERE PROCESS_INSTANCE_ID = ip_process_instance_id
           AND USER_ID = 
                    (
                        SELECT USER_ID 
                          FROM SI_USERS 
                         WHERE UPPER(USER_NAME) = UPPER(ip_user_name)
                    )
          --and STATUS<>2 and ASSIGNMENT_ID > 0
          ;

        IF LV_count > 0 THEN

            RETURN 1;
        ELSE
            RETURN 2;
        END IF;
        
         
        
    EXCEPTION
        WHEN OTHERS THEN
     
            LV_ERROR_CODE := SQLCODE;
            LV_ERROR_MESSAGE := SUBSTR(SQLERRM, 1, 4000);
              RETURN 0;
    END CHECK_FORM_ACCESS;

FUNCTION GET_ISSUE_RATING(IP_ISSUE_RATING_GRCI IN varchar2) 
return VARCHAR2 RESULT_CACHE
  IS
     ln_var1 VARCHAR2(4000);
     
  BEGIN
     SELECT  DECODE(IP_ISSUE_RATING_GRCI,1,'High',2,'Medium',3,'Low') INTO ln_var1 FROM DUAL;

  RETURN ln_var1;

  END GET_ISSUE_RATING;
  
FUNCTION get_form_name(
    pc_flow_code  VARCHAR2,
    pc_stage_code VARCHAR2,
    pn_pid        NUMBER,
    pn_id         NUMBER )
  RETURN VARCHAR2
IS
  lv_object_name VARCHAR2 (400);
  lv_form_name   VARCHAR2 (400);
  lv_query       varchar2(4000);
  lv_current_user_name varchar2(100);
  lv_locale varchar2(100);
begin
  
  lv_object_name := get_object_name (pc_flow_code);
    lv_query:='select distinct dd_current_user_name from '||lv_object_name||'_v where process_instance_id=:1 and instance_id=(select max(instance_id) from '||lv_object_name||'_v where process_instance_id=:1)';
    execute immediate lv_query into lv_current_user_name USING pn_pid,pn_pid;
    
  select locale into lv_locale from  si_users_t where user_name=lv_current_user_name;
  
  if(lv_locale='en_US') then
   SELECT form_name
  INTO lv_form_name
  FROM si_metrics_t
  WHERE metric_id =
    (SELECT MAX (metric_id) FROM si_metrics_t WHERE metric_name = lv_object_name
    ) ;
    else
     SELECT form_name
  INTO lv_form_name
  FROM si_metrics_tl
  WHERE metric_id =
    (SELECT MAX (metric_id) FROM si_metrics_t WHERE metric_name = lv_object_name
    ) AND LOCALE_ID =(SELECT LOCALE_ID FROM SI_LOCALES WHERE LOCALE_STRING=lv_locale);
     
    end if;
 
  RETURN lv_form_name;
EXCEPTION
WHEN NO_DATA_FOUND THEN
  
  RETURN NULL;
WHEN OTHERS THEN
  RETURN NULL;
END;

FUNCTION get_object_name(
    pc_flow_code VARCHAR2)
  RETURN VARCHAR2
IS
  lc_namespace VARCHAR2 (100) := 'xmlns="http://www.metricstream.com/appstudio/mdf"';
  lv_flow XMLTYPE;
  lv_object_name VARCHAR2 (400);
BEGIN
  --
  -- From the flow code, extract the name of the View
  -- TODO : Need to add the version number here later once versioning is implemented
  --
  BEGIN
    SELECT XMLTYPE (flow_xml)
    INTO lv_flow
    FROM ms_apps_mdf_flow_xml
    WHERE flow_code = pc_flow_code;
    --
    -- From the first stage, extract then name of the object view
    --
    SELECT stages.EXTRACT ('stage/object/text()', lc_namespace).getstringval () view_name
    INTO lv_object_name
    FROM TABLE (XMLSEQUENCE (
      (SELECT lv_flow.EXTRACT ('process/stages/stage[enabled="Y"]', lc_namespace )
      FROM DUAL
      ) ) ) stages
    WHERE ROWNUM = 1;
  EXCEPTION
  WHEN OTHERS THEN
    RETURN NULL;
  END;
  RETURN LV_OBJECT_NAME;
END get_object_name;

FUNCTION get_flow_view_name(
    pc_flow_code VARCHAR2,
    pc_view_type VARCHAR2 DEFAULT 'V' )
  RETURN VARCHAR2
IS
  lc_namespace VARCHAR2 (100) := 'xmlns="http://www.metricstream.com/appstudio/mdf"';
  lv_flow XMLTYPE;
  lv_view_name VARCHAR2 (400);
BEGIN
  --
  -- From the flow code, extract the name of the View
  -- TODO : Need to add the version number here later once versioning is implemented
  --
  BEGIN
    SELECT XMLTYPE (flow_xml)
    INTO lv_flow
    FROM ms_apps_mdf_flow_xml
    WHERE flow_code = pc_flow_code;
    IF pc_view_type ='V' THEN
      SELECT stages.EXTRACT ('stage/view/text()', lc_namespace).getstringval () view_name
      INTO lv_view_name
      FROM TABLE (XMLSEQUENCE (
        (SELECT lv_flow.EXTRACT ('process/stages/stage[enabled="Y"]', lc_namespace )
        FROM DUAL
        ) ) ) stages
      WHERE ROWNUM = 1;
    ELSE
      SELECT stages.EXTRACT ('stage/displayview/text()', lc_namespace).getstringval () view_name
      INTO lv_view_name
      FROM TABLE (XMLSEQUENCE (
        (SELECT lv_flow.EXTRACT ('process/stages/stage[enabled="Y"]', lc_namespace )
        FROM DUAL
        ) ) ) stages
      WHERE ROWNUM = 1;
    END IF;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
  RETURN NULL;
  END;
  RETURN LV_VIEW_NAME;
END get_flow_view_name;
  
  

FUNCTION objectName_substr_for_assgnmnt(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER )
  RETURN VARCHAR2
IS
  lv_object_name VARCHAR2(4000);
  lv_Exec_imd    VARCHAR2(4000);
  PC_VIEW_NAME   VARCHAR2(1000);
BEGIN 
  PC_VIEW_NAME:= GET_FLOW_VIEW_NAME (PC_FLOW_CODE);
  lv_Exec_imd := 'SELECT alert_title FROM ' || pc_view_name || '    
where process_instance_id =  '||pn_pid ||' AND instance_id= '|| pn_id || ' and  rownum = 1';
  EXECUTE IMMEDIATE lv_Exec_imd INTO lv_object_name;

  if length(lv_object_name) > 850 then
    lv_object_name := substr(lv_object_name, 1, 850);
  end if;

  RETURN lv_object_name;
EXCEPTION
WHEN OTHERS THEN
RETURN NULL;
end;


FUNCTION fn_subscription_status(
                        
                        i_status VARCHAR,
                        i_user_id IN NUMBER) RETURN VARCHAR2 IS
    x_status_val VARCHAR2(100);
  BEGIN
    --This statement returns  the user id for the user name.
 
 SELECT a.displayed_value into x_status_val
FROM MS_QS_LOV_DISPLAY_VALUES_V a,SI_USERS_T B, SI_LOCALES C
WHERE A.lov_name='MS_RGA_SUBSCRIPTION_STATUS'
AND A.LOCALE_ID = C.LOCALE_ID
and B.LOCALE = C.LOCALE_STRING
and B.USER_ID = i_user_id
and A.stored_value=i_status;
 
 
  
    RETURN x_status_val; 
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;



END ms_rga_utilities; ]]></TEXT_BODY>
</PACKAGE_SPEC>
