<html>
<head>
<title>@title@</title>
<meta http-equiv="Expires" content="0">
<meta http-equiv="pragma" content="no-cache">
<meta http-equiv="Content-Type" content="text/html; charset=@CHARACTER_SET@">
<LINK REL="stylesheet" TYPE="text/css" HREF="@WEBROOT@/gui_styles.css"/>
<LINK REL="stylesheet" TYPE="text/css" HREF="@WEBROOT@/commonui_new.css"/>
<!--
/*
 * SYSTEMi Copyright (c) 2000-2003, MetricStream, Inc. All rights reserved.
 * @@Author: <Vikas Jaitly(vjaitly@@metricstream.com)>
 * @@Created: <05/12/2009>
 * $Id:GridPlainExpander.xhtmp $
 */
-->

@%'report/include/reports_include_style_section.htmp'@

</head>
@reqNotFromZaplet(
<body @ENABLE_JS(onload="javascript:onLoadBehaviors()")@ bgcolor="#ffffff" text="#000000" link="#000099" vlink="#000099" alink="#000099" >
)@
@reqFromZaplet(
<body bgcolor="#ffffff" text="#000000" link="#000099" vlink="#000099" alink="#000099">
)@
<SCRIPT src="@WEBROOT@/calenderfunctions.js" language="Javascript">
</SCRIPT>
<SCRIPT src="@WEBROOT@/generic.js" language="Javascript">
</SCRIPT>
<SCRIPT src="@WEBROOT@/reportFunctions.js" language="Javascript">
</SCRIPT>
<SCRIPT src="@WEBROOT@/ext/RowExpander.js" language="Javascript">
</SCRIPT>
<style type="text/css">
.rowlimit{
height:100px;
overflow: auto;
width: 100%;
max-width: 100%;
}
</style>
<SCRIPT src="@WEBROOT@/ext/GridSummary.js" language="Javascript">
</SCRIPT>
<script type="text/javascript" src="@WEBROOT@/FusionCharts/jquery.min.js"></script>

<script language = "javascript" >

function onLoadBehaviors() {
    // resize the window only if the report is opened in a new window
    //@OUTPUT_WINDOW{@NEW_WINDOW(
        setWindowSize();
    //)@}@
}

function callBackFn(val) {
           debugger;                     
                                //window.close();
                                abc.close();
                                  
                                     
          alert('Response Saved Successfully');
                                
    }

function setWindowSize() {
    // only resize for Internet Explorer
    if (navigator.userAgent.indexOf("MSIE") > -1) {
        window.resizeTo(550, 500);
        window.moveTo(150, 100);
    }
}
function callForm(formType, param1,param2,param3,param4){

	//Ext.example.msg('Button Click', 'You clicked ta button');
	//console.log("formType:"+formType + " - param1:"+param1+ " - param2:"+param2+ " - param3:"+param3+ " - param4:"+param4);
    
	Ext.Ajax.request({
		url : 'Grciajaxservlet/ajax/getAlertSummeryReportDetails',
		method : 'POST',
		params : {
				formType:formType,
				param1:param1,
				param2:param2,
				param3:param3,
				param4:param4
				},
		success : function(response, options) {
				//GraphEditor.mask.hide();
				//alert('debwfhjfgbf');
				//console.log(response.responseText);
				callreportdetails(response.responseText+'&flag=1&emd=1');
				return;
		},
		failure : function(response,options) {
				//GraphEditor.mask.hide();
				//alert(response.responseText);
				alert("Failure");
				
				return;
		}
	});

}


function populateReviewed(chkBoxId)
{
	var checkboxValue='';
	var	userId = window.top.getLabel('userId');
	
	if(chkBoxId.checked)
	{
		checkboxValue = chkBoxId.value;
		createAlertsAjaxCall(checkboxValue, userId, 1, 'UPDATE_ALERT_REVIEW_STATUS');
	}
	else
	{  
		checkboxValue = chkBoxId.value;
		createAlertsAjaxCall(checkboxValue, userId, 0, 'UPDATE_ALERT_REVIEW_STATUS');
	}
	
	checkRevFolAllNone('reviewChk', 'reviewedChk');

}

function populateFollowup(chkBoxId)
{
	var checkboxValue='';
	var	userId = window.top.getLabel('userId');
	
	if(chkBoxId.checked)
	{	
		checkboxValue = chkBoxId.value;
		createAlertsAjaxCall(checkboxValue, userId, 1, 'UPDATE_ALERT_FOLLOWUP_STATUS');
	}
	else
	{  
		checkboxValue = chkBoxId.value;
		createAlertsAjaxCall(checkboxValue, userId, 0, 'UPDATE_ALERT_FOLLOWUP_STATUS');
	}
	
	checkRevFolAllNone('followChk', 'followedChk');
	
}

function selectReviewAllNone()
{	
		var checkBoxes=document.getElementsByName('reviewedChk');
		var reviewChk = document.getElementById('reviewChk');
		var	userId = window.top.getLabel('userId');
		
		if(reviewChk.checked){
		
        for (i=0; i < checkBoxes.length; i++) {		
			if (!checkBoxes[i].checked || checkBoxes[i].checked == 'false') {			
				checkBoxes[i].setAttribute('checked',true);	
				checkBoxes[i].checked = true;				
				createAlertsAjaxCall(checkBoxes[i].value, userId, 1, 'UPDATE_ALERT_REVIEW_STATUS');
			}
		}
		}else{
			for (i=0; i < checkBoxes.length; i++) {
			if (checkBoxes[i].checked) {
				checkBoxes[i].checked = false;
				checkBoxes[i].setAttribute('checked',false);				
				createAlertsAjaxCall(checkBoxes[i].value, userId, 0, 'UPDATE_ALERT_REVIEW_STATUS');
			}
		}			
		}
}
	
function selectFollowAllNone()
	{	
		var checkBoxes=document.getElementsByName('followedChk');
		var followChk = document.getElementById('followChk');
		var	userId = window.top.getLabel('userId');
		if(followChk.checked){
			for (var i=0; i < checkBoxes.length; i++) {
				if (!checkBoxes[i].checked || checkBoxes[i].checked == 'false') {
					checkBoxes[i].setAttribute('checked',true);
					checkBoxes[i].checked = true;
					createAlertsAjaxCall(checkBoxes[i].value, userId, 1, 'UPDATE_ALERT_FOLLOWUP_STATUS');
				}
			}
		}else{
			for (var i=0; i < checkBoxes.length; i++) {
				if (checkBoxes[i].checked) {
					checkBoxes[i].setAttribute('checked',false);
					checkBoxes[i].checked = false;
					createAlertsAjaxCall(checkBoxes[i].value, userId, 0, 'UPDATE_ALERT_FOLLOWUP_STATUS');
				}
			}
		}
	}
	
function checkRevFolAllNone(elementId, elementsId){

	var checkBoxes=document.getElementsByName(elementsId);
	var chklength=Ext.getCmp('grid').store.data.length;
	var chkCount = 0;
	var unChkCount = 0;
	
	for (i=0; i < checkBoxes.length; i++) {
			if (checkBoxes[i].checked) {
				chkCount++ ;
			}else
				unChkCount++;
		}
	
	if(chkCount > 0 && chklength == chkCount)
		document.getElementById(elementId).checked = true;
	else if(unChkCount > 0)
		document.getElementById(elementId).checked = false;
}

function SelecttoParent()
{
  try
  {	
    parent.window.opener.callParent(selectedrows,selectDispRows);
	parent.window.opener.focus();
	parent.window.close();
  } 
  catch(e){
	alert("You don't have permission to select the issues/actions. Please close this report and generate again.")
   document.getElementById("select_id").style.display ="none";
  }
  //window.close();
}
function doCancel()
{
  parent.window.close();
}

function viewlink_function(url)
{
 
   window.open(url,'_blank',"scrollbars=yes, left =50,top=100,width=800, height=500,position=center,resizable=yes");
}

</SCRIPT>

<script language = "javascript">
String.prototype.endsWith = function(str) 
{return (this.match(str+"$")==str)}
  
function callreportdetails(paramone)
{   
     
    var p1;
    var tmp=escape("@REPORT_PARAMS(@parameter_value@)@");    
    var def_tag1="CP_REPORT_ID=@REPORT_ID@&CP_METRIC_ID=@METRIC_ID@&CP_POPUP_FOR_BLANK_PARAMS=false&CP_DATE_CODE=2&CP_pV0="+tmp+"&CP_pS0=1&CP_name=Infocenter&CP_CURRENT_FORM=2&CP_pN=1&";
    
    
	var bare = window.parent.location.href;
	 if (bare.endsWith("Home")) {
		    paramone=paramone+'&x_edit_mode=Yes'+"&submit_back=no&bare="+location.href+"&"+def_tag1;
	 }else{
		paramone=paramone+'&x_edit_mode=Yes'+"&submit_back=yes&bare="+encodeURIComponent(bare);
	 }
     
     
      //p1=paramone.substring(0,2000);   
	  //top.openPage(p1);
	 var abc=window.open(paramone,'_blank', "scrollbars=yes, width=800, height=450, screenX=150, screenY=0, resizable=yes, status=yes");

	/*paramone=paramone+'&x_edit_mode=Yes'+"&submit_back=yes&bare=@SERVLET_URL@/Pushreportinline&"+def_tag1;
    
   
    
    p1=paramone.substring(0,2000);   
     window.location=p1; */
	 
}

function callreportdetails1(paramone)
{   
      
    var p1;
    var tmp=escape("@REPORT_PARAMS(@parameter_value@)@");    
    var def_tag1="CP_REPORT_ID=@REPORT_ID@&CP_METRIC_ID=@METRIC_ID@&CP_POPUP_FOR_BLANK_PARAMS=false&CP_DATE_CODE=2&CP_pV0="+tmp+"&CP_pS0=1&CP_name=Infocenter&CP_CURRENT_FORM=2&CP_pN=1&";
    
    
	var bare = window.parent.location.href;
	 
	 paramone=paramone+'&x_edit_mode=Yes'+"&submit_back=yes&bare="+encodeURIComponent(bare);
     
     
    // p1=paramone.substring(0,2000);   
     //window.location=p1;
	 // top.openPage(p1);
	 //window.open("", paramone, "scrollbars=yes, width=500, height=500, screenX=150, screenY=0, resizable=yes, status=yes");
	//paramone=paramone+'&x_edit_mode=Yes'+"&submit_back=yes&bare=@SERVLET_URL@/Pushreportinline&"+def_tag1;
    
   
    //viewlink_function(paramone);
	//p1=paramone.substring(0,2000); 
	window.open(paramone,'_blank', "scrollbars=yes, width=800, height=450, screenX=150, screenY=0, resizable=yes, status=yes");
	//window.open(url,'_blank',"scrollbars=yes, left =50,top=100,width=800, height=500,position=center,resizable=yes");
    //p1=paramone.substring(0,2000);   
    //window.location=p1; 
	
    
}
</script>

<script language = "javascript" >

var contextParams= {};

</script>

<script language = "javascript" >

//
// This is the main layout definition.
//
Ext.onReady(function(){
	
	Ext.QuickTips.init();
    
    

var ppop = null;
// Store reportid for future use
var report_id = '@REPORT_ID@';

// Global instances for storing session data
var parReqDisplay = '@PARAMETERS_FOR_REQ_DISP@';
var parReq = '@.PARAMETERS_FOR_REQ@';
var rtSortColSeq='@RUNTIME_SORT_COL_SEQ@';
var rtSortDir='@RUNTIME_SORT_DIR@';
var srchCond='@SEARCH_COND@';
var numRows='@NUM_ROWS@';
var baseparams = {
"REPORT_ID":"@REPORT_ID@",
"METRIC_ID":"@METRIC_ID@",
"INSTANCE_ID":"@INSTANCE_ID@",
"INSTANCE_ID_2":"@INSTANCE_ID_2@",
"REP_MODE":"@REP_MODE@",
'ENTERPRISE_ID':'@ENTERPRISE_ID@',
"REPORT_NAME":"@REPORT_NAME@",
"replaceTitle":"@replaceTitle@"
};

var baseparams2 = {
'PARAMETERS_FOR_REQ':'@.PARAMETERS_FOR_REQ@',
'RUNTIME_SORT_COL_SEQ':'@RUNTIME_SORT_COL_SEQ@',
'SEARCH_COND': '@SEARCH_COND@',
'RUNTIME_SORT_DIR':'@RUNTIME_SORT_DIR@'
};

var toolparams = Ext.apply({}, baseparams);

// For options - baseparams & baseparams2
// For scrolling - baseparams & baseparams2 & pageu

// Filter Parameters data
// This has each parameters separately. and not required for normal report functionality
var filterparams = Ext.apply({},baseparams);

Ext.apply(filterparams, {
"metricid":"@metricid@",
"STARTING_INSTANCE_ID":"@STARTING_INSTANCE_ID@",
"OFFSET_INSTANCE_ID":"@OFFSET_INSTANCE_ID@",
"REP_ACTION":"@REP_ACTION@",
"RELATED_MODE":"@RELATED_MODE@",
"DISPLAY_SET_NUM":"@DISPLAY_SET_NUME@",
"NAME_OF_SUBMIT_TARGET":"@NAME_OF_SUBMIT_TARGET@",
"CORRECTIVE_ACTION_ID":"@CORRECTIVE_ACTION_ID@",
"ACTION_TYPE_ID":"@ACTION_TYPE_ID@",
"REPORT_TYPE":"@REPORT_TYPE@",
"OUTPUT_WINDOW":"@OUTPUT_WINDOW@",
"wrapper":"@wrapper@",
"PARAMS_CODE":"@PARAMS_CODE@",
"CURRENT_FORM":"@CURRENT_FORM@",
"METRIC_ID_REF":"@METRIC_ID_REF@",
"INSTANCE_ID_REF":"@INSTANCE_ID_REF@",
"HISTORY_DATE1":"@HISTORY_DATE1@",
"HISTORY_DATE2":"@HISTORY_DATE2@",
"HISTORY_DATE_ERR":"@HISTORY_DATE_ERR@",
"ERR_MSG":"@ERR_MSG@",
"templ":"@templatename@",
"REPORT_LAYOUT":"@REPORT_LAYOUT@",
"errorHidden":"@ERR_MSG@",
"output":"@output@",
"copyright_needed":"@copyright_needed@",submit_x:16});

var recPerPage = @RECORDS_PER_PAGE@;

@CONTEXT_SENSITIVE_FUNC(
    contextParams= Ext.apply({}, baseparams);

    Ext.apply(contextParams, {
        'PARAMETERS_FOR_REQ':'@.PARAMETERS_FOR_REQ@',
        'SELSTR':'@SELSTR@',
        'METRIC_VIEW':'@METRIC_VIEW@',
        'wrapper':'@wrapper@',
        'OUTPUT_WINDOW':'@OUTPUT_WINDOW@',
        'output':'@output@',
        'copyright_needed':'@copyright_needed@'
    });
)@



// Include common grid section
@%'report/include/reports_include_common_grid.xhtmp'@    

// Include filter section
@%'report/include/reports_include_filter_section_grid.xhtmp'@


    

    function summaryrenderer(v, params, data) {
           // params.attr = 'ext:qtip="Total no. of companies"'; // summary column tooltip example
           if(store.reader.summaryData)
            var summary = store.reader.summaryData[params.id];
            if(summary) {
                v= summary.desc + ' ' + summary.value;
            }
            return v? v  : '';
    }

    function colRenderer(val, meta, record, rowIndex, colIndex, store) {
        val = val || '';
        var rv = val.split('_$$');
        if(rv.length >1) {
            val = rv[1];
            if(meta) {
                meta.attr= 'style="'+ rv[0]+ '"';
            }
        }
       
        try {
        
        //meta.attr = 'style="background-color:yellow;color:red;"';
        }catch(e) {}
      
        

        return val;

		

    }

    var expander = new Ext.ux.grid.RowExpander({
		tpl : new Ext.XTemplate('<div class="rowlimit"><br>'
            @HEADER_INFO(@HEADER_ROW(@MORE_DATA{@""()@@(@HROW(,'<p style="width: 50%;"><b>@USER_NAME@:</b> {[this.renderdata(values[@DATA_COL_SEQ@])]}</p><br>'
)@)@}@)@)@
,'</div>',
    {
        renderdata: function(val){
            val = val || '';
            var rv = val.split('_$$');
            if(rv.length >1) {
                val = rv[1];
                val= '<span style="'+ rv[0]+ '">' + rv[1] + '</span>';
            }
            return val;
        }
    }
        )
    });

        var gridColumnModel = new Ext.grid.ColumnModel([expander
@HEADER_INFO(@HEADER_ROW[0](@MORE_DATA{@""(@HROW(,{header: '@USER_NAME@',renderer:colRenderer,summaryRenderer: summaryrenderer, dataIndex:'@DATA_COL_SEQ@',width:@COL_WIDTH@,height:0,align:'@ALIGN_HDG@'}
)@)@}@)@@HEADER_ROW[1..](@MORE_DATA{@""(@HROW(,{header: '@USER_NAME@',renderer:colRenderer, summaryRenderer: summaryrenderer, dataIndex:'@DATA_COL_SEQ@',width:@COL_WIDTH@,height:0,align:'@ALIGN_HDG@'}
)@)@}@
)@
)@ ]);

//sortable:@SORT_LINK{@""(false)@@(true)@}@
//sortable:true
/*
var gridColumnModel = new Ext.grid.ColumnModel([expander
@HEADER_INFO(@HEADER_ROW[0](@MORE_DATA{@""(@HROW(,{header: '@USER_NAME@',sortable:true, renderer:colRenderer,summaryRenderer: summaryrenderer, dataIndex:'@DATA_COL_SEQ@',width:@COL_WIDTH@,align:'@ALIGN_HDG@'}
)@)@}@)@@HEADER_ROW[1..](@MORE_DATA{@""(@HROW(,{header: '@USER_NAME@',sortable:true, renderer:colRenderer, summaryRenderer: summaryrenderer, dataIndex:'@DATA_COL_SEQ@',width:@COL_WIDTH@,align:'@ALIGN_HDG@'}
)@)@}@
)@
)@ ]);
*/	   
    var recordModel= [
    @HEADER_INFO(@HEADER_ROW[0](@HROW({name:'@DATA_COL_SEQ@',mapping:'col@DATA_COL_SEQ@'})@)@
    @HEADER_ROW[1..](@HROW(,{name:'@DATA_COL_SEQ@',mapping:'col@DATA_COL_SEQ@'})@)@
    )@ ];

       var store = new Ext.data.Store({
            reader: new Ext.data.CFQueryReader({
                id: 'NAME', // This is supposed to match the 'mapping'
                fields:recordModel
            }),
            fields: recordModel,
            remoteSort: true,
            url:'Reportsstart/ajax/ReportStart?REPORT_ID=@REPORT_ID@&templ=Tabularjson.xhtmp'
            ,id:'dataStoreId'
        });

        store.on('beforeload', function(store, options) {
            options.params || (options.params = {}); //assert params
            var start=options.params.start ;
            var limit= options.params.limit;

            //limit=(limit==0) ? 1: limit;
            var pageu = 'all';
            if (limit != -1) {
                pageu = Math.floor(start/limit)+1;
                Ext.apply(options.params, {
                    RECORDS_PER_PAGE : limit
                });
				//alert('fvewrre');
					var delay=1500;//.5 seconds
					var GraphEditor = {};
					GraphEditor.mask = new Ext.LoadMask(Ext.getBody(), {msg:'Loading..Please Wait..'});
					GraphEditor.mask.show();
					//tree.getRootNode().collapse();
					setTimeout(function(){
					//alert('findddd');
				
					GraphEditor.mask.hide();
					//tree.getRootNode().expand();
		
		
    //your code to be executed after 1 seconds
    },delay);

            }
            Ext.apply(options.params, {
                //apply stuff to params
                //assuming pageNumber has been calculated into this var
                pageu:pageu
            });

            if(store.sortInfo) {
                rtSortDir = store.sortInfo.direction;
                rtSortColSeq = store.sortInfo.field;
            }
            if (!options.params.submit_x) {
                Ext.apply(options.params, baseparams);

                Ext.apply(options.params, {
                    'PARAMETERS_FOR_REQ':parReq,
                    'RUNTIME_SORT_COL_SEQ':rtSortColSeq,
                    'SEARCH_COND': srchCond,
                    'RUNTIME_SORT_DIR':rtSortDir
                });
            }
          
        });
        store.on('load', function(store, recs, options) {
            parReqDisplay = store.reader.paramsForReqDisp;
            parReq= store.reader.paramsForReq;
            //rtSortColSeq= store.reader.rtSortColSeq;
            //rtSortDir= store.reader.rtSortDir;
            //srchCond= store.reader.srchCond;
			

            /*if(store.reader.errmsg) {
                Ext.getCmp('errmsg').show();
                Ext.getCmp('errmsg').el.update( store.reader.errmsg);
                //errorbar.hidden=false;
            } else {
                if(Ext.getCmp('errmsg'))
                Ext.getCmp('errmsg').hide();
            }*/
            showError(store.reader.errmsg);
            baseparams.INSTANCE_ID = store.reader.currentInstanceId; 
            numRows = store.reader.totalRowCount;
            contextParams.INSTANCE_ID = store.reader.currentInstanceId;
            document.contextform.INSTANCE_ID.value = store.reader.currentInstanceId;
            document.contextform.PARAMETERS_FOR_REQ.value = store.reader.paramsForReq;
			//alert(store.reader.paramsForReq);
            //Ext.getCmp('grid').setTitle(store.reader.dtTime);
			if(store.reader.replaceTitle == 'true'){
				if(Ext.getCmp('title').el && store.reader.reportName != '')Ext.getCmp('title').el.update(store.reader.reportName);
			}else{
				baseparams.replaceTitle = true;
			}
            // Since the pageSize is not known for 'all' update with totalrowcount
            if(options.params.pageu=='all') {
			
                bbar.pageSize=store.reader.totalRowCount;
            }

            // If the parameters were submitted using form submit
            // Then we should clear it, because clicking on 'sort' uses
            // cached information, and it will go to validateFormData()
            if(options.params.submit_x) {
                store.lastOptions.params = {};
            }
			checkRevFolAllNone('reviewChk', 'reviewedChk');
			checkRevFolAllNone('followChk', 'followedChk');
			
			jQuery('[title="Alert Action"]').click(function(event) {
				//var fullText = event.currentTarget.parentElement.attributes[1].value;
				var fullText=$(this).parent()[0].attributes.href.value;

				//console.log(fullText);
				//var result = fullText.split('#')
		
				var cMenu = new Ext.menu.Menu({
					items : getMenuArray(fullText)
				});

				var location =[event.clientX,event.clientY];
				cMenu.showAt(location);
			});
			
        });

function getMenuArray(val){
	var result = val.split('#');
	var menuArrButton = new Array();
    
	menuArrButton.push({
		text : 'Manage Alerts',
		handler : function () {
			menuOption=1;
			callForm('MANAGE_ALERTS',result[1],result[2],result[3],result[4]); 
		}
	});
	
	menuArrButton.push({
		text : 'Notify User(s)',
		handler : function () {
			menuOption=2;
			callForm('NOTIFY_USERS',result[1],result[2],result[3],result[4]); 
		}
	});
	
	menuArrButton.push({
		text : 'Log Issue',
		handler : function () {
			menuOption=3;
			callForm('LOG_ISSUES',result[1],result[2],result[3],result[4]); 
		}
	});
	
	menuArrButton.push({
		text : 'Link Object',
		handler : function () {
			menuOption=4;
			callForm('ORB_REL',result[1],result[2],result[3],result[4]); 
		}
	});
	
	
	return menuArrButton;
}		
		
var combo = new Ext.form.ComboBox({
  name : 'perpage',
  width: 60,
  store: new Ext.data.SimpleStore({
    fields: ['id'],
    data  : [
      ['20'],
      ['40'],
      ['80'],
      ['All']
    ]
  }),
  mode : 'local',
  value: recPerPage,

  listWidth     : 40,
  triggerAction : 'all',
  displayField  : 'id',
  valueField    : 'id',
  editable      : false,
  forceSelection: true
});

var bbar= new Ext.PagingToolbar({
            store: store,
            pageSize : recPerPage,
            displayInfo: true,
            items   :    [
                    '-'
                    @output{@"infoport"()@@(
                    ,'Records per page: '
                    ,combo
                    )@}@
            ],
			displayMsg     :''+getDivPopup()+'<div style="padding-bottom:5px;" id="aggResult"></div><a href="#" style="color:black;" onclick="callAggInfolet()" >'+'@Refresh@'+'</a>&nbsp;|&nbsp;'+'@label.dispayingrecords@ '+'{0} - {1} '+'@label.of@ '+'{2}',
            emptyMsg       :''+getDivPopup()+'<div style="padding-bottom:5px;" id="aggResult"></div><a href="#" style="color:black;" onclick="callAggInfolet()" >'+'@Refresh@'+'</a>&nbsp;|&nbsp;'+"@label.norecordstodisplay@"

        });

    combo.on('select', function(combo, record) {
	
        if('All' == record.get('id')) {
            bbar.pageSize =-1;
        } else {
            bbar.pageSize = parseInt(record.get('id'), 10);
        }
            recPerPage = bbar.pageSize;
        bbar.doLoad(0);

    }, this);


    var summary = new Ext.ux.grid.GridSummary();

    var mainPanel = {
    	xtype: 'panel',
        id: 'main-panel',
		layout: 'border',
		region: 'center',
        items :[
            // If report has parameters add in the north
            paramForm1
            @HEADER_INFO{@""(
            ,{
                xtype: 'panel',
                region: 'center'
            }
            )@@(
                ,{
                xtype: 'grid',
                @output{@"infoport"()@@(
                    title : '',
                )@}@
                region: 'center',
                //anchor: '0 -30',
                layout: 'fit',
                id:'grid',
                repid:'@REPORT_NAME@',
                //margin: '5 5 5 5',
                viewConfig: {
                    forceFit:true,
                    emptyText: 'No records to display'
                },    
                colModel:gridColumnModel,
                store: store,
                plugins: [@DISPLAY_SETS(@REPORT_FOOTER(
                summary,)@)@
                expander],

                stripeRows: true,
                bbar: bbar,
				//view: new Ext.ux.grid.LockingGridView({syncHeights:true}),
                //@output{@"infoport"()@@(
                tools:[{
                   id:'gear',
                   handler: function(event, toolEl, panel){
                        repToolsMenu.show(toolEl, 'tr-bl'); 
                   }
                }],
				//)@}@
                // Add a listener to load the data only after the grid is rendered:
                listeners: {
                    render: function(){
                        var initParams = Ext.apply({}, {start:0, limit:recPerPage});
                        this.store.load({params:initParams});
                    }
                }

            }
            )@
            }@
            // Add Grid in the center

        ]
    };


    var filterTip= ['Show Filters', 'Hide Filters'];

    var errormsg = "@ERR_MSG@";
    var errorbar = {
                //xtype: 'box',
                id: 'errmsg',
                xtype: 'tbfilltext',
                style:' background-color: #ffffff; border: 1px solid #ee0000; font-family: Arial, Helvetica, sans-serif; font-size: 12px; color: #ee0000; padding: 5px 0 5px 0; margin-bottom: 5px; width: 100%; text-align: center; ',
                hidden:true,
                autoEl: {
                    html: errormsg
                }
            };
        if(errormsg) {
           errorbar.hidden = false;
        }
        
    var topbar = new Ext.Toolbar({
        region : 'north',
        height:30,
        margins: '0 0 0 5',
        items:[
            {
            xtype: 'box',
            id: 'title',
            autoEl: {
            html: '@REPORT_NAME@'
            }
            },
            {xtype: 'tbfillspacer'},
            errorbar,
            '->',
            {xtype: 'tbfillspacer'},
            {
                text: 'Filters',
                id: 'toggleFilter',
                tooltip: filterTip[0],
                enableToggle: true,
                hidden: !hasParams,
                toggleHandler: onItemToggle
            },
            {
                text: 'Done',
                id: 'doneBtn',
                tooltip: 'Done',
                handler: backToReports
            }
            
        ]
        
    });

    


    

	// Finally, build the main layout once all the pieces are ready.  This is also a good
	// example of putting together a full-screen BorderLayout within a Viewport.
    var viewPort = new Ext.Viewport({
		layout: 'border',
		title: 'Ext Layout Browser',
        defaults:{
            @output{@"infoport"()@@(
                margins: '5 0 0 5'
            )@}@
        },
		items: [
            @output{@"infoport"()@@(
            topbar,
            )@}@
			mainPanel
		],
        renderTo:Ext.getBody()
    });
	var reportGridColModel = Ext.getCmp('grid').getColumnModel();
	var reviewColumnIndex = reportGridColModel.findColumnIndex(1);
	var followUpColumnIndex = reportGridColModel.findColumnIndex(2);

	//reportGridColModel.setColumnHeader(reviewColumnIndex ,'&nbsp;<input type="checkbox" id="reviewChk" onclick="selectReviewAllNone();"/>&nbsp;'+reportGridColModel.getColumnHeader(reviewColumnIndex ));
	//reportGridColModel.setColumnHeader(followUpColumnIndex ,'&nbsp;<input type="checkbox" id="followChk" onclick="selectFollowAllNone();"/>&nbsp;'+reportGridColModel.getColumnHeader(followUpColumnIndex ));
	
	reportGridColModel.setColumnHeader(reviewColumnIndex ,'&nbsp;<input type="checkbox" id="reviewChk" onclick="selectReviewAllNone();"/>&nbsp;'+'&nbsp;<input type="image" title="Mark as Reviewed" width="25" height="25" src="/si_image/MS_RGA/MarkAsRead.png"/>&nbsp;');
	reportGridColModel.setColumnHeader(followUpColumnIndex ,'&nbsp;<input type="checkbox" id="followChk" onclick="selectFollowAllNone();"/>&nbsp;'+'&nbsp;<input type="image" title="Mark for Follow-up" width="25" height="25" src="/si_image/MS_RGA/FlagForFollowup.png"/>&nbsp;');
  	reportGridColModel.getColumnById(3).sortable=true;   //Received on 
	reportGridColModel.getColumnById(4).sortable=true;   //Channel Name
	reportGridColModel.getColumnById(5).sortable=true;   //Alert Title
    viewPort.doLayout();

});

function callAggInfolet(){
	//alert('hello');
	var GraphEditor = {};
	GraphEditor.mask = new Ext.LoadMask(Ext.getBody(), {msg:'@contentRefresh@'});
	GraphEditor.mask.show();
	
	Ext.Ajax.request({
	url : 'Grciajaxservlet/ajax/CallAggInfolet',
	method : 'POST',
	timeout:3600000,
	params : {
	sample:{"test":"test", "test1":"test1"}
	},
	success : function(response, options) {
		GraphEditor.mask.hide();
		setInterval(function(){location.reload(true);},5000);
		if(document.getElementById("aggResult")!=null)
			document.getElementById("aggResult").innerHTML=response.responseText;
	return;
	},
	failure : function(response,options) {
		GraphEditor.mask.hide();
		setInterval(function(){location.reload(true);},5000);
		if(document.getElementById("aggResult")!=null)
			document.getElementById("aggResult").innerHTML=response.responseText;
	return;
	}
	});

}
function getDivPopup(){
var popupStr='';

popupStr+='<div id="toPopup" style="font-family: "lucida grande",tahoma,verdana,arial,sans-serif;background: none repeat scroll 0 0 #FFFFFF;border: 10px solid #ccc;border-radius: 3px 3px 3px 3px;color: #333333;display: none;font-size: 14px;left: 50%;margin-left: -402px;position:fixed;top: 20%;width: 800px;z-index: 2;"> ';
    	
popupStr+='        <div class="close" style="background: url("../img/closebox.png") no-repeat scroll 0 0 transparent;cursor: pointer;height: 30px;position: absolute;right: -27px;top: -24px;width: 30px;"></div>';
popupStr+='       	<span class="ecs_tooltip" style="background: none repeat scroll 0 0 #000000;border-radius: 2px 2px 2px 2px;color: #FFFFFF;display: none;font-size: 11px;height: 16px;opacity: 0.7;padding: 4px 3px 2px 5px;position: absolute;right: -62px;text-align: center;top: -51px;width: 93px;">Press Esc to close <span class="arrow"></span></span>';
		popupStr+='<div id="popup_content" style="margin: 4px 7px;"> <!--your content start-->';
        
popupStr+='        </div> ';
    
popupStr+='    </div> <!--toPopup end-->';
    
popupStr+='	<div class="loader" style="background: url("../img/loading.gif") no-repeat scroll 0 0 transparent;height: 32px;width: 32px;display: none;z-index: 9999;top: 40%;left: 50%;position: absolute;margin-left: -10px;"></div>';
popupStr+='   	<div id="backgroundPopup" style="z-index:1;position: fixed; display:none; height:100%; width:100%; background:#000000;top:0px;    left:0px;"></div> ';

return popupStr;

}

function createAlertsAjaxCall(subsRespId, userName, followUpValue, ajaxCallType)
{

Ext.Ajax.request({
url : 'Grciajaxservlet/ajax/AlertStatusUpdate',
method : 'POST',
params : {
subsRespId:subsRespId,
userName:userName,
followUpValue:followUpValue,
ajaxCallType:ajaxCallType,
sample:{"test":"test", "test1":"test1"}
},
success : function(response, options) {
//alert(response.responseText);
return;
},
failure : function(response,options) {
//alert("Failure");
//alert(response.responseText);
return;
}
});
} 
</SCRIPT>
@%'report/include/reports_include_contextform_grid.xhtmp'@
</body>
</html>
