<?xml version="1.0" encoding="UTF-8"?><PACKAGE_SPEC xmlns="http://www.metricstream.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.metricstream.com ms_application_schema.xsd">
<PLATFORM_DETAILS>
<PLATFORM_VERSION>6.1</PLATFORM_VERSION>
<BUILD_VERSION>5.4.2.0</BUILD_VERSION>
</PLATFORM_DETAILS>
<STORED_PROCEDURE_NAME><![CDATA[MS_RGA_HELPER]]></STORED_PROCEDURE_NAME>
<OBJECT_ID><![CDATA[MS_RGA_HELPER]]></OBJECT_ID>
<OBJECT_TYPE><![CDATA[PACKAGE]]></OBJECT_TYPE>
<TEXT><![CDATA[Package Ms_Rga_Helper Is
  /* ----------------------------------------------------------------------------------------------
    CHANGE HISTORY
    -----------------------------------------------------------------------------------------------
  * Created By :
  *
  * @Reference - Package gets referred by various transactions in process flow & Integration between RGA and RGA module
  *
  * @Purpose   --- To Intigrate RGA & ISM module
  * ------------------------------------------------------------------------------------------------
  */
  Gc_Data_Namespace Varchar2(100) := 'xmlns="http://www.metricstream.com/appstudio/msa"';

  Procedure Update_Out_Data(Lt_In_Data_Orig    In Clob,
                            Lt_In_Data         In Out Clob,
                            Lt_Out_Data        In Out Clob,
                            Pc_Process_Code    In Varchar2,
                            Lc_From_Stage      In Varchar2,
                            Lc_To_Stage        In Varchar2,
                            Xn_Error_Handle_Id In Out Number,
                            Xn_Error_Seq       In Out Number,
                            Xn_Error_Code      Out Varchar2);

  Procedure Update_Out_Data1(Lt_In_Data_Orig    In Clob,
                             Lt_In_Data         In Out Clob,
                             Lt_Out_Data        In Out Clob,
                             Pc_Process_Code    In Varchar2,
                             Lc_From_Stage      In Varchar2,
                             Lc_To_Stage        In Varchar2,
                             Xn_Error_Handle_Id In Out Number,
                             Xn_Error_Seq       In Out Number,
                             Xn_Error_Code      Out Varchar2);

  PROCEDURE email_notify_users(i_pf_id         IN NUMBER,
                               i_metric_id     IN NUMBER,
                               i_feed_data_id  IN NUMBER,
                               o_error_code    OUT NOCOPY NUMBER,
                               o_error_message OUT NOCOPY VARCHAR2);

  Procedure Update_Out_Data_ism(Lt_In_Data_Orig    In Clob,
                                Lt_In_Data         In Out Clob,
                                Lt_Out_Data        In Out Clob,
                                Pc_Process_Code    In Varchar2,
                                Lc_From_Stage      In Varchar2,
                                Lc_To_Stage        In Varchar2,
                                Xn_Error_Handle_Id In Out Number,
                                Xn_Error_Seq       In Out Number,
                                Xn_Error_Code      Out Varchar2);

  Procedure Update_Out_Data_MySubs(Lt_In_Data_Orig             In Clob,
                                   Lt_In_Data                  In Clob,
                                   Pc_Process_Code             In Varchar2,
                                   ln_orig_process_instance_id In Varchar2,
                                   ln_process_instance_id      In OUT Varchar2,
                                   Xn_Error_Handle_Id          In Out Number,
                                   Xn_Error_Seq                In Out Number,
                                   Xn_Error_Code               Out Varchar2);
                                   
  FUNCTION check_exp
  
  RETURN VARCHAR2;      
  
  PROCEDURE POSTHOOK_PROC
                         (lt_in_data_orig IN CLOB,
                         lt_in_data IN CLOB,
                         pc_process_code IN VARCHAR2,
                         ln_orig_process_instance_id IN NUMBER,
                         LN_PROCESS_INSTANCE_ID IN OUT NUMBER,
                         xn_error_handle_id IN OUT NUMBER,
                         XN_ERROR_SEQ IN OUT NUMBER,
                         XN_ERROR_CODE OUT NUMBER);

End Ms_Rga_Helper; ]]></TEXT>
<TEXT_BODY><![CDATA[PACKAGE BODY Ms_Rga_Helper
AS
  /* ----------------------------------------------------------------------------------------------
     CHANGE HISTORY 11-Sept-2012
     -----------------------------------------------------------------------------------------------
   * Created By :----
   *
   * @Reference - Package gets referred by various transactions in process flow null between RGA and RGA module
   *
   * @Purpose   - To Intigrate RGA null module
   * ------------------------------------------------------------------------------------------------
   */
  ln_Version_number Number;
  l_ms_table_count Number;
  Lv_dd_object_type Varchar2(4000);
  Lv_Number Number := 0;
  Lv_String Varchar2(4000) := '';
  g_Success_Code      Constant Number                 := Ms_Rga_Utilities.g_Success_Code;
  g_Success_Mesg      Constant Varchar2(100)          := Ms_Rga_Utilities.g_Success_Mesg;
  g_Module_Name            Constant Varchar2(10)      := 'RGA';
  g_package_name      Constant Varchar2(50)           := 'Ms_Rga_Helper';
  g_Action            Varchar2(12)                    := 'LOGISSUE';
  g_Rec_Key           Varchar2(100)                   := Null;
  g_log_rga_msgs        BOOLEAN;
  g_running_log_nmbr   NUMBER;
  g_log_key            VARCHAR2 (15);
  g_ctx_action         VARCHAR2 (100)                  := 'RGAUTIL';
  g_ctx_module         VARCHAR2 (100)                  := 'RGA';
  g_ctx_user           VARCHAR2 (100);
  g_plan_name          MS_RGA_LOG_ISSUES.object_id%TYPE;
	 
  PROCEDURE DEBUG (
      i_msg        IN   VARCHAR2,
      i_msg_type   IN   VARCHAR2 DEFAULT g_module_name
   )
   IS
      PRAGMA AUTONOMOUS_TRANSACTION;
      x_action         VARCHAR2 (50)   := NULL;
      x_module         VARCHAR2 (50)   := NULL;
      x_user           VARCHAR2 (50)   := NULL;
      x_program_name   VARCHAR2 (50)   := NULL;
      x_msg            VARCHAR2 (4000) := NULL;
      x_log_seq        NUMBER          := NULL;
   BEGIN
      IF g_log_rGA_msgs
      THEN
         g_running_log_nmbr := 1 + NVL (g_running_log_nmbr, 0);
         x_log_seq :=
                   TO_NUMBER (g_log_key || LPAD (g_running_log_nmbr, 5, '0'));

         BEGIN
            x_program_name :=
                             SUBSTR (i_msg, 1, INSTR (i_msg, '=> ', 1, 1) - 1);
         EXCEPTION
            WHEN OTHERS
            THEN
               IF x_program_name IS NULL
               THEN
                  x_program_name := SUBSTR (i_msg, 1, 50);
               END IF;
         END;

         BEGIN
            SELECT UPPER (SYS_CONTEXT ('USERENV', 'ACTION')) action,
                   UPPER (SYS_CONTEXT ('USERENV', 'MODULE')) module, USER
              INTO x_action,
                   x_module, x_user
              FROM DUAL;
         EXCEPTION
            WHEN OTHERS
            THEN
               x_action := g_action;
               x_module := g_module_name;
         END;

         IF x_action IS NULL
         THEN
            x_action := g_ctx_action;                             --G_Action;
         END IF;

         IF x_module IS NULL
         THEN
            x_module := g_ctx_module;                        --G_Module_Name;
         END IF;

         BEGIN
            x_msg := SUBSTR (i_msg, INSTR (i_msg, '=> ', 1, 1) + 3);
            -- Insert Into Temp Values (Dbg_Seq.Nextval,X_Msg);
            COMMIT;
         EXCEPTION
            WHEN OTHERS
            THEN
               IF x_msg IS NULL
               THEN
                  x_msg := i_msg;
               END IF;
         END;

         ms_apps_utilities.insert_log
               (i_message           => x_msg,
                i_module_name       => x_module,
                i_program_name      => TRIM
                                          (SUBSTR
                                                (NVL (x_program_name,
                                                      g_package_name
                                                     ),
                                                 1,
                                                 80
                                                )
                                          ),
                i_log_type          => NVL (g_plan_name, i_msg_type),
                i_log_key           => x_action,
                i_log_sequence      => x_log_seq          --G_Running_Log_Nmbr
               );
      END IF;
   END DEBUG;
--
PROCEDURE email_notify_users (
      i_pf_id           IN              NUMBER,
      i_metric_id       IN              NUMBER,
      i_feed_data_id    IN              NUMBER,
      o_error_code      OUT NOCOPY      NUMBER,
      o_error_message   OUT NOCOPY      VARCHAR2
   )
   IS
      x_recipients            varchar2_array             := varchar2_array
                                                                          ();
      x_param_names           varchar2_array             := varchar2_array
                                                                          ();
      x_param_values          clob_array                     := clob_array
                                                                          ();
      x_notify_system_users   VARCHAR2 (2000);
      x_notify_other_users    VARCHAR2 (2000);
      x_max_instance_id       PLS_INTEGER;
      x_stmt_number           PLS_INTEGER;
      x_error_code            PLS_INTEGER;
      --x_metric_name           VARCHAR2 (2000);
      x_error_message         VARCHAR2 (1000);
      x_subject               clob;
      x_subject_body          clob;
      x_attachment            varchar2(4000) := ' ';
      --x_infolet_id            NUMBER;
      x_email_note            si_messages_t.MESSAGE_TEXT%TYPE;
      x_boiler_plate          si_messages_t.MESSAGE_TEXT%TYPE;
      x_copyright             si_messages_t.MESSAGE_TEXT%TYPE;
      send_email_excp         EXCEPTION;
      x                       NUMBER                            := 0;
      x_user_name varchar2(4000);
      V_Metric_ID NUMBER;
      v_flag number(1);
      v_instance_id MS_RGA_ATTACHMENT_V.instance_id%type;
      vpid MS_RGA_ATTACHMENT_V.process_instance_id%type;
      v_column_seq SI_METRIC_COLUMNS.Column_Sequence%type;

   BEGIN
      x_stmt_number := 5;

      BEGIN
         SELECT MAX (instance_id)
           INTO x_max_instance_id
           FROM ms_rga_notify_users_v
          WHERE process_instance_id = i_pf_id;


      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            o_error_code := SQLCODE;
            o_error_message :=
                  'Error in Procedure email_notify_users and statement number'
               || x_stmt_number
               || ' Error Msg is '
               || x_error_message;
      END;

      x_stmt_number := 15;

      BEGIN
         SELECT NOTIFY_SYSTEM_USERS,NOTIFY_OTHER_USERS,ms_apps_utilities.get_user_full_name(dd_event_user_name)
           INTO x_notify_system_users,x_notify_other_users,x_user_name
           FROM ms_rga_notify_users_v
          WHERE process_instance_id = i_pf_id
            AND instance_id = x_max_instance_id
            and object_id is not null;--commented by vishnu on 11/12/2012 to avoid ora 1422;


      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            o_error_code := SQLCODE;
            o_error_message :=
                  'Error in Procedure email_notify_users and statement number'
               || x_stmt_number
               || ' Error Msg is '
               || x_error_message;
      END;

      x_stmt_number := 20;

       BEGIN
         SELECT SUBJECT, BODY
           INTO x_subject, x_subject_body
           FROM MS_RGA_FEED_AGGREGATOR_V
           WHERE feed_data_id=i_feed_data_id;

    EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            o_error_code := SQLCODE;
            o_error_message :=
                  'Error in Procedure email_notify_users and statement number'
               || x_stmt_number
               || ' Error Msg is '
               || x_error_message;
      END;

      /*
      Bug #64423 - Attachments are missing in the triggered mail for Notify Users in Alert Summary report
      Added below code to construct x_attachment parameter value.
      */
      begin

      v_flag := 0;

      select 1,instance_id,process_instance_id   into v_flag,v_instance_id,vpid
      from MS_RGA_ATTACHMENT_V
      where feed_data_id=i_feed_data_id;

      select metric_id into V_Metric_ID
      from si_metrics_t
      where metric_name = 'MS_RGA_ATTACHMENT';


      select sm.column_sequence into v_column_seq from si_metric_columns sm
      where sm.metric_id=V_Metric_ID
      and sm.column_name='ATTACHMENT';

      if(v_flag=1) then
      SI_ALERT_SV.ATTACH_FILE_PATTERN(V_Metric_ID,vpid,v_instance_id,v_column_seq,x_attachment);
      end if;

      exception when others then

      o_error_code := SQLCODE;
      o_error_message := SQLERRM;

      end;

      x_stmt_number := 25;



      x_email_note :=
         'Note : This message and all attachments should be considered confidential and proprietary to Quality Stream.';
      x_boiler_plate := 'Alert automatically generated by MetricStream.';
      x_copyright :=
                'Copyright @ MetricStream Inc. 1999-2013 All rights reserved.';

      x_stmt_number := 30;

     /* SELECT ms_apps_utilities.get_infolet_id ('MS RGA NOTIFY USERS')
        INTO x_infolet_id
        FROM DUAL;*/

      x_stmt_number := 35;
      x_param_names.EXTEND (10);
      /* Set the email subject and set up the parameter names array */
      x_param_names (1) := 'USER_FULL_NAME';
      x_param_names (2) := 'EMAIL_NOTE';
      x_param_names (3) := 'BOILERPLATE_TEXT';
      x_param_names (4) := 'COPYRIGHT_INFORMATION';
      x_param_names (5) := 'SUBJECT_HEADER';
      x_param_names (6) := 'SUBJECT_BODY';
      x_param_names (7) := 'PROC_INSTANCE_ID';
      x_param_names (8) := 'PUSH_INFO_ID';
      x_param_names (9) := 'ATTACH_FILE';
      x_param_names(10) := 'NOTIFIED_USER';
      x_stmt_number := 40;

      x_param_values.EXTEND (10);
      /*Assign the values into the parameter values array*/
      x_param_values (1) := x_user_name;
      x_param_values (2) := x_email_note;
      x_param_values (3) := x_boiler_plate;
      x_param_values (4) := x_copyright;
      x_param_values (5) := x_subject;
      x_param_values (6) := x_subject_body;
      x_param_values (7) := TO_CHAR (i_pf_id);
      x_param_values (8) := TO_CHAR (i_metric_id);--(x_infolet_id);
      x_param_values (9) := x_attachment;
      x_param_values(10) := x_user_name;

      x_stmt_number := 45;

      IF x_error_code <> ms_rga_utilities.g_success_code
      THEN
         RAISE send_email_excp;
      END IF;

      o_error_code := ms_rga_utilities.g_success_code;
      o_error_message := ms_rga_utilities.g_success_mesg;

      x_stmt_number := 46;

      FOR i IN
         (SELECT COLUMN_VALUE AS user_id
            FROM TABLE
                    (CAST
                        ((SELECT ms_apps_utilities.parse_string
                                                       (x_notify_system_users,
                                                        ','
                                                        )
                            FROM DUAL) AS ms_varchar2_array
                        )
                    )
           WHERE COLUMN_VALUE IS NOT NULL)
      LOOP
         x_recipients.EXTEND;
         x := x + 1;
         x_recipients (x) := i.user_id;
        -- x_recipients (x) := ms_apps_utilities.get_user_name(i.user_id);

      END LOOP;

      /*Ms_Rga_Utilities.Send_Email(2,
                                  X_Recipients,
                                  100000,
                                  X_Subject,
                                  'RGA/MS_RGA_NOTIFY_USERS.htm',
                                  X_Param_Names,
                                  X_Param_Values,
                                  X_Error_Code,
                                  X_Error_Message);*/
      x_stmt_number := 40;

      FOR i IN
         (SELECT COLUMN_VALUE AS user_id
            FROM TABLE
                    (CAST
                        ((SELECT ms_apps_utilities.parse_string
                                                        (x_notify_other_users,
                                                         ','
                                                        )
                            FROM DUAL) AS ms_varchar2_array
                        )
                    ))
      LOOP
         x_recipients.EXTEND;
         x := x + 1;
         x_recipients (x) := i.user_id;--ms_apps_utilities.get_user_name(i.user_id);
      END LOOP;

      ms_rga_utilities.send_email_individually (1,
                                   x_recipients,
                                   100000,
                                   x_subject,
                                   ms_rga_utilities.g_Email_Template_Notified,
                                   --'RGA/MS_RGA_NOTIFY_USERS.htm',
                                   x_param_names,
                                   x_param_values,
                                   x_error_code,
                                   x_error_message
                                  );
      commit;
   EXCEPTION
      WHEN send_email_excp
      THEN
         o_error_code := SQLCODE;
         o_error_message :=
               'Error in Procedure notify_users and statement number'
            || x_stmt_number
            || ' Error Msg is '
            || x_error_message;
      WHEN OTHERS
      THEN
         o_error_code := SQLCODE;
         o_error_message :=
               'Error Occurred in notify_users at stmt number 3'
            || x_stmt_number
            || '. Error Message: '
            || SUBSTR (SQLERRM, 1, 250);
   END email_notify_users;
 /*=======================================================
  PROCEDURE NAME:  Insert_Value_To_Non_Multirow
  =======================================================*/

Procedure Insert_Value_To_Non_Multirow(Pv_Field_Name         In Varchar2,
                                         Pv_Field_Value        In Varchar2,
                                         pn_Error_Handle_Id In Number,
                                         pn_Error_Sequence  In Out Nocopy Number,
                                         pt_Out_Data_Xml    In Out Xmltype,
                                         pn_error_code      Out Number,
                                         pv_error_message   Out Varchar2
                                         )
  Is
    Lv_Proc Varchar2(1000) := 'Insert_Value_To_Non_Multirow => ';

  Begin
      ms_rga_utilities.pr_monitor_progress('BEGINING INSERT_VALUE_TO_NON_MULTIROW');
      ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Insert Non Multi row values  File Name :  ' ||Pv_Field_Name ||'Pv_Field_Value   '|| Pv_Field_Value);

     -- INSERT INTO temp_check VALUES (Lv_Proc || 'Insert Non Multi row values  File Name :  ' ||Pv_Field_Name ||'Pv_Field_Value   '|| Pv_Field_Value);
     -- COMMIT;
      
  -- Delete the Node first if Exists  Then Insert the Node with Value

   Select Deletexml(pt_Out_Data_Xml,
                     'datapacket/data/nonmultirow/' || Lower(pv_Field_Name),
                     Gc_Data_Namespace)
    Into   pt_Out_Data_Xml
    From   Dual;


    Select Insertchildxml(pt_Out_Data_Xml,
                          'datapacket/data/nonmultirow',
                          Lower(pv_Field_Name),
                          Xmltype('<' || Lower(pv_Field_Name) || ' ' ||
                                  Gc_Data_Namespace || '>' || pv_Field_Value || '</' ||
                                  Lower(pv_Field_Name) || '>'),
                          Gc_Data_Namespace)
    Into   pt_Out_Data_Xml
    From   Dual;
         ms_rga_utilities.pr_monitor_progress('ENDING INSERT_VALUE_TO_NON_MULTIROW');


  Exception
          When Others Then
            ms_rga_utilities.pr_monitor_progress(lv_Proc || Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
               pn_error_code:= -1;
               pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);
  End Insert_Value_To_Non_Multirow;
-----------------

Procedure Multi_Row_Id_Setting_grci_chn(Pn_Error_Handle_Id     In Number,
								 Pc_Process_Code        In Varchar2,
								 Pn_Process_Instance_Id In Number,
								 Pn_Error_Sequence      In Out Number,
								 Pt_Out_Data_Xml        In Out Xmltype,
								 Pn_Error_Code          Out Number,
								 Pv_Error_Message       Out Varchar2) Is
	Lv_Table_Name    Varchar2(100);
	Ln_Cnt           Number;
	Lv_Object_Id     Varchar2(100);
	Ln_Log_No        Number;
	Lv_Error_Message Varchar2(4000);
	Ln_Error_Code    Number;
	Lv_Proc          Varchar2(1000) := 'Multi_Row_Id_Setting => ';
	lv_chn_id        Varchar2(100) ;
	lv_xml_par_path  Varchar2(4000) :=null;
  lv_xml_region_pk Varchar2(100)  :=null;
  lv_xml_region_obj Varchar2(100)  :=null;
  Begin
 	-- select the Distinct Regions for setting the Region Primary Key Value 
	For Region In (Select Distinct Region_Name As Region_Name
				   From   Ms_Rga_Workflow_Config
				   Where  Region_Name Is Not Null
				   And    Workflow_Name = Pc_Process_Code)
	Loop
	  -- selecting the Region Value And Instance Rec Number
	  For Rec In (Select Mct_Table.Extract('row/instance_rec_num/text()',
										   Gc_Data_Namespace) .Getstringval() Instance_Rec_Num,
                       Mct_Table.Extract('row/' ||
										   Lower(Region.Region_Name) ||
										   '_pk/text()',
										   Gc_Data_Namespace) .Getstringval() Region_Id,
                       Mct_Table.Extract('row/' ||
										   Lower(Region.Region_Name) ||
										   '_object_id/text()',
										   Gc_Data_Namespace) .Getstringval() Region_Id_chn         
                      From   Table(Xmlsequence((Select Pt_Out_Data_Xml.Extract('/datapacket/data/' ||
																		  Lower(Region.Region_Name) ||
																		  '/row',
																		  Gc_Data_Namespace)
                                      From   Dual))) Mct_Table)
	  Loop
		If Rec.Region_Id Is Null Or Rec.Region_Id = '99999999999'
      Then
      Ln_Cnt       := 0;
      Lv_Object_Id := Null;
	    lv_xml_par_path :='datapacket/data/'||Lower(Region.Region_Name) ||'/row[instance_rec_num="' || Rec.Instance_Rec_Num||'"]';
      lv_xml_region_pk :=Lower(Region.Region_Name) || '_pk';
      lv_xml_region_obj :=Lower(Region.Region_Name) || '_object_id';
      
		  Select Deletexml(Pt_Out_Data_Xml,lv_xml_par_path ||'/' || lv_xml_region_pk,
						   Gc_Data_Namespace)
		  Into   Pt_Out_Data_Xml
		  From   Dual;
          SELECT EXTRACTVALUE(Pt_Out_Data_Xml,
                          'datapacket/data/nonmultirow/object_id/text()',
                          gc_data_namespace)
          INTO lv_chn_id
          FROM DUAL;
		  Select Count(*)
		  Into   Ln_Cnt
		  From   Table(Xmlsequence((Select Pt_Out_Data_Xml.Extract('/datapacket/data/' ||
																  Lower(Region.Region_Name) ||
																  '/row',
																  Gc_Data_Namespace)
								   From   Dual
								   Where  Existsnode(Pt_Out_Data_Xml,
													lv_xml_par_path ||
													 '/' ||lv_xml_region_pk,
													 Gc_Data_Namespace) = 1))) Mct_Table;
		  -- It checks Node exists or Not if exists it update the Region Id Value other wise Insert the Node with value
		  If Rec.Region_Id = '99999999999'
			Then
          Lv_Object_Id := Null;
			Else
          Lv_Object_Id := Rec.Region_Id;
		  End If;
		  If Rec.Region_Id Is Null Or  Rec.Region_Id = '99999999999' then
        if Pc_Process_Code in ('CREATE_RULE','MS_RGA_CHANNEL_DTLS') then
             ms_apps_utilities.get_next_id ('RGA',Lower(Region.Region_Name)||'_pk_id',Pc_Process_Code,Pn_process_Instance_Id,Lv_Object_id,ln_error_code,lv_error_message );
			  end if;
		  --Inserts Region Node  with Value 
          Select Insertchildxml(Pt_Out_Data_Xml,
								  lv_xml_par_path,
								  lv_xml_region_pk,
								  Xmltype('<' || Lower(Region.Region_Name) ||
										  '_pk ' || Gc_Data_Namespace || '>' ||
										  Lv_Object_Id || '</' ||
										  lv_xml_region_pk||'>'),
									Gc_Data_Namespace)
          Into   Pt_Out_Data_Xml
          From   Dual;
          Select Deletexml(Pt_Out_Data_Xml,
						   lv_xml_par_path ||'/' || lv_xml_region_obj,
						   Gc_Data_Namespace)
          Into   Pt_Out_Data_Xml
           From   Dual;
          Select Insertchildxml(Pt_Out_Data_Xml,
								  lv_xml_par_path ,
								  lv_xml_region_obj,
								  Xmltype('<' || lv_xml_region_obj||' '||
										  Gc_Data_Namespace || '>' ||
										  lv_chn_id || '</' ||
										  lv_xml_region_obj||'>'),
									Gc_Data_Namespace)
          Into   Pt_Out_Data_Xml
          From   Dual;
		  Else
      		Select Updatexml(Pt_Out_Data_Xml,
							 lv_xml_par_path || '/' || lv_xml_region_pk||'/text()',
							 Lv_Object_Id,
							 Gc_Data_Namespace)
          Into   Pt_Out_Data_Xml
          From   Dual;
		  End If;
		End If;
	  End Loop;
	End Loop;
  Exception
	When Others Then
	             ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'In Others exception - ' ||Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
               pn_error_code:= -1;
               pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);
               Raise;
  End Multi_Row_Id_Setting_grci_chn;




-----------------

Procedure Multi_Row_Id_Setting(pn_Error_Handle_Id   In Number,
                                 Pc_Process_Code      In Varchar2,
                                 Pn_process_Instance_Id In Number,
                                 pn_Error_Sequence    In Out Number,
                                 pt_Out_Data_Xml      In Out Xmltype ,
                                 pn_error_code      Out Number,
                                 pv_error_message   Out Varchar2
                                  )
   Is
    Lv_Table_Name    Varchar2(100);
    Ln_Cnt           Number;
    Lv_Object_Id     Varchar2(100);
    Ln_Log_No        Number;
    Lv_Error_Message Varchar2(4000);
    Ln_Error_Code    Number;
    Lv_Proc          Varchar2(1000) := 'Multi_Row_Id_Setting => ';
    vOuterLoop_Counter Number := 0;
    vInnerLoop_Counter Number := 0;
    Lv_clob xmltype;
  Begin



     ms_rga_utilities.pr_monitor_progress('BEGINING MULTI_ROW_ID_SETTING');
     ms_rga_utilities.pr_monitor_progress(Lv_Proc || ' In Multi_Row_Id_Setting');

    Lv_Number := Lv_Number +1;
    Lv_String := 'Entered the Multi_Row_Id_Setting and start of the loop';

    -- select the Distinct Regions for setting the Region Primary Key Value
    For Region In (Select Distinct Region_Name
                   From   Ms_Rga_Workflow_Config
                   Where  Region_Name Is Not Null
                   And    Workflow_Name = Pc_Process_Code)
    Loop

    Lv_Number := Lv_Number +1;
    vOuterLoop_Counter := vOuterLoop_Counter +1;
    Lv_String := 'I am in outer loop and this is my '||vOuterLoop_Counter||'th iteration';

    ms_rga_utilities.pr_monitor_progress('INSIDE 1st FOR LOOP MULTI_ROW_ID_SETTING');
    
    -- selecting the Region Value And Instance Rec Number


      For Rec In (Select Mct_Table.Extract('row/instance_rec_num/text()',Gc_Data_Namespace).Getstringval() Instance_Rec_Num,
                         Mct_Table.Extract('row/' || Lower(Region.Region_Name) ||'_id/text()',Gc_Data_Namespace).Getstringval() Region_Id
                  From   Table(Xmlsequence((Select pt_Out_Data_Xml.Extract('/datapacket/data/' ||Lower(Region.Region_Name)||'/row',Gc_Data_Namespace)
                                            From   Dual))) Mct_Table)
      Loop


  
   
        ms_rga_utilities.pr_monitor_progress('INSIDE 2nd FOR LOOP MULTI_ROW_ID_SETTING');
        ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Entered the Loop With Instance Rec Num ' || Rec.Instance_Rec_Num);

        ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Rec.Region_Id ' || Rec.Region_Id);

        If Rec.Region_Id Is Null
        Then

           ms_rga_utilities.pr_monitor_progress('INSIDE 1st if Rec.Region_Id  LOOP MULTI_ROW_ID_SETTING');


          Ln_Cnt       := 0;
          Lv_Object_Id := Null;


            If Pc_Process_Code = 'MS_RGA_LOG_ISSUES'
            Then

             ms_rga_utilities.pr_monitor_progress(Lv_Proc ||'Calling  MS_RGA_LOG_ISSUES_P.Get_Next_Id');

             

            End If;


            If Pc_Process_Code = 'CREATE_RULE'
            Then
              ms_apps_utilities.get_next_id ('RGA',
                                      Lower(Region.Region_Name)||'_pk_id',
                                        'CREATE_RULE',
                                        Pn_process_Instance_Id,
                                        Lv_Object_id,
                                        ln_error_code,
                                        lv_error_message
                                       );
            End If;


             If Pc_Process_Code = 'MS_RGA_CHANNEL_DTLS'
            Then
            
         
     

                    ms_apps_utilities.get_next_id ('RGA',
                                      Lower(Region.Region_Name)||'_pk_id',
                                        'MS_RGA_CHANNEL_DTLS',
                                        Pn_process_Instance_Id,
                                        Lv_Object_id,
                                        ln_error_code,
                                        lv_error_message
                                       );
       
           

             End If;


            ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'MultiRow ID -- '||Lv_Object_Id);

             --Inserts Region Node  with Value
            If Lv_Object_Id is null
            then

            ms_rga_utilities.pr_monitor_progress('INSIDE 3rd if Rec.Region_Id  LOOP MULTI_ROW_ID_SETTING' ||Lv_Object_Id);



               Select seq_1.nextval
               into Lv_Object_Id
               from dual;

               Lv_Number := Lv_Number +1;



             End if;

          --  Debug(Lv_Proc || 'MultiRow ID -- '||Lv_Object_Id);

            ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'MultiRow ID LOOP MULTI_ROW_ID_SETTING -- '||Lv_Object_Id);


              begin
              Select Deletexml(pt_Out_Data_Xml,'datapacket/data/' || Lower(Region.Region_Name) ||'/row[instance_rec_num="' || Rec.Instance_Rec_Num ||
                             '"]/' || Lower(Region.Region_Name) ||'_pk',
                               Gc_Data_Namespace)
              Into   pt_Out_Data_Xml
              From   Dual
              WHERE EXTRACTVALUE(pt_Out_Data_Xml,'datapacket/data/' || Lower(Region.Region_Name) ||'/row[instance_rec_num="' || Rec.Instance_Rec_Num ||
                             '"]/' || Lower(Region.Region_Name) ||'_pk/text()',Gc_Data_Namespace) IS NULL;
         



 exception when others then

         
           pv_error_message:='';

          end;

           Lv_Number := Lv_Number +1;
            --vInnerLoop_Counter := vInnerLoop_Counter +1;
            Lv_String := 'After calling the delete xml in multi_row_id_setting.. check the content of the pt_Out_Data_Xml';



         Select Insertchildxml(pt_Out_Data_Xml,'datapacket/data/' ||Lower(Region.Region_Name) ||'/row[instance_rec_num="' ||Rec.Instance_Rec_Num || '"]',
                                  Lower(Region.Region_Name) || '_pk',
                                  Xmltype('<' || Lower(Region.Region_Name) ||'_pk ' || Gc_Data_Namespace || '>' ||
                                          Lv_Object_Id || '</' ||Lower(Region.Region_Name) || '_pk>'),Gc_Data_Namespace)
            Into   pt_Out_Data_Xml
            From   Dual;


      

             Lv_Number := Lv_Number +1;
            --vInnerLoop_Counter := vInnerLoop_Counter +1;
            Lv_String := 'After calling the insert xml in multi_row_id_setting.. check the content of the pt_Out_Data_Xml';

           ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'MultiRow ID -- '||Lv_Object_Id);

           ms_rga_utilities.pr_monitor_progress('Rec.Instance_Rec_Num -- '||Rec.Instance_Rec_Num);

            ms_rga_utilities.pr_monitor_progress('Lower(Region.Region_Name) -- '||Lower(Region.Region_Name));


          End If;

      End Loop;
    End Loop;



  ms_rga_utilities.pr_monitor_progress('ENDING MULTI_ROW_ID_SETTING');

  Exception
          When Others Then
               ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'In Others exception - ' ||Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
               pn_error_code:= -1;
               pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);
               Raise;
End Multi_Row_Id_Setting;



Procedure Multi_Row_Default_Setting(Pc_Process_Code      In Varchar2,
                                      Pn_process_Instance_Id In Number,
                                      Pv_Setmode             In Varchar2 Default 'BOTH',
                                      Pv_stage              In Varchar2 Default 'NONPUBLISH',
                                      pn_Error_Handle_Id   In Number,
                                      pn_Error_Sequence    In Out Number,
                                      pt_Out_Data_Xml      In Out Xmltype,
                                      pn_error_code      Out Number,
                                      pv_error_message   Out Varchar2)
  Is
    Lv_Table_Name    Varchar2(100);
    Lv_Cnt           Number;
    Lv_Object_Id     Varchar2(100);
    Lv_Log_No        Number;
    Lv_Error_Message Varchar2(4000);
    Lv_Error_Code    Number;
    Lv_Proc          Varchar2(1000) := 'Multi_Row_Default_Setting => ';
    VOuterLoopCounter Number := 0;
    VInnerLoopCounter Number := 0;
    VThirdLoopCounter Number := 0;

  Begin
      ms_rga_utilities.pr_monitor_progress('BEGINING MULTI_ROW_DEFAULT_SETTING');
    Lv_Number := Lv_Number +1;
    Lv_String := 'Start the Procedure Multi_Row_Default_Setting';
    ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Selecting the distinct regions for work flow ' ||Pc_Process_Code);
    Lv_Number := Lv_Number +1;
    Lv_String := 'Before the Initiation of the loop';
    For Region In (Select Distinct Region_Name
                   From   Ms_Rga_Workflow_Config
                   Where  Region_Name Is Not Null
                   And    Workflow_Name = Pc_Process_Code)
    Loop
    Lv_Number := Lv_Number +1;
    VOuterLoopCounter := VOuterLoopCounter +1;
    Lv_String := 'Inside the Outer Loop I am in'|| VOuterLoopCounter||'th iteration';
    ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Selecting the  regions  configuration fields ' || Region.Region_Name);

      If Pv_setmode = 'DEFAULT' Or PV_setmode = 'BOTH' Then
    Lv_Number := Lv_Number +1;
    Lv_String := 'Inside the IF Block since the Pv_setmode is either DEFAULT or BOTH';
       -- it selects the Default value seting columns for region of the work flow
        For Defrec In (Select Field_Check,
                              Field_Name,
                              Default_Value As Default_Column
                       From   Ms_Rga_Workflow_Config
                       Where  Region_Name Is Not Null
                       And    Workflow_Name = Pc_Process_Code
                       And    Field_Check = 'DEFAULT'
                       And    Region_Name = Region.Region_Name)
        Loop

        Lv_Number := Lv_Number +1;
        VInnerLoopCounter := VInnerLoopCounter +1;
        Lv_String := 'it selects the Default value seting columns for region of the work flow Inside the Inner loop and this is my '||VInnerLoopCounter||'Iteration of the outer loops'||VOuterLoopCounter||'th iteration ';
         --Selecting the  regions  configuration fields  Value
         -- Default Column Name
         -- Default Set Column  Name
          For Rec In (Select Mct_Table.Extract('row/instance_rec_num/text()',
                                               Gc_Data_Namespace) .Getstringval() Instance_Rec_Num,
                             Mct_Table.Extract('row/' ||
                                               Lower(Defrec.Default_Column) ||
                                               '/text()',
                                               Gc_Data_Namespace) .Getclobval() Default_Value,
                             Mct_Table.Extract('row/' ||
                                               Lower(Defrec.Field_Name) ||
                                               '/text()',
                                               Gc_Data_Namespace) .Getclobval() Field_Value
                      From   Table(Xmlsequence((Select pt_Out_Data_Xml.Extract('/datapacket/data/' ||
                                                                              Lower(Region.Region_Name) ||
                                                                              '/row',
                                                                              Gc_Data_Namespace)
                                               From   Dual))) Mct_Table)
          Loop
   Lv_Number := Lv_Number +1;
   VThirdLoopCounter := VThirdLoopCounter +1;
   Lv_String := 'Inside the Third Inner loop and this is my '||VThirdLoopCounter||'Iteration of the outer loops VinnerCounter '||VInnerLoopCounter||' and vOuterLoopCounter '||VOuterLoopCounter;
            ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Selecting The field Values  For Instance Rec Number' || Rec.Instance_Rec_Num);

            If Rec.Default_Value Is Not Null Or  Rec.Field_Value Is Not Null Then
              Lv_Number := Lv_Number +1;
              Lv_String := 'Entered the If block of third inner loop since the Default_Value or the Field_Value values are not null';
              ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Region Name ' ||Region.Region_Name);
              ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Default Value to set ' || Rec.Default_Value);
              Lv_Number := Lv_Number +1;
              Lv_String := 'Checking If node not exists then insert the node with value  if exists update the value';
          -- If node not exists then insert the node with value  if exists update the value
              Select Count(*) Into   Lv_Cnt
              From   Table(Xmlsequence((Select pt_Out_Data_Xml.Extract('/datapacket/data/' ||
                                                                      Lower(Region.Region_Name) ||
                                                                      '/row',
                                                                      Gc_Data_Namespace)
                                       From   Dual
                                       Where  Existsnode(pt_Out_Data_Xml,
                                                         '/datapacket/data/' ||
                                                         Lower(Region.Region_Name) ||
                                                         '/row[instance_rec_num="' ||
                                                         Rec.Instance_Rec_Num ||
                                                         '"]/' ||
                                                         Lower(Defrec.Field_Name),
                                                         Gc_Data_Namespace) = 1)

                                       )) Mct_Table;
             If Lv_Cnt <= 0 Then
              Lv_Number := Lv_Number +1;
              Lv_String := 'Entered the IF Block since the node doesnt exists';
               Lv_Number := Lv_Number +1;
              Lv_String := 'Before calling the Insertchildxml';
                 Select Insertchildxml(pt_Out_Data_Xml,
                                      'datapacket/data/' ||
                                      Lower(Region.Region_Name) ||
                                      '/row[instance_rec_num="' ||
                                      Rec.Instance_Rec_Num || '"]',
                                      Lower(Defrec.Field_Name),
                                      Xmltype('<' || Lower(Defrec.Field_Name) || ' ' ||
                                              Gc_Data_Namespace || '>' ||
                                              Rec.Default_Value || '</' ||
                                              Lower(Defrec.Field_Name) || '>'),
                                      Gc_Data_Namespace)
                Into   pt_Out_Data_Xml
                From   Dual;
                Lv_Number := Lv_Number +1;
                Lv_String := 'After calling the Insertchildxml.. pls check the content of the pt_Out_Data_Xml';
              Else
                Lv_Number := Lv_Number +1;
                Lv_String := 'Entered the else block since the node already exists and hence trying to update';
                Select Updatexml(pt_Out_Data_Xml,
                                 'datapacket/data/' ||
                                 Lower(Region.Region_Name) ||
                                 '/row[instance_rec_num="' ||
                                 Rec.Instance_Rec_Num || '"]/' ||
                                 Lower(Defrec.Field_Name) || '/text()',
                                 Rec.Default_Value,
                                 Gc_Data_Namespace)
                Into   pt_Out_Data_Xml
                From   Dual;
                Lv_Number := Lv_Number +1;
              Lv_String := 'After updatexml.. pls check the content of the pt_Out_Data_Xml';
              End If;
            End If;
          End Loop;
        End Loop;
       --Seting default values for nonmultirow
        ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Seting default values for nonmultirow');

            Lv_Number := Lv_Number +1;
             Lv_String := 'Before the loop for the cursor with only Field_Check DEFAULT';
    VInnerLoopCounter := 0;  VOuterLoopCounter := 0;  VThirdLoopCounter := 0;
       For Defrec In (Select Field_Check,
                              Field_Name,
                              Default_Value As Default_Column
                       From   Ms_Rga_Workflow_Config
                       Where  Region_Name Is Null
                       And    Workflow_Name = Pc_Process_Code
                       And    Field_Check = 'DEFAULT')
        Loop
              Lv_Number := Lv_Number +1;
              VOuterLoopCounter := VOuterLoopCounter +1;
              Lv_String := 'Inside the Outer loop counter and this is my '||VOuterLoopCounter||'th Iteration';
          -- selecting the default  value  and default value set column value
          For Rec In (Select pt_Out_Data_Xml.Extract('datapacket/data/nonmultirow/' ||
                                                     Lower(Defrec.Default_Column) ||
                                                     '/text()',
                                                     Gc_Data_Namespace) .Getclobval() Default_Value,
                             pt_Out_Data_Xml.Extract('datapacket/data/nonmultirow/' ||
                                                     Lower(Defrec.Field_Name) ||
                                                     '/text()',
                                                     Gc_Data_Namespace) .Getclobval() Field_Value
                      From   Dual)
          Loop
              Lv_Number := Lv_Number +1;
              VInnerLoopCounter := VInnerLoopCounter +1;
              Lv_String := 'Inside the Inner loop counter and this is my '||VInnerLoopCounter||'th Iteration of the outer loops '||VOuterLoopCounter||' th iteration';

            If Rec.Default_Value Is Not Null Or Rec.Field_Value Is Not Null
            Then
              Lv_Cnt := 0;
          -- If node not exists then insert the node with value  if exists update the value
             Lv_Number := Lv_Number +1;
             Lv_String := 'If node not exists then insert the node with value  if exists update the value ';

              Select Count(*) Into   Lv_Cnt
              From   Table(Xmlsequence((Select pt_Out_Data_Xml.Extract('/datapacket/data/nonmultirow',
                                                                      Gc_Data_Namespace)
                                       From   Dual
                                       Where  Existsnode(pt_Out_Data_Xml,
                                                         '/datapacket/data/nonmultirow/' ||
                                                         Lower(Defrec.Field_Name),
                                                         Gc_Data_Namespace) = 1))) Mct_Table;

              If Lv_Cnt <= 0 Then
              Lv_Number := Lv_Number +1;
              Lv_String := 'In the IF statement in If node not exists then insert the node with value  if exists update the value';

                Select Insertchildxml(pt_Out_Data_Xml,
                                      'datapacket/data/nonmultirow',
                                      Lower(Defrec.Field_Name),
                                      Xmltype('<' || Lower(Defrec.Field_Name) || ' ' ||
                                              Gc_Data_Namespace || '>' ||
                                              Rec.Default_Value || '</' ||
                                              Lower(Defrec.Field_Name) || '>'),
                                      Gc_Data_Namespace)
                Into   pt_Out_Data_Xml
                From   Dual;

             Lv_Number := Lv_Number +1;
             Lv_String := 'Out of the IF statement in If node not exists then insert the node with value  if exists update the value';

              Else
             Lv_Number := Lv_Number +1;
             Lv_String := 'checking on for the else part in the insert the node with value  if exists update the value';

                Select Updatexml(pt_Out_Data_Xml,
                                 'datapacket/data/nonmultirow' ||
                                 Lower(Defrec.Field_Name) || '/text()',
                                 Rec.Default_Value,
                                 Gc_Data_Namespace)
                Into   pt_Out_Data_Xml
                From   Dual;
              Lv_Number := Lv_Number +1;
             Lv_String := 'Compeleting the else part in the insert the node with value  if exists update the value';
              End If;
            End If;
          End Loop;
        End Loop;
      End If;
      --Mandatory Check Starts
      ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Mandatory Check Starts ');
      --Selecting Region Mandatory Fields
      ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Selecting Region Mandatory Fields ' ||Region.Region_Name);
      Lv_Number := Lv_Number +1;
      Lv_String := 'Before the if loop PV_setmode';
     VInnerLoopCounter := 0;  VOuterLoopCounter := 0;  VThirdLoopCounter := 0;
     If PV_setmode = 'MANDATORY' Or  Pv_setmode = 'BOTH'
      Then
        For Mandrec In (Select Field_Check,
                               Field_Name,
                               Default_Value As Default_Column
                        From   Ms_Rga_Workflow_Config
                        Where  Region_Name Is Not Null
                        And    Workflow_Name = Pc_Process_Code
                        And    Field_Check = 'MANDATORY'
                        And    Region_Name = Region.Region_Name)
        Loop
        --Selecting the Mandatory Field Column Name
         Lv_Number := Lv_Number +1;
         VOuterLoopCounter := VOuterLoopCounter +1;
         Lv_String := 'Start of the Mandrec Outer Loop and this is my '||VOuterLoopCounter||'th iteration';
          ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Selecting  Mandatory Field Column Name -->' || Mandrec.Field_Name);

          For Rec In (Select Mct_Table.Extract('row/instance_rec_num/text()',
                                               Gc_Data_Namespace) .Getstringval() Instance_Rec_Num,
                             Mct_Table.Extract('row/' ||
                                               Lower(Mandrec.Field_Name) ||
                                               '/text()',
                                               Gc_Data_Namespace) .Getclobval() Field_Value
                      From   Table(Xmlsequence((Select pt_Out_Data_Xml.Extract('/datapacket/data/' ||
                                                                              Lower(Region.Region_Name) ||
                                                                              '/row',
                                                                              Gc_Data_Namespace)
                                               From   Dual))) Mct_Table)
          Loop
         Lv_Number := Lv_Number +1;
         VInnerLoopCounter := VInnerLoopCounter +1;
         Lv_String := 'Start of the Mandrec Inner Loop and this is my '||VInnerLoopCounter||'th iteration of the outer loop '||VOuterLoopCounter;
            ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Instance Rec Num  -->' || Rec.Instance_Rec_Num);
            --Selecting  Mandatory Field Value
            ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Instance Rec Num  -->' || Rec.Instance_Rec_Num);
            -- if Mandatory Column  Value is null Then it's Deleting the record from The xml
            If Rec.Field_Value Is Null And  (Rec.Instance_Rec_Num != 1 Or Pv_stage = 'END_FLOW' )
            Then
         Lv_Number := Lv_Number +1;
         Lv_String := 'Entered the Mandrec Inner Loops If Block since the mandatory column is null and hence deleting the record from the xml';
            ms_rga_utilities.pr_monitor_progress(Lv_Proc || '-> Lower(Region.Region_Name) -> ' ||Lower(Region.Region_Name));
            Lv_Number := Lv_Number +1;
       Lv_String := 'Before triggering the deletexml statement';
              Select Deletexml(pt_Out_Data_Xml,
                               'datapacket/data/' || Lower(Region.Region_Name) ||
                               '/row[instance_rec_num="' ||
                               Rec.Instance_Rec_Num || '"]',
                               Gc_Data_Namespace)
              Into   pt_Out_Data_Xml
              From   Dual;
                         Lv_Number := Lv_Number +1;
       Lv_String := 'After Deletexml check the contents of pt_Out_Data_Xml';
            End If;
          End Loop;
       End Loop;
      End If;
    End Loop;

  ms_rga_utilities.pr_monitor_progress('ENDING MULTI_ROW_DEFAULT_SETTING');
  Exception
    When Others Then
      ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'In Others exception - ' ||Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
      pn_error_code:= -1;
      pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);
      Raise;
  End Multi_Row_Default_Setting;


Procedure Pr_Manage_Common_flow (Pc_Process_Code    In Varchar2,
                                Pv_Transition_From In Varchar2,
                                 Pv_Transition_To   In Varchar2,
                                 Pv_object_Action   In Varchar2,
                                 Pv_dd_object_type  In Varchar2,
                                 pn_Error_Handle_Id In Number,
                                 pt_Out_Data        In Out Nocopy Clob,
                                 Pn_Error_Sequence  In Out Nocopy Number,
                                 pn_error_code      Out Number,
                                 pv_error_message   Out Varchar2)
Is


Lt_Out_Data_Xml               XmlType;
Lv_Proc                       Varchar2(4000) := 'Ms_Rga_Helper.Pr_Manage_Common_flow => ';
Ln_Process_Instance_Id        ms_rga_log_issues_v.PROCESS_INSTANCE_ID%Type;
Ln_instance_id                ms_rga_log_issues_v.INSTANCE_ID%Type;
Lv_metric_id                  ms_rga_log_issues_v.METRIC_ID%Type;
Lv_Dd_Current_User_Name       ms_rga_log_issues_v.DD_CURRENT_USER_NAME%Type;
Lv_Dd_Event_User_Name         ms_rga_log_issues_v.DD_EVENT_USER_NAME%Type;
Ln_Error_Code                 Number;
Lv_Error_Message              Varchar2(4000);
Lv_modified_by_hidn           Varchar2(400);
lv_mod_req_by                 varchar2(400);



Begin
  ms_rga_utilities.pr_monitor_progress('BEGINING PR_MANAGE_COMMON_FLOW');
   Lt_Out_Data_Xml := Xmltype(pt_Out_Data);



    --Debug(Lv_Proc || ' Flow Code ' ||Pc_Process_Code);

    ms_rga_utilities.pr_monitor_progress(Lv_Proc || '  -> Flow Code - >' ||Pc_Process_Code);
    ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Pv_Transition_From,Pv_Transition_To,Pv_object_Action,Pv_dd_object_type '
                 ||Pv_Transition_From||','||Pv_Transition_To||','||Pv_object_Action||','||Pv_dd_object_type);

       Insert_Value_To_Non_Multirow('dd_current_stage',
                                   Pv_Transition_To,
                                   pn_Error_Handle_Id,
                                   pn_Error_Sequence,
                                   Lt_Out_Data_Xml,
                                   pn_error_code,
                                   pv_error_message);

    If Pc_Process_Code IN ('MS_RGA_LOG_ISSUES','MS_RGA_NOTIFY_USERS','MS_RGA_CHANNEL_DTLS','CREATE_RULE') --'MS_RGA_MY_SUBSCRIPTION'
    Then

      ms_rga_utilities.pr_monitor_progress(Pc_Process_Code || ' - > INSIDE 1st IF PR_MANAGE_COMMON_FLOW INSIDE IF');


        SELECT    Process_Instance_Id,
                  instance_id,
                  metric_id,
                  Dd_Current_User_Name,
                  Dd_Event_User_Name
                   Into    Ln_Process_Instance_Id,
                  Ln_instance_id,
                  Lv_metric_id,
                  Lv_Dd_Current_User_Name,
                  Lv_Dd_Event_User_Name
                           FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"),
                            'for $i in /msa:datapacket/msa:data/msa:nonmultirow
                             return $i'
                              PASSING Lt_Out_Data_Xml
                        COLUMNS
                            Process_Instance_Id          NUMBER               PATH            'msa:process_instance_id',
                            instance_id                  NUMBER               PATH            'msa:instance_id',
                            metric_id                    NUMBER               PATH            'msa:metric_id',
                            Dd_Current_User_Name         VARCHAR2(4000)       PATH            'msa:dd_current_user_name',
                            Dd_Event_User_Name           VARCHAR2(4000)       PATH            'msa:dd_event_user_name'

                            );

      If (Pv_Transition_From = 'CREATE_EDIT' OR Pv_Transition_To = 'MODIFY_CREATE_CHANNEL')

      Then

       ms_rga_utilities.pr_monitor_progress(Pv_Transition_From  || ' - > INSIDE 2nd IF PR_MANAGE_COMMON_FLOW INSIDE IF');
--

             Select Updatexml(Lt_Out_Data_Xml,
                         'datapacket/data/nonmultirow/dd_event_user_name/text()',
                         Lv_Dd_Current_User_Name,
                         Gc_Data_Namespace)
        Into   Lt_Out_Data_Xml
        From   Dual;
     End If;

   End If;
   pt_Out_Data := Lt_Out_Data_Xml.Getclobval();
  ms_rga_utilities.pr_monitor_progress('ENDING PR_MANAGE_COMMON_FLOW');
End Pr_Manage_Common_flow;


PROCEDURE Pr_Ism_Integration ( Pt_out_data          in   xmltype,
                               Pv_dd_current_user   in   varchar2,
                               Pv_object_id         in   varchar2
                            )
IS
  -- ln_max_iid        ms_cmp_perform_test_v.instance_id%TYPE;
   lt_out_data_xml   XMLTYPE;
   lt_in_data_xml    XMLTYPE;
   --lv_action         VARCHAR2 (32)  := 'ISM-INTG';
   lv_proc           VARCHAR2 (4000):= 'Ms_Rga_Helper.Pr_Ism_Integration => ' ;
   lt_ism_xml        XMLTYPE;
   l_params          ms_param_tbl := ms_param_tbl ();
   l_ism_template    CLOB;
   l_event_log_id    NUMBER;
   lc_tmp_xml        XMLTYPE;
   ln_inst_num       Number          := 0;
   l_error_code      VARCHAR2 (100);
   l_error_message   VARCHAR2 (1000);
   lv_multirow_region_id varchar2(100);
   ln_issues_count   Number(10) := 0;
   --Lv_Issue_Id      varchar2(4000);
  -- Ln_Issue_Exists Number := 0;

BEGIN

   lt_out_data_xml := pt_out_data;
   DEBUG (lv_proc || 'Entered Pr_Ism_Integration ');



   Begin

       FOR fis_rec In
          (Select mct_table.EXTRACT  ('row/instance_rec_num/text()',          gc_data_namespace).getstringval() instance_rec_num,
                  mct_table.EXTRACT  ('row/issue_owner_grci/text()',          gc_data_namespace).getstringval() lv_issue_owner_grci,
                 mct_table.EXTRACT  ('row/issue_id/text()',                  gc_data_namespace).getstringval() lv_issue_id,
                  mct_table.EXTRACT  ('row/issue_type_grci/text()',           gc_data_namespace).getstringval() lv_issue_type_grci,
                  mct_table.EXTRACT  ('row/issue_title_grci/text()',          gc_data_namespace).getstringval() lv_issue_title_grci,
                  mct_table.EXTRACT  ('row/issue_rating_grci/text()',         gc_data_namespace).getstringval() lv_issue_rating_grci,
                  mct_table.EXTRACT  ('row/issue_resolution_grci/text()',     gc_data_namespace).getstringval() lv_issue_resolution_grci,
                  mct_table.EXTRACT  ('row/owner_org_grci/text()',            gc_data_namespace).getstringval() lv_owner_org_grci,
                  mct_table.EXTRACT  ('row/issue_approver_grci/text()',       gc_data_namespace).getstringval() lv_issue_approver_grci,
                  mct_table.EXTRACT  ('row/approver_org_grci/text()',        gc_data_namespace).getstringval() lv_approver_org_grci,
                  mct_table.EXTRACT  ('row/issue_exception_type_grci/text()', gc_data_namespace).getstringval() lv_issue_exception_type_grci,
                  mct_table.EXTRACT  ('row/issue_due_date_grci/text()',       gc_data_namespace).getstringval() lv_issue_due_date_grci,
                  mct_table.EXTRACT  ('row/issue_details_grci_htm/text()',        gc_data_namespace).getstringval() lv_issue_details_grci_htm,
                  mct_table.EXTRACT  ('row/issue_created_by/text()',        gc_data_namespace).getstringval() lv_issue_created_by
              From TABLE
                     (XMLSEQUENCE
                         ((Select lt_out_data_xml.EXTRACT('/datapacket/data/fnd/row', gc_data_namespace)
                           From Dual)
                         )
                     ) mct_table)


                     Loop
          DEBUG (lv_proc || 'inside 4 loop');

         If to_char(fis_rec.lv_issue_resolution_grci) = '1' -- Issue has been marked as "Reportable"
         Then 
             DEBUG (lv_proc || 'Before Calling the ms_apps_businessevents.raise_business_event for get GET_ISM_TEMPLATE ');
             l_params.EXTEND;
             l_params (1) :=
                ms_param_obj (param_name     => 'GET_ISM_TEMPLATE',
                              param_type     => ms_apps_constants.g_parameter_type_reference,
                              data_type      => ms_apps_constants.g_data_type_text,
                              mandatory      => ms_apps_constants.g_no,
                              text_value     => NULL,
                              number_value   => NULL,
                              date_value     => NULL,
                              clob_value     => NULL,
                              blob_value     => NULL,
                              bfile_value    => NULL);

             ms_apps_businessevents.raise_business_event(i_event_name            => 'GET_ISM_TEMPLATE',
                                                             i_parent_event_log_id   => NULL,
                                                             i_parameter_tab         => l_params,
                                                             i_registration_name     => NULL,
                                                             i_commit_flag           => TRUE,
                                                             o_event_log_id          => l_event_log_id,
                                                             o_error_code            => l_error_code,
                                                             o_error_message         => l_error_message);

            DEBUG (lv_proc || 'Selecting the ISM template ');
            SELECT clob_value
            INTO l_ism_template
            FROM ms_apps_event_param_logs
            WHERE event_log_id = l_event_log_id;

            lt_ism_xml:=xmltype(l_ism_template);
            --Deleting after getting the data to local.
            Delete
            FROM ms_apps_event_param_logs
            WHERE event_log_id = l_event_log_id;

            --insert into temp_xml(text,date_1) values ('entered here',sysdate);

            Select UPDATEXML
                      (lt_ism_xml,
                       '/datapacket/data/nonmultirow/f_created_by',
                       XMLTYPE ( '<msa:f_created_by xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                                 ||Pv_dd_current_user
                                 ||'</msa:f_created_by>'
                                ),
                       '/datapacket/data/nonmultirow/creation_date',
                       XMLTYPE ('<msa:creation_date xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                                 || fis_rec.lv_issue_due_date_grci
                                 || '</msa:creation_date>'
                               ),
                       '/datapacket/data/nonmultirow/issue_details',
                       XMLTYPE( '<msa:issue_details xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                               || fis_rec.lv_issue_details_grci_htm
                               || '</msa:issue_details>'
                              ),
                       '/datapacket/data/nonmultirow/issue_due_date',
                       XMLTYPE( '<msa:issue_due_date xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                               || fis_rec.lv_issue_due_date_grci
                               || '</msa:issue_due_date>'
                              ),
                       '/datapacket/data/nonmultirow/dd_event_user_name',
                       XMLTYPE( '<msa:dd_event_user_name xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                               || Pv_dd_current_user--fis_rec.lv_issue_created_by

                               || '</msa:dd_event_user_name>'
                              ),
                       '/datapacket/data/nonmultirow/dd_current_user_name',
                       XMLTYPE( '<msa:dd_current_user_name xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                               || Pv_dd_current_user--fis_rec.lv_issue_created_by

                               || '</msa:dd_current_user_name>'
                              ),
                       '/datapacket/data/nonmultirow/issue_source_type',
                       XMLTYPE( '<msa:issue_source_type xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                                 || '6'
                                 || '</msa:issue_source_type>'
                                ),
                       '/datapacket/data/nonmultirow/issue_risk_rating',
                       XMLTYPE( '<msa:issue_risk_rating xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                               || fis_rec.lv_issue_rating_grci
                               || '</msa:issue_risk_rating>'
                              ),
                       '/datapacket/data/nonmultirow/issue_source_ref',
                       XMLTYPE( '<msa:issue_source_ref xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                               --||  fis_rec.lv_issue_id
                                 ||Pv_object_id
                               --||'RGAISSUE - ' || ms_rga_issue_id_s.NEXTVAL
                               || '</msa:issue_source_ref>'
                              ),
                       '/datapacket/data/nonmultirow/issue_source',
                       XMLTYPE('<msa:issue_source xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                               || Pv_object_id
                               || '</msa:issue_source>'
                              ),
                       '/datapacket/data/nonmultirow/issue_owner',
                       XMLTYPE('<msa:issue_owner xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                               || fis_rec.lv_issue_owner_grci

                               || '</msa:issue_owner>'
                              ),
                       '/datapacket/data/nonmultirow/issue_initiator',
                       XMLTYPE( '<msa:issue_initiator xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                               ||Pv_dd_current_user--fis_rec.lv_issue_created_by

                               || '</msa:issue_initiator>'
                              ),
                       '/datapacket/data/nonmultirow/issue_approver',
                       XMLTYPE( '<msa:issue_approver xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                               || fis_rec.lv_issue_approver_grci
                               || '</msa:issue_approver>'
                              ),
                       '/datapacket/data/nonmultirow/issue_approverorg',
                       XMLTYPE( '<msa:issue_approverorg xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                              -- || 100000
                               || fis_rec.lv_approver_org_grci
                               || '</msa:issue_approverorg>'
                              ),
                       '/datapacket/data/nonmultirow/issue_ownerorg',
                       XMLTYPE( '<msa:issue_ownerorg xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                               || fis_rec.lv_owner_org_grci
                               || '</msa:issue_ownerorg>'
                              ),
                       '/datapacket/data/nonmultirow/type_of_execution',
                       XMLTYPE( '<msa:type_of_execution xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                               || fis_rec.lv_issue_exception_type_grci
                               || '</msa:type_of_execution>'
                              ),
                       '/datapacket/data/nonmultirow/issue_type',
                       XMLTYPE( '<msa:issue_type xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                               || fis_rec.lv_issue_type_grci
                               || '</msa:issue_type>'
                              ),
                       '/datapacket/data/nonmultirow/issue_title',
                       XMLTYPE( '<msa:issue_title xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                               || fis_rec.lv_issue_title_grci
                               || '</msa:issue_title>'
                              ),
                       '/datapacket/data/nonmultirow/orig_issue_due_dt',
                       XMLTYPE( '<msa:orig_issue_due_dt xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                               || fis_rec.lv_issue_due_date_grci
                              || '</msa:orig_issue_due_dt>'
                              ),
                                 '/datapacket/data/nonmultirow/instance_rec_num',
                       xmltype( '<msa:instance_rec_num xmlns:msa="http://www.metricstream.com/appstudio/msa">'
                               || 1
                               || '</msa:instance_rec_num>'
                              ),
                       gc_data_namespace
                      )
              Into lt_ism_xml
              From Dual;
            DEBUG (lv_proc || 'Before Trggering the  Issue');

           l_params (1) :=
            ms_param_obj (param_name     => 'TRIGGER_ISSUE',
                          param_type     => ms_apps_constants.g_parameter_type_reference,
                          data_type      => ms_apps_constants.g_data_type_text,
                          mandatory      => ms_apps_constants.g_no,
                          text_value     => NULL,
                          number_value   => NULL,
                          date_value     => NULL,
                          clob_value     => lt_ism_xml.getclobval (),
                          blob_value     => NULL,
                          bfile_value    => NULL);

             ms_apps_businessevents.raise_business_event (i_event_name            => 'TRIGGER_ISSUE',
                                                          i_parent_event_log_id   => NULL,
                                                          i_parameter_tab         => l_params,
                                                          i_registration_name     => NULL,
                                                          i_commit_flag           => TRUE,
                                                          o_event_log_id          => l_event_log_id,
                                                          o_error_code            => l_error_code,
                                                          o_error_message         => l_error_message);


           ln_issues_count := ln_issues_count + 1;
         End If;
           DEBUG (lv_proc || 'After Call ms_apps_businessevents.raise_business_event For triggering the Issue');

       End Loop;
        Exception
      When Others
      Then 
         DEBUG (lv_proc || 'Ism not installed '|| DBMS_UTILITY.format_error_backtrace || ' ~ '|| SQLERRM);
   End;

EXCEPTION
   WHEN OTHERS
   THEN
      DEBUG (lv_proc|| 'In Ex_Id_Generation exception - '|| DBMS_UTILITY.format_error_backtrace|| ' ~ '|| SQLERRM);

      ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Calling Pr_Manage_Notify_User');

END pr_ism_integration;

 Procedure Pr_Manage_Alert (Pc_Process_Code    In Varchar2,
                                 Pv_Transition_From In Varchar2,
                                 Pv_Transition_To   In Varchar2,
                                 pn_Error_Handle_Id In Number,
                                 pt_Out_Data        In Out Nocopy Clob,
                                 pt_In_Data         In Out Nocopy Clob,
                                 Pn_Error_Sequence  In Out Nocopy Number,
                                 pn_error_code      Out Number,
                                 pv_error_message   Out Varchar2)
Is


lv_Previous_stage             VARCHAR2(225);
lv_Object_Id                  VARCHAR2(100):='';
lv_Issue_Id                  VARCHAR2(100):='';
lv_Object_Name                VARCHAR2(200);
lv_Progress_status            VARCHAR2(1000);
Lt_Out_Data_Xml               Xmltype;
Lt_In_Data_Xml                Xmltype;
Lv_Proc                       Varchar2(4000) := 'Ms_Rga_Helper.Pr_Manage_Alert => ';
Ln_Iop_Log_No                 Number := 0;
Ln_Process_Instance_Id        Number;
Lv_Object_Action              Varchar2(100);
Lv_L1_Approver                Varchar2(100);
Lv_Dd_Current_User_Name       Varchar2(100);
Lv_Dd_Event_User_Name         Varchar2(100);
Lv_Is_Owner                   Varchar2(100);
Ln_Instance_Id                Number;
Lv_Metric_Id                  Varchar2(100);
Ln_Orig_Pid                   Number;
Ln_Error_Code                 Number;
Lv_Error_Message              Varchar2(4000);
Ex_Id_Generation              Exception;
Ex_Etl_Call                   Exception;
  Begin
      Debug(Lv_Proc || 'Inside Pr_Manage_Quant_Assmnt') ;

      ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Calling Pr_Manage_Notify_User');

      Lt_Out_Data_Xml := Xmltype(pt_Out_Data);
       SELECT  Object_Id,
                  Process_Instance_Id,
                  instance_id,
                  Dd_Current_User_Name,
                  Dd_Event_User_Name,
                  previous_stage,
                  dd_object_type
          Into    lv_Object_Id,
                  Ln_Process_Instance_Id,
                  Ln_instance_id,
                  Lv_Dd_Current_User_Name,
                  Lv_Dd_Event_User_Name,
                  Lv_previous_stage,
                  Lv_dd_object_type
                 FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"),
                            'for $i in /msa:datapacket/msa:data/msa:nonmultirow
                             return $i'
                              PASSING Lt_Out_Data_Xml
                        COLUMNS
                            Object_id                    VARCHAR2(200)        PATH            'msa:object_id',
                            Process_Instance_Id          NUMBER               PATH            'msa:process_instance_id',
                            instance_id                  NUMBER               PATH            'msa:instance_id',
                            Dd_Current_User_Name         VARCHAR2(4000)       PATH            'msa:dd_current_user_name',
                            Dd_Event_User_Name           VARCHAR2(4000)       PATH            'msa:dd_event_user_name',
                            previous_stage               VARCHAR2(4000)       PATH            'msa:previous_stage',
                            dd_object_type               VARCHAR2(4000)       PATH            'msa:dd_object_type'
                         );
--      insert into test_xml values (Lt_Out_Data_Xml, 1); commit;
      --Setting the multiRow primary  key value
      Multi_Row_Id_Setting(pn_Error_Handle_Id,
                           Pc_Process_Code,
                           Ln_Process_Instance_Id,
                           pn_Error_Sequence,
                           Lt_Out_Data_Xml,
                           pn_error_code ,
                           pv_error_message  );

      -- Setting the Default Values  and Mandatory Check
       --Both  :for Default Setting and Mandatory
       --Mandatory :Checking the Mandatory otherwise it will delete the row from xml Datapocket
       -- Default it's setting the default values
      Multi_Row_Default_Setting( Pc_Process_Code,
                                Ln_Process_Instance_Id,
                               'BOTH',
                                'NONPUBLISH',
                                pn_Error_Handle_Id,
                                pn_Error_Sequence,
                                Lt_Out_Data_Xml,
                                pn_error_code,
                                pv_error_message);

     Debug(Lv_Proc || 'Lv_Object_id , Pv_Transition_To , Lv_previous_stage' ||Lv_Object_id||','|| Pv_Transition_To||','||Lv_previous_stage);

     ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Calling Pr_Manage_Notify_User');

     --Business Logic for Non Multi row: starts
     If ((Lv_Object_id = 'null' OR Lv_Object_id is null) And Pv_Transition_To <> 'CREATE_EDIT')
     Then
        Debug(Lv_Proc || ' Calling ms_apps_utilities.get_next_id');
        ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Calling Pr_Manage_Notify_User');
        ms_apps_utilities.get_next_id ('RGA',
                                        'object_id_log',--'log_issue_id',
                                        'MS_RGA_LOG_ISSUES',
                                        Ln_Process_Instance_Id,
                                        Lv_Object_id,
                                        ln_error_code,
                                        lv_error_message
                                       );
         Debug(Lv_Proc || 'Lv_Object_id - '||Lv_Object_id);
         ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Calling Pr_Manage_Notify_User');
        --Setting  the Object_id first time
         Insert_Value_To_Non_Multirow('object_id',
                                   Lv_Object_id,
                                   pn_Error_Handle_Id,
                                   pn_Error_Sequence,
                                   Lt_Out_Data_Xml,
                                   pn_error_code,
                                   pv_error_message);

        End If;

      IF (Pv_Transition_From = 'CREATE_EDIT' )--AND (Pv_Trans)ition_To != 'PUBLISH'))
      THEN
          --Debug(Lv_Proc || 'MS_RSK_QNT_ASMT_FCTR_O.Lock_Entry being called at stage ' || Pv_Transition_To);
           MS_RGA_LOG_ISSUES_O.Lock_Entry(Iop_Object_id    => Lv_Object_id,
                                               Iop_Log_No       => Ln_Iop_Log_No,
                                               Op_Error_Code    => Ln_Error_Code,
                                               Op_Error_Message => Lv_Error_Message);
      End If;

      If (Pv_Transition_To in('PUBLISH'))
          Then

         MS_RGA_LOG_ISSUES_O.Unlock_Entry(Iop_Object_id    => Lv_Object_id,
                                               Iop_Log_No       => Ln_Iop_Log_No,
                                               Op_Error_Code    => Ln_Error_Code,
                                               Op_Error_Message => Lv_Error_Message);
      End If;

       -- Request Clarification from Owner to Initiator > Defaulting Action.
           DEBUG (Lv_Proc||'Transaction From '||pv_transition_from|| ' to ' ||pv_transition_to );
           ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Calling Pr_Manage_Notify_User');
      pt_Out_Data := Lt_Out_Data_Xml.Getclobval();

       --Calling Manage Common Flow
        Pr_Manage_Common_flow(Pc_Process_Code,
                               Pv_Transition_From,
                               Pv_Transition_To,
                               lv_Object_Action,
                               Lv_dd_object_type,
                               pn_Error_Handle_Id,
                               pt_Out_Data,
                               pn_Error_Sequence,
                               ln_error_code,
                               Lv_Error_Message);

       Ln_Error_Code := Null;
       Lt_Out_Data_Xml := Xmltype(pt_Out_Data);

      Debug(Lv_Proc || 'pt_Out_Data := Lt_Out_Data_Xml.Getclobval()');
      ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Calling Pr_Manage_Notify_User');
      pt_Out_Data := Lt_Out_Data_Xml.Getclobval();

        Lt_In_Data_Xml := Lt_Out_Data_Xml;
        --Inserting the Records to SI Table (Insted of Created_edit Transaction  In Publish)

        Lv_Error_Message := Ms_Apps_Mdf_Infoletoutput_Pkg.Insert_Xml('MS_RGA_LOG_ISSUES_V',
                                                                     Lv_Metric_Id,
                                                                     Ln_Process_Instance_Id,
                                                                     Ln_Instance_Id,
                                                                     Lt_In_Data_Xml.Getclobval());

           Update  MS_RGA_LOG_ISSUES
            Set    Dd_Instance_Id         = Ln_Instance_Id,
                   Dd_Process_Instance_Id = Ln_Process_Instance_Id
            Where  object_id = Lv_object_Id;


        Multi_Row_Default_Setting(Pc_Process_Code,
                                Ln_Process_Instance_Id,
                               'MANDATORY',
                                'PUBLISH',
                                pn_Error_Handle_Id,
                                pn_Error_Sequence,
                                Lt_In_Data_Xml,
                                pn_error_code,
                                pv_error_message);

        If Ln_Error_Code <> 0
        Then 
          Raise Ex_Etl_Call;
        End If;
        pr_ism_integration (Lt_In_Data_Xml,lv_dd_current_user_name,lv_Object_Id);
        pt_In_Data := Lt_In_Data_Xml.Getclobval();
        Debug(Lv_Proc || 'Assigned pt_In_Data' );
        ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Calling Pr_Manage_Notify_User');
     -- End If;
      Debug(Lv_Proc ||'Ln_Orig_Pid '||Ln_Orig_Pid);
      ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Calling Pr_Manage_Notify_User');
      If Ln_Orig_Pid Is Not Null
      Then
          Lt_In_Data_Xml := Lt_Out_Data_Xml;


          Lv_Error_Message := Ms_Apps_Mdf_Infoletoutput_Pkg.Insert_Xml('MS_RGA_LOG_ISSUES_V',
                                                                       Lv_Metric_Id,
                                                                       Ln_Process_Instance_Id,
                                                                       Ln_Instance_Id,
                                                                       Lt_In_Data_Xml.Getclobval());


         Update  MS_RGA_LOG_ISSUES
            Set    Dd_Instance_Id         = Ln_Instance_Id,
                   Dd_Process_Instance_Id = Ln_Process_Instance_Id
            Where  object_id = Lv_object_Id;


      End If;
      Debug(Lv_Proc || 'Here --- assigning pt_Out_Data and pt_In_Data');
      ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Calling Pr_Manage_Notify_User');
      pt_Out_Data := Lt_Out_Data_Xml.Getclobval();
       Debug(Lv_Proc || 'Assigned pt_Out_Data ');

    Exception
      When Ex_Id_Generation Then
        Debug(Lv_Proc || 'In Ex_Id_Generation exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Calling Pr_Manage_Notify_User');
          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);
        Raise;
      When Ex_Etl_Call Then
        Debug(Lv_Proc || 'In Ex_Etl_Call exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Calling Pr_Manage_Notify_User');
          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);

        Raise;
      When Others Then
        Debug(Lv_Proc || 'In Others exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
          ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Calling Pr_Manage_Notify_User');
          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);

        Raise;
    End Pr_Manage_Alert;

Procedure Pr_Manage_Notify_User  (Pc_Process_Code    In Varchar2,
                                 Pv_Transition_From In Varchar2,
                                 Pv_Transition_To   In Varchar2,
                                 pn_Error_Handle_Id In Number,
                                 pt_Out_Data        In Out Nocopy Clob,
                                 pt_In_Data         In Out Nocopy Clob,
                                 Pn_Error_Sequence  In Out Nocopy Number,
                                 pn_error_code      Out Number,
                                 pv_error_message   Out Varchar2)

IS

lv_Previous_stage             VARCHAR2(225);
lv_Object_Id                  VARCHAR2(100):='';
lv_Issue_Id                   VARCHAR2(100):='';
lv_Object_Name                VARCHAR2(200);
lv_Progress_status            VARCHAR2(1000);
Lt_Out_Data_Xml               Xmltype;
Lt_In_Data_Xml                Xmltype;
Lv_Proc                       Varchar2(4000) := 'Ms_Rga_Helper.Pr_Manage_Notify_User => ';
Ln_Iop_Log_No                 Number := 0;
Ln_Process_Instance_Id        Number;
Lv_Object_Action              Varchar2(100);
Lv_L1_Approver                Varchar2(100);
Lv_Dd_Current_User_Name       Varchar2(100);
Lv_Dd_Event_User_Name         Varchar2(100);
Lv_Is_Owner                   Varchar2(100);
Ln_Instance_Id                Number;
Lv_Metric_Id                  Varchar2(100);
Ln_Orig_Pid                   Number;
Ln_Error_Code                 Number;
Lv_Error_Message              Varchar2(4000);
Lv_Feed_Data_Id               ms_rga_feed_aggregator_v.FEED_DATA_ID%type;
Ex_Id_Generation              Exception;
Ex_Etl_Call                   Exception;
vString                       VARCHAR2(4000);
  Begin
      Debug(Lv_Proc || 'Inside Pr_Manage_Log_Issues') ;
      Lt_Out_Data_Xml := Xmltype(pt_Out_Data);
    --  insert into temp_xml(num_1,clob_1,date_1,text) values (10000,Lt_Out_Data_Xml,sysdate,'NOTIFY_USERS');
       SELECT  Object_Id,
                  Process_Instance_Id,
                  Dd_Current_User_Name,
                  Dd_Event_User_Name,
                  previous_stage,
                  dd_object_type,
                  metric_id,
                  feed_data_id

          Into    lv_Object_Id,
                  Ln_Process_Instance_Id,
                  Lv_Dd_Current_User_Name,
                  Lv_Dd_Event_User_Name,
                  Lv_previous_stage,
                  Lv_dd_object_type,
                  Lv_Metric_Id,
                  Lv_Feed_Data_Id


                 FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"),
                            'for $i in /msa:datapacket/msa:data/msa:nonmultirow
                             return $i'
                              PASSING Lt_Out_Data_Xml
                        COLUMNS
                            Object_id                    VARCHAR2(200)        PATH            'msa:object_id',
                            Process_Instance_Id          NUMBER               PATH            'msa:process_instance_id',
                            Dd_Current_User_Name         VARCHAR2(4000)       PATH            'msa:dd_current_user_name',
                            Dd_Event_User_Name           VARCHAR2(4000)       PATH            'msa:dd_event_user_name',
                            previous_stage               VARCHAR2(4000)       PATH            'msa:previous_stage',
                            dd_object_type               VARCHAR2(4000)       PATH            'msa:dd_object_type',
                            metric_id                    VARCHAR2(100)        PATH            'msa:metric_id',
                            feed_data_id                 NUMBER               PATH            'msa:feed_data_id'
                         );

     Debug(Lv_Proc || 'Lv_Object_id , Pv_Transition_To , Lv_previous_stage' ||Lv_Object_id||','|| Pv_Transition_To||','||Lv_previous_stage);

     --Business Logic for Non Multi row: starts
     If (Lv_Object_id Is Null And Pv_Transition_To <> 'CREATE_EDIT')
     Then
        Debug(Lv_Proc || ' Calling ms_apps_utilities.get_next_id');
        ms_apps_utilities.get_next_id ('RGA',
                                       'notify_user_id',
                                        'MS_RGA_NOTIFY_USERS',
                                        Ln_Process_Instance_Id,
                                        Lv_Object_id,
                                        ln_error_code,
                                        lv_error_message
                                       );
         Debug(Lv_Proc || 'Lv_Object_id - '||Lv_Object_id);
        --Setting  the Object_id first time
        Insert_Value_To_Non_Multirow('object_id',
                                   Lv_Object_id,
                                   pn_Error_Handle_Id,
                                   pn_Error_Sequence,
                                   Lt_Out_Data_Xml,
                                   pn_error_code,
                                   pv_error_message);

        End If;

      IF (Pv_Transition_From = 'CREATE_EDIT' )--AND (Pv_Trans)ition_To != 'PUBLISH'))
      THEN
          --Debug(Lv_Proc || 'MS_RSK_QNT_ASMT_FCTR_O.Lock_Entry being called at stage ' || Pv_Transition_To);
           MS_RGA_NOTIFY_USERS_O.Lock_Entry(Iop_Object_id    => Lv_Object_id,
                                               Iop_Log_No       => Ln_Iop_Log_No,
                                               Op_Error_Code    => Ln_Error_Code,
                                               Op_Error_Message => Lv_Error_Message);
      End If;

      If (Pv_Transition_To in('PUBLISH'))
          Then

         MS_RGA_NOTIFY_USERS_O.Unlock_Entry(Iop_Object_id    => Lv_Object_id,
                                               Iop_Log_No       => Ln_Iop_Log_No,
                                               Op_Error_Code    => Ln_Error_Code,
                                               Op_Error_Message => Lv_Error_Message);
      End If;

       -- Request Clarification from Owner to Initiator > Defaulting Action.
           DEBUG (Lv_Proc||'Transaction From '||pv_transition_from|| ' to ' ||pv_transition_to );
           pt_Out_Data := Lt_Out_Data_Xml.Getclobval();

       --Calling Manage Common Flow
        Pr_Manage_Common_flow(Pc_Process_Code,
                               Pv_Transition_From,
                               Pv_Transition_To,
                               lv_Object_Action,
                               Lv_dd_object_type,
                               pn_Error_Handle_Id,
                               pt_Out_Data,
                               pn_Error_Sequence,
                               ln_error_code,
                               Lv_Error_Message);

       Ln_Error_Code := Null;
       Lt_Out_Data_Xml := Xmltype(pt_Out_Data);

      Debug(Lv_Proc || 'pt_Out_Data := Lt_Out_Data_Xml.Getclobval()');
      pt_Out_Data := Lt_Out_Data_Xml.Getclobval();

        Lt_In_Data_Xml := Lt_Out_Data_Xml;
        --Inserting the Records to SI Table (Insted of Created_edit Transaction  In Publish)

        Lv_Error_Message := Ms_Apps_Mdf_Infoletoutput_Pkg.Insert_Xml('MS_RGA_NOTIFY_USERS_V',
                                                                     Lv_Metric_Id,
                                                                     Ln_Process_Instance_Id,
                                                                     Ln_Instance_Id,
                                                                     Lt_In_Data_Xml.Getclobval());

           Update  MS_RGA_NOTIFY_USERS
            Set    Dd_Instance_Id         = Ln_Instance_Id,
                   Dd_Process_Instance_Id = Ln_Process_Instance_Id
            Where  object_id = Lv_object_Id;

        If Ln_Error_Code <> 0
        Then
          Raise Ex_Etl_Call;
        End If;

        pt_In_Data := Lt_In_Data_Xml.Getclobval();
        Debug(Lv_Proc || 'Assigned pt_In_Data' );
     -- End If;
      Debug(Lv_Proc ||'Ln_Orig_Pid '||Ln_Orig_Pid);
      If Ln_Orig_Pid Is Not Null
      Then
          Lt_In_Data_Xml := Lt_Out_Data_Xml;


          Lv_Error_Message := Ms_Apps_Mdf_Infoletoutput_Pkg.Insert_Xml('MS_RGA_NOTIFY_USERS_V',
                                                                       Lv_Metric_Id,
                                                                       Ln_Process_Instance_Id,
                                                                       Ln_Instance_Id,
                                                                       Lt_In_Data_Xml.Getclobval());


         Update  MS_RGA_NOTIFY_USERS
            Set    Dd_Instance_Id         = Ln_Instance_Id,
                   Dd_Process_Instance_Id = Ln_Process_Instance_Id
            Where  object_id = Lv_object_Id;




      End If;
      Debug(Lv_Proc || 'Here --- assigning pt_Out_Data and pt_In_Data');
      pt_Out_Data := Lt_Out_Data_Xml.Getclobval();
       Debug(Lv_Proc || 'Assigned pt_Out_Data ');

        -- TO EMAIL THE USERS THAT ARE SPECIFIED IN NOTIFY USERS FORM.
      -- commented by vishnu since the mail service is already called from call_etl
     /* ms_rga_helper.email_notify_users
                                           (i_pf_id              => Ln_Process_Instance_Id,
                                            i_metric_id          => Lv_Metric_Id,
                                            i_feed_data_id       => Lv_Feed_Data_Id,
                                            o_error_code         => Ln_Error_Code,
                                            o_error_message      => Lv_Error_Message );

    */

    Exception
      When Ex_Id_Generation Then
        Debug(Lv_Proc || 'In Ex_Id_Generation exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);

          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);
        Raise;
      When Ex_Etl_Call Then
        Debug(Lv_Proc || 'In Ex_Etl_Call exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);

          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);

        Raise;
      When Others Then
        Debug(Lv_Proc || 'In Others exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);

          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);

        Raise;
    End Pr_Manage_Notify_User;



Procedure Pr_Manage_My_Subscription(Pc_Process_Code    In Varchar2,
                                    pn_Error_Handle_Id In Number,
                                    pt_Out_Data        In Out Nocopy Clob,
                                    pt_In_Data         In Out Nocopy Clob,
                                    Pn_Error_Sequence  In Out Nocopy Number,
                                    pn_error_code      Out Number,
                                    pv_error_message   Out Varchar2)
Is

lv_Object_name                Varchar2(4000);
l_org_list                    Varchar2(32767);
lv_Object_Id                  VARCHAR2(100):='';
Lv_Proc                       Varchar2(4000) := 'Ms_Rga_Helper.Pr_Manage_My_Subscription => ';
Lt_Out_Data_Xml               Xmltype;
Lt_In_Data_Xml                Xmltype;
l_bool_object_id              Boolean:= False;
l_object_id                   MS_RGA_SUBS_CHANNEL.Object_Id%Type;
Ln_Error_Code                 Number;
Lv_Error_Message              Varchar2(4000);
Ln_Process_Instance_Id        Number;
Ln_instance_rec_num           Number;
pn_old_instance_id            Varchar2(100):='';
Lv_sub_id                     Varchar2(200);
Lv_String                     VARCHAR2(4000);
Lv_Step                       number :=0;
Lv_Dd_Current_User_Name       Varchar2(100);

Begin
      Debug(Lv_Proc || 'Inside Pr_Manage_My_Subscription') ;
      Lt_Out_Data_Xml := Xmltype(pt_Out_Data);

      SELECT Process_Instance_Id,Dd_Current_User_Name  Into Ln_Process_Instance_Id,Lv_Dd_Current_User_Name
                FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"),
                            'for $i in /msa:datapacket/msa:data/msa:nonmultirow
                             return $i'
                              PASSING Lt_Out_Data_Xml
                        COLUMNS
                            Process_Instance_Id        NUMBER               PATH            'msa:process_instance_id',   
                            Dd_Current_User_Name         VARCHAR2(4000)       PATH            'msa:dd_current_user_name'
                            );

                            
      Begin
          select  distinct object_id
          Into l_object_id
           from MS_RGA_SUBS_CHANNEL
           WHERE dd_created_by=Lv_Dd_Current_User_Name;
           
          l_bool_object_id := False;
      Exception
        When No_data_Found
        Then
            Debug(Lv_Proc || 'l_bool_object_id := True') ;
            l_bool_object_id := True;
      End;
      
      Debug(Lv_Proc || 'Ln_Process_Instance_Id '||Ln_Process_Instance_Id) ;
      
      IF l_bool_object_id
      THEN
      ms_apps_utilities.get_next_id ('RGA','subs_pk_id','MS_RGA_MY_SUBSCRIPTION', Ln_process_instance_id,Lv_object_id, ln_error_code, lv_error_message);
      Else
        Lv_object_id := l_object_id;
      END IF;
      
      Debug(Lv_Proc || 'Lv_object_id '||Lv_object_id) ;
      --Setting  the Object_id first time

      Insert_Value_To_Non_Multirow('object_id',Lv_Object_id,pn_Error_Handle_Id,pn_Error_Sequence,Lt_Out_Data_Xml,pn_error_code, pv_error_message);

      UPDATE ms_rga_my_subscription_v
         SET object_id = Lv_Object_id
       WHERE process_instance_id = Ln_process_instance_id;

        Debug(Lv_Proc || 'Before Loop');
         FOR CHN_table IN(SELECT           CHANNEL_ID
                                          ,CHANNEL_NAME
                                          ,FILTER_KEYWORDS
                                          ,NOTIFY_BY_EMAIL
                                          ,STATUS
                                          ,SUBSCRIPTION_ID
                                          ,SUBSCRIPTION_STATUS
                                          ,instance_rec_num
                          FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
                                                 'msa:datapacket/msa:data/msa:chn/msa:row'
                          PASSING Lt_Out_Data_Xml
                          COLUMNS                      CHANNEL_ID                       VARCHAR2(4000)  PATH  'msa:channel_id'
                                                      ,CHANNEL_NAME                     VARCHAR2(4000)  PATH  'msa:channel_name'
                                                       ,FILTER_KEYWORDS                  VARCHAR2(4000)  PATH  'msa:filter_keywords'
                                                      ,NOTIFY_BY_EMAIL                  VARCHAR2(4000)  PATH  'msa:notify_by_email'
                                                       ,STATUS                           VARCHAR2(4000)  PATH  'msa:status'
                                                      ,SUBSCRIPTION_ID                  VARCHAR2(4000)  PATH  'msa:subscription_id'
                                                      ,SUBSCRIPTION_STATUS              VARCHAR2(4000)  PATH  'msa:subscription_status'
                                                      ,instance_rec_num                 NUMBER          PATH  'msa:instance_rec_num'

                                                    ))
         Loop
             Debug(Lv_Proc || 'Inside Loop');
             lv_object_name    := CHN_table.channel_name;
             Ln_instance_rec_num   := CHN_table.instance_rec_num;
             Lv_sub_id       := CHN_table.subscription_id;
             Debug(Lv_Proc || 'lv_object_name - '||lv_object_name);
             Debug(Lv_Proc || 'Lv_scenario_id - '||Lv_sub_id);


             If Lv_sub_id IS NULL
                    Then

                      Select Deletexml(Lt_Out_Data_Xml,'datapacket/data/chn/row[instance_rec_num="' ||Ln_Instance_Rec_Num || '"]/subscription_id',
                                          Gc_Data_Namespace)
                         Into   Lt_Out_Data_Xml
                         From   Dual;

                        ms_apps_utilities.get_next_id ('RGA','subs_pk_id','MS_RGA_MY_SUBSCRIPTION', Ln_process_instance_id,Lv_sub_id, ln_error_code,lv_error_message );
                        
                     Select Insertchildxml(Lt_Out_Data_Xml,
                                            'datapacket/data/chn/row[instance_rec_num="' ||Ln_Instance_Rec_Num || '"]',
                                            'subscription_id',
                                            Xmltype('<' || 'subscription_id' || ' ' ||
                                                    Gc_Data_Namespace || '>' || Lv_sub_id || '</' ||
                                                    'subscription_id' || '>'),
                                            Gc_Data_Namespace)
                      Into   Lt_Out_Data_Xml
                      From   Dual;

                      UPDATE ms_rga_my_subscription_v
                           SET SUBSCRIPTION_ID = Lv_sub_id
                         WHERE process_instance_id = Ln_Process_Instance_Id
                           AND instance_id = pn_old_instance_id;
            End If;
               -- insert into temp_xml values(902,Lt_Out_Data_Xml);
         End Loop;
         pt_Out_Data := Lt_Out_Data_Xml.Getclobval();
         Lt_In_Data_Xml := Lt_Out_Data_Xml;
         pt_In_Data := Lt_In_Data_Xml.Getclobval();
Exception
   When Others Then
      Debug(Lv_Proc || 'In WO '||sqlerrm||'trace '||dbms_utility.format_error_backtrace);
End    Pr_Manage_My_Subscription;

Procedure Pr_Manage_Infolet_Inv(Pc_Process_Code    In Varchar2,
                                 Pv_Transition_From In Varchar2,
                                 Pv_Transition_To   In Varchar2,
                                 pn_Error_Handle_Id In Number,
                                 pt_Out_Data        In Out Nocopy Clob,
                                 pt_In_Data         In Out Nocopy Clob,
                                 Pn_Error_Sequence  In Out Nocopy Number,
                                 pn_error_code      Out Number,
                                 pv_error_message   Out Varchar2)
Is



lv_Object_Id                  VARCHAR2(100):='';
lv_Issue_Id                  VARCHAR2(100):='';
lv_Object_Name                VARCHAR2(200);
lv_Progress_status            VARCHAR2(1000);
Lt_Out_Data_Xml               Xmltype;
Lt_In_Data_Xml                Xmltype;
Lv_Proc                       Varchar2(4000) := 'Ms_Rga_Helper.Pr_Manage_Infolet_Inv => ';
Ln_Iop_Log_No                 Number := 0;
Ln_Process_Instance_Id        Number;
Lv_Object_Action              Varchar2(100);
Lv_L1_Approver                Varchar2(100);
Lv_Dd_Current_User_Name       Varchar2(100);
Lv_Dd_Event_User_Name         Varchar2(100);
Lv_Is_Owner                   Varchar2(100);
Ln_Instance_Id                Number;
Lv_Metric_Id                  Varchar2(100);
Ln_Orig_Pid                   Number;
Ln_Error_Code                 Number;
Lv_Error_Message              Varchar2(4000);
Ex_Id_Generation              Exception;
Ex_Etl_Call                   Exception;
Lv_String VARCHAR2(4000);
  Begin

  Lv_String := 'This is transition from '||Pv_Transition_From||' to '||Pv_Transition_To;

    ms_rga_utilities.pr_monitor_progress('BEGINING Pr_Manage_Infolet_Inv');

   ms_rga_utilities.pr_monitor_progress('Pr_Manage_Infolet_Inv');

   -- insert into temp_xml1 values (11, pt_Out_Data);

      Lt_Out_Data_Xml := Xmltype(pt_Out_Data);

    Lv_Number := Lv_Number +1;
    Lv_String := 'Entered the Procedure Pr_Manage_Infolet_Inv';

      SELECT  Object_Id,
                  Process_Instance_Id,
                  Dd_Current_User_Name,
                  Dd_Event_User_Name,
                  dd_object_type
          Into    lv_Object_Id,
                  Ln_Process_Instance_Id,
                  Lv_Dd_Current_User_Name,
                  Lv_Dd_Event_User_Name,
                  Lv_dd_object_type
                 FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"),
                            'for $i in /msa:datapacket/msa:data/msa:nonmultirow
                             return $i'
                              PASSING Lt_Out_Data_Xml
                        COLUMNS
                            Object_id                    VARCHAR2(200)        PATH            'msa:object_id',
                            Process_Instance_Id          NUMBER               PATH            'msa:process_instance_id',
                            Dd_Current_User_Name         VARCHAR2(4000)       PATH            'msa:dd_current_user_name',
                            Dd_Event_User_Name           VARCHAR2(4000)       PATH            'msa:dd_event_user_name',
                           dd_object_type               VARCHAR2(4000)       PATH            'msa:dd_object_type'
                         );


                Lv_Number := Lv_Number +1;
                Lv_String := 'Reterieved the (lv_Object_Id,Ln_Process_Instance_Id,Lv_Dd_Current_User_Name,Lv_Dd_Event_User_Name,Lv_dd_object_type)
                Values ('||lv_Object_Id||','||Ln_Process_Instance_Id||','||Lv_Dd_Current_User_Name||','||Lv_Dd_Event_User_Name||','||Lv_dd_object_type||')';

                Lv_Number := Lv_Number +1;
                Lv_String := 'Start the Procedure Multi_Row_Id_Setting';

                  --Setting the multiRow primary  key value
                  Multi_Row_Id_Setting(pn_Error_Handle_Id,
                                       Pc_Process_Code,
                                       Ln_Process_Instance_Id,
                                       pn_Error_Sequence,
                                       Lt_Out_Data_Xml,
                                       pn_error_code ,
                                       pv_error_message  );

                Lv_Number := Lv_Number +1;
                Lv_String := 'End the Procedure Multi_Row_Id_Setting';
                   -- Setting the Default Values  and Mandatory Check
                   --Both  :for Default Setting and Mandatory
                   --Mandatory :Checking the Mandatory otherwise it will delete the row from xml Datapocket
                   -- Default it's setting the default values


                Lv_Number := Lv_Number +1;
                Lv_String := 'START the Procedure Multi_Row_Default_Setting';

                  Multi_Row_Default_Setting( Pc_Process_Code,
                                            Ln_Process_Instance_Id,
                                           'BOTH',
                                            'NONPUBLISH',
                                            pn_Error_Handle_Id,
                                            pn_Error_Sequence,
                                            Lt_Out_Data_Xml,
                                            pn_error_code,
                                            pv_error_message);

                Lv_Number := Lv_Number +1;
                Lv_String := 'End the Procedure Multi_Row_Default_Setting';
                  --Business Logic for Non Multi row: starts
                 If (Lv_Object_id Is Null Or Pv_Transition_To <> 'CREATE_EDIT')
                 Then

                 Lv_Number := Lv_Number +1;
                Lv_String := 'Entered the IF Block in Pr_Manage_Infolet_Inv since the Lv_Object_id is null or Pv_Transition_To not equal to CREATE_EDIT';

                    ms_rga_utilities.pr_monitor_progress('Calling ms_apps_utilities.get_next_id');

                    ms_apps_utilities.get_next_id ('RGA',
                                                    'ms_rga_infolet_inv_pk',--'log_issue_id',
                                                    'MS_RGA_INFOLET_INV',
                                                    Ln_Process_Instance_Id,
                                                    Lv_Object_id,
                                                    ln_error_code,
                                                    lv_error_message
                                                   );

                Lv_Number := Lv_Number +1;
                Lv_String := 'Generated the Lv_Object_id and its value is '||Lv_Object_id;
                                      ms_rga_utilities.pr_monitor_progress( 'Lv_Object_id 1- '||Lv_Object_id);

                Lv_Number := Lv_Number +1;
                Lv_String := 'Start the call to Insert_Value_To_Non_Multirow';
                    --Setting  the Object_id first time
                    Insert_Value_To_Non_Multirow('object_id',
                                               Lv_Object_id,
                                               pn_Error_Handle_Id,
                                               pn_Error_Sequence,
                                               Lt_Out_Data_Xml,
                                               pn_error_code,
                                               pv_error_message);

                Lv_Number := Lv_Number +1;
                Lv_String := 'END the call to Insert_Value_To_Non_Multirow check the content of Lt_Out_Data_Xml';
                commit;



                  ms_rga_utilities.pr_monitor_progress( 'Lv_Object_id 2- '||Lv_Object_id);
                    End If;




                   -- Request Clarification from Owner to Initiator > Defaulting Action.
                       DEBUG (Lv_Proc||'Transaction From '||pv_transition_from|| ' to ' ||pv_transition_to );

                       Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'pt_Out_Data := Lt_Out_Data_Xml.Getclobval()' );


                  pt_Out_Data := Lt_Out_Data_Xml.Getclobval();

                Lv_Number := Lv_Number +1;
                Lv_String := 'START the call to Pr_Manage_Common_flow';

                    Pr_Manage_Common_flow(Pc_Process_Code,
                                           Pv_Transition_From,
                                           Pv_Transition_To,
                                           lv_Object_Action,
                                           Lv_dd_object_type,
                                           pn_Error_Handle_Id,
                                           pt_Out_Data,
                                           pn_Error_Sequence,
                                           ln_error_code,
                                           Lv_Error_Message);

                Lv_Number := Lv_Number +1;
                Lv_String := 'END the call to Pr_Manage_Common_flow check the connents of Lt_Out_Data_Xml';

                   Ln_Error_Code := Null;
                   Lt_Out_Data_Xml := Xmltype(pt_Out_Data);

                  --Debug(Lv_Proc || 'pt_Out_Data := Lt_Out_Data_Xml.Getclobval()');

                   Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'pt_Out_Data := Lt_Out_Data_Xml.Getclobval()' );


                  pt_Out_Data := Lt_Out_Data_Xml.Getclobval();

                    Lt_In_Data_Xml := Lt_Out_Data_Xml;
                    --Inserting the Records to SI Table (Insted of Created_edit Transaction  In Publish)





                    Lv_Error_Message := Ms_Apps_Mdf_Infoletoutput_Pkg.Insert_Xml('MS_RGA_CHANNEL_DTLS_V',
                                                                                 Lv_Metric_Id,
                                                                                 Ln_Process_Instance_Id,
                                                                                 Ln_Instance_Id,
                                                                                 Lt_In_Data_Xml.Getclobval());




                    Multi_Row_Default_Setting(Pc_Process_Code,
                                            Ln_Process_Instance_Id,
                                           'MANDATORY',
                                            'PUBLISH',
                                            pn_Error_Handle_Id,
                                            pn_Error_Sequence,
                                            Lt_In_Data_Xml,
                                            pn_error_code,
                                            pv_error_message);

                Lv_Number := Lv_Number +1;
                Lv_String := 'End the call to Multi_Row_Default_Setting check the content of the ';


                    If Ln_Error_Code <> 0
                    Then
                      Raise Ex_Etl_Call;
                    End If;

                    pt_In_Data := Lt_In_Data_Xml.Getclobval();
                   -- Debug(Lv_Proc || 'Assigned pt_In_Data' );

                     Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'Assigned pt_In_Data' );

                 -- End If;
                 -- Debug(Lv_Proc ||'Ln_Orig_Pid '||Ln_Orig_Pid);

                   Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc ||'Ln_Orig_Pid '||Ln_Orig_Pid);

                  --Debug(Lv_Proc || 'Here --- assigning pt_Out_Data and pt_In_Data');

                   Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'Here --- assigning pt_Out_Data and pt_In_Data');

                  pt_Out_Data := Lt_Out_Data_Xml.Getclobval();
                 --  Debug(Lv_Proc || 'Assigned pt_Out_Data ');
                    Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'Assigned pt_Out_Data ');







-- insert into temp_xml3(num_1,clob_1,date_1,text) values (44, xmltype(pt_Out_Data),sysdate,'This is PT OUT data');
        ms_rga_utilities.pr_monitor_progress('ENDING Pr_Manage_Infolet_Inv');
    Exception
      When Ex_Id_Generation Then
           Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'In Ex_Id_Generation exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);

      Lv_String :=  'Entered Exception Ex_Id_Generation part when Pv_Transition_From is ' ||
         Pv_Transition_From || ' and Pv_Transition_To as ' ||
         Pv_Transition_To||' and error code is'||SQLCODE||' and error_message is '||SQLERRM;





        Raise;
      When Ex_Etl_Call Then
            Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'In Ex_Etl_Call exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);


            Lv_String :=  'Entered Exception Ex_Etl_Call part when Pv_Transition_From is ' ||
         Pv_Transition_From || ' and Pv_Transition_To as ' ||
         Pv_Transition_To||' and error code is'||SQLCODE||' and error_message is '||SQLERRM;



        Raise;
      When Others Then
            Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'In Others exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);


           Lv_String :=  'Entered Exception Ex_Etl_Call part when Pv_Transition_From is ' ||
         Pv_Transition_From || ' and Pv_Transition_To as ' ||
         Pv_Transition_To||' and error code is'||SQLCODE||' and error_message is '||SQLERRM;


--           Raise;
    End Pr_Manage_Infolet_Inv;

Procedure Pr_Manage_Channel_Details(Pc_Process_Code    In Varchar2,
                                 Pv_Transition_From In Varchar2,
                                 Pv_Transition_To   In Varchar2,
                                 pn_Error_Handle_Id In Number,
                                 pt_Out_Data        In Out Nocopy Clob,
                                 pt_In_Data         In Out Nocopy Clob,
                                 Pn_Error_Sequence  In Out Nocopy Number,
                                 pn_error_code      Out Number,
                                 pv_error_message   Out Varchar2)
Is

lv_Object_Id                  VARCHAR2(100):='';
lv_Issue_Id                  VARCHAR2(100):='';
lv_Object_Name                VARCHAR2(200);
lv_Progress_status            VARCHAR2(1000);
Lt_Out_Data_Xml               Xmltype;
Lt_In_Data_Xml                Xmltype;
Lv_Proc                       Varchar2(4000) := 'Ms_Rga_Helper.Pr_Manage_Channel_Details => ';
Ln_Iop_Log_No                 Number := 0;
Ln_Process_Instance_Id        Number;
Lv_Object_Action              Varchar2(100);
Lv_L1_Approver                Varchar2(100);
Lv_Dd_Current_User_Name       Varchar2(100);
Lv_Dd_Event_User_Name         Varchar2(100);
Lv_Is_Owner                   Varchar2(100);
Ln_Instance_Id                Number;
Lv_Metric_Id                  Varchar2(100);
Ln_Orig_Pid                   Number;
Ln_Error_Code                 Number;
Lv_Error_Message              Varchar2(4000);
Ex_Id_Generation              Exception;
Ex_Etl_Call                   Exception;
Lv_String VARCHAR2(4000);
  Begin

  Lv_String := 'This is transition from '||Pv_Transition_From||' to '||Pv_Transition_To;

    ms_rga_utilities.pr_monitor_progress('BEGINING PR_MANAGE_CHANNEL_DETAILS');

   ms_rga_utilities.pr_monitor_progress('Pr_Manage_Channel_Details');

       Lt_Out_Data_Xml := Xmltype(pt_Out_Data);

    Lv_Number := Lv_Number +1;
    Lv_String := 'Entered the Procedure Pr_Manage_Channel_Details';

      SELECT  Object_Id,
                  Process_Instance_Id,
                  Dd_Current_User_Name,
                  Dd_Event_User_Name,
                  dd_object_type
          Into    lv_Object_Id,
                  Ln_Process_Instance_Id,
                  Lv_Dd_Current_User_Name,
                  Lv_Dd_Event_User_Name,
                  Lv_dd_object_type
                 FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"),
                            'for $i in /msa:datapacket/msa:data/msa:nonmultirow
                             return $i'
                              PASSING Lt_Out_Data_Xml
                        COLUMNS
                            Object_id                    VARCHAR2(200)        PATH            'msa:object_id',
                            Process_Instance_Id          NUMBER               PATH            'msa:process_instance_id',
                            Dd_Current_User_Name         VARCHAR2(4000)       PATH            'msa:dd_current_user_name',
                            Dd_Event_User_Name           VARCHAR2(4000)       PATH            'msa:dd_event_user_name',
                           dd_object_type               VARCHAR2(4000)       PATH            'msa:dd_object_type'
                         );


                Lv_Number := Lv_Number +1;
                Lv_String := 'Reterieved the (lv_Object_Id,Ln_Process_Instance_Id,Lv_Dd_Current_User_Name,Lv_Dd_Event_User_Name,Lv_dd_object_type)
                Values ('||lv_Object_Id||','||Ln_Process_Instance_Id||','||Lv_Dd_Current_User_Name||','||Lv_Dd_Event_User_Name||','||Lv_dd_object_type||')';

                Lv_Number := Lv_Number +1;
                Lv_String := 'Start the Procedure Multi_Row_Id_Setting';

                  --Setting the multiRow primary  key value
                 /* Multi_Row_Id_Setting(pn_Error_Handle_Id,
                                       Pc_Process_Code,
                                       Ln_Process_Instance_Id,
                                       pn_Error_Sequence,
                                       Lt_Out_Data_Xml,
                                       pn_error_code ,
                                       pv_error_message  );*/
                 
                 Multi_Row_Id_Setting_grci_chn(pn_Error_Handle_Id,
                                       Pc_Process_Code,
                                       Ln_Process_Instance_Id,
                                       pn_Error_Sequence,
                                       Lt_Out_Data_Xml,
                                       pn_error_code ,
                                       pv_error_message  );
                
                Lv_Number := Lv_Number +1;
                Lv_String := 'End the Procedure Multi_Row_Id_Setting';
                   -- Setting the Default Values  and Mandatory Check
                   --Both  :for Default Setting and Mandatory
                   --Mandatory :Checking the Mandatory otherwise it will delete the row from xml Datapocket
                   -- Default it's setting the default values


                Lv_Number := Lv_Number +1;
                Lv_String := 'START the Procedure Multi_Row_Default_Setting';

                  Multi_Row_Default_Setting( Pc_Process_Code,
                                            Ln_Process_Instance_Id,
                                           'BOTH',
                                            'NONPUBLISH',
                                            pn_Error_Handle_Id,
                                            pn_Error_Sequence,
                                            Lt_Out_Data_Xml,
                                            pn_error_code,
                                            pv_error_message);

                Lv_Number := Lv_Number +1;
                Lv_String := 'End the Procedure Multi_Row_Default_Setting';
                  --Business Logic for Non Multi row: starts
                 If (Lv_Object_id Is Null Or Pv_Transition_To <> 'CREATE_EDIT')
                 Then

                 Lv_Number := Lv_Number +1;
                Lv_String := 'Entered the IF Block in Pr_Manage_Channel_Details since the Lv_Object_id is null or Pv_Transition_To not equal to CREATE_EDIT';

                    ms_rga_utilities.pr_monitor_progress('Calling ms_apps_utilities.get_next_id');

                    ms_apps_utilities.get_next_id ('RGA',
                                                    'chn_obj_id',--'log_issue_id',
                                                    'MS_RGA_CHANNEL_DTLS',
                                                    Ln_Process_Instance_Id,
                                                    Lv_Object_id,
                                                    ln_error_code,
                                                    lv_error_message
                                                   );

                Lv_Number := Lv_Number +1;
                Lv_String := 'Generated the Lv_Object_id and its value is '||Lv_Object_id;
                                      ms_rga_utilities.pr_monitor_progress( 'Lv_Object_id 1- '||Lv_Object_id);

                Lv_Number := Lv_Number +1;
                Lv_String := 'Start the call to Insert_Value_To_Non_Multirow';
                    --Setting  the Object_id first time
                    Insert_Value_To_Non_Multirow('object_id',
                                               Lv_Object_id,
                                               pn_Error_Handle_Id,
                                               pn_Error_Sequence,
                                               Lt_Out_Data_Xml,
                                               pn_error_code,
                                               pv_error_message);

                Lv_Number := Lv_Number +1;
                Lv_String := 'END the call to Insert_Value_To_Non_Multirow check the content of Lt_Out_Data_Xml';
                commit;

                  ms_rga_utilities.pr_monitor_progress( 'Lv_Object_id 2- '||Lv_Object_id);
                    End If;

                   -- Request Clarification from Owner to Initiator > Defaulting Action.
                       DEBUG (Lv_Proc||'Transaction From '||pv_transition_from|| ' to ' ||pv_transition_to );

                       Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'pt_Out_Data := Lt_Out_Data_Xml.Getclobval()' );


                  pt_Out_Data := Lt_Out_Data_Xml.Getclobval();

                Lv_Number := Lv_Number +1;
                Lv_String := 'START the call to Pr_Manage_Common_flow';

                    Pr_Manage_Common_flow(Pc_Process_Code,
                                           Pv_Transition_From,
                                           Pv_Transition_To,
                                           lv_Object_Action,
                                           Lv_dd_object_type,
                                           pn_Error_Handle_Id,
                                           pt_Out_Data,
                                           pn_Error_Sequence,
                                           ln_error_code,
                                           Lv_Error_Message);

                Lv_Number := Lv_Number +1;
                Lv_String := 'END the call to Pr_Manage_Common_flow check the connents of Lt_Out_Data_Xml';

                   Ln_Error_Code := Null;
                   Lt_Out_Data_Xml := Xmltype(pt_Out_Data);

                  --Debug(Lv_Proc || 'pt_Out_Data := Lt_Out_Data_Xml.Getclobval()');

                   Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'pt_Out_Data := Lt_Out_Data_Xml.Getclobval()' );

                  pt_Out_Data := Lt_Out_Data_Xml.Getclobval();

                    Lt_In_Data_Xml := Lt_Out_Data_Xml;
                    --Inserting the Records to SI Table (Insted of Created_edit Transaction  In Publish)


                    Lv_Error_Message := Ms_Apps_Mdf_Infoletoutput_Pkg.Insert_Xml('MS_RGA_CHANNEL_DTLS_V',
                                                                                 Lv_Metric_Id,
                                                                                 Ln_Process_Instance_Id,
                                                                                 Ln_Instance_Id,
                                                                                 Lt_In_Data_Xml.Getclobval());


                    Multi_Row_Default_Setting(Pc_Process_Code,
                                            Ln_Process_Instance_Id,
                                           'MANDATORY',
                                            'PUBLISH',
                                            pn_Error_Handle_Id,
                                            pn_Error_Sequence,
                                            Lt_In_Data_Xml,
                                            pn_error_code,
                                            pv_error_message);

                Lv_Number := Lv_Number +1;
                Lv_String := 'End the call to Multi_Row_Default_Setting check the content of the ';

                    If Ln_Error_Code <> 0
                    Then
                      Raise Ex_Etl_Call;
                    End If;

                    pt_In_Data := Lt_In_Data_Xml.Getclobval();
                   -- Debug(Lv_Proc || 'Assigned pt_In_Data' );

                     Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'Assigned pt_In_Data' );

                 -- End If;
                 -- Debug(Lv_Proc ||'Ln_Orig_Pid '||Ln_Orig_Pid);

                   Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc ||'Ln_Orig_Pid '||Ln_Orig_Pid);

                  --Debug(Lv_Proc || 'Here --- assigning pt_Out_Data and pt_In_Data');

                   Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'Here --- assigning pt_Out_Data and pt_In_Data');

                  pt_Out_Data := Lt_Out_Data_Xml.Getclobval();
                 --  Debug(Lv_Proc || 'Assigned pt_Out_Data ');
                    Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'Assigned pt_Out_Data ');

-- insert into temp_xml3(num_1,clob_1,date_1,text) values (44, xmltype(pt_Out_Data),sysdate,'This is PT OUT data');
        ms_rga_utilities.pr_monitor_progress('ENDING PR_MANAGE_CHANNEL_DETAILS');
    Exception
      When Ex_Id_Generation Then
           Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'In Ex_Id_Generation exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);

      Lv_String :=  'Entered Exception Ex_Id_Generation part when Pv_Transition_From is ' ||
         Pv_Transition_From || ' and Pv_Transition_To as ' ||
         Pv_Transition_To||' and error code is'||SQLCODE||' and error_message is '||SQLERRM;

        Raise;
      When Ex_Etl_Call Then
            Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'In Ex_Etl_Call exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);


            Lv_String :=  'Entered Exception Ex_Etl_Call part when Pv_Transition_From is ' ||
         Pv_Transition_From || ' and Pv_Transition_To as ' ||
         Pv_Transition_To||' and error code is'||SQLCODE||' and error_message is '||SQLERRM;

        Raise;
      When Others Then
            Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'In Others exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);


           Lv_String :=  'Entered Exception Ex_Etl_Call part when Pv_Transition_From is ' ||
         Pv_Transition_From || ' and Pv_Transition_To as ' ||
         Pv_Transition_To||' and error code is'||SQLCODE||' and error_message is '||SQLERRM;

    End Pr_Manage_Channel_Details;

/*
procedure ms_rga_channel_post_hook(Lt_In_Data_Orig    In Clob,
                                                     Lt_In_Data         In Out Clob,
                                                     Lt_Out_Data        In Out Clob,
                                                     Pc_Process_Code    In Varchar2,
                                                     Lc_From_Stage      In Varchar2,
                                                     Lc_To_Stage        In Varchar2,
                                                     Xn_Error_Handle_Id In Out Number,
                                                     Xn_Error_Seq       In Out Number,
                                                     Xn_Error_Code      Out Varchar2)

  Is                     Lv_Proc Varchar2(4000) := 'Ms_Rga_Helper.ms_rga_channel_post_hook => ';
  Ln_Log_No              Number;
  Lv_Error_Message       Varchar2(4000);
  Lt_Out_Data_Xml        Xmltype;
  Lv_Process_Instance_Id Number;
  Lv_Object_Id           Varchar2(100);
  ln_error_code          number;
  Lv_Action              Varchar2(500) := 'RGAF1';
  x_Msg                  Varchar2(4000) := Null;
  Lv_String Varchar2(4000);
  Lv_Count Number;
Begin

insert into temp_xml2(num_1,clob_1,date_1,text)
values
(987654321,xmltype(Lt_In_Data),sysdate,'XML Content as Post Hook Level');

 Lv_String := 'This is transition from '||Lc_From_Stage||' to '||Lc_To_Stage;
  insert into tempy(num_1,date_1,text) values
   (2,sysdate,Lv_String);
 -- commit;

  If Pc_Process_Code = 'MS_RGA_CHANNEL_DTLS' Then

  select count(1) into Lv_Count
  from ms_rga_channel_dtls_v where object_id is not null
  and (object_id,instance_id) in
  (
  select msra.OBJECT_ID,max(msra.INSTANCE_ID) from ms_rga_channel_dtls_v msra where msra.OBJECT_ID is not null
  group by msra.OBJECT_ID
  );

  insert into tempy(num_1,date_1,text)
  values (987654321,sysdate,'Count in the view at Hook level is '||Lv_Count);


  delete from vishnu_channel;
  insert into vishnu_channel
  select * from ms_rga_channel_dtls_v where object_id is not null
  and (object_id,instance_id) in
  (
  select msra.OBJECT_ID,max(msra.INSTANCE_ID) from ms_rga_channel_dtls_v msra where msra.OBJECT_ID is not null
  group by msra.OBJECT_ID
  );
  --commit;

  update vishnu_channel vc
   set vc.src_created_by = (select vishnu_channel.src_created_by
                              from vishnu_channel
                             where vishnu_channel.object_id = vc.object_id
                               and vishnu_channel.src_created_by is not null)
where vc.src_created_by is null;

  End If;


Exception
  When Others Then
  dbms_output.put_line('ERROR');



end ms_rga_channel_post_hook;

*/


 /*   PROCEDURE Pr_Manage_Channel_Details(Pc_Process_Code    In Varchar2,
                              Pv_Transition_From In Varchar2,
                                Pv_Transition_To   In Varchar2,
                              pn_Error_Handle_Id In Number,
                              pt_Out_Data        In Out Nocopy Clob,
                              pt_In_Data         In Out Nocopy Clob,
                              Pn_Error_Sequence  In Out Nocopy Number,
                              pn_error_code      Out Number,
                              pv_error_message   Out Varchar2)

IS

lv_Custom_Field_6         ms_rga_channel_dtls_src.custom_field6%type;
lv_Object_Id                  VARCHAR2(100):='';
lv_Issue_Id                   VARCHAR2(100):='';
lv_Object_Name                VARCHAR2(200);
lv_Progress_status            VARCHAR2(1000);
Lt_Out_Data_Xml               Xmltype;
Lt_In_Data_Xml                Xmltype;
Lv_Proc                       Varchar2(4000) := 'Ms_Rga_Helper.Pr_Manage_Channel_Details => ';
Ln_Iop_Log_No                 Number := 0;
Ln_Process_Instance_Id        Number;
Lv_Object_Action              Varchar2(100);
Lv_L1_Approver                Varchar2(100);
Lv_Dd_Current_User_Name       Varchar2(100);
Lv_Dd_Event_User_Name         Varchar2(100);
Lv_Is_Owner                   Varchar2(100);
Ln_Instance_Id                Number;
Lv_Metric_Id                  Varchar2(100);
Ln_Orig_Pid                   Number;
Ln_Error_Code                 Number;
Lv_Error_Message              Varchar2(4000);
Ex_Id_Generation              Exception;
Ex_Etl_Call                   Exception;

Begin
      Debug(Lv_Proc || 'Inside Pr_Manage_Channel_Details_New');

    Lt_Out_Data_Xml := Xmltype(pt_Out_Data); --Taking the whole XML into Lt_Out_Data_Xml


    SELECT        Object_Id,
                  Process_Instance_Id,
                  Dd_Current_User_Name,
                  Dd_Event_User_Name,
                  dd_object_type,
                  Custom_Field6
          Into    lv_Object_Id,
                  Ln_Process_Instance_Id,
                  Lv_Dd_Current_User_Name,
                  Lv_Dd_Event_User_Name,
                  Lv_dd_object_type,
                  lv_Custom_Field_6
                 FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"),
                            'for $i in /msa:datapacket/msa:data/msa:nonmultirow
                             return $i'
                              PASSING Lt_Out_Data_Xml
                        COLUMNS
                            Object_id                    VARCHAR2(200)        PATH            'msa:object_id',
                            Process_Instance_Id          NUMBER               PATH            'msa:process_instance_id',
                            Dd_Current_User_Name         VARCHAR2(4000)       PATH            'msa:dd_current_user_name',
                            Dd_Event_User_Name           VARCHAR2(4000)       PATH            'msa:dd_event_user_name',
                            dd_object_type                VARCHAR2(4000)       PATH            'msa:dd_object_type',
                            CUSTOM_FIELD6                 VARCHAR2(4000)       PATH            'msa:custom_field6'
                         );

    insert into test_girish (col1,col2,col3) values (lv_Object_Id,lv_Custom_Field_6,sysdate);
    commit;

--IF(lv_Custom_Field_6 = 'N')  THEN

   --Setting the multiRow primary  key value
      Multi_Row_Id_Setting(pn_Error_Handle_Id,
                           Pc_Process_Code,
                           Ln_Process_Instance_Id,
                           pn_Error_Sequence,
                           Lt_Out_Data_Xml,
                           pn_error_code ,
                           pv_error_message  );


      Multi_Row_Default_Setting( Pc_Process_Code,
                                Ln_Process_Instance_Id,
                               'BOTH',
                                'NONPUBLISH',
                                pn_Error_Handle_Id,
                                pn_Error_Sequence,
                                Lt_Out_Data_Xml,
                                pn_error_code,
                                pv_error_message);

      If (Lv_Object_id Is Null  Or Pv_Transition_To <> 'CREATE_EDIT')  THEN

        Debug(Lv_Proc || ' Calling ms_apps_utilities.get_next_id');
        ms_apps_utilities.get_next_id ('RGA',
                                        'chn_obj_id',--'log_issue_id',
                                        'MS_RGA_CHANNEL_DTLS',
                                        Ln_Process_Instance_Id,
                                        Lv_Object_id,
                                        ln_error_code,
                                        lv_error_message
                                       );
         Debug(Lv_Proc || 'Lv_Object_id - '||Lv_Object_id);
        --Setting  the Object_id first time
        Insert_Value_To_Non_Multirow('object_id',
                                   Lv_Object_id,
                                   pn_Error_Handle_Id,
                                   pn_Error_Sequence,
                                   Lt_Out_Data_Xml,
                                   pn_error_code,
                                   pv_error_message);



        End If;




       -- Request Clarification from Owner to Initiator > Defaulting Action.
           DEBUG (Lv_Proc||'Transaction From '||pv_transition_from|| ' to ' ||pv_transition_to );
      pt_Out_Data := Lt_Out_Data_Xml.Getclobval();

      dbms_output.put_line('iam in first if condition');

       --Calling Manage Common Flow
        Pr_Manage_Common_flow(Pc_Process_Code,
                               Pv_Transition_From,
                               Pv_Transition_To,
                               lv_Object_Action,
                               Lv_dd_object_type,
                               pn_Error_Handle_Id,
                               pt_Out_Data,
                               pn_Error_Sequence,
                               ln_error_code,
                               Lv_Error_Message);

       Ln_Error_Code := Null;
       Lt_Out_Data_Xml := Xmltype(pt_Out_Data);

      Debug(Lv_Proc || 'pt_Out_Data := Lt_Out_Data_Xml.Getclobval()');
      pt_Out_Data := Lt_Out_Data_Xml.Getclobval();

        Lt_In_Data_Xml := Lt_Out_Data_Xml;
        --Inserting the Records to SI Table (Insted of Created_edit Transaction  In Publish)

        Lv_Error_Message := Ms_Apps_Mdf_Infoletoutput_Pkg.Insert_Xml('MS_RGA_CHANNEL_DTLS_V',
                                                                     Lv_Metric_Id,
                                                                     Ln_Process_Instance_Id,
                                                                     Ln_Instance_Id,
                                                                     Lt_In_Data_Xml.Getclobval());

           Update  MS_RGA_CHANNEL_DTLS
            Set    Dd_Instance_Id         = Ln_Instance_Id,
                   Dd_Process_Instance_Id = Ln_Process_Instance_Id
            Where  object_id = Lv_object_Id;

         dbms_output.put_line('entering the multi row default setting');

        Multi_Row_Default_Setting(Pc_Process_Code,
                                Ln_Process_Instance_Id,
                               'MANDATORY',
                                'PUBLISH',
                                pn_Error_Handle_Id,
                                pn_Error_Sequence,
                                Lt_In_Data_Xml,
                                pn_error_code,
                                pv_error_message);

        If Ln_Error_Code <> 0
        Then
          Raise Ex_Etl_Call;
        End If;

        pt_In_Data := Lt_In_Data_Xml.Getclobval();
        Debug(Lv_Proc || 'Assigned pt_In_Data' );
     -- End If;
      Debug(Lv_Proc ||'Ln_Orig_Pid '||Ln_Orig_Pid);

      Debug(Lv_Proc || 'Here --- assigning pt_Out_Data and pt_In_Data');
      pt_Out_Data := Lt_Out_Data_Xml.Getclobval();
       Debug(Lv_Proc || 'Assigned pt_Out_Data ');

--END IF;

    Exception
      When Ex_Id_Generation Then
        Debug(Lv_Proc || 'In Ex_Id_Generation exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);

          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);
        Raise;
      When Ex_Etl_Call Then
        Debug(Lv_Proc || 'In Ex_Etl_Call exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);

          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);

        Raise;
      When Others Then
        Debug(Lv_Proc || 'In Others exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);

          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);

        Raise;


End Pr_Manage_Channel_Details;
*/

Procedure Pr_Manage_Ruleset(Pc_Process_Code    In Varchar2,
                                 Pv_Transition_From In Varchar2,
                                 Pv_Transition_To   In Varchar2,
                                 pn_Error_Handle_Id In Number,
                                 pt_Out_Data        In Out Nocopy Clob,
                                 pt_In_Data         In Out Nocopy Clob,
                                 Pn_Error_Sequence  In Out Nocopy Number,
                                 pn_error_code      Out Number,
                                 pv_error_message   Out Varchar2)
Is



lv_Object_Id                  VARCHAR2(100):='';
lv_Issue_Id                  VARCHAR2(100):='';
lv_Object_Name                VARCHAR2(200);
lv_Progress_status            VARCHAR2(1000);
Lt_Out_Data_Xml               Xmltype;
Lt_In_Data_Xml                Xmltype;
Lv_Proc                       Varchar2(4000) := 'Ms_Rga_Helper.Pr_Manage_Ruleset => ';
Ln_Iop_Log_No                 Number := 0;
Ln_Process_Instance_Id        Number;
Lv_Object_Action              Varchar2(100);
Lv_L1_Approver                Varchar2(100);
Lv_Dd_Current_User_Name       Varchar2(100);
Lv_Dd_Event_User_Name         Varchar2(100);
Lv_Is_Owner                   Varchar2(100);
Ln_Instance_Id                Number;
Lv_Metric_Id                  Varchar2(100);
Ln_Orig_Pid                   Number;
Ln_Error_Code                 Number;
Lv_Error_Message              Varchar2(4000);
Ex_Id_Generation              Exception;
Ex_Etl_Call                   Exception;
Lv_String VARCHAR2(4000);
  Begin

  Lv_String := 'This is transition from '||Pv_Transition_From||' to '||Pv_Transition_To;

    ms_rga_utilities.pr_monitor_progress('BEGINING Pr_Manage_Ruleset');

   ms_rga_utilities.pr_monitor_progress('Pr_Manage_Ruleset');

   -- insert into temp_xml1 values (11, pt_Out_Data);

      Lt_Out_Data_Xml := Xmltype(pt_Out_Data);

    Lv_Number := Lv_Number +1;
    Lv_String := 'Entered the Procedure Pr_Manage_Ruleset';

      SELECT  Object_Id,
                  Process_Instance_Id,
                  Dd_Current_User_Name,
                  Dd_Event_User_Name,
                  dd_object_type
          Into    lv_Object_Id,
                  Ln_Process_Instance_Id,
                  Lv_Dd_Current_User_Name,
                  Lv_Dd_Event_User_Name,
                  Lv_dd_object_type
                 FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"),
                            'for $i in /msa:datapacket/msa:data/msa:nonmultirow
                             return $i'
                              PASSING Lt_Out_Data_Xml
                        COLUMNS
                            Object_id                    VARCHAR2(200)        PATH            'msa:object_id',
                            Process_Instance_Id          NUMBER               PATH            'msa:process_instance_id',
                            Dd_Current_User_Name         VARCHAR2(4000)       PATH            'msa:dd_current_user_name',
                            Dd_Event_User_Name           VARCHAR2(4000)       PATH            'msa:dd_event_user_name',
                           dd_object_type               VARCHAR2(4000)       PATH            'msa:dd_object_type'
                         );


                Lv_Number := Lv_Number +1;
                Lv_String := 'Reterieved the (lv_Object_Id,Ln_Process_Instance_Id,Lv_Dd_Current_User_Name,Lv_Dd_Event_User_Name,Lv_dd_object_type)
                Values ('||lv_Object_Id||','||Ln_Process_Instance_Id||','||Lv_Dd_Current_User_Name||','||Lv_Dd_Event_User_Name||','||Lv_dd_object_type||')';

                Lv_Number := Lv_Number +1;
                Lv_String := 'Start the Procedure Multi_Row_Id_Setting';

                  --Setting the multiRow primary  key value
                  Multi_Row_Id_Setting(pn_Error_Handle_Id,
                                       Pc_Process_Code,
                                       Ln_Process_Instance_Id,
                                       pn_Error_Sequence,
                                       Lt_Out_Data_Xml,
                                       pn_error_code ,
                                       pv_error_message  );

                Lv_Number := Lv_Number +1;
                Lv_String := 'End the Procedure Multi_Row_Id_Setting';
                   -- Setting the Default Values  and Mandatory Check
                   --Both  :for Default Setting and Mandatory
                   --Mandatory :Checking the Mandatory otherwise it will delete the row from xml Datapocket
                   -- Default it's setting the default values


                Lv_Number := Lv_Number +1;
                Lv_String := 'START the Procedure Multi_Row_Default_Setting';

                  Multi_Row_Default_Setting( Pc_Process_Code,
                                            Ln_Process_Instance_Id,
                                           'BOTH',
                                            'NONPUBLISH',
                                            pn_Error_Handle_Id,
                                            pn_Error_Sequence,
                                            Lt_Out_Data_Xml,
                                            pn_error_code,
                                            pv_error_message);

                Lv_Number := Lv_Number +1;
                Lv_String := 'End the Procedure Multi_Row_Default_Setting';
                  --Business Logic for Non Multi row: starts
                 If (Lv_Object_id Is Null Or Pv_Transition_To <> 'CREATE_EDIT')
                 Then

                 Lv_Number := Lv_Number +1;
                Lv_String := 'Entered the IF Block in Pr_Manage_Ruleset since the Lv_Object_id is null or Pv_Transition_To not equal to CREATE_EDIT';

                    ms_rga_utilities.pr_monitor_progress('Calling ms_apps_utilities.get_next_id');

                    ms_apps_utilities.get_next_id ('RGA',
                                                    'rule_set_id',--'object_id',
                                                    'MS_RGA_CREATE_RULE',
                                                    Ln_Process_Instance_Id,
                                                    Lv_Object_id,
                                                    ln_error_code,
                                                    lv_error_message
                                                   );

                Lv_Number := Lv_Number +1;
                Lv_String := 'Generated the Lv_Object_id and its value is '||Lv_Object_id;
                                      ms_rga_utilities.pr_monitor_progress( 'Lv_Object_id 1- '||Lv_Object_id);

                Lv_Number := Lv_Number +1;
                Lv_String := 'Start the call to Insert_Value_To_Non_Multirow';
                    --Setting  the Object_id first time
                    Insert_Value_To_Non_Multirow('object_id',
                                               Lv_Object_id,
                                               pn_Error_Handle_Id,
                                               pn_Error_Sequence,
                                               Lt_Out_Data_Xml,
                                               pn_error_code,
                                               pv_error_message);

                Lv_Number := Lv_Number +1;
                Lv_String := 'END the call to Insert_Value_To_Non_Multirow check the content of Lt_Out_Data_Xml';
                commit;



                  ms_rga_utilities.pr_monitor_progress( 'Lv_Object_id 2- '||Lv_Object_id);
                    End If;




                   -- Request Clarification from Owner to Initiator > Defaulting Action.
                       DEBUG (Lv_Proc||'Transaction From '||pv_transition_from|| ' to ' ||pv_transition_to );

                       Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'pt_Out_Data := Lt_Out_Data_Xml.Getclobval()' );


                  pt_Out_Data := Lt_Out_Data_Xml.Getclobval();

                Lv_Number := Lv_Number +1;
                Lv_String := 'START the call to Pr_Manage_Common_flow';

                    Pr_Manage_Common_flow(Pc_Process_Code,
                                           Pv_Transition_From,
                                           Pv_Transition_To,
                                           lv_Object_Action,
                                           Lv_dd_object_type,
                                           pn_Error_Handle_Id,
                                           pt_Out_Data,
                                           pn_Error_Sequence,
                                           ln_error_code,
                                           Lv_Error_Message);

                Lv_Number := Lv_Number +1;
                Lv_String := 'END the call to Pr_Manage_Common_flow check the connents of Lt_Out_Data_Xml';

                   Ln_Error_Code := Null;
                   Lt_Out_Data_Xml := Xmltype(pt_Out_Data);

                  --Debug(Lv_Proc || 'pt_Out_Data := Lt_Out_Data_Xml.Getclobval()');

                   Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'pt_Out_Data := Lt_Out_Data_Xml.Getclobval()' );


                  pt_Out_Data := Lt_Out_Data_Xml.Getclobval();

                    Lt_In_Data_Xml := Lt_Out_Data_Xml;
                    --Inserting the Records to SI Table (Insted of Created_edit Transaction  In Publish)





                    Lv_Error_Message := Ms_Apps_Mdf_Infoletoutput_Pkg.Insert_Xml('MS_RGA_CREATE_RULE_V',
                                                                                 Lv_Metric_Id,
                                                                                 Ln_Process_Instance_Id,
                                                                                 Ln_Instance_Id,
                                                                                 Lt_In_Data_Xml.Getclobval());




                    Multi_Row_Default_Setting(Pc_Process_Code,
                                            Ln_Process_Instance_Id,
                                           'MANDATORY',
                                            'PUBLISH',
                                            pn_Error_Handle_Id,
                                            pn_Error_Sequence,
                                            Lt_In_Data_Xml,
                                            pn_error_code,
                                            pv_error_message);

                Lv_Number := Lv_Number +1;
                Lv_String := 'End the call to Multi_Row_Default_Setting check the content of the ';


                    If Ln_Error_Code <> 0
                    Then
                      Raise Ex_Etl_Call;
                    End If;

                    pt_In_Data := Lt_In_Data_Xml.Getclobval();
                   -- Debug(Lv_Proc || 'Assigned pt_In_Data' );

                     Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'Assigned pt_In_Data' );

                 -- End If;
                 -- Debug(Lv_Proc ||'Ln_Orig_Pid '||Ln_Orig_Pid);

                   Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc ||'Ln_Orig_Pid '||Ln_Orig_Pid);

                  --Debug(Lv_Proc || 'Here --- assigning pt_Out_Data and pt_In_Data');

                   Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'Here --- assigning pt_Out_Data and pt_In_Data');

                  pt_Out_Data := Lt_Out_Data_Xml.Getclobval();
                 --  Debug(Lv_Proc || 'Assigned pt_Out_Data ');
                    Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'Assigned pt_Out_Data ');







-- insert into temp_xml3(num_1,clob_1,date_1,text) values (44, xmltype(pt_Out_Data),sysdate,'This is PT OUT data');
        ms_rga_utilities.pr_monitor_progress('ENDING Pr_Manage_Ruleset');
    Exception
      When Ex_Id_Generation Then
           Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'In Ex_Id_Generation exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);

      Lv_String :=  'Entered Exception Ex_Id_Generation part when Pv_Transition_From is ' ||
         Pv_Transition_From || ' and Pv_Transition_To as ' ||
         Pv_Transition_To||' and error code is'||SQLCODE||' and error_message is '||SQLERRM;





        Raise;
      When Ex_Etl_Call Then
            Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'In Ex_Etl_Call exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);


            Lv_String :=  'Entered Exception Ex_Etl_Call part when Pv_Transition_From is ' ||
         Pv_Transition_From || ' and Pv_Transition_To as ' ||
         Pv_Transition_To||' and error code is'||SQLCODE||' and error_message is '||SQLERRM;



        Raise;
      When Others Then
            Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'In Others exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);


           Lv_String :=  'Entered Exception Ex_Etl_Call part when Pv_Transition_From is ' ||
         Pv_Transition_From || ' and Pv_Transition_To as ' ||
         Pv_Transition_To||' and error code is'||SQLCODE||' and error_message is '||SQLERRM;


--           Raise;
    End Pr_Manage_Ruleset;
    

Procedure Pr_Manage_alrts  (     Pc_Process_Code    In Varchar2,
                                 Pv_Transition_From In Varchar2,
                                 Pv_Transition_To   In Varchar2,
                                 pn_Error_Handle_Id In Number,
                                 pt_Out_Data        In Out Nocopy Clob,
                                 pt_In_Data         In Out Nocopy Clob,
                                 Pn_Error_Sequence  In Out Nocopy Number,
                                 pn_error_code      Out Number,
                                 pv_error_message   Out Varchar2)

IS
lv_Object_Id                  VARCHAR2(100):='';
Lt_Out_Data_Xml               Xmltype;
Lt_In_Data_Xml                Xmltype;
Lv_Proc                       Varchar2(4000) := 'Ms_Rga_Helper.Pr_Manage_alerts => ';
Ln_Iop_Log_No                 Number := 0;
Ln_Process_Instance_Id        Number;
Lv_Dd_Current_User_Name       Varchar2(100);
Lv_Dd_Event_User_Name         Varchar2(100);
Ln_Instance_Id                Number;
Ln_Orig_Pid                   Number;
Ln_Error_Code                 Number;
Lv_Error_Message              Varchar2(4000);
lv_status                     VARCHAR2(100);
Lv_Object_Action              Varchar2(100);
  Begin
      Debug(Lv_Proc || 'Inside Pr_Manage_Log_Issues') ;
      Lt_Out_Data_Xml := Xmltype(pt_Out_Data);

 SELECT  Object_Id,
          ini_action,
          Process_Instance_Id
          Into    lv_Object_Id,
                  Lv_Object_Action,
                  Ln_Process_Instance_Id
                 FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"),
                            'for $i in /msa:datapacket/msa:data/msa:nonmultirow
                             return $i'
                              PASSING Lt_Out_Data_Xml
                        COLUMNS
                            Object_id                    VARCHAR2(200)        PATH                 'msa:object_id',
                            ini_action                       VARCHAR2(100)        PATH            'msa:ini_action',
                            Process_Instance_Id          NUMBER               PATH            'msa:process_instance_id'
                         );



     --Business Logic for Non Multi row: starts
     If (Lv_Object_id = 'NONE')
     Then
        Debug(Lv_Proc || ' Calling ms_apps_utilities.get_next_id');
        ms_apps_utilities.get_next_id ('RGA',
                                       'MS_RGA_MY_ALERTS_IDGEN',
                                        'MS_RGA_MY_ALERTS',
                                        Ln_Process_Instance_Id,
                                        Lv_Object_id,
                                        ln_error_code,
                                        lv_error_message
                                       );
         Debug(Lv_Proc || 'Lv_Object_id - '||Lv_Object_id);
        --Setting  the Object_id first time
        Insert_Value_To_Non_Multirow('object_id',
                                   Lv_Object_id,
                                   pn_Error_Handle_Id,
                                   pn_Error_Sequence,
                                   Lt_Out_Data_Xml,
                                   pn_error_code,
                                   pv_error_message);  

    End If;

       -- Request Clarification from Owner to Initiator > Defaulting Action.
           DEBUG (Lv_Proc||'Transaction From '||pv_transition_from|| ' to ' ||pv_transition_to );
           pt_Out_Data := Lt_Out_Data_Xml.Getclobval();

            Lt_Out_Data_Xml := Xmltype(pt_Out_Data);
    
          ms_rga_utilities.pr_monitor_progress(Lv_Proc || '  -> Flow Code - >' ||Pc_Process_Code);
          ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Pv_Transition_From,Pv_Transition_To '
                 ||Pv_Transition_From||','||Pv_Transition_To);

      SELECT status INTO lv_status FROM ms_rga_manage_alert_status WHERE FROM_STAGE = Pv_Transition_From AND TO_STAGE = Pv_Transition_To
          AND ACTIONS = Lv_Object_Action;
       --  lv_status :=get_alert_status(Pv_Transition_From,Pv_Transition_To);

            Select Updatexml(Lt_Out_Data_Xml,
                         'datapacket/data/nonmultirow/status/text()',
                         lv_status,
                         Gc_Data_Namespace)
                      Into   Lt_Out_Data_Xml
                        From   Dual;
         pt_Out_Data := Lt_Out_Data_Xml.Getclobval();


        Lt_In_Data_Xml := Lt_Out_Data_Xml;

        pt_In_Data := Lt_In_Data_Xml.Getclobval();
        Debug(Lv_Proc || 'Assigned pt_In_Data' );
     -- End If;
      Debug(Lv_Proc ||'Ln_Orig_Pid '||Ln_Orig_Pid);


    Exception
        When Others Then

        Debug(Lv_Proc || 'In Others exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
          pn_error_code:= -1;
          pv_error_message := lv_Proc||'Encountered exception '||Substr(Sqlerrm,1,250);

        Raise;
    End ;
  /*  
Function get_alert_status(Pv_Transition_From In Varchar2,Pv_Transition_To In Varchar2)
return  Varchar2 is 
o_status varchar2(100);
begin

           If (Pv_Transition_From = 'CREATE_EDIT' and Pv_Transition_To = 'L1_APPROVE')
                Then
                o_status := 'NEEDS L1'  ;    
          End If;
          
          If (Pv_Transition_From = 'L1_APPROVE' AND Pv_Transition_To = 'L2_APPROVE')
               Then
                     o_status := 'NEEDS L2' ;
          End If;
          If (Pv_Transition_From = 'L1_APPROVE' AND Pv_Transition_To = 'CREATE_EDIT')
               Then
                      o_status := 'CLR REQD' ;
          End If;
          If (Pv_Transition_From = 'L2_APPROVE' AND Pv_Transition_To = 'CREATE_EDIT')
               Then
                      o_status := 'CLR REQD' ;
          End If;
          
return o_status; 

exception 
when others then 
Debug(Lv_Proc || 'In Others exception - ' ||
              Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
end;
*/

    
Procedure Pr_Manage_Process_Channel_XML(pt_Out_Data      In Out Nocopy Clob,
                                        Pc_Process_Code    In Varchar2,
                                       -- Pt_Object_Id     In Out Varchar2,
                                       pn_Error_Handle_Id In Number,
                                       Pn_Error_Sequence  In Out Nocopy Number,
                                       pn_error_code    Out Number,
                                       pv_error_message Out Varchar2) Is

  lv_Object_Id            VARCHAR2(100) := '';
  lv_Issue_Id             VARCHAR2(100) := '';
  lv_Object_Name          VARCHAR2(200);
  lv_Progress_status      VARCHAR2(1000);
  Lt_Out_Data_Xml         Xmltype;
  Lt_In_Data_Xml          Xmltype;
  Lv_Proc                 Varchar2(4000) := 'Ms_Rga_Helper.Pr_Manage_Channel_Details => ';
  Ln_Iop_Log_No           Number := 0;
  Ln_Process_Instance_Id  Number;
  Lv_Object_Action        Varchar2(100);
  Lv_L1_Approver          Varchar2(100);
  Lv_Dd_Current_User_Name Varchar2(100);
  Lv_Dd_Event_User_Name   Varchar2(100);
  Lv_Is_Owner             Varchar2(100);
  Ln_Instance_Id          Number;
  Lv_Metric_Id            Varchar2(100);
  Ln_Orig_Pid             Number;
  Ln_Error_Code           Number;
  Lv_Error_Message        Varchar2(4000);
  Ex_Id_Generation Exception;
  Ex_Etl_Call Exception;
  Lv_String VARCHAR2(4000);
Begin

  ms_rga_utilities.pr_monitor_progress('Pr_Manage_Process_Channel_XML');

  Lt_Out_Data_Xml := Xmltype(pt_Out_Data);

  SELECT  Object_Id,
                  Process_Instance_Id,
                  Dd_Current_User_Name,
                  Dd_Event_User_Name,
                  dd_object_type
          Into    lv_Object_Id,
                  Ln_Process_Instance_Id,
                  Lv_Dd_Current_User_Name,
                  Lv_Dd_Event_User_Name,
                  Lv_dd_object_type
                 FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"),
                            'for $i in /msa:datapacket/msa:data/msa:nonmultirow
                             return $i'
                              PASSING Lt_Out_Data_Xml
                        COLUMNS
                            Object_id                    VARCHAR2(200)        PATH            'msa:object_id',
                            Process_Instance_Id          NUMBER               PATH            'msa:process_instance_id',
                            Dd_Current_User_Name         VARCHAR2(4000)       PATH            'msa:dd_current_user_name',
                            Dd_Event_User_Name           VARCHAR2(4000)       PATH            'msa:dd_event_user_name',
                           dd_object_type               VARCHAR2(4000)       PATH            'msa:dd_object_type'
                         );

   --Setting the multiRow primary  key value
   Multi_Row_Id_Setting_grci_chn(pn_Error_Handle_Id,
                                       Pc_Process_Code,
                                       Ln_Process_Instance_Id,
                                       pn_Error_Sequence,
                                       Lt_Out_Data_Xml,
                                       pn_error_code ,
                                       pv_error_message  );
    Multi_Row_Default_Setting(Pc_Process_Code,
                             Ln_Process_Instance_Id,
                             'BOTH',
                             'NONPUBLISH',
                             pn_Error_Handle_Id,
                             pn_Error_Sequence,
                             Lt_Out_Data_Xml,
                             pn_error_code,
                             pv_error_message);

   Multi_Row_Default_Setting(Pc_Process_Code,
                             Ln_Process_Instance_Id,
                             'BOTH',
                             'PUBLISH',
                             pn_Error_Handle_Id,
                             pn_Error_Sequence,
                             Lt_Out_Data_Xml,
                             pn_error_code,
                             pv_error_message);

exception when others then

pn_error_code :=sqlcode;
pv_error_message := sqlerrm;

end Pr_Manage_Process_Channel_XML;


Procedure Update_Out_Data(  Lt_In_Data_Orig    In Clob,
                            Lt_In_Data         In Out Clob,
                            Lt_Out_Data        In Out Clob,
                            Pc_Process_Code    In Varchar2,
                            Lc_From_Stage      In Varchar2,
                            Lc_To_Stage        In Varchar2,
                            Xn_Error_Handle_Id In Out Number,
                            Xn_Error_Seq       In Out Number,
                            Xn_Error_Code      Out Varchar2)
  Is
    Lv_Proc                Varchar2(4000) := 'Ms_Rga_Helper.Update_Out_Data => ';
    Ln_Log_No              Number;
    Lv_Error_Message       Varchar2(4000);
    Lt_Out_Data_Xml        Xmltype;
    Lv_Process_Instance_Id Number;
    Lv_Object_Id           Varchar2(100);
    ln_error_code          number;
    Lv_Action              Varchar2(500) := 'RGAF1';
    x_Msg  Varchar2(4000) := Null;
  Begin
--  insert into dummy1 values('Inside hook lt_in_data',xmltype(lt_in_data));commit;
    /* validation for create channel. can be removed after testing
    insert into test_channel_hook values (Lt_In_Data_Orig,Lt_In_Data,Lt_Out_Data,Pc_Process_Code,Lc_From_Stage,Lc_To_Stage,Xn_Error_Handle_Id,Xn_Error_Seq);*/
    ms_rga_utilities.pr_monitor_progress('BEGINING UPDATE_OUT_DATA');
    Dbms_Application_Info.Set_Module(g_Module_Name,Lv_Action);

--------
--debug_out(Pc_Process_Code);
--debug_out(Lc_From_Stage);
--debug_out(Lc_To_Stage);
--debug_out_clob(Lt_In_Data_Orig);
--debug_out_clob(Lt_In_Data);
--debug_out_clob(Lt_Out_Data);
----------
    Lv_Number := Lv_Number +1;
    Lv_String := 'Entered the Update_Out_Data Procedure';
    x_Msg := g_package_name||'.'||Lv_Action;

    Ms_Rga_Utilities.Pr_Monitor_Progress(x_Msg);
    Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'Entered Rga Common helper');

    Lt_Out_Data := Lt_In_Data;

    ms_rga_utilities.pr_monitor_progress(Lv_Proc || ' Flow Code ' ||Pc_Process_Code|| ' Lc_From_Stage - '||Lc_From_Stage||Lv_Proc || 'Lc_To_Stage -  ' || Lc_To_Stage);

  CASE  Pc_Process_Code
      WHEN 'MS_RGA_LOG_ISSUES' THEN Pr_Manage_Alert(Pc_Process_Code,Lc_From_Stage,Lc_To_Stage,Xn_Error_Handle_Id,Lt_Out_Data,
                                                    Lt_In_Data,Xn_Error_Seq,ln_error_code,Lv_Error_Message);
 
       WHEN 'MS_RGA_INFOLET_WF' THEN Pr_Manage_Infolet_Inv(Pc_Process_Code,Lc_From_Stage,Lc_To_Stage, Xn_Error_Handle_Id,Lt_Out_Data,
                                                        Lt_In_Data,Xn_Error_Seq,ln_error_code,Lv_Error_Message);

       WHEN 'MS_RGA_NOTIFY_USERS' THEN Pr_Manage_Notify_User(Pc_Process_Code,Lc_From_Stage,Lc_To_Stage,Xn_Error_Handle_Id,Lt_Out_Data,
                                                          Lt_In_Data,Xn_Error_Seq,ln_error_code,Lv_Error_Message);
  
       WHEN 'MS_RGA_MY_SUBSCRIPTION' THEN Pr_Manage_My_Subscription(Pc_Process_Code,Xn_Error_Handle_Id,Lt_Out_Data,Lt_In_Data,
                                                                Xn_Error_Seq,ln_error_code,Lv_Error_Message); 

       WHEN 'MS_RGA_CHANNEL_DTLS'   THEN 
                               Lv_Number := Lv_Number +1;
                               Lv_String := 'START of the Procedure Pr_Manage_Channel_Details';
                               Pr_Manage_Channel_Details(Pc_Process_Code,Lc_From_Stage,Lc_To_Stage,Xn_Error_Handle_Id,Lt_Out_Data,
                                                          Lt_In_Data,Xn_Error_Seq,ln_error_code,Lv_Error_Message);
                               Lt_In_Data := Lt_Out_Data;
                               Lv_Number := Lv_Number +1;
                               Lv_String := 'END of the Procedure Pr_Manage_Channel_Details';                           
 
       WHEN 'CREATE_RULE' THEN Pr_Manage_Ruleset(Pc_Process_Code,Lc_From_Stage,Lc_To_Stage,Xn_Error_Handle_Id,Lt_Out_Data,
                                              Lt_In_Data,Xn_Error_Seq,ln_error_code,Lv_Error_Message);
                                  
      WHEN 'MS_RGA_MANAGE_ALERTS_WF' THEN Pr_Manage_alrts(Pc_Process_Code,Lc_From_Stage,Lc_To_Stage,Xn_Error_Handle_Id,Lt_Out_Data,
                                                          Lt_In_Data,Xn_Error_Seq,ln_error_code,Lv_Error_Message);

       ELSE NULL;
  END CASE;
  ms_rga_utilities.pr_monitor_progress('ENDING UPDATE_OUT_DATA');

-- insert into dummy1 values('Inside hoovk out lt_in_data',xmltype(lt_in_data));commit;
  Exception
          When Others Then
               Ms_Apps_Mdf_Errors_Pkg.Insert_Log(Pn_Error_HAndle_Id => Xn_Error_HAndle_Id,
                                                 Pn_Error_Sequence  => Xn_Error_Seq,
                                                 Pc_Error_Type      => 'E',
                                                 Pc_Error_Text      => Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm||' Error in Helper Package : ');
          raise;
  end update_out_data;

Procedure Update_Out_Data1( Lt_In_Data_Orig    In Clob,
                            Lt_In_Data         In Out Clob,
                            Lt_Out_Data        In Out Clob,
                            Pc_Process_Code    In Varchar2,
                            Lc_From_Stage      In Varchar2,
                            Lc_To_Stage        In Varchar2,
                            Xn_Error_Handle_Id In Out Number,
                            Xn_Error_Seq       In Out Number,
                            Xn_Error_Code      Out Varchar2)

  Is
    Lv_Proc                Varchar2(4000) := 'Ms_Rga_Helper.Update_Out_Data => ';
    Ln_Log_No              Number;
    Lv_Error_Message       Varchar2(4000);
    Lt_Out_Data_Xml        Xmltype;
    Lv_Process_Instance_Id Number;
    Lv_Object_Id           Varchar2(100);
    ln_error_code          number;
    Lv_Action              Varchar2(500) := 'RGAF1';
    xn_error_message varchar2(4000);
     x_Msg  Varchar2(4000) := Null;
  Begin
  /* validation for create channel. can be removed after testing
  insert into test_channel_hook values (Lt_In_Data_Orig,Lt_In_Data,Lt_Out_Data,Pc_Process_Code,Lc_From_Stage,Lc_To_Stage,Xn_Error_Handle_Id,Xn_Error_Seq);*/
  
ms_rga_utilities.pr_monitor_progress('BEGINING UPDATE_OUT_DATA');
    Dbms_Application_Info.Set_Module(g_Module_Name,Lv_Action);

    Lv_Number := Lv_Number +1;
   -- Lv_String := 'Entered the Update_Out_Data Procedure';
      x_Msg := g_package_name||'.';
     x_Msg := x_Msg ||Lv_Action;

    Ms_Rga_Utilities.Pr_Monitor_Progress(x_Msg);
    Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'Entered Rga Common helper');

    Lt_Out_Data := Lt_In_Data;

    ms_rga_utilities.pr_monitor_progress(Lv_Proc || ' Flow Code ' ||Pc_Process_Code);
    ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Lc_From_Stage - '||Lc_From_Stage);
    ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Lc_To_Stage -  ' || Lc_To_Stage);
    -- Log Issue work flow
    Lv_String := 'START of the Procedure Update_Out_Data1';
    
    If  Pc_Process_Code = 'MS_RGA_CHANNEL_DTLS'
    Then

    Lv_Number := Lv_Number +1;
 
       ms_rga_utilities.pr_monitor_progress(Lv_Proc || 'Calling Pr_Manage_Channel_Details');

         Pr_Manage_Channel_Details(Pc_Process_Code,
                                   null,
                                   null,
                                   Xn_Error_Handle_Id,
                                   Lt_Out_Data,
                                   Lt_In_Data,
                                   Xn_Error_Seq,
                                   ln_error_code,
                                   Lv_Error_Message);
   
    Lt_In_Data := Lt_Out_Data;
    Lv_Number := Lv_Number +1;
    Lv_String := 'END of the Procedure Pr_Manage_Channel_Details';

    End If;

	ms_rga_utilities.pr_monitor_progress('ENDING UPDATE_OUT_DATA');
  Exception
          When Others Then
           ms_rga_utilities.pr_monitor_progress(Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
           Ms_Apps_Mdf_Errors_Pkg.Insert_Log(Pn_Error_HAndle_Id => Xn_Error_HAndle_Id,
                                                 Pn_Error_Sequence  => Xn_Error_Seq,
                                                 Pc_Error_Type      => 'ERROR',
                                                 Pc_Error_Text      => 'Error in Helper Package : ' ||Sqlerrm);
          raise;
  end update_out_data1;


--Below code added by Barnali on 04-12-2012 to fix the bug 71202
--This code helps in the integration with ISM on a subsequent form submissions of log issue from Alery summary report

Procedure Update_Out_Data_ism(  Lt_In_Data_Orig    In Clob,
                            Lt_In_Data         In Out Clob,
                            Lt_Out_Data        In Out Clob,
                            Pc_Process_Code    In Varchar2,
                            Lc_From_Stage      In Varchar2,
                            Lc_To_Stage        In Varchar2,
                             Xn_Error_Handle_Id In Out Number,
                            Xn_Error_Seq       In Out Number,
                            Xn_Error_Code      Out Varchar2)



  Is
    Lv_Proc                Varchar2(4000) := 'Ms_Rga_Helper.Update_Out_Data => ';
    Ln_Log_No              Number;
    Lv_Error_Message       Varchar2(4000);
    Lt_Out_Data_Xml        Xmltype;
    Lv_Process_Instance_Id Number;
    Lv_Object_Id           Varchar2(100);
    lv_dd_current_user_name   Varchar2(1000);

    ln_error_code          number;
    Lv_Action              Varchar2(500) := 'RGAF1';
    xn_error_message varchar2(4000);
     x_Msg  Varchar2(4000) := Null;
  Begin
ms_rga_utilities.pr_monitor_progress('BEGINING UPDATE_OUT_DATA');
    Dbms_Application_Info.Set_Module(g_Module_Name,Lv_Action);


    Lt_Out_Data := Lt_In_Data;
    Lv_Number := Lv_Number +1;
    Lv_String := 'Entered the Update_Out_Data Procedure';
      x_Msg := g_package_name||'.';
     x_Msg := x_Msg ||Lv_Action;

    Ms_Rga_Utilities.Pr_Monitor_Progress(x_Msg);
    Ms_Rga_Utilities.Pr_Monitor_Progress(Lv_Proc || 'Entered Rga Common helper');

    Lt_Out_Data_Xml := xmltype(Lt_In_Data);

      SELECT  Object_Id,
                  Dd_Current_User_Name
                           Into    lv_Object_Id,
                  Lv_Dd_Current_User_Name

                 FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"),
                            'for $i in /msa:datapacket/msa:data/msa:nonmultirow
                             return $i'
                              PASSING Lt_Out_Data_Xml
                        COLUMNS
                            Object_id                    VARCHAR2(200)        PATH            'msa:object_id',
                            Dd_Current_User_Name         VARCHAR2(4000)       PATH            'msa:dd_current_user_name'

                         );


    pr_ism_integration ( Lt_Out_Data_Xml ,lv_dd_current_user_name,lv_Object_Id);






ms_rga_utilities.pr_monitor_progress('ENDING UPDATE_OUT_DATA');
  Exception
          When Others Then
           ms_rga_utilities.pr_monitor_progress(Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);
           Ms_Apps_Mdf_Errors_Pkg.Insert_Log(Pn_Error_HAndle_Id => Xn_Error_HAndle_Id,
                                                 Pn_Error_Sequence  => Xn_Error_Seq,
                                                 Pc_Error_Type      => 'ERROR',
                                                 Pc_Error_Text      => 'Error in Helper Package : ' ||Sqlerrm);
          raise;
  end update_out_data_ism;

Procedure Update_Out_Data_MySubs(Lt_In_Data_Orig    In  Clob,
                            Lt_In_Data         In  Clob,
                            Pc_Process_Code    In  Varchar2,
                            ln_orig_process_instance_id    In  Varchar2,
                            ln_process_instance_id      In OUT Varchar2,
                            Xn_Error_Handle_Id In Out Number,
                            Xn_Error_Seq       In Out Number,
                            Xn_Error_Code      Out Varchar2)
  Is
    Lv_Proc                Varchar2(4000) := 'Ms_Rga_Helper.Update_Out_Data_MySubs => ';
    Ln_Log_No              Number;
    Lv_Error_Message       Varchar2(4000);
    Lt_Out_Data_Xml        Xmltype;
    Lv_Process_Instance_Id Number;
    Lv_Object_Id           Varchar2(100);
    lv_dd_current_user_name   Varchar2(1000);

    ln_error_code          number;
    Lv_Action              Varchar2(500) := 'RGAF1';
    xn_error_message varchar2(4000);
     x_Msg  Varchar2(4000) := Null;
  Begin

  for i in (select channel_name from ms_rga_subs_channel_chn)
      loop

      update ms_rga_my_subscription_v mrmsc
         set mrmsc.CUSTOM_FIELD10 = (select channel_name
                                       from ms_rga_channel_dtls
                                      where object_id=i.channel_name)
       where mrmsc.CHANNEL_NAME = i.channel_name;

      update ms_rga_subs_channel_chn mrmsc
         set mrmsc.CUSTOM_FIELD10 = (select channel_name
                                       from ms_rga_channel_dtls
                                      where object_id=i.channel_name)
       where mrmsc.CHANNEL_NAME = i.channel_name;

       commit;


  end loop;

  Exception
          When Others Then
          Xn_Error_Seq := SQLCODE;
          Xn_Error_Code := SQLERRM;

  end Update_Out_Data_MySubs;
  
  FUNCTION check_exp
    RETURN VARCHAR2 IS
    id2 VARCHAR2(1000);
    id3 VARCHAR2(1000);
  BEGIN
   
    select t.channel_name into id2 from ms_rga_channel_dtls t;
  
    RETURN id2;
  EXCEPTION
    WHEN OTHERS THEN
     id3 := SQLERRM;
     Dbms_Output.put_line(id3);
  END check_exp;
  
   PROCEDURE POSTHOOK_PROC
                               (lt_in_data_orig IN CLOB,
                               lt_in_data IN CLOB,
                               pc_process_code IN VARCHAR2,
                               ln_orig_process_instance_id IN NUMBER,
                               LN_PROCESS_INSTANCE_ID IN OUT NUMBER,
                               xn_error_handle_id IN OUT NUMBER,
                               XN_ERROR_SEQ IN OUT NUMBER,
                               XN_ERROR_CODE OUT NUMBER)
 IS 
 
lv_Object_Id                  VARCHAR2(100):='';
Lt_Out_Data_Xml               Xmltype;
lv_Previous_stage             VARCHAR2(225);
Lv_Dd_Current_User_Name       Varchar2(100);
Lv_Dd_Event_User_Name         Varchar2(100);
Lv_Metric_Id                  Varchar2(100);
Ln_Error_Code                 Number;
Lv_Error_Message              Varchar2(4000);
LV_FEED_DATA_ID               MS_RGA_FEED_AGGREGATOR_V.FEED_DATA_ID%TYPE;

 
 BEGIN
  
  LT_OUT_DATA_XML := XMLTYPE(lt_in_data);
  
  
  IF  PC_PROCESS_CODE = 'MS_RGA_NOTIFY_USERS' THEN
  SELECT  Object_Id,
                  Process_Instance_Id,
                  Dd_Current_User_Name,
                  Dd_Event_User_Name,
                  previous_stage,
                  dd_object_type,
                  metric_id,
                  feed_data_id

          Into    lv_Object_Id,
                  Ln_Process_Instance_Id,
                  Lv_Dd_Current_User_Name,
                  Lv_Dd_Event_User_Name,
                  Lv_previous_stage,
                  Lv_dd_object_type,
                  Lv_Metric_Id,
                  Lv_Feed_Data_Id


                 FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"),
                            'for $i in /msa:datapacket/msa:data/msa:nonmultirow
                             return $i'
                              PASSING Lt_Out_Data_Xml
                        COLUMNS
                            Object_id                    VARCHAR2(200)        PATH            'msa:object_id',
                            Process_Instance_Id          NUMBER               PATH            'msa:process_instance_id',
                            Dd_Current_User_Name         VARCHAR2(4000)       PATH            'msa:dd_current_user_name',
                            Dd_Event_User_Name           VARCHAR2(4000)       PATH            'msa:dd_event_user_name',
                            previous_stage               VARCHAR2(4000)       PATH            'msa:previous_stage',
                            dd_object_type               VARCHAR2(4000)       PATH            'msa:dd_object_type',
                            metric_id                    VARCHAR2(100)        PATH            'msa:metric_id',
                            FEED_DATA_ID                 NUMBER               PATH            'msa:feed_data_id'
                         );
                      
         ms_rga_helper.email_notify_users(i_pf_id             => Ln_Process_Instance_Id,
                                          i_metric_id          => Lv_Metric_Id,
                                          I_FEED_DATA_ID       => LV_FEED_DATA_ID,
                                          o_error_code         => Ln_Error_Code,
                                          O_ERROR_MESSAGE      => LV_ERROR_MESSAGE );
     
     End If;
    
  EXCEPTION
 WHEN OTHERS  THEN
           Ms_Apps_Mdf_Errors_Pkg.Insert_Log(Pn_Error_HAndle_Id => Xn_Error_HAndle_Id,
                                                 Pn_Error_Sequence  => Xn_Error_Seq,
                                                 Pc_Error_Type      => 'ERROR',
                                                 Pc_Error_Text      => 'Error in Helper Package - Post Hook : ' ||Sqlerrm);

 END POSTHOOK_PROC; 

End Ms_Rga_Helper; ]]></TEXT_BODY>
</PACKAGE_SPEC>
