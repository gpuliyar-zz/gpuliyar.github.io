<?xml version="1.0" encoding="UTF-8"?><PACKAGE_SPEC xmlns="http://www.metricstream.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.metricstream.com ms_application_schema.xsd">
<!--$Revision: 1.30.2.12.2.2.2.9.2.8 $-->
<!--$Author: prao $-->
<PLATFORM_DETAILS>
<PLATFORM_VERSION>6.1</PLATFORM_VERSION>
<BUILD_VERSION>4.2.2.0</BUILD_VERSION>
</PLATFORM_DETAILS>
<STORED_PROCEDURE_NAME>MS_RGA_LOG_ISSUES_P</STORED_PROCEDURE_NAME>
<OBJECT_ID>MS_RGA_LOG_ISSUES_P</OBJECT_ID>
<OBJECT_TYPE>PACKAGE</OBJECT_TYPE>
<TEXT>PACKAGE MS_RGA_LOG_ISSUES_P IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name  : MS_RGA_LOG_ISSUES_P
    Creation Time : Thu Jan 08 15:55:44 IST 2015
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_RGA_LOG_ISSUES_P' ;
    GV_program_name VARCHAR2(100);
   
   
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id  IN                      NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id         IN                      VARCHAR2,
            iop_log_no              IN   OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY     CLOB,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2,
            iop_error_seq         IN     OUT                NUMBER,
            ip_pid                IN                        NUMBER
        );
   


END MS_RGA_LOG_ISSUES_P ;
 </TEXT>
<TEXT_BODY>PACKAGE BODY MS_RGA_LOG_ISSUES_P IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Body.
    Author : Data Designer ETL Engine
   -------------------------------------------------------------------------- */
   
   
/* --------------------------------------------------------------------------------
    GENERATE_UPDATE_HIERARCHY : Procedure to get the update the xml data hierarchy
   ------------------------------------------------------------------------------ */

    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        );
        
    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        )
    AS
        LV_error_code               NUMBER;
        LV_error_message            VARCHAR2(1000);
        UPDATE_HIERARCHY_EXCEP      EXCEPTION;
        LV_xml                      XMLTYPE := iop_xml;
		LV_namespace                varchar2(100) := 'xmlns="http://www.metricstream.com/appstudio/msa"';
        lv_program_name             VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UPDATE_HIERARCHY';


/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
      
    	           	    SELECT DELETEXML(LV_XML,'datapacket/data/fnd/row/fnd_object_id',LV_namespace) INTO LV_XML FROM DUAL;
	           
	FOR rec in (SELECT DISTINCT 
        	    	  	 object_id
        FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
      'msa:datapacket/msa:data/msa:nonmultirow'       PASSING LV_xml
    COLUMNS
            	 object_id  VARCHAR2(4000)    PATH  'msa:object_id'
       ))
   
   LOOP
               	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/fnd/row','fnd_object_id',XMLTYPE('&lt;fnd_object_id ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'&gt;'||rec.object_id||'&lt;/fnd_object_id&gt;'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	    END LOOP;
	iop_xml := LV_xml;
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_pid);
    EXCEPTION
        WHEN UPDATE_HIERARCHY_EXCEP THEN

            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE_HIERARCHY_EXCEP Exception Raised ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO  MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
			MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UPDATE_HIERARCHY;
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
        LV_error_code NUMBER;
        LV_error_message VARCHAR2(1000);
        NEXT_ID_GEN_EXCEPTION EXCEPTION;
        lv_program_name VARCHAR2(100);
        ln_error_seq NUMBER:=1;

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'GET_NEXT_ID';

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;

    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_process_instance_id);
      
             
 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_process_instance_id);
    EXCEPTION
        WHEN NEXT_ID_GEN_EXCEPTION THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] NEXT_ID_GEN_EXCEPTION Exception Raised ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] WHEN OTHERS ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END GET_NEXT_ID;


 

  	    	 
  	    	 
  	    	              
/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY         CLOB,
            iop_log_no            IN     OUT                    NUMBER,
            op_error_code                OUT                    NUMBER,
            op_error_message             OUT                    VARCHAR2,
            iop_error_seq         IN     OUT                    NUMBER,
            ip_pid                IN                            NUMBER

        )
    AS

/* --------------------------------------------------------------------------
     ETL procedure created by the ETL Engine of APP BUILDER.
     The procedure takes care of loading the data that is sent
     by the FLOW BUILDER and store the same in MS TABLES.
     Data is already processed and stored accordingly in the iop_data
     object structure. The object can have one or more records.
     The ETL is designed to take care of one or more records.
     If the data has to be manipulated before populating the main
     MS TABLES, please use the HOOKS that are generated by the
     FLOW BUILDER.
   -------------------------------------------------------------------------- */
        LV_progress VARCHAR2(3) := NULL;
        LV_cntr_1   NUMBER      := NULL;
        LV_cntr_2   NUMBER      := NULL;
        LV_debug    BOOLEAN     := FALSE;
        LV_XML      XMLTYPE     := XMLTYPE(iop_xml_data);
        LV_err_code NUMBER      := NULL;
        LV_err_msg  VARCHAR2(4000);
        lV_program_name VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
              AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
      
    /************* Add the cursors for all the regions ******************/
      
        				
		CURSOR CU_RGA_LOG_ISSUES_FND is (SELECT 
				   	   			   	    	  FND_OBJECT_ID
		   	   		   			   	   			   	    	,  RECOMMENDATION_GRCI
		   	   		   			   	   			   	    	,  OWNER_ORG_GRCI
		   	   		   			   	   			   	    	,  ISSUE_ID
		   	   		   			   	   			   	    	,  CUSTOM_FIELD1
		   	   		   			   	   			   	    	,  ISSUE_OWNER_GRCI
		   	   		   			   	   			   	    	,  ISSUE_EXCEPTION_TYPE_GRCI
		   	   		   			   	   			   	    	,  CUSTOM_FIELD2
		   	   		   			   	   			   	    	,  ISSUE_CREATED_BY
		   	   		   			   	   			   	   		,  TO_DATE(ISSUE_CREATED_ON ,'MM/dd/yyyy HH24:mi:ss') AS ISSUE_CREATED_ON
		   	   		   			   	   			   	    	,  ISSUE_APPROVER_GRCI
		   	   		   			   	   			   	    	,  ISSUE_TYPE_GRCI
		   	   		   			   	   			   	    	,  ISSUE_RESOLUTION_GRCI
		   	   		   			   	   			   	    	,  ISSUE_TITLE_GRCI
		   	   		   			   	   			   	    	,  FEED_DATA_ID
		   	   		   			   	   			   	    	,  CUSTOM_FIELD4
		   	   		   			   	   			   	    	,  ISSUE_ASSIGNED_TO
		   	   		   			   	   			   	    	,  ISSUE_RATING_GRCI
		   	   		   			   	   			   	   		,  TO_DATE(ISSUE_DUE_DATE_GRCI ,'MM/dd/yyyy HH24:mi:ss') AS ISSUE_DUE_DATE_GRCI
		   	   		   			   	   			   	    	,  APPROVER_ORG_GRCI
		   	   		   			   	   			   	   		,  TO_DATE(ISSUE_REQUEST_DATE ,'MM/dd/yyyy HH24:mi:ss') AS ISSUE_REQUEST_DATE
		   	   		   			   	   			   	    	,  ISSUE_DETAILS_GRCI
		   	   		   			   	   			   	    	,  ATTACHMENT
		   	   		   			   	   			   	   		,  TO_DATE(RECEIVED_ON_GRCI ,'MM/dd/yyyy HH24:mi:ss') AS RECEIVED_ON_GRCI
		   	   		   			   	   			   	    	,  CUSTOM_FIELD3
		   	   		   			   	   			   	    	,  ALERT_TITLE_GRCI
		   	   		   			   	   			   	    	,  CHANNEL_NAME_GRCI
		   	   		   			   	   			   	    	,  SUBS_RESPONSE_ID_GRCI
		   	   		   			   	   			   	    	,  RELATED_CORE_OBJ_GRCI
		   	   		   			   	   			   	    	,  AREA_OF_COMP_GRCI
		   	   		   			   	   			   	    	,  REGULATORY_BODY_GRCI
		   	   		   			   	   			   	    	,  RELATED_ORG_GRCI
		   	   		   			   	   			   	    	,  REQUIREMENTS_GRCI
		   	   		   			   	   			   	    	,  STANDARDS_GRCI
		   	   		   	 		FROM XMLTABLE(XMLNAMESPACES( 'http://www.metricstream.com/appstudio/msa'  as "msa"),'msa:datapacket/msa:data/msa:fnd/msa:row'
		PASSING LV_xml
		COLUMNS
	    	    	   			  FND_OBJECT_ID  VARCHAR2(4000)   PATH 'msa:fnd_object_id' 	    	   			,  RECOMMENDATION_GRCI  CLOB   PATH 'msa:recommendation_grci_htm'	    	   			,  OWNER_ORG_GRCI  VARCHAR2(4000)   PATH 'msa:owner_org_grci' 	    	   			,  ISSUE_ID  VARCHAR2(4000)   PATH 'msa:issue_id' 	    	   			,  CUSTOM_FIELD1  VARCHAR2(4000)   PATH 'msa:custom_field1' 	    	   			,  ISSUE_OWNER_GRCI  VARCHAR2(4000)   PATH 'msa:issue_owner_grci' 	    	   			,  ISSUE_EXCEPTION_TYPE_GRCI  VARCHAR2(4000)   PATH 'msa:issue_exception_type_grci' 	    	   			,  CUSTOM_FIELD2  VARCHAR2(4000)   PATH 'msa:custom_field2' 	    	   			,  ISSUE_CREATED_BY  VARCHAR2(4000)   PATH 'msa:issue_created_by' 	    	   			,  ISSUE_CREATED_ON  VARCHAR2(40)   PATH 'msa:issue_created_on' 	    	   			,  ISSUE_APPROVER_GRCI  VARCHAR2(4000)   PATH 'msa:issue_approver_grci' 	    	   			,  ISSUE_TYPE_GRCI  VARCHAR2(4000)   PATH 'msa:issue_type_grci' 	    	   			,  ISSUE_RESOLUTION_GRCI  VARCHAR2(4000)   PATH 'msa:issue_resolution_grci' 	    	   			,  ISSUE_TITLE_GRCI  VARCHAR2(4000)   PATH 'msa:issue_title_grci' 	    	   			,  FEED_DATA_ID  VARCHAR2(4000)   PATH 'msa:feed_data_id' 	    	   			,  CUSTOM_FIELD4  VARCHAR2(4000)   PATH 'msa:custom_field4' 	    	   			,  ISSUE_ASSIGNED_TO  VARCHAR2(4000)   PATH 'msa:issue_assigned_to' 	    	   			,  ISSUE_RATING_GRCI  VARCHAR2(4000)   PATH 'msa:issue_rating_grci' 	    	   			,  ISSUE_DUE_DATE_GRCI  VARCHAR2(40)   PATH 'msa:issue_due_date_grci' 	    	   			,  APPROVER_ORG_GRCI  VARCHAR2(4000)   PATH 'msa:approver_org_grci' 	    	   			,  ISSUE_REQUEST_DATE  VARCHAR2(40)   PATH 'msa:issue_request_date' 	    	   			,  ISSUE_DETAILS_GRCI  CLOB   PATH 'msa:issue_details_grci_htm'	    	   			,  ATTACHMENT  VARCHAR2(4000)   PATH 'msa:attachment' 	    	   			,  RECEIVED_ON_GRCI  VARCHAR2(40)   PATH 'msa:received_on_grci' 	    	   			,  CUSTOM_FIELD3  VARCHAR2(4000)   PATH 'msa:custom_field3' 	    	   			,  ALERT_TITLE_GRCI  VARCHAR2(4000)   PATH 'msa:alert_title_grci' 	    	   			,  CHANNEL_NAME_GRCI  VARCHAR2(4000)   PATH 'msa:channel_name_grci' 	    	   			,  SUBS_RESPONSE_ID_GRCI  VARCHAR2(4000)   PATH 'msa:subs_response_id_grci' 	    	   			,  RELATED_CORE_OBJ_GRCI  VARCHAR2(4000)   PATH 'msa:related_core_obj_grci' 	    	   			,  AREA_OF_COMP_GRCI  VARCHAR2(4000)   PATH 'msa:area_of_comp_grci' 	    	   			,  REGULATORY_BODY_GRCI  VARCHAR2(4000)   PATH 'msa:regulatory_body_grci' 	    	   			,  RELATED_ORG_GRCI  VARCHAR2(4000)   PATH 'msa:related_org_grci' 	    	   			,  REQUIREMENTS_GRCI  VARCHAR2(4000)   PATH 'msa:requirements_grci' 	    	   			,  STANDARDS_GRCI  VARCHAR2(4000)   PATH 'msa:standards_grci' 	    			));	  
		TYPE LT_RGA_LOG_ISSUES_FND IS TABLE OF CU_RGA_LOG_ISSUES_FND%ROWTYPE;
		TY_RGA_LOG_ISSUES_FND  LT_RGA_LOG_ISSUES_FND; 
		
		        
   /************* End of cursors for all the regions ******************/
    
   /************ Add the cursors for all object relationships *****************************/
    	  		      BEGIN

/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------
    Note: Defining SAVEPOINT TO ROLLBACK transactions done by ETL.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        LV_progress := '001';
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'CALL_ETL';


/* --------------------------------------------------------------------------
    Note: Default DEBUG FLAG is set to FALSE to avoid unneccessary logging of data.
            If any issues found in ETL, to understand what goes into the ETL
            then set this variable to TRUE and run the ETL in the flow.
            It allows to log the entire relevant data set.
   -------------------------------------------------------------------------- */
        LV_debug := FALSE;

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);
        
        UPDATE_HIERARCHY
        (
           iop_log_no          =&gt; LV_log_no.APP_LOG_NO,
           iop_xml             =&gt; LV_XML,
           op_error_code       =&gt; LV_err_code,
           op_error_message    =&gt; LV_err_msg,
           iop_error_sequence  =&gt; iop_error_seq,
           ip_pid              =&gt; ip_pid
        );

        IF(LV_err_code !=0) THEN
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'W','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Failed while updating Hierarchy ', ip_pid);
        END IF;
        
        /* capture all cursors here */
					       OPEN CU_RGA_LOG_ISSUES_FND;
	       FETCH CU_RGA_LOG_ISSUES_FND BULK COLLECT INTO TY_RGA_LOG_ISSUES_FND;
	       CLOSE CU_RGA_LOG_ISSUES_FND; 
	    		
		
        LV_cntr_1 := 0;
      
/* --------------------------------------------------------------------------
        Cursor to fetch non multirow details from XML
   -------------------------------------------------------------------------- */
		        FOR iop_data in ( SELECT  INSTANCE_ID
                                 ,METRIC_ID
                                 ,TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_RUN_DATE
                                 ,TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
                                 ,LATEST_FLAG
                                 ,CREATED_BY
                                 ,TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE
                                 ,PROCESS_FLOW_STATUS
                                 ,PROCESS_INSTANCE_ID
                                 ,ELECTRONICALLY_SIGNED
	                             ,INSTANCE_REC_NUM
											 					   	  , RTF_MULTI_ATTACHMENT
					    											 					   	  , INITIATOR
					    											 					   	  , OBJECT_ID
					    											 					   	  , CUSTOM_FIELD5
					    											 					   	  , DD_EVENT_USER_NAME
					    											 					   	  , DD_CURRENT_USER_NAME
					    											 					   	  , DD_OBJECT_TYPE
					    											 					   	  , DD_PROCESS_CODE
					    										FROM XMLTABLE(XMLNAMESPACES(  'http://www.metricstream.com/appstudio/msa'  as "msa"),
                                'msa:datapacket/msa:data/msa:nonmultirow' 
                               PASSING LV_XML
                               COLUMNS
                                INSTANCE_ID                      NUMBER          PATH  'msa:instance_id'
                               ,METRIC_ID                        NUMBER          PATH  'msa:metric_id'
                               ,METRIC_RUN_DATE                  VARCHAR2(40)    PATH  'msa:metric_run_date'
                               ,METRIC_COMPLETED_DATE            VARCHAR2(40)    PATH  'msa:metric_completed_date'
                               ,LATEST_FLAG                      VARCHAR2(1)     PATH  'msa:latest_flag'
                               ,CREATED_BY                       NUMBER          PATH  'msa:created_by'
                               ,CREATION_DATE                    VARCHAR2(40)    PATH  'msa:creation_date'
                               ,PROCESS_FLOW_STATUS              NUMBER          PATH  'msa:process_flow_status'
                               ,PROCESS_INSTANCE_ID              NUMBER          PATH  'msa:process_instance_id'
                               ,ELECTRONICALLY_SIGNED            NUMBER          PATH  'msa:electronically_signed'
                               ,INSTANCE_REC_NUM                 NUMBER          PATH  'msa:instance_rec_num'    
														, RTF_MULTI_ATTACHMENT  VARCHAR2(4000)	 PATH   'msa:rtf_multi_attachment' 
																						, INITIATOR  VARCHAR2(4000)	 PATH   'msa:initiator' 
																						, OBJECT_ID  VARCHAR2(4000)	 PATH   'msa:object_id' 
																						, CUSTOM_FIELD5  VARCHAR2(4000)	 PATH   'msa:custom_field5' 
																						, DD_EVENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_event_user_name'
																						, DD_CURRENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_current_user_name'
																						, DD_OBJECT_TYPE  VARCHAR2(4000) PATH 'msa:dd_object_type'
																						, DD_PROCESS_CODE  VARCHAR2(4000) PATH 'msa:dd_process_code'
																			))      
					
				LOOP
			           LV_cntr_1 := LV_cntr_1 + 1;
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Data Found in iop_data. ', ip_pid);
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ')', ip_pid);
    

		 /* --------------------------------------------------------------------------
		       Loop through the data object to load the data into MS tables.
		        Header info is being loaded into the system.
		  -------------------------------------------------------------------------- */ 
 			  			 	
		/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
		  -------------------------------------------------------------------------- */ 	
		  		 		
  									    		IF LV_debug THEN
												

	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RTF_MULTI_ATTACHMENT, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.INITIATOR, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.OBJECT_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CUSTOM_FIELD5, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    				             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
			             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
    			    	END IF;
    			    	
    			    							MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  
  MERGE 
    INTO MS_RGA_LOG_ISSUES T 
  		USING (
  				SELECT     
          iop_data.RTF_MULTI_ATTACHMENT AS RTF_MULTI_ATTACHMENT
    	          , iop_data.INITIATOR AS INITIATOR
    	          , iop_data.OBJECT_ID AS OBJECT_ID
    	          , iop_data.CUSTOM_FIELD5 AS CUSTOM_FIELD5
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.OBJECT_ID = V.OBJECT_ID
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.RTF_MULTI_ATTACHMENT=V.RTF_MULTI_ATTACHMENT
 ,T.INITIATOR=V.INITIATOR
 ,T.CUSTOM_FIELD5=V.CUSTOM_FIELD5
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.RTF_MULTI_ATTACHMENT
 ,T.INITIATOR
 ,T.OBJECT_ID
 ,T.CUSTOM_FIELD5
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.RTF_MULTI_ATTACHMENT
        ,V.INITIATOR
        ,V.OBJECT_ID
        ,V.CUSTOM_FIELD5
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
						
																		
		  		  		  		            
          							 	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING UPDATE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	UPDATE MS_RGA_LOG_ISSUES_FND 
 	SET DD_STATUS_FLAG   = 'N'
 	WHERE			
			OBJECT_ID= iop_data.OBJECT_ID	
	 	 ;
	 
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in UPDATE : ' || SQL%ROWCOUNT, 'D');
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

	                            
          						   	
               			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_RGA_LOG_ISSUES_FND.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).FND_OBJECT_ID, ip_pid);
				    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).OWNER_ORG_GRCI, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).ISSUE_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).CUSTOM_FIELD1, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).ISSUE_OWNER_GRCI, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).ISSUE_EXCEPTION_TYPE_GRCI, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).CUSTOM_FIELD2, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).ISSUE_CREATED_BY, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).ISSUE_CREATED_ON, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).ISSUE_APPROVER_GRCI, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).ISSUE_TYPE_GRCI, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).ISSUE_RESOLUTION_GRCI, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).ISSUE_TITLE_GRCI, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).FEED_DATA_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).CUSTOM_FIELD4, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).ISSUE_ASSIGNED_TO, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).ISSUE_RATING_GRCI, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).ISSUE_DUE_DATE_GRCI, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).APPROVER_ORG_GRCI, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).ISSUE_REQUEST_DATE, ip_pid);
				    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).ATTACHMENT, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).RECEIVED_ON_GRCI, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).CUSTOM_FIELD3, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).ALERT_TITLE_GRCI, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).CHANNEL_NAME_GRCI, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_LOG_ISSUES_FND(j).SUBS_RESPONSE_ID_GRCI, ip_pid);
			 END LOOP;
 				END IF;
				
								MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  FORALL i IN TY_RGA_LOG_ISSUES_FND.FIRST..TY_RGA_LOG_ISSUES_FND.LAST 
  
  MERGE 
    INTO MS_RGA_LOG_ISSUES_FND T 
  		USING (
  				SELECT     
          TY_RGA_LOG_ISSUES_FND(i).FND_OBJECT_ID AS OBJECT_ID
    	          , TY_RGA_LOG_ISSUES_FND(i).RECOMMENDATION_GRCI AS RECOMMENDATION_GRCI
    	          , TY_RGA_LOG_ISSUES_FND(i).OWNER_ORG_GRCI AS OWNER_ORG_GRCI
    	          , TY_RGA_LOG_ISSUES_FND(i).ISSUE_ID AS ISSUE_ID
    	          , TY_RGA_LOG_ISSUES_FND(i).CUSTOM_FIELD1 AS CUSTOM_FIELD1
    	          , TY_RGA_LOG_ISSUES_FND(i).ISSUE_OWNER_GRCI AS ISSUE_OWNER_GRCI
    	          , TY_RGA_LOG_ISSUES_FND(i).ISSUE_EXCEPTION_TYPE_GRCI AS ISSUE_EXCEPTION_TYPE_GRCI
    	          , TY_RGA_LOG_ISSUES_FND(i).CUSTOM_FIELD2 AS CUSTOM_FIELD2
    	          , TY_RGA_LOG_ISSUES_FND(i).ISSUE_CREATED_BY AS ISSUE_CREATED_BY
    	          , TY_RGA_LOG_ISSUES_FND(i).ISSUE_CREATED_ON AS ISSUE_CREATED_ON
    	          , TY_RGA_LOG_ISSUES_FND(i).ISSUE_APPROVER_GRCI AS ISSUE_APPROVER_GRCI
    	          , TY_RGA_LOG_ISSUES_FND(i).ISSUE_TYPE_GRCI AS ISSUE_TYPE_GRCI
    	          , TY_RGA_LOG_ISSUES_FND(i).ISSUE_RESOLUTION_GRCI AS ISSUE_RESOLUTION_GRCI
    	          , TY_RGA_LOG_ISSUES_FND(i).ISSUE_TITLE_GRCI AS ISSUE_TITLE_GRCI
    	          , TY_RGA_LOG_ISSUES_FND(i).FEED_DATA_ID AS FEED_DATA_ID
    	          , TY_RGA_LOG_ISSUES_FND(i).CUSTOM_FIELD4 AS CUSTOM_FIELD4
    	          , TY_RGA_LOG_ISSUES_FND(i).ISSUE_ASSIGNED_TO AS ISSUE_ASSIGNED_TO
    	          , TY_RGA_LOG_ISSUES_FND(i).ISSUE_RATING_GRCI AS ISSUE_RATING_GRCI
    	          , TY_RGA_LOG_ISSUES_FND(i).ISSUE_DUE_DATE_GRCI AS ISSUE_DUE_DATE_GRCI
    	          , TY_RGA_LOG_ISSUES_FND(i).APPROVER_ORG_GRCI AS APPROVER_ORG_GRCI
    	          , TY_RGA_LOG_ISSUES_FND(i).ISSUE_REQUEST_DATE AS ISSUE_REQUEST_DATE
    	          , TY_RGA_LOG_ISSUES_FND(i).ISSUE_DETAILS_GRCI AS ISSUE_DETAILS_GRCI
    	          , TY_RGA_LOG_ISSUES_FND(i).ATTACHMENT AS ATTACHMENT
    	          , TY_RGA_LOG_ISSUES_FND(i).RECEIVED_ON_GRCI AS RECEIVED_ON_GRCI
    	          , TY_RGA_LOG_ISSUES_FND(i).CUSTOM_FIELD3 AS CUSTOM_FIELD3
    	          , TY_RGA_LOG_ISSUES_FND(i).ALERT_TITLE_GRCI AS ALERT_TITLE_GRCI
    	          , TY_RGA_LOG_ISSUES_FND(i).CHANNEL_NAME_GRCI AS CHANNEL_NAME_GRCI
    	          , TY_RGA_LOG_ISSUES_FND(i).SUBS_RESPONSE_ID_GRCI AS SUBS_RESPONSE_ID_GRCI
    	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.OBJECT_ID = V.OBJECT_ID
 AND  T.ISSUE_ID = V.ISSUE_ID
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.RECOMMENDATION_GRCI=V.RECOMMENDATION_GRCI
 ,T.OWNER_ORG_GRCI=V.OWNER_ORG_GRCI
 ,T.CUSTOM_FIELD1=V.CUSTOM_FIELD1
 ,T.ISSUE_OWNER_GRCI=V.ISSUE_OWNER_GRCI
 ,T.ISSUE_EXCEPTION_TYPE_GRCI=V.ISSUE_EXCEPTION_TYPE_GRCI
 ,T.CUSTOM_FIELD2=V.CUSTOM_FIELD2
 ,T.ISSUE_CREATED_BY=V.ISSUE_CREATED_BY
 ,T.ISSUE_CREATED_ON=V.ISSUE_CREATED_ON
 ,T.ISSUE_APPROVER_GRCI=V.ISSUE_APPROVER_GRCI
 ,T.ISSUE_TYPE_GRCI=V.ISSUE_TYPE_GRCI
 ,T.ISSUE_RESOLUTION_GRCI=V.ISSUE_RESOLUTION_GRCI
 ,T.ISSUE_TITLE_GRCI=V.ISSUE_TITLE_GRCI
 ,T.FEED_DATA_ID=V.FEED_DATA_ID
 ,T.CUSTOM_FIELD4=V.CUSTOM_FIELD4
 ,T.ISSUE_ASSIGNED_TO=V.ISSUE_ASSIGNED_TO
 ,T.ISSUE_RATING_GRCI=V.ISSUE_RATING_GRCI
 ,T.ISSUE_DUE_DATE_GRCI=V.ISSUE_DUE_DATE_GRCI
 ,T.APPROVER_ORG_GRCI=V.APPROVER_ORG_GRCI
 ,T.ISSUE_REQUEST_DATE=V.ISSUE_REQUEST_DATE
 ,T.ISSUE_DETAILS_GRCI=V.ISSUE_DETAILS_GRCI
 ,T.ATTACHMENT=V.ATTACHMENT
 ,T.RECEIVED_ON_GRCI=V.RECEIVED_ON_GRCI
 ,T.CUSTOM_FIELD3=V.CUSTOM_FIELD3
 ,T.ALERT_TITLE_GRCI=V.ALERT_TITLE_GRCI
 ,T.CHANNEL_NAME_GRCI=V.CHANNEL_NAME_GRCI
 ,T.SUBS_RESPONSE_ID_GRCI=V.SUBS_RESPONSE_ID_GRCI
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.OBJECT_ID
 ,T.RECOMMENDATION_GRCI
 ,T.OWNER_ORG_GRCI
 ,T.ISSUE_ID
 ,T.CUSTOM_FIELD1
 ,T.ISSUE_OWNER_GRCI
 ,T.ISSUE_EXCEPTION_TYPE_GRCI
 ,T.CUSTOM_FIELD2
 ,T.ISSUE_CREATED_BY
 ,T.ISSUE_CREATED_ON
 ,T.ISSUE_APPROVER_GRCI
 ,T.ISSUE_TYPE_GRCI
 ,T.ISSUE_RESOLUTION_GRCI
 ,T.ISSUE_TITLE_GRCI
 ,T.FEED_DATA_ID
 ,T.CUSTOM_FIELD4
 ,T.ISSUE_ASSIGNED_TO
 ,T.ISSUE_RATING_GRCI
 ,T.ISSUE_DUE_DATE_GRCI
 ,T.APPROVER_ORG_GRCI
 ,T.ISSUE_REQUEST_DATE
 ,T.ISSUE_DETAILS_GRCI
 ,T.ATTACHMENT
 ,T.RECEIVED_ON_GRCI
 ,T.CUSTOM_FIELD3
 ,T.ALERT_TITLE_GRCI
 ,T.CHANNEL_NAME_GRCI
 ,T.SUBS_RESPONSE_ID_GRCI
)
VALUES 
  ('Y'         
     ,V.OBJECT_ID
        ,V.RECOMMENDATION_GRCI
        ,V.OWNER_ORG_GRCI
        ,V.ISSUE_ID
        ,V.CUSTOM_FIELD1
        ,V.ISSUE_OWNER_GRCI
        ,V.ISSUE_EXCEPTION_TYPE_GRCI
        ,V.CUSTOM_FIELD2
        ,V.ISSUE_CREATED_BY
        ,V.ISSUE_CREATED_ON
        ,V.ISSUE_APPROVER_GRCI
        ,V.ISSUE_TYPE_GRCI
        ,V.ISSUE_RESOLUTION_GRCI
        ,V.ISSUE_TITLE_GRCI
        ,V.FEED_DATA_ID
        ,V.CUSTOM_FIELD4
        ,V.ISSUE_ASSIGNED_TO
        ,V.ISSUE_RATING_GRCI
        ,V.ISSUE_DUE_DATE_GRCI
        ,V.APPROVER_ORG_GRCI
        ,V.ISSUE_REQUEST_DATE
        ,V.ISSUE_DETAILS_GRCI
        ,V.ATTACHMENT
        ,V.RECEIVED_ON_GRCI
        ,V.CUSTOM_FIELD3
        ,V.ALERT_TITLE_GRCI
        ,V.CHANNEL_NAME_GRCI
        ,V.SUBS_RESPONSE_ID_GRCI
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_RGA_LOG_ISSUES_FND.COUNT LOOP 
	   	  
 	  DELETE MS_RGA_LOG_ISSUES_RCO WHERE 
 	   	   	   		 OBJECT_ID =  TY_RGA_LOG_ISSUES_FND(j).FND_OBJECT_ID
	  		   		 AND  ISSUE_ID =  TY_RGA_LOG_ISSUES_FND(j).ISSUE_ID
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_RGA_LOG_ISSUES_FND(j).RELATED_CORE_OBJ_GRCI) &gt; 0 THEN
 		
 		INSERT INTO MS_RGA_LOG_ISSUES_RCO (
 		 		DD_STATUS_FLAG,
 		 		 OBJECT_ID
 		 		,  ISSUE_ID
 		 		,  RELATED_CORE_OBJ_GRCI
 		 		) SELECT 
 		'Y',
 		 		 		  TY_RGA_LOG_ISSUES_FND(j).FND_OBJECT_ID  		 		,  TY_RGA_LOG_ISSUES_FND(j).ISSUE_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_RGA_LOG_ISSUES_FND(j).RELATED_CORE_OBJ_GRCI,','));

 	   END IF;
 		  END LOOP; 	   
	  										

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_RGA_LOG_ISSUES_FND.COUNT LOOP 
	   	  
 	  DELETE MS_RGA_LOG_ISSUES_AOC WHERE 
 	   	   	   		 OBJECT_ID =  TY_RGA_LOG_ISSUES_FND(j).FND_OBJECT_ID
	  		   		 AND  ISSUE_ID =  TY_RGA_LOG_ISSUES_FND(j).ISSUE_ID
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_RGA_LOG_ISSUES_FND(j).AREA_OF_COMP_GRCI) &gt; 0 THEN
 		
 		INSERT INTO MS_RGA_LOG_ISSUES_AOC (
 		 		DD_STATUS_FLAG,
 		 		 OBJECT_ID
 		 		,  ISSUE_ID
 		 		,  AREA_OF_COMP_GRCI
 		 		) SELECT 
 		'Y',
 		 		 		  TY_RGA_LOG_ISSUES_FND(j).FND_OBJECT_ID  		 		,  TY_RGA_LOG_ISSUES_FND(j).ISSUE_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_RGA_LOG_ISSUES_FND(j).AREA_OF_COMP_GRCI,','));

 	   END IF;
 		  END LOOP; 	   
	  										

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_RGA_LOG_ISSUES_FND.COUNT LOOP 
	   	  
 	  DELETE MS_RGA_LOG_ISSUES_REG WHERE 
 	   	   	   		 OBJECT_ID =  TY_RGA_LOG_ISSUES_FND(j).FND_OBJECT_ID
	  		   		 AND  ISSUE_ID =  TY_RGA_LOG_ISSUES_FND(j).ISSUE_ID
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_RGA_LOG_ISSUES_FND(j).REGULATORY_BODY_GRCI) &gt; 0 THEN
 		
 		INSERT INTO MS_RGA_LOG_ISSUES_REG (
 		 		DD_STATUS_FLAG,
 		 		 OBJECT_ID
 		 		,  ISSUE_ID
 		 		,  REGULATORY_BODY_GRCI
 		 		) SELECT 
 		'Y',
 		 		 		  TY_RGA_LOG_ISSUES_FND(j).FND_OBJECT_ID  		 		,  TY_RGA_LOG_ISSUES_FND(j).ISSUE_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_RGA_LOG_ISSUES_FND(j).REGULATORY_BODY_GRCI,','));

 	   END IF;
 		  END LOOP; 	   
	  										

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_RGA_LOG_ISSUES_FND.COUNT LOOP 
	   	  
 	  DELETE MS_RGA_LOG_ISSUES_ROG WHERE 
 	   	   	   		 OBJECT_ID =  TY_RGA_LOG_ISSUES_FND(j).FND_OBJECT_ID
	  		   		 AND  ISSUE_ID =  TY_RGA_LOG_ISSUES_FND(j).ISSUE_ID
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_RGA_LOG_ISSUES_FND(j).RELATED_ORG_GRCI) &gt; 0 THEN
 		
 		INSERT INTO MS_RGA_LOG_ISSUES_ROG (
 		 		DD_STATUS_FLAG,
 		 		 OBJECT_ID
 		 		,  ISSUE_ID
 		 		,  RELATED_ORG_GRCI
 		 		) SELECT 
 		'Y',
 		 		 		  TY_RGA_LOG_ISSUES_FND(j).FND_OBJECT_ID  		 		,  TY_RGA_LOG_ISSUES_FND(j).ISSUE_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_RGA_LOG_ISSUES_FND(j).RELATED_ORG_GRCI,','));

 	   END IF;
 		  END LOOP; 	   
	  										

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_RGA_LOG_ISSUES_FND.COUNT LOOP 
	   	  
 	  DELETE MS_RGA_LOG_ISSUES_REQ WHERE 
 	   	   	   		 OBJECT_ID =  TY_RGA_LOG_ISSUES_FND(j).FND_OBJECT_ID
	  		   		 AND  ISSUE_ID =  TY_RGA_LOG_ISSUES_FND(j).ISSUE_ID
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_RGA_LOG_ISSUES_FND(j).REQUIREMENTS_GRCI) &gt; 0 THEN
 		
 		INSERT INTO MS_RGA_LOG_ISSUES_REQ (
 		 		DD_STATUS_FLAG,
 		 		 OBJECT_ID
 		 		,  ISSUE_ID
 		 		,  REQUIREMENTS_GRCI
 		 		) SELECT 
 		'Y',
 		 		 		  TY_RGA_LOG_ISSUES_FND(j).FND_OBJECT_ID  		 		,  TY_RGA_LOG_ISSUES_FND(j).ISSUE_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_RGA_LOG_ISSUES_FND(j).REQUIREMENTS_GRCI,','));

 	   END IF;
 		  END LOOP; 	   
	  										

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_RGA_LOG_ISSUES_FND.COUNT LOOP 
	   	  
 	  DELETE MS_RGA_LOG_ISSUES_STD WHERE 
 	   	   	   		 OBJECT_ID =  TY_RGA_LOG_ISSUES_FND(j).FND_OBJECT_ID
	  		   		 AND  ISSUE_ID =  TY_RGA_LOG_ISSUES_FND(j).ISSUE_ID
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_RGA_LOG_ISSUES_FND(j).STANDARDS_GRCI) &gt; 0 THEN
 		
 		INSERT INTO MS_RGA_LOG_ISSUES_STD (
 		 		DD_STATUS_FLAG,
 		 		 OBJECT_ID
 		 		,  ISSUE_ID
 		 		,  STANDARDS_GRCI
 		 		) SELECT 
 		'Y',
 		 		 		  TY_RGA_LOG_ISSUES_FND(j).FND_OBJECT_ID  		 		,  TY_RGA_LOG_ISSUES_FND(j).ISSUE_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_RGA_LOG_ISSUES_FND(j).STANDARDS_GRCI,','));

 	   END IF;
 		  END LOOP; 	   
	  					               									  
				   						  	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
    
    DELETE MS_RGA_LOG_ISSUES_FND 
    WHERE DD_STATUS_FLAG = 'N'
  	  			AND OBJECT_ID = iop_data.OBJECT_ID
  	  	  ;
  	   
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in DELETE : ' || SQL%ROWCOUNT, 'D');
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
	   			   		
    END LOOP;	 
        EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in call ETL ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END CALL_ETL;        

END MS_RGA_LOG_ISSUES_P ;   </TEXT_BODY>
</PACKAGE_SPEC>
