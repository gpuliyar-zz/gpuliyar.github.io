<?xml version="1.0" encoding="UTF-8"?><PACKAGE_SPEC xmlns="http://www.metricstream.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.metricstream.com ms_application_schema.xsd">
<!--$Revision: 1.30.2.12.2.2.2.9.2.8 $-->
<!--$Author: prao $-->
<PLATFORM_DETAILS>
<PLATFORM_VERSION>6.1</PLATFORM_VERSION>
<BUILD_VERSION>4.1.1.0</BUILD_VERSION>
</PLATFORM_DETAILS>
<STORED_PROCEDURE_NAME>MS_RGA_EMAIL_CONTENT_P</STORED_PROCEDURE_NAME>
<OBJECT_ID>MS_RGA_EMAIL_CONTENT_P</OBJECT_ID>
<OBJECT_TYPE>PACKAGE</OBJECT_TYPE>
<TEXT>PACKAGE MS_RGA_EMAIL_CONTENT_P IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name  : MS_RGA_EMAIL_CONTENT_P
    Creation Time : Tue Aug 19 18:21:19 IST 2014
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_RGA_EMAIL_CONTENT_P' ;
    GV_program_name VARCHAR2(100);
   
   
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id  IN                      NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id         IN                      VARCHAR2,
            iop_log_no              IN   OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY     CLOB,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2,
            iop_error_seq         IN     OUT                NUMBER,
            ip_pid                IN                        NUMBER
        );
   


END MS_RGA_EMAIL_CONTENT_P ;
 </TEXT>
<TEXT_BODY>PACKAGE BODY MS_RGA_EMAIL_CONTENT_P IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Body.
    Author : Data Designer ETL Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------------
    GENERATE_UPDATE_HIERARCHY : Procedure to get the update the xml data hierarchy
   ------------------------------------------------------------------------------ */

    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        );
    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER           
        )
    AS
        LV_error_code               NUMBER;
        LV_error_message            VARCHAR2(1000);
        UPDATE_HIERARCHY_EXCEP      EXCEPTION;
        LV_xml                      XMLTYPE := iop_xml;
        LV_namespace                varchar2(4000) := 'xmlns="http://www.metricstream.com/appstudio/msa"';
        lv_program_name             VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UPDATE_HIERARCHY';


/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);

       iop_xml := LV_xml;
    
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_pid);
    EXCEPTION
        WHEN UPDATE_HIERARCHY_EXCEP THEN
            
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE_HIERARCHY_EXCEP Exception Raised ', ip_pid);       
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);         
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);          
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            ROLLBACK TO  MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            ROLLBACK TO MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
        LV_error_code NUMBER;
        LV_error_message VARCHAR2(1000);
        NEXT_ID_GEN_EXCEPTION EXCEPTION;
        lv_program_name VARCHAR2(100);
        ln_error_seq NUMBER:=1;

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'GET_NEXT_ID';

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_process_instance_id);


    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_process_instance_id);
    EXCEPTION
        WHEN NEXT_ID_GEN_EXCEPTION THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] NEXT_ID_GEN_EXCEPTION Exception Raised ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] WHEN OTHERS ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END GET_NEXT_ID;

/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY         CLOB,
            iop_log_no            IN     OUT                    NUMBER,
            op_error_code                OUT                    NUMBER,
            op_error_message             OUT                    VARCHAR2,
            iop_error_seq         IN     OUT                    NUMBER,
            ip_pid                IN                            NUMBER
            
        )
    AS

/* --------------------------------------------------------------------------
     ETL procedure created by the ETL Engine of APP BUILDER.
     The procedure takes care of loading the data that is sent
     by the FLOW BUILDER and store the same in MS TABLES.
     Data is already processed and stored accordingly in the iop_data
     object structure. The object can have one or more records.
     The ETL is designed to take care of one or more records.
     If the data has to be manipulated before populating the main
     MS TABLES, please use the HOOKS that are generated by the
     FLOW BUILDER.
   -------------------------------------------------------------------------- */
        LV_progress VARCHAR2(3) := NULL;
        LV_cntr_1   NUMBER      := NULL;
        LV_cntr_2   NUMBER      := NULL;
        LV_debug    BOOLEAN     := FALSE;
        LV_XML      XMLTYPE     := XMLTYPE(iop_xml_data);
        LV_err_code NUMBER      := NULL;
        LV_err_msg  VARCHAR2(4000);
        lV_program_name VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
              AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;

    BEGIN

/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------
    Note: Defining SAVEPOINT TO ROLLBACK transactions done by ETL.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        LV_progress := '001';
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'CALL_ETL';


/* --------------------------------------------------------------------------
    Note: Default DEBUG FLAG is set to FALSE to avoid unneccessary logging of data.
            If any issues found in ETL, to understand what goes into the ETL
            then set this variable to TRUE and run the ETL in the flow.
            It allows to log the entire relevant data set.
   -------------------------------------------------------------------------- */
        LV_debug := FALSE;

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);
        UPDATE_HIERARCHY
        (
           iop_log_no          =&gt; LV_log_no.APP_LOG_NO,
           iop_xml             =&gt; LV_XML,
           op_error_code       =&gt; LV_err_code,
           op_error_message    =&gt; LV_err_msg,
           iop_error_sequence  =&gt; iop_error_seq,
           ip_pid              =&gt; ip_pid
        );

        IF(LV_err_code !=0) THEN
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'W','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Failed while updating Hierarchy ', ip_pid);
        END IF;

        LV_cntr_1 := 0;

/* --------------------------------------------------------------------------
        Cursor to fetch non multirow details from XML
   -------------------------------------------------------------------------- */
        FOR iop_data in ( SELECT  INSTANCE_ID
                                 ,METRIC_ID
                                 ,TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_RUN_DATE
                                 ,TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
                                 ,LATEST_FLAG
                                 ,CREATED_BY
                                 ,TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE
                                 ,PROCESS_FLOW_STATUS
                                 ,PROCESS_INSTANCE_ID
                                 ,ELECTRONICALLY_SIGNED
                                 ,INSTANCE_REC_NUM
                                 ,CUSTOM_FIELD1
                                 ,CUSTOM_FIELD2
                                 ,CUSTOM_FIELD3
                                 ,CUSTOM_FIELD4
                                 ,CUSTOM_FIELD5
                                 ,DD_EVENT_USER_NAME
                                 ,DD_CURRENT_USER_NAME
                                 ,DD_OBJECT_TYPE
                                 ,DD_PROCESS_CODE
                                 ,EMAIL_SUBJECT
                                 ,FEED_BODY
                                 ,FEED_ID
                                 ,OBJECT_ID
                                 ,OBJECT_NAME
                                 ,ORG_ENTITY_ID
                          FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
                                       'msa:datapacket/msa:data/msa:nonmultirow'
                                       PASSING LV_XML
                                       COLUMNS
                                        INSTANCE_ID                      NUMBER          PATH  'msa:instance_id'
                                       ,METRIC_ID                        NUMBER          PATH  'msa:metric_id'
                                       ,METRIC_RUN_DATE                  VARCHAR2(40)    PATH  'msa:metric_run_date'
                                       ,METRIC_COMPLETED_DATE            VARCHAR2(40)    PATH  'msa:metric_completed_date'
                                       ,LATEST_FLAG                      VARCHAR2(1)     PATH  'msa:latest_flag'
                                       ,CREATED_BY                       NUMBER          PATH  'msa:created_by'
                                       ,CREATION_DATE                    VARCHAR2(40)    PATH  'msa:creation_date'
                                       ,PROCESS_FLOW_STATUS              NUMBER          PATH  'msa:process_flow_status'
                                       ,PROCESS_INSTANCE_ID              NUMBER          PATH  'msa:process_instance_id'
                                       ,ELECTRONICALLY_SIGNED            NUMBER          PATH  'msa:electronically_signed'
                                       ,INSTANCE_REC_NUM                 NUMBER          PATH  'msa:instance_rec_num'
                                       ,CUSTOM_FIELD1                    VARCHAR2(4000)  PATH  'msa:custom_field1'
                                       ,CUSTOM_FIELD2                    VARCHAR2(4000)  PATH  'msa:custom_field2'
                                       ,CUSTOM_FIELD3                    VARCHAR2(4000)  PATH  'msa:custom_field3'
                                       ,CUSTOM_FIELD4                    VARCHAR2(4000)  PATH  'msa:custom_field4'
                                       ,CUSTOM_FIELD5                    VARCHAR2(4000)  PATH  'msa:custom_field5'
                                       ,DD_EVENT_USER_NAME               VARCHAR2(4000)  PATH  'msa:dd_event_user_name'
                                       ,DD_CURRENT_USER_NAME             VARCHAR2(4000)  PATH  'msa:dd_current_user_name'
                                       ,DD_OBJECT_TYPE                   VARCHAR2(4000)  PATH  'msa:dd_object_type'
                                       ,DD_PROCESS_CODE                  VARCHAR2(4000)  PATH  'msa:dd_process_code'
                                       ,EMAIL_SUBJECT                    VARCHAR2(4000)  PATH  'msa:email_subject'
                                       ,FEED_BODY                        CLOB            PATH  'msa:feed_body_htm'
                                       ,FEED_ID                          VARCHAR2(4000)  PATH  'msa:feed_id'
                                       ,OBJECT_ID                        VARCHAR2(4000)  PATH  'msa:object_id'
                                       ,OBJECT_NAME                      VARCHAR2(4000)  PATH  'msa:object_name'
                                       ,ORG_ENTITY_ID                    VARCHAR2(4000)  PATH  'msa:org_entity_id'
                        ))
        LOOP
           LV_cntr_1 := LV_cntr_1 + 1;
           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Data Found in iop_data. ', ip_pid);
           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ')', ip_pid);

     /* --------------------------------------------------------------------------
           Loop through the data object to load the data into MS tables.
            Header info is being loaded into the system.
      -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
   -------------------------------------------------------------------------- */
           IF LV_debug THEN
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.OBJECT_NAME, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CUSTOM_FIELD4, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.FEED_BODY, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.EMAIL_SUBJECT, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.FEED_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.ORG_ENTITY_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CUSTOM_FIELD5, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CUSTOM_FIELD1, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CUSTOM_FIELD3, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CUSTOM_FIELD2, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.OBJECT_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_OBJECT_TYPE, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_PROCESS_CODE, ip_pid);

           END IF;

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);

           MERGE
            INTO MS_RGA_EMAIL_CONTENT T 
           USING 
               (
                   SELECT 
                          iop_data.OBJECT_NAME                                        AS OBJECT_NAME
                        , iop_data.CUSTOM_FIELD4                                      AS CUSTOM_FIELD4
                        , iop_data.FEED_BODY                                          AS FEED_BODY
                        , iop_data.EMAIL_SUBJECT                                      AS EMAIL_SUBJECT
                        , iop_data.FEED_ID                                            AS FEED_ID
                        , iop_data.ORG_ENTITY_ID                                      AS ORG_ENTITY_ID
                        , iop_data.CUSTOM_FIELD5                                      AS CUSTOM_FIELD5
                        , iop_data.CUSTOM_FIELD1                                      AS CUSTOM_FIELD1
                        , iop_data.CUSTOM_FIELD3                                      AS CUSTOM_FIELD3
                        , iop_data.CUSTOM_FIELD2                                      AS CUSTOM_FIELD2
                        , iop_data.OBJECT_ID                                          AS OBJECT_ID
                        , iop_data.DD_OBJECT_TYPE                                     AS DD_OBJECT_TYPE
                        , iop_data.DD_EVENT_USER_NAME                                 AS DD_CREATED_BY
                        , iop_data.DD_CURRENT_USER_NAME                               AS DD_MODIFIED_BY
                        , iop_data.PROCESS_INSTANCE_ID                                AS DD_PROCESS_INSTANCE_ID
                        , iop_data.INSTANCE_ID                                        AS DD_INSTANCE_ID
                        , iop_data.DD_PROCESS_CODE                                    AS DD_PROCESS_CODE
                     FROM DUAL
               ) V
              ON
               (
                            T.OBJECT_ID                              = V.OBJECT_ID
               )
            WHEN
               MATCHED THEN
                   UPDATE SET  DD_STATUS_FLAG                         = 'Y'
                           , T.OBJECT_NAME                            = V.OBJECT_NAME
                           , T.CUSTOM_FIELD4                          = V.CUSTOM_FIELD4
                           , T.FEED_BODY                              = V.FEED_BODY
                           , T.EMAIL_SUBJECT                          = V.EMAIL_SUBJECT
                           , T.FEED_ID                                = V.FEED_ID
                           , T.ORG_ENTITY_ID                          = V.ORG_ENTITY_ID
                           , T.CUSTOM_FIELD5                          = V.CUSTOM_FIELD5
                           , T.CUSTOM_FIELD1                          = V.CUSTOM_FIELD1
                           , T.CUSTOM_FIELD3                          = V.CUSTOM_FIELD3
                           , T.CUSTOM_FIELD2                          = V.CUSTOM_FIELD2
                           , T.DD_OBJECT_TYPE                         = V.DD_OBJECT_TYPE
                           , T.DD_MODIFIED_BY                         = V.DD_MODIFIED_BY
                           , T.DD_MODIFIED_ON                         = SYSDATE
                           , T.DD_PROCESS_INSTANCE_ID                 = V.DD_PROCESS_INSTANCE_ID
                           , T.DD_INSTANCE_ID                         = V.DD_INSTANCE_ID
                           , T.DD_PROCESS_CODE                        = V.DD_PROCESS_CODE
            WHEN
               NOT MATCHED THEN
                   INSERT
                       (DD_STATUS_FLAG
                      , T.OBJECT_NAME
                      , T.CUSTOM_FIELD4
                      , T.FEED_BODY
                      , T.EMAIL_SUBJECT
                      , T.FEED_ID
                      , T.ORG_ENTITY_ID
                      , T.CUSTOM_FIELD5
                      , T.CUSTOM_FIELD1
                      , T.CUSTOM_FIELD3
                      , T.CUSTOM_FIELD2
                      , T.OBJECT_ID
                      , T.DD_OBJECT_TYPE
                      , T.DD_CREATED_BY
                      , T.DD_CREATED_ON
                      , T.DD_PROCESS_INSTANCE_ID
                      , T.DD_INSTANCE_ID
                      , T.DD_PROCESS_CODE
                       )
                   VALUES 
                       ('Y'
                      , V.OBJECT_NAME
                      , V.CUSTOM_FIELD4
                      , V.FEED_BODY
                      , V.EMAIL_SUBJECT
                      , V.FEED_ID
                      , V.ORG_ENTITY_ID
                      , V.CUSTOM_FIELD5
                      , V.CUSTOM_FIELD1
                      , V.CUSTOM_FIELD3
                      , V.CUSTOM_FIELD2
                      , V.OBJECT_ID
                      , V.DD_OBJECT_TYPE
                      , V.DD_CREATED_BY
                            , SYSDATE
                      , V.DD_PROCESS_INSTANCE_ID
                      , V.DD_INSTANCE_ID
                      , V.DD_PROCESS_CODE
                       );

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);

        END LOOP;

        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ETL END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] END ', ip_pid);
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END CALL_ETL;

END MS_RGA_EMAIL_CONTENT_P; </TEXT_BODY>
</PACKAGE_SPEC>
