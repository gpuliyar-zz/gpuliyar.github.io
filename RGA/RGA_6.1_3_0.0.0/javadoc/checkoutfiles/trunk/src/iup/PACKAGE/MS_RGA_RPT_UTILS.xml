<?xml version="1.0" encoding="UTF-8"?><PACKAGE_SPEC xmlns="http://www.metricstream.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.metricstream.com ms_application_schema.xsd">
<!--$Revision: 1.30.2.12.2.2.2.9.2.8 $-->
<!--$Author: prao $-->
<PLATFORM_DETAILS>
<PLATFORM_VERSION>6.1</PLATFORM_VERSION>
<BUILD_VERSION>4.2.2.0</BUILD_VERSION>
</PLATFORM_DETAILS>
<STORED_PROCEDURE_NAME>MS_RGA_RPT_UTILS</STORED_PROCEDURE_NAME>
<OBJECT_ID>MS_RGA_RPT_UTILS</OBJECT_ID>
<OBJECT_TYPE>PACKAGE</OBJECT_TYPE>
<TEXT>package MS_RGA_RPT_UTILS as
/**
* ======================================================================&lt;br/&gt;
* Project: GRC Intelligence&lt;br/&gt;
* Description: This package contains function to build report URL &lt;br/&gt;
* DB impact: NO&lt;br/&gt;
* Commit inside: NO&lt;br/&gt;
* Rollback inside: NO&lt;br/&gt;
* ----------------------------------------------------------------------&lt;br/&gt;
* * ======================================================================&lt;br/&gt;
* @headcom
* */
--
/**
* Builds the report url. &lt;br/&gt;
* @param p_Report_Code Report code
* @param p_Report_Name Report name
* @param p_Field_Code field code
* @param p_Call_Source Call source
* @param p_Display_Value Display value
* @param p_Paramvalue1 Paramvalue1
* @param p_paramvalue2 Paramvalue2
* @param p_login user name
* @throws OTHERS , returns null , incase of unsuccessful termination
* @return  &lt;b&gt;complete url to build the report&lt;/b&gt; &lt;br/&gt;
*          &lt;b&gt;null , incase of unsuccessful termination&lt;/b&gt; &lt;br/&gt;
*/ 
  function build_report_url(p_Report_Code   In Varchar2,
                            p_Report_Name   In Varchar2,
                            p_Field_Code    In Varchar2 Default Null,
                            p_Call_Source   In Varchar2 Default Null,
                            p_Display_Value In Varchar2,
                            p_Paramvalue1   In Varchar2 Default Null,
                            p_paramvalue2   in varchar2 default null,
                            p_login         in Varchar2) Return Varchar2;

end MS_RGA_RPT_UTILS; </TEXT>
<TEXT_BODY>Package body MS_RGA_RPT_UTILS is

  function build_report_url(p_Report_Code   In Varchar2,
                            p_Report_Name   In Varchar2,
                            p_Field_Code    In Varchar2 Default Null,
                            p_Call_Source   In Varchar2 Default Null,
                            p_Display_Value In Varchar2,
                            p_Paramvalue1   In Varchar2 Default Null,
                            p_paramvalue2   in varchar2 default null,
                            p_login         in Varchar2) Return Varchar2 Is
    l_Report_Id          Number;
    l_Metric_Id          Number;
    l_Loop_Variant       Number := 0;
    l_Url                Varchar2(4000);
    l_Url_Delimiter      Varchar2(4000);
    l_Url_Suffix         Varchar2(1000);
    l_Url_Prefix         Varchar2(1000);
    l_Param_Url          Varchar2(1000);
    l_Static_Url         Varchar2(1000);
    l_Param_Name_Prefix  Varchar2(20);
    l_Param_Name_Suffix  Varchar2(20);
    l_Param_Value_Prefix Varchar2(20);
    l_Param_Value_Suffix Varchar2(20);
    l_Filter_Prefix      Varchar2(20);
    l_Filter_Suffix      Varchar2(20);
    l_style              varchar2(1000);
    l_Param_Value_1      Varchar2(4000);
    l_param_value_2      varchar2(4000);
    l_param_value_3      varchar2(100);
    l_Param_Value_4      varchar2(100);
    l_Param_Value_5      Varchar2(20000);
    l_Param_Value_6      varchar2(100);
    l_field_code         Varchar2(1000) := NUll;

    Type Typarameters Is Record(
      Param_Name  Varchar2(1000),
      Param_Value Varchar2(1000));

    Type Tyfilters Is Record(
      Report_Id    Number,
      Filter_Id    Number,
      Filter_Name  Varchar2(1000),
      Filter_Value Varchar2(1000));

    Type Tyinfoletparameters Is Table Of Typarameters;

    l_Infolet_Parameters Tyinfoletparameters;

    Type Tyrepfilters Is Table Of Tyfilters;

    l_Rep_Filters Tyrepfilters;
  BEGIN

    Select Report_Id, Metric_Id
      Into l_Report_Id, l_Metric_Id
      FROM (Select Report_Id,
                   Metric_Id,
                   Row_Number() over(ORDER BY myrow) AS RIndex

              FROM (Select t.Report_Id, Metric_Id, '1' AS myrow
                      From Si_Reports_t t, si_user_reports ut
                     Where Report_Name = p_Report_Name
                       AND t.report_id = ut.report_id
                       AND t.CREATED_BY = (SELECT us.user_id
                                             FROM si_users_t us
                                            WHERE user_name =  p_login
                                           )
                       And Rownum = 1
                    UNION ALL
                    Select t.Report_Id, Metric_Id, '2' AS myrow

                      From Si_Reports_t t

                     Where Report_Name = p_Report_Name
                       And Source_Report_Id Is Null
                       And Rownum = 1))
     WHERE RIndex = 1;

    l_Param_Value_1 := Replace(p_Paramvalue1, ' ', '+');
    l_Param_Value_2 := Replace(p_Paramvalue2, ' ', '+');

    /*dbms_output.put_line('-------------------------');
    dbms_output.put_line('report_code'||p_report_code);
    dBms_output.put_line('report_name'||p_report_name);
    dbms_output.put_line('field_code'||p_field_code);
    dbms_output.put_line('call_source'||p_call_source);
    dbms_output.put_line('display_value'||p_display_value);
    dbms_output.put_line('PARAMVALUE1'||p_paramvalue1);
    dbms_output.put_line('PARAMVALUE2'||p_paramvalue2);
    dbms_output.put_line('-------------------------');*/
    --dbms_output.put_line('report_id'||l_report_id||'metric_id'||l_metric_id);

    -- Initializing variables which form URL definition.
    l_style := '"color: #0000CC"';
    --
  l_Url_Prefix         := '&lt;a href= Reportsstart' || Chr(63) ||
              'REPORT_ID=' || l_Report_Id || '&amp;METRIC_ID=' ||
              l_Metric_Id || '&amp;PARAMETERS_FOR_REQ=';
  l_Static_Url         := '&lt;a style=' || l_Style ||
              '; href= Reportsstart' || Chr(63) ||
              'REPORT_ID=' || l_Report_Id || '&amp;METRIC_ID=' ||
              l_metric_id;

    --

    l_Url_Delimiter      := '&amp;OUTPUT_WINDOW=IFRAME&amp;wrapper=no TARGET=_BLANK resizable=yes,status=yes,scrollbars=yes&gt;';
    l_Url_Suffix         := '&lt;/a&gt;';
    l_Param_Name_Prefix  := '%26pName_';
    l_Param_Name_Suffix  := '%3D';
    l_Param_Value_Prefix := '%26pValue_';
    l_Param_Value_Suffix := '%3D';
    l_Filter_Prefix      := '%26filtId_';
    l_Filter_Suffix      := '%3D';

    If (p_Report_Code Is Not Null) Then
      Select Parameter_Name As Param_Name, Null As Param_Value Bulk Collect
        Into l_Infolet_Parameters
        From Si_Parameters
       Where Metric_Id = l_Metric_Id
         AND nvl(source_metric_id, '-1E22') != -4;

      Select Report_Id,
             Srf.Filter_Id As Filter_Id,
             Parameter_Name As Filter_Name,
             Null As Filter_Value Bulk Collect
        Into l_Rep_Filters
        From Si_Filter_Parameters Sfp, Si_Report_Filters Srf
       Where Sfp.Filter_Id = Srf.Filter_Id
         And Report_Id = l_Report_Id
         And Metric_Id = l_Metric_Id;

      If (l_Infolet_Parameters.Count &gt; 0) Then
        For x In 1 .. l_Infolet_Parameters.Count Loop
          l_Loop_Variant := x;



          If x &gt; 1 Then
            l_Param_Url := l_Param_Url || l_Param_Name_Prefix ||
                           (l_Loop_Variant - 1) || l_Param_Name_Suffix ||
                           Replace(l_Infolet_Parameters(x).Param_Name,
                                   ' ',
                                   '+') || l_Param_Value_Prefix ||
                           (l_Loop_Variant - 1) || l_Param_Value_Suffix ||
                           l_Infolet_Parameters(x)
                          .Param_Value || l_Filter_Prefix ||
                           (l_Loop_Variant - 1) || l_Filter_Suffix || 0;
          Elsif x = 1 Then
            l_Param_Url := l_Param_Name_Prefix || (l_Loop_Variant - 1) ||
                           l_Param_Name_Suffix ||
                           Replace(l_Infolet_Parameters(x).Param_Name,
                                   ' ',
                                   '+') || l_Param_Value_Prefix ||
                           (l_Loop_Variant - 1) || l_Param_Value_Suffix ||
                           l_Infolet_Parameters(x)
                          .Param_Value || l_Filter_Prefix ||
                           (l_Loop_Variant - 1) || l_Filter_Suffix || 0;
          End If;
        End Loop;
      End If;

      If (l_Rep_Filters.Count &gt; 0) Then
        For x In 1 .. l_Rep_Filters.Count Loop
          --dbms_output.put_line(l_rep_filters (x).Filter_name);
          l_Loop_Variant := l_Loop_Variant + 1;

          If p_Report_Code in ('GRCI') then

            l_Param_Value_1 := Replace(p_Paramvalue1, ' ', '+');

            If l_Rep_Filters(x).Filter_Name = 'Channel Name'  Then
              l_rep_filters(x).filter_value := replace(l_param_value_1,'&amp;','%26');
            ElsIf l_Rep_Filters(x).Filter_Name = 'Issue Status' then

                l_rep_filters(x).filter_value :=  l_param_value_2 ;
            else
              l_rep_filters(x).filter_value := null;
            End If;
          End If;

          If x &gt; 1 Then
            l_Url := l_Url || l_Param_Name_Prefix || (l_Loop_Variant - 1) ||
                     l_Param_Name_Suffix ||
                     Replace(l_Rep_Filters(x).Filter_Name, ' ', '+') ||
                     l_Param_Value_Prefix || (l_Loop_Variant - 1) ||
                     l_Param_Value_Suffix || l_Rep_Filters(x)
                    .Filter_Value || l_Filter_Prefix ||
                     (l_Loop_Variant - 1) || l_Filter_Suffix ||
                     l_Rep_Filters(x).Filter_Id;
          Elsif x = 1 Then
            l_Url := l_Param_Name_Prefix || (l_Loop_Variant - 1) ||
                     l_Param_Name_Suffix ||
                     Replace(l_Rep_Filters(x).Filter_Name, ' ', '+') ||
                     l_Param_Value_Prefix || (l_Loop_Variant - 1) ||
                     l_Param_Value_Suffix || l_Rep_Filters(x)
                    .Filter_Value || l_Filter_Prefix ||
                     (l_Loop_Variant - 1) || l_Filter_Suffix ||
                     l_Rep_Filters(x).Filter_Id;
          End If;
        End Loop;
      End If;
--
      If (l_Infolet_Parameters.Count &gt; 0 And l_Rep_Filters.Count &gt; 0) Then
        l_Url := l_Url_Prefix || l_Param_Url || l_Url || l_Url_Delimiter ||
                 p_Display_Value || l_Url_Suffix;
      Elsif (l_Infolet_Parameters.Count = 0 And l_Rep_Filters.Count &gt; 0) Then
        l_Url := l_Url_Prefix || l_Url || l_Url_Delimiter ||
                 p_Display_Value || l_Url_Suffix;
      Elsif (l_Infolet_Parameters.Count &gt; 0 And l_Rep_Filters.Count = 0) Then
        l_Url := l_Url_Prefix || l_Param_Url || l_Url_Delimiter ||
                 p_Display_Value || l_Url_Suffix;
      Elsif (l_Infolet_Parameters.Count = 0 And l_Rep_Filters.Count = 0) Then
        l_Url := l_Static_Url || l_Filter_Prefix || 0 || l_Filter_Suffix ||
                 l_Url_Delimiter || p_Display_Value || l_Url_Suffix;
      End If;
    Else
      l_Url := l_Static_Url || l_Filter_Prefix || 0 || l_Filter_Suffix ||
               l_Url_Delimiter || p_Display_Value || l_Url_Suffix;
    End If;

    DBMS_OUTPUT.put_line(l_Url);
    
    Return l_Url;

  Exception
    When Others Then
      /* Dbms_Output.Put_Line('Failed to get report URL for Report ' ||
      p_Report_Name || '~' || Sqlerrm);*/
      Return Null;
  end build_report_url;

end MS_RGA_RPT_UTILS; </TEXT_BODY>
</PACKAGE_SPEC>
