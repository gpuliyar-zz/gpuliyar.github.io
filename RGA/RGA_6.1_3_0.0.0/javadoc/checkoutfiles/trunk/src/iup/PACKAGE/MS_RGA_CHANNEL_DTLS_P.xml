<?xml version="1.0" encoding="UTF-8"?><PACKAGE_SPEC xmlns="http://www.metricstream.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.metricstream.com ms_application_schema.xsd">
<PLATFORM_DETAILS>
<PLATFORM_VERSION>6.1</PLATFORM_VERSION>
<BUILD_VERSION>5.4.2.0</BUILD_VERSION>
</PLATFORM_DETAILS>
<STORED_PROCEDURE_NAME><![CDATA[MS_RGA_CHANNEL_DTLS_P]]></STORED_PROCEDURE_NAME>
<OBJECT_ID><![CDATA[MS_RGA_CHANNEL_DTLS_P]]></OBJECT_ID>
<OBJECT_TYPE><![CDATA[PACKAGE]]></OBJECT_TYPE>
<TEXT><![CDATA[PACKAGE MS_RGA_CHANNEL_DTLS_P IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name  : MS_RGA_CHANNEL_DTLS_P
    Creation Time : Mon Apr 20 11:29:17 IST 2015
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_RGA_CHANNEL_DTLS_P' ;
    GV_program_name VARCHAR2(100);
   
   
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id  IN                      NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id         IN                      VARCHAR2,
            iop_log_no              IN   OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY     CLOB,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2,
            iop_error_seq         IN     OUT                NUMBER,
            ip_pid                IN                        NUMBER
        );
   


END MS_RGA_CHANNEL_DTLS_P ;
 ]]></TEXT>
<TEXT_BODY><![CDATA[PACKAGE BODY MS_RGA_CHANNEL_DTLS_P IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Body.
    Author : Data Designer ETL Engine
   -------------------------------------------------------------------------- */
   
   
/* --------------------------------------------------------------------------------
    GENERATE_UPDATE_HIERARCHY : Procedure to get the update the xml data hierarchy
   ------------------------------------------------------------------------------ */

    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        );
        
    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        )
    AS
        LV_error_code               NUMBER;
        LV_error_message            VARCHAR2(1000);
        UPDATE_HIERARCHY_EXCEP      EXCEPTION;
        LV_xml                      XMLTYPE := iop_xml;
		LV_namespace                varchar2(100) := 'xmlns="http://www.metricstream.com/appstudio/msa"';
        lv_program_name             VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UPDATE_HIERARCHY';


/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
      
    	           	    SELECT DELETEXML(LV_XML,'datapacket/data/src/row/src_object_id',LV_namespace) INTO LV_XML FROM DUAL;
	              	    SELECT DELETEXML(LV_XML,'datapacket/data/src/row/src_notify_users_successful',LV_namespace) INTO LV_XML FROM DUAL;
	           
	FOR rec in (SELECT DISTINCT 
        	    	  	 object_id
        	    	  	 ,  notify_users_successful
        FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
      'msa:datapacket/msa:data/msa:nonmultirow'       PASSING LV_xml
    COLUMNS
            	 object_id  VARCHAR2(4000)    PATH  'msa:object_id'
        	, notify_users_successful  VARCHAR2(4000)    PATH  'msa:notify_users_successful'
       ))
   
   LOOP
               	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/src/row','src_object_id',XMLTYPE('<src_object_id ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.object_id||'</src_object_id>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	           	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/src/row','src_notify_users_successful',XMLTYPE('<src_notify_users_successful ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.notify_users_successful||'</src_notify_users_successful>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	    END LOOP;
	iop_xml := LV_xml;
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_pid);
    EXCEPTION
        WHEN UPDATE_HIERARCHY_EXCEP THEN

            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE_HIERARCHY_EXCEP Exception Raised ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO  MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
			MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UPDATE_HIERARCHY;
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
        LV_error_code NUMBER;
        LV_error_message VARCHAR2(1000);
        NEXT_ID_GEN_EXCEPTION EXCEPTION;
        lv_program_name VARCHAR2(100);
        ln_error_seq NUMBER:=1;

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'GET_NEXT_ID';

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;

    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_process_instance_id);
      
             
 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_process_instance_id);
    EXCEPTION
        WHEN NEXT_ID_GEN_EXCEPTION THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] NEXT_ID_GEN_EXCEPTION Exception Raised ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] WHEN OTHERS ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END GET_NEXT_ID;
	 

  	    	   	    	 
  	    	 
  	    	              
/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY         CLOB,
            iop_log_no            IN     OUT                    NUMBER,
            op_error_code                OUT                    NUMBER,
            op_error_message             OUT                    VARCHAR2,
            iop_error_seq         IN     OUT                    NUMBER,
            ip_pid                IN                            NUMBER

        )
    AS

/* --------------------------------------------------------------------------
     ETL procedure created by the ETL Engine of APP BUILDER.
     The procedure takes care of loading the data that is sent
     by the FLOW BUILDER and store the same in MS TABLES.
     Data is already processed and stored accordingly in the iop_data
     object structure. The object can have one or more records.
     The ETL is designed to take care of one or more records.
     If the data has to be manipulated before populating the main
     MS TABLES, please use the HOOKS that are generated by the
     FLOW BUILDER.
   -------------------------------------------------------------------------- */
        LV_progress VARCHAR2(3) := NULL;
        LV_cntr_1   NUMBER      := NULL;
        LV_cntr_2   NUMBER      := NULL;
        LV_debug    BOOLEAN     := FALSE;
        LV_XML      XMLTYPE     := XMLTYPE(iop_xml_data);
        LV_err_code NUMBER      := NULL;
        LV_err_msg  VARCHAR2(4000);
        lV_program_name VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
              AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
      
    /************* Add the cursors for all the regions ******************/
      
        				
		CURSOR CU_RGA_CHANNEL_DTLS_SRC is (SELECT 
				   	   			   	    	  SRC_OBJECT_ID
		   	   		   			   	   			   	    	,  EMAIL_SEC
		   	   		   			   	   			   	    	,  CHANNEL_USERNAME
		   	   		   			   	   			   	    	,  EMAIL_FROM
		   	   		   			   	   			   	    	,  CHANNEL_PASSWORD
		   	   		   			   	   			   	    	,  CHANNEL_KEYWORDS
		   	   		   			   	   			   	    	,  EMAIL_TYPE
		   	   		   			   	   			   	    	,  SERVER_ADDRESS
		   	   		   			   	   			   	    	,  SOURCE_TYPE
		   	   		   			   	   			   	    	,  SRC_PK
		   	   		   			   	   			   	    	,  SOURCE_SEQ_ID
		   	   		   			   	   			   	    	,  CUSTOM_FIELD6
		   	   		   			   	   			   	    	,  CUSTOM_FIELD7
		   	   		   			   	   			   	   		,  TO_DATE(CUSTOM_FIELD8 ,'MM/dd/yyyy HH24:mi:ss') AS CUSTOM_FIELD8
		   	   		   			   	   			   	    	,  CUSTOM_FIELD9
		   	   		   			   	   			   	    	,  CUSTOM_FIELD10
		   	   		   			   	   			   	    	,  CHANNEL_PASSWORD_ENCR
		   	   		   			   	   			   	    	,  SRC_CREATED_BY
		   	   		   			   	   			   	   		,  TO_DATE(SRC_CREATED_ON ,'MM/dd/yyyy HH24:mi:ss') AS SRC_CREATED_ON
		   	   		   			   	   			   	    	,  SRC_MODIFIED_BY
		   	   		   			   	   			   	   		,  TO_DATE(SRC_MODIFIED_ON ,'MM/dd/yyyy HH24:mi:ss') AS SRC_MODIFIED_ON
		   	   		   			   	   			   	    	,  ACTIVATION_CODE
		   	   		   			   	   			   	    	,  CONTENT_TYPE
		   	   		   			   	   			   	    	,  DELIVERY_SCHEDULE
		   	   		   			   	   			   	    	,  EXPIRY_DATE
		   	   		   			   	   			   	    	,  SUBSCRIPTION_STATUS
		   	   		   			   	   			   	    	,  CONTENT_CATEGORY
		   	   		   			   	   			   	    	,  DELIVERY_FORMAT
		   	   		   			   	   			   	    	,  QUEUE_NAME
		   	   		   			   	   			   	    	,  QUEUE_URL
		   	   		   			   	   			   	    	,  FLAG_SUBMITTED
		   	   		   	 		FROM XMLTABLE(XMLNAMESPACES( 'http://www.metricstream.com/appstudio/msa'  as "msa"),'msa:datapacket/msa:data/msa:src/msa:row'
		PASSING LV_xml
		COLUMNS
	    	    	   			  SRC_OBJECT_ID  VARCHAR2(4000)   PATH 'msa:src_object_id' 	    	   			,  EMAIL_SEC  VARCHAR2(4000)   PATH 'msa:email_sec' 	    	   			,  CHANNEL_USERNAME  VARCHAR2(4000)   PATH 'msa:channel_username' 	    	   			,  EMAIL_FROM  VARCHAR2(4000)   PATH 'msa:email_from' 	    	   			,  CHANNEL_PASSWORD  VARCHAR2(4000)   PATH 'msa:channel_password' 	    	   			,  CHANNEL_KEYWORDS  VARCHAR2(4000)   PATH 'msa:channel_keywords' 	    	   			,  EMAIL_TYPE  VARCHAR2(4000)   PATH 'msa:email_type' 	    	   			,  SERVER_ADDRESS  VARCHAR2(4000)   PATH 'msa:server_address' 	    	   			,  SOURCE_TYPE  VARCHAR2(4000)   PATH 'msa:source_type' 	    	   			,  SRC_PK  VARCHAR2(4000)   PATH 'msa:src_pk' 	    	   			,  SOURCE_SEQ_ID  VARCHAR2(4000)   PATH 'msa:source_seq_id' 	    	   			,  CUSTOM_FIELD6  VARCHAR2(4000)   PATH 'msa:custom_field6' 	    	   			,  CUSTOM_FIELD7  VARCHAR2(4000)   PATH 'msa:custom_field7' 	    	   			,  CUSTOM_FIELD8  VARCHAR2(40)   PATH 'msa:custom_field8' 	    	   			,  CUSTOM_FIELD9  NUMBER   PATH 'msa:custom_field9' 	    	   			,  CUSTOM_FIELD10  NUMBER   PATH 'msa:custom_field10' 	    	   			,  CHANNEL_PASSWORD_ENCR  VARCHAR2(4000)   PATH 'msa:channel_password_encr' 	    	   			,  SRC_CREATED_BY  VARCHAR2(4000)   PATH 'msa:src_created_by' 	    	   			,  SRC_CREATED_ON  VARCHAR2(40)   PATH 'msa:src_created_on' 	    	   			,  SRC_MODIFIED_BY  VARCHAR2(4000)   PATH 'msa:src_modified_by' 	    	   			,  SRC_MODIFIED_ON  VARCHAR2(40)   PATH 'msa:src_modified_on' 	    	   			,  ACTIVATION_CODE  VARCHAR2(4000)   PATH 'msa:activation_code' 	    	   			,  CONTENT_TYPE  VARCHAR2(4000)   PATH 'msa:content_type' 	    	   			,  DELIVERY_SCHEDULE  VARCHAR2(4000)   PATH 'msa:delivery_schedule' 	    	   			,  EXPIRY_DATE  VARCHAR2(4000)   PATH 'msa:expiry_date' 	    	   			,  SUBSCRIPTION_STATUS  VARCHAR2(4000)   PATH 'msa:subscription_status' 	    	   			,  CONTENT_CATEGORY  VARCHAR2(4000)   PATH 'msa:content_category' 	    	   			,  DELIVERY_FORMAT  VARCHAR2(4000)   PATH 'msa:delivery_format' 	    	   			,  QUEUE_NAME  VARCHAR2(4000)   PATH 'msa:queue_name' 	    	   			,  QUEUE_URL  VARCHAR2(4000)   PATH 'msa:queue_url' 	    	   			,  FLAG_SUBMITTED  VARCHAR2(4000)   PATH 'msa:flag_submitted' 	    			));	  
		TYPE LT_RGA_CHANNEL_DTLS_SRC IS TABLE OF CU_RGA_CHANNEL_DTLS_SRC%ROWTYPE;
		TY_RGA_CHANNEL_DTLS_SRC  LT_RGA_CHANNEL_DTLS_SRC; 
		
		        
   /************* End of cursors for all the regions ******************/
    
   /************ Add the cursors for all object relationships *****************************/
    	  		      BEGIN

/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------
    Note: Defining SAVEPOINT TO ROLLBACK transactions done by ETL.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        LV_progress := '001';
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'CALL_ETL';


/* --------------------------------------------------------------------------
    Note: Default DEBUG FLAG is set to FALSE to avoid unneccessary logging of data.
            If any issues found in ETL, to understand what goes into the ETL
            then set this variable to TRUE and run the ETL in the flow.
            It allows to log the entire relevant data set.
   -------------------------------------------------------------------------- */
        LV_debug := FALSE;

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);
        
        UPDATE_HIERARCHY
        (
           iop_log_no          => LV_log_no.APP_LOG_NO,
           iop_xml             => LV_XML,
           op_error_code       => LV_err_code,
           op_error_message    => LV_err_msg,
           iop_error_sequence  => iop_error_seq,
           ip_pid              => ip_pid
        );

        IF(LV_err_code !=0) THEN
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'W','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Failed while updating Hierarchy ', ip_pid);
        END IF;
        
        /* capture all cursors here */
					       OPEN CU_RGA_CHANNEL_DTLS_SRC;
	       FETCH CU_RGA_CHANNEL_DTLS_SRC BULK COLLECT INTO TY_RGA_CHANNEL_DTLS_SRC;
	       CLOSE CU_RGA_CHANNEL_DTLS_SRC; 
	    		
		
        LV_cntr_1 := 0;
      
/* --------------------------------------------------------------------------
        Cursor to fetch non multirow details from XML
   -------------------------------------------------------------------------- */
		        FOR iop_data in ( SELECT  INSTANCE_ID
                                 ,METRIC_ID
                                 ,TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_RUN_DATE
                                 ,TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
                                 ,LATEST_FLAG
                                 ,CREATED_BY
                                 ,TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE
                                 ,PROCESS_FLOW_STATUS
                                 ,PROCESS_INSTANCE_ID
                                 ,ELECTRONICALLY_SIGNED
	                             ,INSTANCE_REC_NUM
											 					   	  , HDN_CHNL_ID_CNT
					    											 					   	  , ST_NOTIFY_USERS
					    											 						  	, TO_DATE( CHANNEL_CREATED_ON,'MM/dd/yyyy HH24:mi:ss') AS CHANNEL_CREATED_ON
						   											 					   	  , ST_CON_INFOLET
					    											 					   	  , HDN_CIDCNTFRMSUBSREQ
					    											 					   	  , CHANNEL_CREATED_BY
					    											 						  	, TO_DATE( EFFECTIVE_START_DATE,'MM/dd/yyyy HH24:mi:ss') AS EFFECTIVE_START_DATE
						   											 					   	  , CHANNEL_TYPE
					    											 					   	  , CHANNEL_STATUS
					    											 					   	  , CHANNEL_NAME
					    											 					   	  , EFFECTIVE_END_DATE
					    											 					   	  , CHANNEL_ID
					    											 					   	  , CUSTOM_FIELD1
					    											 					   	  , CUSTOM_FIELD2
					    											 					   	  , CUSTOM_FIELD3
					    											 					   	  , CUSTOM_FIELD4
					    											 						  	, TO_DATE( CUSTOM_FIELD5,'MM/dd/yyyy HH24:mi:ss') AS CUSTOM_FIELD5
						   											 					   	  , OBJECT_ID
					    											 					   	  , OBJECT_NAME
					    											 					   	  , STRUCT_CONT_HAND_INFOLET
					    											 					   	  , SAVE_ATTACHMENTS
					    											 					   	  , NOTIFY_USERS_UNSUCCESSFUL
					    											 					   	  , NOTIFY_USERS_SUCCESSFUL
					    											 					   	  , DD_EVENT_USER_NAME
					    											 					   	  , DD_CURRENT_USER_NAME
					    											 					   	  , DD_OBJECT_TYPE
					    											 					   	  , DD_PROCESS_CODE
					    										FROM XMLTABLE(XMLNAMESPACES(  'http://www.metricstream.com/appstudio/msa'  as "msa"),
                                'msa:datapacket/msa:data/msa:nonmultirow' 
                               PASSING LV_XML
                               COLUMNS
                                INSTANCE_ID                      NUMBER          PATH  'msa:instance_id'
                               ,METRIC_ID                        NUMBER          PATH  'msa:metric_id'
                               ,METRIC_RUN_DATE                  VARCHAR2(40)    PATH  'msa:metric_run_date'
                               ,METRIC_COMPLETED_DATE            VARCHAR2(40)    PATH  'msa:metric_completed_date'
                               ,LATEST_FLAG                      VARCHAR2(1)     PATH  'msa:latest_flag'
                               ,CREATED_BY                       NUMBER          PATH  'msa:created_by'
                               ,CREATION_DATE                    VARCHAR2(40)    PATH  'msa:creation_date'
                               ,PROCESS_FLOW_STATUS              NUMBER          PATH  'msa:process_flow_status'
                               ,PROCESS_INSTANCE_ID              NUMBER          PATH  'msa:process_instance_id'
                               ,ELECTRONICALLY_SIGNED            NUMBER          PATH  'msa:electronically_signed'
                               ,INSTANCE_REC_NUM                 NUMBER          PATH  'msa:instance_rec_num'    
														, HDN_CHNL_ID_CNT  VARCHAR2(4000)	 PATH   'msa:hdn_chnl_id_cnt' 
																						, ST_NOTIFY_USERS  VARCHAR2(4000)	 PATH   'msa:st_notify_users' 
																						, CHANNEL_CREATED_ON  VARCHAR2(40) 	 PATH	'msa:channel_created_on'
																						, ST_CON_INFOLET  VARCHAR2(4000)	 PATH   'msa:st_con_infolet' 
																						, HDN_CIDCNTFRMSUBSREQ  VARCHAR2(4000)	 PATH   'msa:hdn_cidcntfrmsubsreq' 
																						, CHANNEL_CREATED_BY  VARCHAR2(4000)	 PATH   'msa:channel_created_by' 
																						, EFFECTIVE_START_DATE  VARCHAR2(40) 	 PATH	'msa:effective_start_date'
																						, CHANNEL_TYPE  VARCHAR2(4000)	 PATH   'msa:channel_type' 
																						, CHANNEL_STATUS  VARCHAR2(4000)	 PATH   'msa:channel_status' 
																						, CHANNEL_NAME  VARCHAR2(4000)	 PATH   'msa:channel_name' 
																						, EFFECTIVE_END_DATE  VARCHAR2(4000)	 PATH   'msa:effective_end_date' 
																						, CHANNEL_ID  VARCHAR2(4000)	 PATH   'msa:channel_id' 
																						, CUSTOM_FIELD1  VARCHAR2(4000)	 PATH   'msa:custom_field1' 
																						, CUSTOM_FIELD2  VARCHAR2(4000)	 PATH   'msa:custom_field2' 
																						, CUSTOM_FIELD3  NUMBER 	PATH   'msa:custom_field3' 
																						, CUSTOM_FIELD4  NUMBER 	PATH   'msa:custom_field4' 
																						, CUSTOM_FIELD5  VARCHAR2(40) 	 PATH	'msa:custom_field5'
																						, OBJECT_ID  VARCHAR2(4000)	 PATH   'msa:object_id' 
																						, OBJECT_NAME  VARCHAR2(4000)	 PATH   'msa:object_name' 
																						, STRUCT_CONT_HAND_INFOLET  VARCHAR2(4000)	 PATH   'msa:struct_cont_hand_infolet' 
																						, SAVE_ATTACHMENTS  VARCHAR2(4000)	 PATH   'msa:save_attachments' 
																						, NOTIFY_USERS_UNSUCCESSFUL  VARCHAR2(4000)	 PATH   'msa:notify_users_unsuccessful' 
																						, NOTIFY_USERS_SUCCESSFUL  VARCHAR2(4000)	 PATH   'msa:notify_users_successful' 
																						, DD_EVENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_event_user_name'
																						, DD_CURRENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_current_user_name'
																						, DD_OBJECT_TYPE  VARCHAR2(4000) PATH 'msa:dd_object_type'
																						, DD_PROCESS_CODE  VARCHAR2(4000) PATH 'msa:dd_process_code'
																			))      
					
				LOOP
			           LV_cntr_1 := LV_cntr_1 + 1;
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Data Found in iop_data. ', ip_pid);
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ')', ip_pid);
    

		 /* --------------------------------------------------------------------------
		       Loop through the data object to load the data into MS tables.
		        Header info is being loaded into the system.
		  -------------------------------------------------------------------------- */ 
 			  			 	
		/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
		  -------------------------------------------------------------------------- */ 	
		  		 		
  									    		IF LV_debug THEN
												

	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.HDN_CHNL_ID_CNT, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.ST_NOTIFY_USERS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CHANNEL_CREATED_ON, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.ST_CON_INFOLET, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.HDN_CIDCNTFRMSUBSREQ, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CHANNEL_CREATED_BY, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.EFFECTIVE_START_DATE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CHANNEL_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CHANNEL_STATUS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CHANNEL_NAME, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.EFFECTIVE_END_DATE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CHANNEL_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CUSTOM_FIELD1, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CUSTOM_FIELD2, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CUSTOM_FIELD3, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CUSTOM_FIELD4, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CUSTOM_FIELD5, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.OBJECT_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.OBJECT_NAME, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.STRUCT_CONT_HAND_INFOLET, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SAVE_ATTACHMENTS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    				             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
			             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
    			    	END IF;
    			    	
    			    							MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
  
  MERGE 
    INTO MS_RGA_CHANNEL_DTLS T 
  		USING (
  				SELECT     
      	 iop_data.HDN_CHNL_ID_CNT AS HDN_CHNL_ID_CNT	      	, iop_data.ST_NOTIFY_USERS AS ST_NOTIFY_USERS	      	, iop_data.CHANNEL_CREATED_ON AS CHANNEL_CREATED_ON	      	, iop_data.ST_CON_INFOLET AS ST_CON_INFOLET	      	, iop_data.HDN_CIDCNTFRMSUBSREQ AS HDN_CIDCNTFRMSUBSREQ	      	, iop_data.CHANNEL_CREATED_BY AS CHANNEL_CREATED_BY	      	, iop_data.EFFECTIVE_START_DATE AS EFFECTIVE_START_DATE	      	, iop_data.CHANNEL_TYPE AS CHANNEL_TYPE	      	, iop_data.CHANNEL_STATUS AS CHANNEL_STATUS	      	, iop_data.CHANNEL_NAME AS CHANNEL_NAME	      	, iop_data.EFFECTIVE_END_DATE AS EFFECTIVE_END_DATE	      	, iop_data.CHANNEL_ID AS CHANNEL_ID	      	, iop_data.CUSTOM_FIELD1 AS CUSTOM_FIELD1	      	, iop_data.CUSTOM_FIELD2 AS CUSTOM_FIELD2	      	, iop_data.CUSTOM_FIELD3 AS CUSTOM_FIELD3	      	, iop_data.CUSTOM_FIELD4 AS CUSTOM_FIELD4	      	, iop_data.CUSTOM_FIELD5 AS CUSTOM_FIELD5	      	, iop_data.OBJECT_ID AS OBJECT_ID	      	, iop_data.OBJECT_NAME AS OBJECT_NAME	      	, iop_data.STRUCT_CONT_HAND_INFOLET AS STRUCT_CONT_HAND_INFOLET	      	, iop_data.SAVE_ATTACHMENTS AS SAVE_ATTACHMENTS	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.OBJECT_ID = V.OBJECT_ID
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.HDN_CHNL_ID_CNT=V.HDN_CHNL_ID_CNT
 ,T.ST_NOTIFY_USERS=V.ST_NOTIFY_USERS
 ,T.CHANNEL_CREATED_ON=V.CHANNEL_CREATED_ON
 ,T.ST_CON_INFOLET=V.ST_CON_INFOLET
 ,T.HDN_CIDCNTFRMSUBSREQ=V.HDN_CIDCNTFRMSUBSREQ
 ,T.CHANNEL_CREATED_BY=V.CHANNEL_CREATED_BY
 ,T.EFFECTIVE_START_DATE=V.EFFECTIVE_START_DATE
 ,T.CHANNEL_TYPE=V.CHANNEL_TYPE
 ,T.CHANNEL_STATUS=V.CHANNEL_STATUS
 ,T.CHANNEL_NAME=V.CHANNEL_NAME
 ,T.EFFECTIVE_END_DATE=V.EFFECTIVE_END_DATE
 ,T.CHANNEL_ID=V.CHANNEL_ID
 ,T.CUSTOM_FIELD1=V.CUSTOM_FIELD1
 ,T.CUSTOM_FIELD2=V.CUSTOM_FIELD2
 ,T.CUSTOM_FIELD3=V.CUSTOM_FIELD3
 ,T.CUSTOM_FIELD4=V.CUSTOM_FIELD4
 ,T.CUSTOM_FIELD5=V.CUSTOM_FIELD5
 ,T.OBJECT_NAME=V.OBJECT_NAME
 ,T.STRUCT_CONT_HAND_INFOLET=V.STRUCT_CONT_HAND_INFOLET
 ,T.SAVE_ATTACHMENTS=V.SAVE_ATTACHMENTS
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.HDN_CHNL_ID_CNT
 ,T.ST_NOTIFY_USERS
 ,T.CHANNEL_CREATED_ON
 ,T.ST_CON_INFOLET
 ,T.HDN_CIDCNTFRMSUBSREQ
 ,T.CHANNEL_CREATED_BY
 ,T.EFFECTIVE_START_DATE
 ,T.CHANNEL_TYPE
 ,T.CHANNEL_STATUS
 ,T.CHANNEL_NAME
 ,T.EFFECTIVE_END_DATE
 ,T.CHANNEL_ID
 ,T.CUSTOM_FIELD1
 ,T.CUSTOM_FIELD2
 ,T.CUSTOM_FIELD3
 ,T.CUSTOM_FIELD4
 ,T.CUSTOM_FIELD5
 ,T.OBJECT_ID
 ,T.OBJECT_NAME
 ,T.STRUCT_CONT_HAND_INFOLET
 ,T.SAVE_ATTACHMENTS
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.HDN_CHNL_ID_CNT
        ,V.ST_NOTIFY_USERS
        ,V.CHANNEL_CREATED_ON
        ,V.ST_CON_INFOLET
        ,V.HDN_CIDCNTFRMSUBSREQ
        ,V.CHANNEL_CREATED_BY
        ,V.EFFECTIVE_START_DATE
        ,V.CHANNEL_TYPE
        ,V.CHANNEL_STATUS
        ,V.CHANNEL_NAME
        ,V.EFFECTIVE_END_DATE
        ,V.CHANNEL_ID
        ,V.CUSTOM_FIELD1
        ,V.CUSTOM_FIELD2
        ,V.CUSTOM_FIELD3
        ,V.CUSTOM_FIELD4
        ,V.CUSTOM_FIELD5
        ,V.OBJECT_ID
        ,V.OBJECT_NAME
        ,V.STRUCT_CONT_HAND_INFOLET
        ,V.SAVE_ATTACHMENTS
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
						
																		

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	   
 	   DELETE MS_RGA_CHANNEL_DTLS_CPU WHERE 
 	   	   				   		 OBJECT_ID = iop_data.OBJECT_ID
	  					AND DD_STATUS_FLAG = 'N'
	  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.NOTIFY_USERS_UNSUCCESSFUL) > 0 THEN
 		
 		INSERT INTO MS_RGA_CHANNEL_DTLS_CPU (
 		 		DD_STATUS_FLAG,
 		 		 OBJECT_ID
 		 		,  NOTIFY_USERS_UNSUCCESSFUL
 		 		) SELECT 
 		'Y',
 		 		 		  iop_data.OBJECT_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.NOTIFY_USERS_UNSUCCESSFUL,','));

 	   END IF;
	   
     UPDATE   MS_RGA_CHANNEL_DTLS_CPU
	    SET DD_STATUS_FLAG   = 'N'
	    WHERE
			   				   		 OBJECT_ID = iop_data.OBJECT_ID
	  				  	;
	
 	  													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	   
 	   DELETE MS_RGA_CHANNEL_DTLS_CPS WHERE 
 	   	   				   		 OBJECT_ID = iop_data.OBJECT_ID
	  										AND DD_STATUS_FLAG = 'N'
	  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.NOTIFY_USERS_SUCCESSFUL) > 0 THEN
 		
 		INSERT INTO MS_RGA_CHANNEL_DTLS_CPS (
 		 		DD_STATUS_FLAG,
 		 		 OBJECT_ID
 		 		,  NOTIFY_USERS_SUCCESSFUL
 		 		) SELECT 
 		'Y',
 		 		 		  iop_data.OBJECT_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.NOTIFY_USERS_SUCCESSFUL,','));

 	   END IF;
	   
     UPDATE   MS_RGA_CHANNEL_DTLS_CPS
	    SET DD_STATUS_FLAG   = 'N'
	    WHERE
			   				   		 OBJECT_ID = iop_data.OBJECT_ID
	  									  	;
	
 	  													
		  		  		  		            
          							 	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING UPDATE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	UPDATE MS_RGA_CHANNEL_DTLS_SRC 
 	SET DD_STATUS_FLAG   = 'N'
 	WHERE			
			OBJECT_ID= iop_data.OBJECT_ID	
	 	 ;
	 
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in UPDATE : ' || SQL%ROWCOUNT, 'D');
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

	                            
          						   	
               			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_RGA_CHANNEL_DTLS_SRC.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).SRC_OBJECT_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).EMAIL_SEC, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).CHANNEL_USERNAME, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).EMAIL_FROM, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).CHANNEL_PASSWORD, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).CHANNEL_KEYWORDS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).EMAIL_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).SERVER_ADDRESS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).SOURCE_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).SRC_PK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).SOURCE_SEQ_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).CUSTOM_FIELD6, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).CUSTOM_FIELD7, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).CUSTOM_FIELD8, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).CUSTOM_FIELD9, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).CUSTOM_FIELD10, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).CHANNEL_PASSWORD_ENCR, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).SRC_CREATED_BY, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).SRC_CREATED_ON, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).SRC_MODIFIED_BY, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).SRC_MODIFIED_ON, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).ACTIVATION_CODE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).CONTENT_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).DELIVERY_SCHEDULE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).EXPIRY_DATE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).SUBSCRIPTION_STATUS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).CONTENT_CATEGORY, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).DELIVERY_FORMAT, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).QUEUE_NAME, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).QUEUE_URL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_RGA_CHANNEL_DTLS_SRC(j).FLAG_SUBMITTED, ip_pid);
			 END LOOP;
 				END IF;
				
								MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
  FORALL i IN TY_RGA_CHANNEL_DTLS_SRC.FIRST..TY_RGA_CHANNEL_DTLS_SRC.LAST 
  
  MERGE 
    INTO MS_RGA_CHANNEL_DTLS_SRC T 
  		USING (
  				SELECT     
      	 TY_RGA_CHANNEL_DTLS_SRC(i).SRC_OBJECT_ID AS OBJECT_ID	      	, TY_RGA_CHANNEL_DTLS_SRC(i).EMAIL_SEC AS EMAIL_SEC	      	, TY_RGA_CHANNEL_DTLS_SRC(i).CHANNEL_USERNAME AS CHANNEL_USERNAME	      	, TY_RGA_CHANNEL_DTLS_SRC(i).EMAIL_FROM AS EMAIL_FROM	      	, TY_RGA_CHANNEL_DTLS_SRC(i).CHANNEL_PASSWORD AS CHANNEL_PASSWORD	      	, TY_RGA_CHANNEL_DTLS_SRC(i).CHANNEL_KEYWORDS AS CHANNEL_KEYWORDS	      	, TY_RGA_CHANNEL_DTLS_SRC(i).EMAIL_TYPE AS EMAIL_TYPE	      	, TY_RGA_CHANNEL_DTLS_SRC(i).SERVER_ADDRESS AS SERVER_ADDRESS	      	, TY_RGA_CHANNEL_DTLS_SRC(i).SOURCE_TYPE AS SOURCE_TYPE	      	, TY_RGA_CHANNEL_DTLS_SRC(i).SRC_PK AS SRC_PK	      	, TY_RGA_CHANNEL_DTLS_SRC(i).SOURCE_SEQ_ID AS SOURCE_SEQ_ID	      	, TY_RGA_CHANNEL_DTLS_SRC(i).CUSTOM_FIELD6 AS CUSTOM_FIELD6	      	, TY_RGA_CHANNEL_DTLS_SRC(i).CUSTOM_FIELD7 AS CUSTOM_FIELD7	      	, TY_RGA_CHANNEL_DTLS_SRC(i).CUSTOM_FIELD8 AS CUSTOM_FIELD8	      	, TY_RGA_CHANNEL_DTLS_SRC(i).CUSTOM_FIELD9 AS CUSTOM_FIELD9	      	, TY_RGA_CHANNEL_DTLS_SRC(i).CUSTOM_FIELD10 AS CUSTOM_FIELD10	      	, TY_RGA_CHANNEL_DTLS_SRC(i).CHANNEL_PASSWORD_ENCR AS CHANNEL_PASSWORD_ENCR	      	, TY_RGA_CHANNEL_DTLS_SRC(i).SRC_CREATED_BY AS SRC_CREATED_BY	      	, TY_RGA_CHANNEL_DTLS_SRC(i).SRC_CREATED_ON AS SRC_CREATED_ON	      	, TY_RGA_CHANNEL_DTLS_SRC(i).SRC_MODIFIED_BY AS SRC_MODIFIED_BY	      	, TY_RGA_CHANNEL_DTLS_SRC(i).SRC_MODIFIED_ON AS SRC_MODIFIED_ON	      	, TY_RGA_CHANNEL_DTLS_SRC(i).ACTIVATION_CODE AS ACTIVATION_CODE	      	, TY_RGA_CHANNEL_DTLS_SRC(i).CONTENT_TYPE AS CONTENT_TYPE	      	, TY_RGA_CHANNEL_DTLS_SRC(i).DELIVERY_SCHEDULE AS DELIVERY_SCHEDULE	      	, TY_RGA_CHANNEL_DTLS_SRC(i).EXPIRY_DATE AS EXPIRY_DATE	      	, TY_RGA_CHANNEL_DTLS_SRC(i).SUBSCRIPTION_STATUS AS SUBSCRIPTION_STATUS	      	, TY_RGA_CHANNEL_DTLS_SRC(i).CONTENT_CATEGORY AS CONTENT_CATEGORY	      	, TY_RGA_CHANNEL_DTLS_SRC(i).DELIVERY_FORMAT AS DELIVERY_FORMAT	      	, TY_RGA_CHANNEL_DTLS_SRC(i).QUEUE_NAME AS QUEUE_NAME	      	, TY_RGA_CHANNEL_DTLS_SRC(i).QUEUE_URL AS QUEUE_URL	      	, TY_RGA_CHANNEL_DTLS_SRC(i).FLAG_SUBMITTED AS FLAG_SUBMITTED	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.OBJECT_ID = V.OBJECT_ID
 AND  T.SRC_PK = V.SRC_PK
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.SERVER_PARAMETERS=V.EMAIL_SEC
 ,T.CHANNEL_USERNAME=V.CHANNEL_USERNAME
 ,T.EMAIL_FROM=V.EMAIL_FROM
 ,T.CHANNEL_PASSWORD=V.CHANNEL_PASSWORD
 ,T.CHANNEL_KEYWORDS=V.CHANNEL_KEYWORDS
 ,T.EMAIL_TYPE=V.EMAIL_TYPE
 ,T.SERVER_ADDRESS=V.SERVER_ADDRESS
 ,T.SOURCE_TYPE=V.SOURCE_TYPE
 ,T.SOURCE_SEQ_ID=V.SOURCE_SEQ_ID
 ,T.CUSTOM_FIELD6=V.CUSTOM_FIELD6
 ,T.CUSTOM_FIELD7=V.CUSTOM_FIELD7
 ,T.CUSTOM_FIELD8=V.CUSTOM_FIELD8
 ,T.CUSTOM_FIELD9=V.CUSTOM_FIELD9
 ,T.CUSTOM_FIELD10=V.CUSTOM_FIELD10
 ,T.CHANNEL_PASSWORD_ENCR=V.CHANNEL_PASSWORD_ENCR
 ,T.SRC_CREATED_BY=V.SRC_CREATED_BY
 ,T.SRC_CREATED_ON=V.SRC_CREATED_ON
 ,T.SRC_MODIFIED_BY=V.SRC_MODIFIED_BY
 ,T.SRC_MODIFIED_ON=V.SRC_MODIFIED_ON
 ,T.ACTIVATION_CODE=V.ACTIVATION_CODE
 ,T.CONTENT_TYPE=V.CONTENT_TYPE
 ,T.DELIVERY_SCHEDULE=V.DELIVERY_SCHEDULE
 ,T.EXPIRY_DATE=V.EXPIRY_DATE
 ,T.SUBSCRIPTION_STATUS=V.SUBSCRIPTION_STATUS
 ,T.CONTENT_CATEGORY=V.CONTENT_CATEGORY
 ,T.DELIVERY_FORMAT=V.DELIVERY_FORMAT
 ,T.QUEUE_NAME=V.QUEUE_NAME
 ,T.QUEUE_URL=V.QUEUE_URL
 ,T.FLAG_SUBMITTED=V.FLAG_SUBMITTED
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.OBJECT_ID
 ,T.SERVER_PARAMETERS
 ,T.CHANNEL_USERNAME
 ,T.EMAIL_FROM
 ,T.CHANNEL_PASSWORD
 ,T.CHANNEL_KEYWORDS
 ,T.EMAIL_TYPE
 ,T.SERVER_ADDRESS
 ,T.SOURCE_TYPE
 ,T.SRC_PK
 ,T.SOURCE_SEQ_ID
 ,T.CUSTOM_FIELD6
 ,T.CUSTOM_FIELD7
 ,T.CUSTOM_FIELD8
 ,T.CUSTOM_FIELD9
 ,T.CUSTOM_FIELD10
 ,T.CHANNEL_PASSWORD_ENCR
 ,T.SRC_CREATED_BY
 ,T.SRC_CREATED_ON
 ,T.SRC_MODIFIED_BY
 ,T.SRC_MODIFIED_ON
 ,T.ACTIVATION_CODE
 ,T.CONTENT_TYPE
 ,T.DELIVERY_SCHEDULE
 ,T.EXPIRY_DATE
 ,T.SUBSCRIPTION_STATUS
 ,T.CONTENT_CATEGORY
 ,T.DELIVERY_FORMAT
 ,T.QUEUE_NAME
 ,T.QUEUE_URL
 ,T.FLAG_SUBMITTED
)
VALUES 
  ('Y'         
     ,V.OBJECT_ID
        ,V.EMAIL_SEC
        ,V.CHANNEL_USERNAME
        ,V.EMAIL_FROM
        ,V.CHANNEL_PASSWORD
        ,V.CHANNEL_KEYWORDS
        ,V.EMAIL_TYPE
        ,V.SERVER_ADDRESS
        ,V.SOURCE_TYPE
        ,V.SRC_PK
        ,V.SOURCE_SEQ_ID
        ,V.CUSTOM_FIELD6
        ,V.CUSTOM_FIELD7
        ,V.CUSTOM_FIELD8
        ,V.CUSTOM_FIELD9
        ,V.CUSTOM_FIELD10
        ,V.CHANNEL_PASSWORD_ENCR
        ,V.SRC_CREATED_BY
        ,V.SRC_CREATED_ON
        ,V.SRC_MODIFIED_BY
        ,V.SRC_MODIFIED_ON
        ,V.ACTIVATION_CODE
        ,V.CONTENT_TYPE
        ,V.DELIVERY_SCHEDULE
        ,V.EXPIRY_DATE
        ,V.SUBSCRIPTION_STATUS
        ,V.CONTENT_CATEGORY
        ,V.DELIVERY_FORMAT
        ,V.QUEUE_NAME
        ,V.QUEUE_URL
        ,V.FLAG_SUBMITTED
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
								               									  
				   						  	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
    
    DELETE MS_RGA_CHANNEL_DTLS_SRC 
    WHERE DD_STATUS_FLAG = 'N'
  	  			AND OBJECT_ID = iop_data.OBJECT_ID
  	  	  ;
  	   
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in DELETE : ' || SQL%ROWCOUNT, 'D');
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
	   			   		
    END LOOP;	 
        EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in call ETL ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END CALL_ETL;        
END MS_RGA_CHANNEL_DTLS_P ; ]]></TEXT_BODY>
</PACKAGE_SPEC>
