
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_APPLIES_TO_OBJECT" as object
                ( object_id varchar2(400),
                  object_name varchar2(4000),
                  object_labels varchar2(4000),
                  locale_id     number
                ) 

 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_APPLIES_TO_TABLE" as table of  ms_qsm_applies_to_object 

 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_BACKUP_DATA_PROC" 
AS
l_date VARCHAR2(20):= TO_CHAR(SYSDATE,'DDMMYYYY');
xn_error_handle_id  NUMBER;
xn_error_seq    NUMBER;
l_table_name    VARCHAR2(4000);
l_ts_table_name VARCHAR2(4000);
BEGIN

    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
    pn_error_sequence    => xn_error_seq,
    pc_error_type        => 'I',
    pc_error_text        => 'Start : Surveys Data Backup Process');                                                        

    FOR table_ms_rec IN (SELECT TABLE_NAME FROM USER_TABLES WHERE TABLE_NAME IN ('MS_QSM_ACTIONS',
                                                                                            'MS_QSM_APPLIES_TO',
                                                                                            'MS_QSM_APPLIES_TO_FLDS',
                                                                                            'MS_QSM_APPLIES_TO_PARAMS',
                                                                                            'MS_QSM_EMAIL_TEMPLATES',
                                                                                            'MS_QSM_FINDING_ISSUES',
                                                                                            'MS_QSM_GRADE',
                                                                                            'MS_QSM_GRADE_CONFIG',
                                                                                            'MS_QSM_INIT_QUESTNR',
                                                                                            'MS_QSM_INIT_QUESTNR_FCA',
                                                                                            'MS_QSM_INIT_QUESTNR_FOL',
                                                                                            'MS_QSM_INIT_QUESTNR_FOO',
                                                                                            'MS_QSM_INIT_QUESTNR_IND',
                                                                                            'MS_QSM_INIT_QUESTNR_OAO',
                                                                                            'MS_QSM_INIT_QUESTNR_OWO',
                                                                                            'MS_QSM_INIT_QUESTNR_OWS',
                                                                                            'MS_QSM_INIT_QUESTNR_SAO',
                                                                                            'MS_QSM_INIT_QUESTNR_SCS',
                                                                                            'MS_QSM_INIT_QUESTNR_STA',
                                                                                            'MS_QSM_INIT_QUESTNR_USR',
                                                                                            'MS_QSM_INTEGRATION_LOG',
                                                                                            'MS_QSM_LOV_ORG_VALUES',
                                                                                            'MS_QSM_METRIC_MAINT',
                                                                                            'MS_QSM_ORB_RELATION',
                                                                                            'MS_QSM_ORB_RELATION_ORB',
                                                                                            'MS_QSM_PARAMS',
                                                                                            'MS_QSM_QST_LOV_DATA',
                                                                                            'MS_QSM_QUESTION',
                                                                                            'MS_QSM_QUESTION_AOC',
                                                                                            'MS_QSM_QUESTION_ATV',
                                                                                            'MS_QSM_QUESTION_CTL',
                                                                                            'MS_QSM_QUESTION_OBJ',
                                                                                            'MS_QSM_QUESTION_REQ',
                                                                                            'MS_QSM_QUESTION_RSK',
                                                                                            'MS_QSM_QUESTION_TL',
                                                                                            'MS_QSM_QUESTIONNAIRE',
                                                                                            'MS_QSM_QUESTIONNAIRE_APT',
                                                                                            'MS_QSM_QUESTIONNAIRE_DAV',
                                                                                            'MS_QSM_QUESTIONNAIRE_OWO',
                                                                                            'MS_QSM_QUESTIONNAIRE_OWS',
                                                                                            'MS_QSM_QUESTNR_RESP',
                                                                                            'MS_QSM_QUESTNR_SCH',
                                                                                            'MS_QSM_REMINDER_EMAIL',
                                                                                            'MS_QSM_REMINDER_EMAIL_LOG',
                                                                                            'MS_QSM_REPORTING_PERIOD',
                                                                                            'MS_QSM_REPORTING_PERIOD_TYPE',
                                                                                            'MS_QSM_RESP_ACTION',
                                                                                            'MS_QSM_RESP_CLOB_FLDS',
                                                                                            'MS_QSM_RESP_ISSUE',
                                                                                            'MS_QSM_RESP_QUESTION',
                                                                                            'MS_QSM_RESP_QUESTION_RML',
                                                                                            'MS_QSM_RESP_SECTION',
                                                                                            'MS_QSM_RESP_SPRDSHEET',
                                                                                            'MS_QSM_RESP_SPRDSHEET_CLM',
                                                                                            'MS_QSM_SCHEDULER_DETAILS',
                                                                                            'MS_QSM_SCHEDULER_MASTER',
                                                                                            'MS_QSM_SCORING',
                                                                                            'MS_QSM_SCORING_INFOLETS',
                                                                                            'MS_QSM_SECTION',
                                                                                            'MS_QSM_SPRD_LOV_DATA',
                                                                                            'MS_QSM_SPREADSHEET',
                                                                                            'MS_QSM_SPREADSHEET_FLD',
                                                                                            'MS_QSM_SPREADSHEET_OWO',
                                                                                            'MS_QSM_SPREADSHEET_OWS',
                                                                                            'MS_QSM_STAGE_ACTION_MAPPING',
                                                                                            'MS_QSM_STAGES',
                                                                                            'MS_QSM_STATUS') )
        LOOP 

            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
            pn_error_sequence    => xn_error_seq,
            pc_error_type        => 'I',
            pc_error_text        => 'MS Table: '||table_ms_rec.TABLE_NAME);    
            
            BEGIN
                
                INSERT INTO MS_QSM_BACKUP_DETAILS (OBJECT_TYPE,OBJECT_NAME,BACKUP_DATE,ATTRIBUTE_1)
                VALUES ('TABLE',table_ms_rec.TABLE_NAME,SYSDATE,REPLACE(table_ms_rec.TABLE_NAME,'MS_QSM_','Q_')||l_date);
                
                EXECUTE IMMEDIATE 'CREATE TABLE '||REPLACE(table_ms_rec.TABLE_NAME,'MS_QSM_','Q_')||l_date||' AS SELECT * FROM '||table_ms_rec.TABLE_NAME;
                
                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                pn_error_sequence    => xn_error_seq,
                pc_error_type        => 'I',
                pc_error_text        => 'MS Table: Created Table  '||table_ms_rec.TABLE_NAME||l_date);              
                
            EXCEPTION
                WHEN OTHERS THEN 
                            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                            pn_error_sequence    => xn_error_seq,
                            pc_error_type        => 'E',
                            pc_error_text        => 'MS Table: Unable to Create '||table_ms_rec.TABLE_NAME||l_date||SQLERRM);  
            END;
    
        END LOOP;

        IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0)  THEN
            ms_qsm_utilities.initialize_metric_maint ('QSM');
        END IF;
        
        FOR si_table_rec IN (SELECT GUID FROM MS_QSM_METRIC_MAINT WHERE MODULE='QSM') 
        LOOP
                        

        
            l_table_name := 'SI_'||ms_apps_utilities.get_infolet_id (ms_qsm_utilities.g_tbl_metric_maintenance (si_table_rec.GUID))||'_T';
            
             l_ts_table_name := 'SI_'||ms_apps_utilities.get_infolet_id (ms_qsm_utilities.g_tbl_metric_maintenance (si_table_rec.GUID))||'_TS';
            
            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
            pn_error_sequence    => xn_error_seq,
            pc_error_type        => 'I',
            pc_error_text        => 'SI_XX_T Table: '||l_table_name);    
            
            BEGIN
                                         
                INSERT INTO MS_QSM_BACKUP_DETAILS (OBJECT_TYPE,OBJECT_NAME,BACKUP_DATE,ATTRIBUTE_1)
                VALUES ('TABLE',l_table_name,SYSDATE,l_table_name||l_date);

                
                EXECUTE IMMEDIATE 'CREATE TABLE  '||l_table_name||l_date||' AS  SELECT * FROM '||l_table_name;
                
                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                pn_error_sequence    => xn_error_seq,
                pc_error_type        => 'I',
                pc_error_text        => 'SI_XX_T Table: Created Table  '||l_table_name||l_date);              
                
            EXCEPTION
                WHEN OTHERS THEN 
                            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                            pn_error_sequence    => xn_error_seq,
                            pc_error_type        => 'E',
                            pc_error_text        => 'SI_XX_T Table: Unable to Create '||l_table_name||l_date||SQLERRM);  
            END;
            
            
            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
            pn_error_sequence    => xn_error_seq,
            pc_error_type        => 'I',
            pc_error_text        => 'SI_XX_TS Table: '||l_ts_table_name);    
            
            BEGIN

                INSERT INTO MS_QSM_BACKUP_DETAILS (OBJECT_TYPE,OBJECT_NAME,BACKUP_DATE,ATTRIBUTE_1)
                VALUES ('TABLE',l_table_name,SYSDATE,l_table_name||l_date);
                                    
                EXECUTE IMMEDIATE 'CREATE TABLE  '||l_ts_table_name||l_date||' AS  SELECT * FROM '||l_ts_table_name;
                
                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                pn_error_sequence    => xn_error_seq,
                pc_error_type        => 'I',
                pc_error_text        => 'SI_XX_TS Table: Created Table  '||l_ts_table_name||l_date);              
                
            EXCEPTION
                WHEN OTHERS THEN 
                            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                            pn_error_sequence    => xn_error_seq,
                            pc_error_type        => 'E',
                            pc_error_text        => 'SI Table: Unable to Create '||l_ts_table_name||l_date||SQLERRM);  
            END;
            
        END LOOP;
        
        COMMIT;
        
        ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
        pn_error_sequence    => xn_error_seq,
        pc_error_type        => 'I',
        pc_error_text        => 'Surveys Backup Process Completed');          

EXCEPTION
    WHEN OTHERS THEN
        ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
         pn_error_sequence    => xn_error_seq,
         pc_error_type        => 'E',
         pc_error_text        => 'Fatal Error in the Surveys Backup Procedure ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);                                                        
END;
  
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_CONTROL_OBJECT_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_CONTROL_OBJECT_O
    Creation Time : 2014-APR-25 02:28:02.362426000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_CONTROL_OBJECT_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_TEMP_PK_ID                          IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_TEMP_PK_ID                          IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_CONTROL_OBJECT_O ; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_CONTROL_OBJECT_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_TEMP_PK_ID                          IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT ms_apps_mdf_error_handle_id_s.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_CONTROL_OBJECT', 'D');

        UPDATE MS_QSM_CONTROL_OBJECT
           SET DD_EDIT_FLAG = 'N'
         WHERE TEMP_PK_ID                               = iop_TEMP_PK_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_TEMP_PK_ID                          IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT ms_apps_mdf_error_handle_id_s.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_CONTROL_OBJECT', 'D');

        UPDATE MS_QSM_CONTROL_OBJECT
           SET DD_EDIT_FLAG = 'Y'
         WHERE TEMP_PK_ID                               = iop_TEMP_PK_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_CONTROL_OBJECT_O; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_CREATE_QUESTNR_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name  : MS_QSM_CREATE_QUESTNR_P
    Creation Time : Thu May 22 22:20:58 IST 2014
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_CREATE_QUESTNR_P' ;
    GV_program_name VARCHAR2(100);
   
   
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id  IN                      NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id         IN                      VARCHAR2,
            iop_log_no              IN   OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY     CLOB,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2,
            iop_error_seq         IN     OUT                NUMBER,
            ip_pid                IN                        NUMBER
        );
   


END MS_QSM_CREATE_QUESTNR_P ;
 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_CREATE_QUESTNR_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Body.
    Author : Data Designer ETL Engine
   -------------------------------------------------------------------------- */
   
   
/* --------------------------------------------------------------------------------
    GENERATE_UPDATE_HIERARCHY : Procedure to get the update the xml data hierarchy
   ------------------------------------------------------------------------------ */

    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        );
        
    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        )
    AS
        LV_error_code               NUMBER;
        LV_error_message            VARCHAR2(1000);
        UPDATE_HIERARCHY_EXCEP      EXCEPTION;
        LV_xml                      XMLTYPE := iop_xml;
		LV_namespace                varchar2(100) := 'xmlns="http://www.metricstream.com/appstudio/msa"';
        lv_program_name             VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UPDATE_HIERARCHY';


/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
      
    	           	    SELECT DELETEXML(LV_XML,'datapacket/data/qst/row/qst_section_fk',LV_namespace) INTO LV_XML FROM DUAL;
	           
	FOR rec in (SELECT DISTINCT 
        	    	  	 section_id_pk
        FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
     'msa:datapacket/msa:data/msa:sec/msa:row'      PASSING LV_xml
    COLUMNS
            	 section_id_pk  VARCHAR2(4000)    PATH  'msa:section_id_pk'
       ))
   
   LOOP
               	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/qst/row','qst_section_fk',XMLTYPE('<qst_section_fk ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.section_id_pk||'</qst_section_fk>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	    END LOOP;
           	    SELECT DELETEXML(LV_XML,'datapacket/data/sec/row/section_questnr_fk',LV_namespace) INTO LV_XML FROM DUAL;
	           
	FOR rec in (SELECT DISTINCT 
        	    	  	 internal_questnr_id
        FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
      'msa:datapacket/msa:data/msa:nonmultirow'       PASSING LV_xml
    COLUMNS
            	 internal_questnr_id  VARCHAR2(4000)    PATH  'msa:internal_questnr_id'
       ))
   
   LOOP
               	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/sec/row','section_questnr_fk',XMLTYPE('<section_questnr_fk ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.internal_questnr_id||'</section_questnr_fk>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	    END LOOP;
           	    SELECT DELETEXML(LV_XML,'datapacket/data/orb/row/orb_rel_source_id',LV_namespace) INTO LV_XML FROM DUAL;
	           
	FOR rec in (SELECT DISTINCT 
        	    	  	 rel_source_id
        FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
      'msa:datapacket/msa:data/msa:nonmultirow'       PASSING LV_xml
    COLUMNS
            	 rel_source_id  VARCHAR2(4000)    PATH  'msa:rel_source_id'
       ))
   
   LOOP
               	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/orb/row','orb_rel_source_id',XMLTYPE('<orb_rel_source_id ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.rel_source_id||'</orb_rel_source_id>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	    END LOOP;
           	    SELECT DELETEXML(LV_XML,'datapacket/data/scr/row/scr_qst_fk',LV_namespace) INTO LV_XML FROM DUAL;
	           
	FOR rec in (SELECT DISTINCT 
        	    	  	 qst_id_pk
        FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
     'msa:datapacket/msa:data/msa:qst/msa:row'      PASSING LV_xml
    COLUMNS
            	 qst_id_pk  VARCHAR2(4000)    PATH  'msa:qst_id_pk'
       ))
   
   LOOP
               	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/scr/row','scr_qst_fk',XMLTYPE('<scr_qst_fk ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.qst_id_pk||'</scr_qst_fk>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	    END LOOP;
           	    SELECT DELETEXML(LV_XML,'datapacket/data/grd/row/grd_questnr_fk',LV_namespace) INTO LV_XML FROM DUAL;
	           
	FOR rec in (SELECT DISTINCT 
        	    	  	 internal_questnr_id
        FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
      'msa:datapacket/msa:data/msa:nonmultirow'       PASSING LV_xml
    COLUMNS
            	 internal_questnr_id  VARCHAR2(4000)    PATH  'msa:internal_questnr_id'
       ))
   
   LOOP
               	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/grd/row','grd_questnr_fk',XMLTYPE('<grd_questnr_fk ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.internal_questnr_id||'</grd_questnr_fk>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	    END LOOP;
	iop_xml := LV_xml;
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_pid);
    EXCEPTION
        WHEN UPDATE_HIERARCHY_EXCEP THEN

            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE_HIERARCHY_EXCEP Exception Raised ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO  MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
			MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UPDATE_HIERARCHY;
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
        LV_error_code NUMBER;
        LV_error_message VARCHAR2(1000);
        NEXT_ID_GEN_EXCEPTION EXCEPTION;
        lv_program_name VARCHAR2(100);
        ln_error_seq NUMBER:=1;

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'GET_NEXT_ID';

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;

    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_process_instance_id);
      
        
     IF ip_attribute_id = 'REL_SOURCE_ID' THEN
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling MS_APPS_UTILITIES.GET_NEXT_ID ', ip_process_instance_id);
            MS_APPS_UTILITIES.GET_NEXT_ID
                (
                    i_module_name         => 'QSM',
 					i_id_name             => 'MS_ORB_REL_SOURCE_ID',
                    i_form_name           => 'MS_QSM_CREATE_QUESTNR',
                    i_process_instance_id => ip_process_instance_id,
                    o_next_id             => op_id,
                    o_error_code          => LV_error_code,
                    o_error_message       => LV_error_message
                );                    
    
        IF LV_error_code <> 0 THEN
                RAISE NEXT_ID_GEN_EXCEPTION;
            END IF;
        END IF;    
        
     IF ip_attribute_id = 'REL_INST_ID' THEN
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling MS_APPS_UTILITIES.GET_NEXT_ID ', ip_process_instance_id);
            MS_APPS_UTILITIES.GET_NEXT_ID
                (
                    i_module_name         => 'QSM',
 					i_id_name             => 'MS_ORB_REL_INST_ID',
                    i_form_name           => 'MS_QSM_CREATE_QUESTNR',
                    i_process_instance_id => ip_process_instance_id,
                    o_next_id             => op_id,
                    o_error_code          => LV_error_code,
                    o_error_message       => LV_error_message
                );                    
    
        IF LV_error_code <> 0 THEN
                RAISE NEXT_ID_GEN_EXCEPTION;
            END IF;
        END IF;    
             
 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_process_instance_id);
    EXCEPTION
        WHEN NEXT_ID_GEN_EXCEPTION THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] NEXT_ID_GEN_EXCEPTION Exception Raised ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] WHEN OTHERS ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END GET_NEXT_ID;


 

  	    	 
  	    	 
  	    	              
/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY         CLOB,
            iop_log_no            IN     OUT                    NUMBER,
            op_error_code                OUT                    NUMBER,
            op_error_message             OUT                    VARCHAR2,
            iop_error_seq         IN     OUT                    NUMBER,
            ip_pid                IN                            NUMBER

        )
    AS

/* --------------------------------------------------------------------------
     ETL procedure created by the ETL Engine of APP BUILDER.
     The procedure takes care of loading the data that is sent
     by the FLOW BUILDER and store the same in MS TABLES.
     Data is already processed and stored accordingly in the iop_data
     object structure. The object can have one or more records.
     The ETL is designed to take care of one or more records.
     If the data has to be manipulated before populating the main
     MS TABLES, please use the HOOKS that are generated by the
     FLOW BUILDER.
   -------------------------------------------------------------------------- */
        LV_progress VARCHAR2(3) := NULL;
        LV_cntr_1   NUMBER      := NULL;
        LV_cntr_2   NUMBER      := NULL;
        LV_debug    BOOLEAN     := FALSE;
        LV_XML      XMLTYPE     := XMLTYPE(iop_xml_data);
        LV_err_code NUMBER      := NULL;
        LV_err_msg  VARCHAR2(4000);
        lV_program_name VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
              AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
      
    /************* Add the cursors for all the regions ******************/
      
        				
		CURSOR CU_QSM_ORB_RELATION_ORB is (SELECT 
				   	   			   	    	  ORB_REL_SOURCE_ID
		   	   		   			   	   			   	    	,  REL_INST_ID
		   	   		   			   	   			   	    	,  REL_CONFIG_ID
		   	   		   			   	   			   	    	,  TGT_OBJ_NAME
		   	   		   			   	   			   	    	,  TGT_OBJ_ID
		   	   		   			   	   			   	   		,  TO_DATE(REL_VALID_FROM ,'MM/dd/yyyy HH24:mi:ss') AS REL_VALID_FROM
		   	   		   			   	   			   	   		,  TO_DATE(REL_VALID_UNTIL ,'MM/dd/yyyy HH24:mi:ss') AS REL_VALID_UNTIL
		   	   		   			   	   			   	    	,  REL_COMMENTS
		   	   		   			   	   			   	    	,  PARENT_REL_INST_ID
		   	   		   			   	   			   	    	,  SELF_REL_TYPE
		   	   		   			   	   			   	    	,  TGT_OBJ_TYPE
		   	   		   			   	   			   	    	,  ROW_NUM
		   	   		   			   	   			   	    	,  APPLICABLE_TO
		   	   		   			   	   			   	    	,  ADDITIONAL_DETAILS
		   	   		   			   	   			   	    	,  ADDITIONAL_COLUMN1
		   	   		   			   	   			   	    	,  ADDITIONAL_COLUMN2
		   	   		   			   	   			   	    	,  ADDITIONAL_COLUMN3
		   	   		   			   	   			   	    	,  ADDITIONAL_DETAILS_WITH_ID
		   	   		   			   	   			   	    	,  ORB_FORM_URL
		   	   		   			   	   			   	    	,  ADDITIONAL_COLUMN4
		   	   		   			   	   			   	    	,  ADDITIONAL_COLUMN5
		   	   		   	 		FROM XMLTABLE(XMLNAMESPACES( 'http://www.metricstream.com/appstudio/msa'  as "msa"),'msa:datapacket/msa:data/msa:orb/msa:row'
		PASSING LV_xml
		COLUMNS
	    	    	   			  ORB_REL_SOURCE_ID  VARCHAR2(4000)   PATH 'msa:orb_rel_source_id' 	    	   			,  REL_INST_ID  VARCHAR2(4000)   PATH 'msa:rel_inst_id' 	    	   			,  REL_CONFIG_ID  VARCHAR2(4000)   PATH 'msa:rel_config_id' 	    	   			,  TGT_OBJ_NAME  VARCHAR2(4000)   PATH 'msa:tgt_obj_name' 	    	   			,  TGT_OBJ_ID  VARCHAR2(4000)   PATH 'msa:tgt_obj_id' 	    	   			,  REL_VALID_FROM  VARCHAR2(40)   PATH 'msa:rel_valid_from' 	    	   			,  REL_VALID_UNTIL  VARCHAR2(40)   PATH 'msa:rel_valid_until' 	    	   			,  REL_COMMENTS  VARCHAR2(4000)   PATH 'msa:rel_comments' 	    	   			,  PARENT_REL_INST_ID  VARCHAR2(4000)   PATH 'msa:parent_rel_inst_id' 	    	   			,  SELF_REL_TYPE  VARCHAR2(4000)   PATH 'msa:self_rel_type' 	    	   			,  TGT_OBJ_TYPE  VARCHAR2(4000)   PATH 'msa:tgt_obj_type' 	    	   			,  ROW_NUM  VARCHAR2(4000)   PATH 'msa:row_num' 	    	   			,  APPLICABLE_TO  VARCHAR2(4000)   PATH 'msa:applicable_to' 	    	   			,  ADDITIONAL_DETAILS  VARCHAR2(4000)   PATH 'msa:additional_details' 	    	   			,  ADDITIONAL_COLUMN1  VARCHAR2(4000)   PATH 'msa:additional_column1' 	    	   			,  ADDITIONAL_COLUMN2  VARCHAR2(4000)   PATH 'msa:additional_column2' 	    	   			,  ADDITIONAL_COLUMN3  VARCHAR2(4000)   PATH 'msa:additional_column3' 	    	   			,  ADDITIONAL_DETAILS_WITH_ID  VARCHAR2(4000)   PATH 'msa:additional_details_with_id' 	    	   			,  ORB_FORM_URL  VARCHAR2(4000)   PATH 'msa:orb_form_url' 	    	   			,  ADDITIONAL_COLUMN4  VARCHAR2(4000)   PATH 'msa:additional_column4' 	    	   			,  ADDITIONAL_COLUMN5  VARCHAR2(4000)   PATH 'msa:additional_column5' 	    			));	  
		TYPE LT_QSM_ORB_RELATION_ORB IS TABLE OF CU_QSM_ORB_RELATION_ORB%ROWTYPE;
		TY_QSM_ORB_RELATION_ORB  LT_QSM_ORB_RELATION_ORB; 
		
		        
   /************* End of cursors for all the regions ******************/
    
   /************ Add the cursors for all object relationships *****************************/
    	  		  			   CURSOR CU_QSM_QUESTION is (SELECT 
			   			   
		   	   			   	   				   	   		 QST_ID_PK
			   	   				   			   	   				   	   		,  QST_ID
			   	   				   			   	   				   	   		,  QST_SECTION_FK
			   	   				   			   	   				   	   		,  QST_TYPE
			   	   				   			   	   				   	   		,  QST_PARENT_TYPE
			   	   				   			   	   				   	   		,  QST_NAME
			   	   				   			   	   				   	   		,  QST_OPTIONAL
			   	   				   			   	   				   	   		,  QST_WEIGHTAGE
			   	   				   			   	   				   	   		,  QST_BASED_ON_RESPONSE
			   	   				   			   	   				   	   		,  QST_TARGET
			   	   				   			   	   				   	   		,  QST_DESCRIPTION
			   	   				   			   	   				   	   		,  QST_RESPONSE_TYPE
			   	   				   			   	   				   	   		,  QST_LIST_OF_VALUES
			   	   				   			   	   				   	   		,  QST_DEFAULT_SCORE
			   	   				   			   	   				   	   		,  QST_BASED_ON_NUMBER
			   	   				   			   	   				   	   		,  QST_DOCUMENTS
			   	   				   			   	   				   	   		,  QST_INFOLET_SCORING
			   	   				   			   	   				   	   		,  PARENT_RESPONSE_TYPE
			   	   				   			   	   				   	   		,  PARENT_LOV_VALUES
			   	   				   			   	   				   	   		,  QST_METRIC_HYPERLINK
			   	   				   			   	   				   	   		,  QST_TOTAL_SEC_WEIGHTAGE
			   	   				   			   	   				   	   		,  QST_AOC_DISP
			   	   				   			   	   				   	   		,  QST_REQ_DISP
			   	   				   			   	   				   	   		,  QST_OBJ_DISP
			   	   				   			   	   				   	   		,  QST_RSK_DISP
			   	   				   			   	   				   	   		,  QST_CTL_DISP
			   	   				   			   	   				   	   		,  QST_CUSTOM_SCR_LOGIC
			   	   				   			   	   				   	   		,  QST_SCR_INFOLET
			   	   				   			   	   				   	   		,  QST_TREE_LEVEL
			   	   				   			   	   				   	   		,  QST_SECTION_ID
			   	   				   			   	   				   	   		,  QST_UNIQUE_ID
			   	   				   			   	   				   	   		,  QST_ACTION_PLAN
			   	   				   			   	   				   	   		,  QST_SPRDSHEET_TEMPLATE
			   	   				   			   	   				   	   		,  QST_ALLOW_RESP_NA
			   	   				   			   	   				   	   		,  RESP_REQ_APPROVAL
			   	   				   			   	   				   	   		,  RESP_REQ_ACTION
			   	   				   			   	   				   	   		,  QST_MLOV_SCORING
			   	   				   			   	   				   	   		,  PRE_POPULATE_DATA
			   	   				   			   	   				   	   		,  QST_AREA_OF_COMPLIANCE
			   	   				   			   	   				   	   		,  QST_REQUIREMENTS
			   	   				   			   	   				   	   		,  QST_OBJECTIVES
			   	   				   			   	   				   	   		,  QST_RISKS
			   	   				   			   	   				   	   		,  QST_CONTROLS
			   	   				   			   	   				   	   		,  QST_ATTRIBUTE_VALUES
			   	   				   			   	   				   	   		,  PRE_POPULATE_DATA_STORED
			   	   				   			   FROM XMLTABLE(XMLNAMESPACES( 'http://www.metricstream.com/appstudio/msa'  as "msa"),'msa:datapacket/msa:data/msa:qst/msa:row'
			   PASSING LV_xml
	           COLUMNS
	           			   		       			 QST_ID_PK  VARCHAR2(4000)   PATH 'msa:qst_id_pk'		       		       			,  QST_ID  VARCHAR2(4000)   PATH 'msa:qst_id'		       		       			,  QST_SECTION_FK  VARCHAR2(4000)   PATH 'msa:qst_section_fk'		       		       			,  QST_TYPE  VARCHAR2(4000)   PATH 'msa:qst_type'		       		       			,  QST_PARENT_TYPE  VARCHAR2(4000)   PATH 'msa:qst_parent_type'		       		       			,  QST_NAME  VARCHAR2(4000)   PATH 'msa:qst_name'		       		       			,  QST_OPTIONAL  VARCHAR2(4000)   PATH 'msa:qst_optional'		       		       			,  QST_WEIGHTAGE  VARCHAR2(4000)   PATH 'msa:qst_weightage'		       		       			,  QST_BASED_ON_RESPONSE  VARCHAR2(4000)   PATH 'msa:qst_based_on_response'		       		       			,  QST_TARGET  VARCHAR2(4000)   PATH 'msa:qst_target'		       		       			,  QST_DESCRIPTION  VARCHAR2(4000)   PATH 'msa:qst_description_htm'		       		       			,  QST_RESPONSE_TYPE  VARCHAR2(4000)   PATH 'msa:qst_response_type'		       		       			,  QST_LIST_OF_VALUES  VARCHAR2(4000)   PATH 'msa:qst_list_of_values'		       		       			,  QST_DEFAULT_SCORE  VARCHAR2(4000)   PATH 'msa:qst_default_score'		       		       			,  QST_BASED_ON_NUMBER  VARCHAR2(4000)   PATH 'msa:qst_based_on_number'		       		       			,  QST_DOCUMENTS  VARCHAR2(4000)   PATH 'msa:qst_documents'		       		       			,  QST_INFOLET_SCORING  VARCHAR2(4000)   PATH 'msa:qst_infolet_scoring'		       		       			,  PARENT_RESPONSE_TYPE  VARCHAR2(4000)   PATH 'msa:parent_response_type'		       		       			,  PARENT_LOV_VALUES  VARCHAR2(4000)   PATH 'msa:parent_lov_values'		       		       			,  QST_METRIC_HYPERLINK  VARCHAR2(4000)   PATH 'msa:qst_metric_hyperlink'		       		       			,  QST_TOTAL_SEC_WEIGHTAGE  VARCHAR2(4000)   PATH 'msa:qst_total_sec_weightage'		       		       			,  QST_AOC_DISP  VARCHAR2(4000)   PATH 'msa:qst_aoc_disp'		       		       			,  QST_REQ_DISP  VARCHAR2(4000)   PATH 'msa:qst_req_disp'		       		       			,  QST_OBJ_DISP  VARCHAR2(4000)   PATH 'msa:qst_obj_disp'		       		       			,  QST_RSK_DISP  VARCHAR2(4000)   PATH 'msa:qst_rsk_disp'		       		       			,  QST_CTL_DISP  VARCHAR2(4000)   PATH 'msa:qst_ctl_disp'		       		       			,  QST_CUSTOM_SCR_LOGIC  VARCHAR2(4000)   PATH 'msa:qst_custom_scr_logic'		       		       			,  QST_SCR_INFOLET  VARCHAR2(4000)   PATH 'msa:qst_scr_infolet'		       		       			,  QST_TREE_LEVEL  VARCHAR2(4000)   PATH 'msa:qst_tree_level'		       		       			,  QST_SECTION_ID  VARCHAR2(4000)   PATH 'msa:qst_section_id'		       		       			,  QST_UNIQUE_ID  VARCHAR2(4000)   PATH 'msa:qst_unique_id'		       		       			,  QST_ACTION_PLAN  VARCHAR2(4000)   PATH 'msa:qst_action_plan'		       		       			,  QST_SPRDSHEET_TEMPLATE  VARCHAR2(4000)   PATH 'msa:qst_sprdsheet_template'		       		       			,  QST_ALLOW_RESP_NA  VARCHAR2(4000)   PATH 'msa:qst_allow_resp_na'		       		       			,  RESP_REQ_APPROVAL  VARCHAR2(4000)   PATH 'msa:resp_req_approval'		       		       			,  RESP_REQ_ACTION  VARCHAR2(4000)   PATH 'msa:resp_req_action'		       		       			,  QST_MLOV_SCORING  VARCHAR2(4000)   PATH 'msa:qst_mlov_scoring'		       		       			,  PRE_POPULATE_DATA  VARCHAR2(4000)   PATH 'msa:pre_populate_data'		       		       			,  QST_AREA_OF_COMPLIANCE  VARCHAR2(4000)   PATH 'msa:qst_area_of_compliance'		       		       			,  QST_REQUIREMENTS  VARCHAR2(4000)   PATH 'msa:qst_requirements'		       		       			,  QST_OBJECTIVES  VARCHAR2(4000)   PATH 'msa:qst_objectives'		       		       			,  QST_RISKS  VARCHAR2(4000)   PATH 'msa:qst_risks'		       		       			,  QST_CONTROLS  VARCHAR2(4000)   PATH 'msa:qst_controls'		       		       			,  QST_ATTRIBUTE_VALUES  VARCHAR2(4000)   PATH 'msa:qst_attribute_values'		       		       			,  PRE_POPULATE_DATA_STORED  VARCHAR2(4000)   PATH 'msa:pre_populate_data_stored'		       	       	   )); 
	    TYPE LT_QSM_QUESTION IS TABLE OF CU_QSM_QUESTION%ROWTYPE;
		TY_QSM_QUESTION  LT_QSM_QUESTION;
	       	     		  
   		  			   CURSOR CU_QSM_SECTION is (SELECT 
			   			   
		   	   			   	   				   	   		 SECTION_ID_PK
			   	   				   			   	   				   	   		,  SECTION_QUESTNR_FK
			   	   				   			   	   				   	   		,  SECTION_TYPE
			   	   				   			   	   				   	   		,  SECTION_NAME
			   	   				   			   	   				   	   		,  SECTION_SCORING_METHOD
			   	   				   			   	   				   	   		,  SECTION_OPTIONAL
			   	   				   			   	   				   	   		,  SECTION_WEIGHTAGE
			   	   				   			   	   				   	   		,  SECTION_PARENT_TYPE
			   	   				   			   	   				   	   		,  SECTION_SECTION_ID
			   	   				   			   	   				   	   		,  SEC_TOTAL_SCR_WEIGHTAGE
			   	   				   			   FROM XMLTABLE(XMLNAMESPACES( 'http://www.metricstream.com/appstudio/msa'  as "msa"),'msa:datapacket/msa:data/msa:sec/msa:row'
			   PASSING LV_xml
	           COLUMNS
	           			   		       			 SECTION_ID_PK  VARCHAR2(4000)   PATH 'msa:section_id_pk'		       		       			,  SECTION_QUESTNR_FK  VARCHAR2(4000)   PATH 'msa:section_questnr_fk'		       		       			,  SECTION_TYPE  VARCHAR2(4000)   PATH 'msa:section_type'		       		       			,  SECTION_NAME  VARCHAR2(4000)   PATH 'msa:section_name'		       		       			,  SECTION_SCORING_METHOD  VARCHAR2(4000)   PATH 'msa:section_scoring_method'		       		       			,  SECTION_OPTIONAL  VARCHAR2(4000)   PATH 'msa:section_optional'		       		       			,  SECTION_WEIGHTAGE  VARCHAR2(4000)   PATH 'msa:section_weightage'		       		       			,  SECTION_PARENT_TYPE  VARCHAR2(4000)   PATH 'msa:section_parent_type'		       		       			,  SECTION_SECTION_ID  VARCHAR2(4000)   PATH 'msa:section_section_id'		       		       			,  SEC_TOTAL_SCR_WEIGHTAGE  VARCHAR2(4000)   PATH 'msa:sec_total_scr_weightage'		       	       	   )); 
	    TYPE LT_QSM_SECTION IS TABLE OF CU_QSM_SECTION%ROWTYPE;
		TY_QSM_SECTION  LT_QSM_SECTION;
	       	     		  
   		  			   CURSOR CU_QSM_SCORING is (SELECT 
			   			   
		   	   			   	   				   	   		 SCR_ID_PK
			   	   				   			   	   				   	   		,  SCR_QST_FK
			   	   				   			   	   				   	   		,  SCR_SCORING_RULE
			   	   				   			   	   				   	   		,  SCR_VALUE_1
			   	   				   			   	   				   	   		,  SCR_VALUE_2
			   	   				   			   	   				   	   		,  SCR_VALUE_1_1
			   	   				   			   	   				   	   		,  SCR_GRADE
			   	   				   			   	   				   	   		,  SCR_SCORE
			   	   				   			   	   				   	   		,  SCR_PARENT_TYPE
			   	   				   			   	   				   	   		,  SCR_RESP_TYPE
			   	   				   			   	   				   	   		,  SCR_LOV_VALUES
			   	   				   			   FROM XMLTABLE(XMLNAMESPACES( 'http://www.metricstream.com/appstudio/msa'  as "msa"),'msa:datapacket/msa:data/msa:scr/msa:row'
			   PASSING LV_xml
	           COLUMNS
	           			   		       			 SCR_ID_PK  VARCHAR2(4000)   PATH 'msa:scr_id_pk'		       		       			,  SCR_QST_FK  VARCHAR2(4000)   PATH 'msa:scr_qst_fk'		       		       			,  SCR_SCORING_RULE  VARCHAR2(4000)   PATH 'msa:scr_scoring_rule'		       		       			,  SCR_VALUE_1  VARCHAR2(4000)   PATH 'msa:scr_value_1'		       		       			,  SCR_VALUE_2  VARCHAR2(4000)   PATH 'msa:scr_value_2'		       		       			,  SCR_VALUE_1_1  VARCHAR2(4000)   PATH 'msa:scr_value_1_1'		       		       			,  SCR_GRADE  VARCHAR2(4000)   PATH 'msa:scr_grade'		       		       			,  SCR_SCORE  VARCHAR2(4000)   PATH 'msa:scr_score'		       		       			,  SCR_PARENT_TYPE  VARCHAR2(4000)   PATH 'msa:scr_parent_type'		       		       			,  SCR_RESP_TYPE  VARCHAR2(4000)   PATH 'msa:scr_resp_type'		       		       			,  SCR_LOV_VALUES  VARCHAR2(4000)   PATH 'msa:scr_lov_values'		       	       	   )); 
	    TYPE LT_QSM_SCORING IS TABLE OF CU_QSM_SCORING%ROWTYPE;
		TY_QSM_SCORING  LT_QSM_SCORING;
	       	     		  
   		  			   CURSOR CU_QSM_GRADE is (SELECT 
			   			   
		   	   			   	   				   	   		 GRD_SCORING_RULE
			   	   				   			   	   				   	   		,  GRD_SCORING_PK
			   	   				   			   	   				   	   		,  GRD_GRADE
			   	   				   			   	   				   	   		,  GRD_VALUE_1
			   	   				   			   	   				   	   		,  GRD_VALUE_2
			   	   				   			   	   				   	   		,  GRD_QUESTNR_FK
			   	   				   			   FROM XMLTABLE(XMLNAMESPACES( 'http://www.metricstream.com/appstudio/msa'  as "msa"),'msa:datapacket/msa:data/msa:grd/msa:row'
			   PASSING LV_xml
	           COLUMNS
	           			   		       			 GRD_SCORING_RULE  VARCHAR2(4000)   PATH 'msa:grd_scoring_rule'		       		       			,  GRD_SCORING_PK  VARCHAR2(4000)   PATH 'msa:grd_scoring_pk'		       		       			,  GRD_GRADE  VARCHAR2(4000)   PATH 'msa:grd_grade'		       		       			,  GRD_VALUE_1  VARCHAR2(4000)   PATH 'msa:grd_value_1'		       		       			,  GRD_VALUE_2  VARCHAR2(4000)   PATH 'msa:grd_value_2'		       		       			,  GRD_QUESTNR_FK  VARCHAR2(4000)   PATH 'msa:grd_questnr_fk'		       	       	   )); 
	    TYPE LT_QSM_GRADE IS TABLE OF CU_QSM_GRADE%ROWTYPE;
		TY_QSM_GRADE  LT_QSM_GRADE;
	       	     		  
   		      BEGIN

/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------
    Note: Defining SAVEPOINT TO ROLLBACK transactions done by ETL.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        LV_progress := '001';
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'CALL_ETL';


/* --------------------------------------------------------------------------
    Note: Default DEBUG FLAG is set to FALSE to avoid unneccessary logging of data.
            If any issues found in ETL, to understand what goes into the ETL
            then set this variable to TRUE and run the ETL in the flow.
            It allows to log the entire relevant data set.
   -------------------------------------------------------------------------- */
        LV_debug := FALSE;

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);
        
        UPDATE_HIERARCHY
        (
           iop_log_no          => LV_log_no.APP_LOG_NO,
           iop_xml             => LV_XML,
           op_error_code       => LV_err_code,
           op_error_message    => LV_err_msg,
           iop_error_sequence  => iop_error_seq,
           ip_pid              => ip_pid
        );

        IF(LV_err_code !=0) THEN
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'W','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Failed while updating Hierarchy ', ip_pid);
        END IF;
        
        /* capture all cursors here */
					       OPEN CU_QSM_ORB_RELATION_ORB;
	       FETCH CU_QSM_ORB_RELATION_ORB BULK COLLECT INTO TY_QSM_ORB_RELATION_ORB;
	       CLOSE CU_QSM_ORB_RELATION_ORB; 
	    		
				 OPEN CU_QSM_QUESTION;
	       FETCH CU_QSM_QUESTION BULK COLLECT INTO TY_QSM_QUESTION;
	       CLOSE CU_QSM_QUESTION; 		
				 OPEN CU_QSM_SECTION;
	       FETCH CU_QSM_SECTION BULK COLLECT INTO TY_QSM_SECTION;
	       CLOSE CU_QSM_SECTION; 		
				 OPEN CU_QSM_SCORING;
	       FETCH CU_QSM_SCORING BULK COLLECT INTO TY_QSM_SCORING;
	       CLOSE CU_QSM_SCORING; 		
				 OPEN CU_QSM_GRADE;
	       FETCH CU_QSM_GRADE BULK COLLECT INTO TY_QSM_GRADE;
	       CLOSE CU_QSM_GRADE; 		
		
        LV_cntr_1 := 0;
      
/* --------------------------------------------------------------------------
        Cursor to fetch non multirow details from XML
   -------------------------------------------------------------------------- */
		        FOR iop_data in ( SELECT  INSTANCE_ID
                                 ,METRIC_ID
                                 ,TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_RUN_DATE
                                 ,TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
                                 ,LATEST_FLAG
                                 ,CREATED_BY
                                 ,TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE
                                 ,PROCESS_FLOW_STATUS
                                 ,PROCESS_INSTANCE_ID
                                 ,ELECTRONICALLY_SIGNED
	                             ,INSTANCE_REC_NUM
											 					   	  , QUE_NAME
					    											 					   	  , INTERNAL_QUESTNR_ID
					    											 					   	  , QUE_TYPE
					    											 					   	  , INCLUDE_METRICS
					    											 					   	  , METRIC_FREQUENCY
					    											 					   	  , SCORING_FLAG
					    											 					   	  , NAVIGATION
					    											 					   	  , SCORING_LOGIC
					    											 					   	  , INSTRUCTIONS
					    											 					   	  , CHECKLIST_TYPE
					    											 					   	  , RPN_COMPUTATION
					    											 					   	  , SCORING_METHOD
					    											 					   	  , MINIMUM_SCORE
					    											 					   	  , MAXIMUM_SCORE
					    											 					   	  , CERTIFICATION_TEXT
					    											 					   	  , LEVEL_1_APPROVER
					    											 					   	  , LEVEL_2_APPROVER
					    											 					   	  , RESTRICT_ACCESS_TO
					    											 						  	, TO_DATE( VALID_FROM,'MM/dd/yyyy HH24:mi:ss') AS VALID_FROM
						   											 						  	, TO_DATE( VALID_UNTILL,'MM/dd/yyyy HH24:mi:ss') AS VALID_UNTILL
						   											 					   	  , QUE_ACTION
					    											 					   	  , QUE_COMMENTS
					    											 					   	  , VERSION_NUMBER
					    											 					   	  , PUBLISHED
					    											 					   	  , INITIATOR
					    											 					   	  , STATUS
					    											 					   	  , CONFIG_FLAG
					    											 					   	  , RTF_ATTACH
					    											 					   	  , REPORTING_PERIOD_TYPE
					    											 					   	  , QSTNR_CATEGORY
					    											 					   	  , OWNERS
					    											 					   	  , OWNER_ORGANIZATIONS
					    											 					   	  , DEFAULT_ATTRIBUTE_VALUES
					    											 					   	  , APPLIES_TO
					    											 					   	  , UPLOAD
					    											 					   	  , QUE_ID
					    											 					   	  , REL_SOURCE_ID
					    											 					   	  , REL_SOURCE_OBJECT_ID
					    											 					   	  , ASSOCIATED_WITH_TYPE
					    											 					   	  , CONFIGURED_OBJECT_TYPES
					    											 					   	  , ADDITIONAL_COLUMN_H1
					    											 					   	  , ATTRIBUTE_COLUMN_H3
					    											 					   	  , ATTRIBUTE_COLUMN_H2
					    											 					   	  , DD_EVENT_USER_NAME
					    											 					   	  , DD_CURRENT_USER_NAME
					    											 					   	  , DD_OBJECT_TYPE
					    											 					   	  , DD_PROCESS_CODE
					    										FROM XMLTABLE(XMLNAMESPACES(  'http://www.metricstream.com/appstudio/msa'  as "msa"),
                                'msa:datapacket/msa:data/msa:nonmultirow' 
                               PASSING LV_XML
                               COLUMNS
                                INSTANCE_ID                      NUMBER          PATH  'msa:instance_id'
                               ,METRIC_ID                        NUMBER          PATH  'msa:metric_id'
                               ,METRIC_RUN_DATE                  VARCHAR2(40)    PATH  'msa:metric_run_date'
                               ,METRIC_COMPLETED_DATE            VARCHAR2(40)    PATH  'msa:metric_completed_date'
                               ,LATEST_FLAG                      VARCHAR2(1)     PATH  'msa:latest_flag'
                               ,CREATED_BY                       NUMBER          PATH  'msa:created_by'
                               ,CREATION_DATE                    VARCHAR2(40)    PATH  'msa:creation_date'
                               ,PROCESS_FLOW_STATUS              NUMBER          PATH  'msa:process_flow_status'
                               ,PROCESS_INSTANCE_ID              NUMBER          PATH  'msa:process_instance_id'
                               ,ELECTRONICALLY_SIGNED            NUMBER          PATH  'msa:electronically_signed'
                               ,INSTANCE_REC_NUM                 NUMBER          PATH  'msa:instance_rec_num'    
														, QUE_NAME  VARCHAR2(4000)	 PATH   'msa:que_name' 
																						, INTERNAL_QUESTNR_ID  VARCHAR2(4000)	 PATH   'msa:internal_questnr_id' 
																						, QUE_TYPE  VARCHAR2(4000)	 PATH   'msa:que_type' 
																						, INCLUDE_METRICS  VARCHAR2(4000)	 PATH   'msa:include_metrics' 
																						, METRIC_FREQUENCY  VARCHAR2(4000)	 PATH   'msa:metric_frequency' 
																						, SCORING_FLAG  VARCHAR2(4000)	 PATH   'msa:scoring_flag' 
																						, NAVIGATION  VARCHAR2(4000)	 PATH   'msa:navigation' 
																						, SCORING_LOGIC  VARCHAR2(4000)	 PATH   'msa:scoring_logic' 
																						, INSTRUCTIONS  CLOB			 	 PATH   'msa:instructions_htm' 
																						, CHECKLIST_TYPE  VARCHAR2(4000)	 PATH   'msa:checklist_type' 
																						, RPN_COMPUTATION  VARCHAR2(4000)	 PATH   'msa:rpn_computation' 
																						, SCORING_METHOD  VARCHAR2(4000)	 PATH   'msa:scoring_method' 
																						, MINIMUM_SCORE  NUMBER 	PATH   'msa:minimum_score' 
																						, MAXIMUM_SCORE  NUMBER 	PATH   'msa:maximum_score' 
																						, CERTIFICATION_TEXT  CLOB			 	 PATH   'msa:certification_text_htm' 
																						, LEVEL_1_APPROVER  VARCHAR2(4000)	 PATH   'msa:level_1_approver' 
																						, LEVEL_2_APPROVER  VARCHAR2(4000)	 PATH   'msa:level_2_approver' 
																						, RESTRICT_ACCESS_TO  VARCHAR2(4000)	 PATH   'msa:restrict_access_to' 
																						, VALID_FROM  VARCHAR2(40) 	 PATH	'msa:valid_from'
																						, VALID_UNTILL  VARCHAR2(40) 	 PATH	'msa:valid_untill'
																						, QUE_ACTION  VARCHAR2(4000)	 PATH   'msa:que_action' 
																						, QUE_COMMENTS  VARCHAR2(4000)	 PATH   'msa:que_comments' 
																						, VERSION_NUMBER  VARCHAR2(4000)	 PATH   'msa:version_number' 
																						, PUBLISHED  VARCHAR2(4000)	 PATH   'msa:published' 
																						, INITIATOR  VARCHAR2(4000)	 PATH   'msa:initiator' 
																						, STATUS  VARCHAR2(4000)	 PATH   'msa:status' 
																						, CONFIG_FLAG  VARCHAR2(4000)	 PATH   'msa:config_flag' 
																						, RTF_ATTACH  VARCHAR2(4000)	 PATH   'msa:rtf_attach' 
																						, REPORTING_PERIOD_TYPE  VARCHAR2(4000)	 PATH   'msa:reporting_period_type' 
																						, QSTNR_CATEGORY  VARCHAR2(4000)	 PATH   'msa:qstnr_category' 
																						, OWNERS  VARCHAR2(4000)	 PATH   'msa:owners' 
																						, OWNER_ORGANIZATIONS  VARCHAR2(4000)	 PATH   'msa:owner_organizations' 
																						, DEFAULT_ATTRIBUTE_VALUES  VARCHAR2(4000)	 PATH   'msa:default_attribute_values' 
																						, APPLIES_TO  VARCHAR2(4000)	 PATH   'msa:applies_to' 
																						, UPLOAD  VARCHAR2(4000)	 PATH   'msa:upload' 
																						, QUE_ID  VARCHAR2(4000)	 PATH   'msa:que_id' 
																						, REL_SOURCE_ID  VARCHAR2(4000)	 PATH   'msa:rel_source_id' 
																						, REL_SOURCE_OBJECT_ID  VARCHAR2(4000)	 PATH   'msa:rel_source_object_id' 
																						, ASSOCIATED_WITH_TYPE  VARCHAR2(4000)	 PATH   'msa:associated_with_type' 
																						, CONFIGURED_OBJECT_TYPES  VARCHAR2(4000)	 PATH   'msa:configured_object_types' 
																						, ADDITIONAL_COLUMN_H1  VARCHAR2(4000)	 PATH   'msa:additional_column_h1' 
																						, ATTRIBUTE_COLUMN_H3  VARCHAR2(4000)	 PATH   'msa:attribute_column_h3' 
																						, ATTRIBUTE_COLUMN_H2  VARCHAR2(4000)	 PATH   'msa:attribute_column_h2' 
																						, DD_EVENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_event_user_name'
																						, DD_CURRENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_current_user_name'
																						, DD_OBJECT_TYPE  VARCHAR2(4000) PATH 'msa:dd_object_type'
																						, DD_PROCESS_CODE  VARCHAR2(4000) PATH 'msa:dd_process_code'
																			))      
					
				LOOP
			           LV_cntr_1 := LV_cntr_1 + 1;
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Data Found in iop_data. ', ip_pid);
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ')', ip_pid);
    

		 /* --------------------------------------------------------------------------
		       Loop through the data object to load the data into MS tables.
		        Header info is being loaded into the system.
		  -------------------------------------------------------------------------- */ 
 			  			 	
		/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
		  -------------------------------------------------------------------------- */ 	
		  		 		
  									    		IF LV_debug THEN
												

	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_NAME, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.INTERNAL_QUESTNR_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.INCLUDE_METRICS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.METRIC_FREQUENCY, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SCORING_FLAG, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.NAVIGATION, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SCORING_LOGIC, ip_pid);
				    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CHECKLIST_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RPN_COMPUTATION, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SCORING_METHOD, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.MINIMUM_SCORE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.MAXIMUM_SCORE, ip_pid);
				    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.LEVEL_1_APPROVER, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.LEVEL_2_APPROVER, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RESTRICT_ACCESS_TO, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.VALID_FROM, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.VALID_UNTILL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_ACTION, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_COMMENTS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.VERSION_NUMBER, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PUBLISHED, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.INITIATOR, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.STATUS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CONFIG_FLAG, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RTF_ATTACH, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.REPORTING_PERIOD_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QSTNR_CATEGORY, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.UPLOAD, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    				             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
			             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
    			    	END IF;
    			    	
    			    							MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  
  MERGE 
    INTO MS_QSM_QUESTIONNAIRE T 
  		USING (
  				SELECT     
          iop_data.QUE_NAME AS QUE_NAME
    	          , iop_data.INTERNAL_QUESTNR_ID AS INTERNAL_QUESTNR_ID
    	          , iop_data.QUE_TYPE AS QUE_TYPE
    	          , iop_data.INCLUDE_METRICS AS INCLUDE_METRICS
    	          , iop_data.METRIC_FREQUENCY AS METRIC_FREQUENCY
    	          , iop_data.SCORING_FLAG AS SCORING_FLAG
    	          , iop_data.NAVIGATION AS NAVIGATION
    	          , iop_data.SCORING_LOGIC AS SCORING_LOGIC
    	          , iop_data.INSTRUCTIONS AS INSTRUCTIONS
    	          , iop_data.CHECKLIST_TYPE AS CHECKLIST_TYPE
    	          , iop_data.RPN_COMPUTATION AS RPN_COMPUTATION
    	          , iop_data.SCORING_METHOD AS SCORING_METHOD
    	          , iop_data.MINIMUM_SCORE AS MINIMUM_SCORE
    	          , iop_data.MAXIMUM_SCORE AS MAXIMUM_SCORE
    	          , iop_data.CERTIFICATION_TEXT AS CERTIFICATION_TEXT
    	          , iop_data.LEVEL_1_APPROVER AS LEVEL_1_APPROVER
    	          , iop_data.LEVEL_2_APPROVER AS LEVEL_2_APPROVER
    	          , iop_data.RESTRICT_ACCESS_TO AS RESTRICT_ACCESS_TO
    	          , iop_data.VALID_FROM AS VALID_FROM
    	          , iop_data.VALID_UNTILL AS VALID_UNTILL
    	          , iop_data.QUE_ACTION AS QUE_ACTION
    	          , iop_data.QUE_COMMENTS AS QUE_COMMENTS
    	          , iop_data.VERSION_NUMBER AS VERSION_NUMBER
    	          , iop_data.PUBLISHED AS PUBLISHED
    	          , iop_data.INITIATOR AS INITIATOR
    	          , iop_data.STATUS AS STATUS
    	          , iop_data.CONFIG_FLAG AS CONFIG_FLAG
    	          , iop_data.RTF_ATTACH AS RTF_ATTACH
    	          , iop_data.REPORTING_PERIOD_TYPE AS REPORTING_PERIOD_TYPE
    	          , iop_data.QSTNR_CATEGORY AS QSTNR_CATEGORY
    	          , iop_data.UPLOAD AS UPLOAD
    	          , iop_data.QUE_ID AS QUE_ID
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.INTERNAL_QUESTNR_ID = V.INTERNAL_QUESTNR_ID
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.QUE_NAME=V.QUE_NAME
 ,T.QUE_TYPE=V.QUE_TYPE
 ,T.INCLUDE_METRICS=V.INCLUDE_METRICS
 ,T.METRIC_FREQUENCY=V.METRIC_FREQUENCY
 ,T.SCORING_FLAG=V.SCORING_FLAG
 ,T.NAVIGATION=V.NAVIGATION
 ,T.SCORING_LOGIC=V.SCORING_LOGIC
 ,T.INSTRUCTIONS=V.INSTRUCTIONS
 ,T.CHECKLIST_TYPE=V.CHECKLIST_TYPE
 ,T.RPN_COMPUTATION=V.RPN_COMPUTATION
 ,T.SCORING_METHOD=V.SCORING_METHOD
 ,T.MINIMUM_SCORE=V.MINIMUM_SCORE
 ,T.MAXIMUM_SCORE=V.MAXIMUM_SCORE
 ,T.CERTIFICATION_TEXT=V.CERTIFICATION_TEXT
 ,T.LEVEL_1_APPROVER=V.LEVEL_1_APPROVER
 ,T.LEVEL_2_APPROVER=V.LEVEL_2_APPROVER
 ,T.RESTRICT_ACCESS_TO=V.RESTRICT_ACCESS_TO
 ,T.VALID_FROM=V.VALID_FROM
 ,T.VALID_UNTILL=V.VALID_UNTILL
 ,T.QUE_ACTION=V.QUE_ACTION
 ,T.QUE_COMMENTS=V.QUE_COMMENTS
 ,T.VERSION_NUMBER=V.VERSION_NUMBER
 ,T.PUBLISHED=V.PUBLISHED
 ,T.INITIATOR=V.INITIATOR
 ,T.STATUS=V.STATUS
 ,T.CONFIG_FLAG=V.CONFIG_FLAG
 ,T.RTF_ATTACH=V.RTF_ATTACH
 ,T.REPORTING_PERIOD_TYPE=V.REPORTING_PERIOD_TYPE
 ,T.QSTNR_CATEGORY=V.QSTNR_CATEGORY
 ,T.UPLOAD=V.UPLOAD
 ,T.QUE_ID=V.QUE_ID
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.QUE_NAME
 ,T.INTERNAL_QUESTNR_ID
 ,T.QUE_TYPE
 ,T.INCLUDE_METRICS
 ,T.METRIC_FREQUENCY
 ,T.SCORING_FLAG
 ,T.NAVIGATION
 ,T.SCORING_LOGIC
 ,T.INSTRUCTIONS
 ,T.CHECKLIST_TYPE
 ,T.RPN_COMPUTATION
 ,T.SCORING_METHOD
 ,T.MINIMUM_SCORE
 ,T.MAXIMUM_SCORE
 ,T.CERTIFICATION_TEXT
 ,T.LEVEL_1_APPROVER
 ,T.LEVEL_2_APPROVER
 ,T.RESTRICT_ACCESS_TO
 ,T.VALID_FROM
 ,T.VALID_UNTILL
 ,T.QUE_ACTION
 ,T.QUE_COMMENTS
 ,T.VERSION_NUMBER
 ,T.PUBLISHED
 ,T.INITIATOR
 ,T.STATUS
 ,T.CONFIG_FLAG
 ,T.RTF_ATTACH
 ,T.REPORTING_PERIOD_TYPE
 ,T.QSTNR_CATEGORY
 ,T.UPLOAD
 ,T.QUE_ID
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.QUE_NAME
        ,V.INTERNAL_QUESTNR_ID
        ,V.QUE_TYPE
        ,V.INCLUDE_METRICS
        ,V.METRIC_FREQUENCY
        ,V.SCORING_FLAG
        ,V.NAVIGATION
        ,V.SCORING_LOGIC
        ,V.INSTRUCTIONS
        ,V.CHECKLIST_TYPE
        ,V.RPN_COMPUTATION
        ,V.SCORING_METHOD
        ,V.MINIMUM_SCORE
        ,V.MAXIMUM_SCORE
        ,V.CERTIFICATION_TEXT
        ,V.LEVEL_1_APPROVER
        ,V.LEVEL_2_APPROVER
        ,V.RESTRICT_ACCESS_TO
        ,V.VALID_FROM
        ,V.VALID_UNTILL
        ,V.QUE_ACTION
        ,V.QUE_COMMENTS
        ,V.VERSION_NUMBER
        ,V.PUBLISHED
        ,V.INITIATOR
        ,V.STATUS
        ,V.CONFIG_FLAG
        ,V.RTF_ATTACH
        ,V.REPORTING_PERIOD_TYPE
        ,V.QSTNR_CATEGORY
        ,V.UPLOAD
        ,V.QUE_ID
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
						
																		

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	  DELETE MS_QSM_QUESTIONNAIRE_OWS WHERE 
 	   	   	   		 INTERNAL_QUESTNR_ID = iop_data.INTERNAL_QUESTNR_ID
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.OWNERS) > 0 THEN
 		
 		INSERT INTO MS_QSM_QUESTIONNAIRE_OWS (
 		 		 		 INTERNAL_QUESTNR_ID
 		 		,  OWNERS
 		 		) SELECT 
 		 		 		  iop_data.INTERNAL_QUESTNR_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.OWNERS,','));

 	   END IF;
 	  													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	  DELETE MS_QSM_QUESTIONNAIRE_OWO WHERE 
 	   	   	   		 INTERNAL_QUESTNR_ID = iop_data.INTERNAL_QUESTNR_ID
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.OWNER_ORGANIZATIONS) > 0 THEN
 		
 		INSERT INTO MS_QSM_QUESTIONNAIRE_OWO (
 		 		 		 INTERNAL_QUESTNR_ID
 		 		,  OWNER_ORGANIZATIONS
 		 		) SELECT 
 		 		 		  iop_data.INTERNAL_QUESTNR_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.OWNER_ORGANIZATIONS,','));

 	   END IF;
 	  													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	  DELETE MS_QSM_QUESTIONNAIRE_DAV WHERE 
 	   	   	   		 INTERNAL_QUESTNR_ID = iop_data.INTERNAL_QUESTNR_ID
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.DEFAULT_ATTRIBUTE_VALUES) > 0 THEN
 		
 		INSERT INTO MS_QSM_QUESTIONNAIRE_DAV (
 		 		 		 INTERNAL_QUESTNR_ID
 		 		,  DEFAULT_ATTRIBUTE_VALUES
 		 		) SELECT 
 		 		 		  iop_data.INTERNAL_QUESTNR_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.DEFAULT_ATTRIBUTE_VALUES,','));

 	   END IF;
 	  													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	  DELETE MS_QSM_QUESTIONNAIRE_APT WHERE 
 	   	   	   		 INTERNAL_QUESTNR_ID = iop_data.INTERNAL_QUESTNR_ID
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.APPLIES_TO) > 0 THEN
 		
 		INSERT INTO MS_QSM_QUESTIONNAIRE_APT (
 		 		 		 INTERNAL_QUESTNR_ID
 		 		,  APPLIES_TO
 		 		) SELECT 
 		 		 		  iop_data.INTERNAL_QUESTNR_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.APPLIES_TO,','));

 	   END IF;
 	  													
		  		  	     	/* --------------------------------------------------------------------------
	      	Loading data for related Child object. Data has been loaded into parent table
	      	-------------------------------------------------------------------------- */
			   	   		  			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_QSM_QUESTION.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_ID_PK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_SECTION_FK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_PARENT_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_NAME, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_OPTIONAL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_WEIGHTAGE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_BASED_ON_RESPONSE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_TARGET, ip_pid);
				    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_RESPONSE_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_LIST_OF_VALUES, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_DEFAULT_SCORE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_BASED_ON_NUMBER, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_DOCUMENTS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_INFOLET_SCORING, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).PARENT_RESPONSE_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).PARENT_LOV_VALUES, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_METRIC_HYPERLINK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_TOTAL_SEC_WEIGHTAGE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_AOC_DISP, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_REQ_DISP, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_OBJ_DISP, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_RSK_DISP, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_CTL_DISP, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_CUSTOM_SCR_LOGIC, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_SCR_INFOLET, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_TREE_LEVEL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_SECTION_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_UNIQUE_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_ACTION_PLAN, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_SPRDSHEET_TEMPLATE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_ALLOW_RESP_NA, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).RESP_REQ_APPROVAL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).RESP_REQ_ACTION, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_MLOV_SCORING, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).PRE_POPULATE_DATA, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).PRE_POPULATE_DATA_STORED, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    	 END LOOP;
 				END IF;
				
												MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  FORALL i IN TY_QSM_QUESTION.FIRST..TY_QSM_QUESTION.LAST 
  
  MERGE 
    INTO MS_QSM_QUESTION T 
  		USING (
  				SELECT     
          TY_QSM_QUESTION(i).QST_ID_PK AS QST_ID_PK
    	          , TY_QSM_QUESTION(i).QST_ID AS QST_ID
    	          , TY_QSM_QUESTION(i).QST_SECTION_FK AS QST_SECTION_FK
    	          , TY_QSM_QUESTION(i).QST_TYPE AS QST_TYPE
    	          , TY_QSM_QUESTION(i).QST_PARENT_TYPE AS QST_PARENT_TYPE
    	          , TY_QSM_QUESTION(i).QST_NAME AS QST_NAME
    	          , TY_QSM_QUESTION(i).QST_OPTIONAL AS QST_OPTIONAL
    	          , TY_QSM_QUESTION(i).QST_WEIGHTAGE AS QST_WEIGHTAGE
    	          , TY_QSM_QUESTION(i).QST_BASED_ON_RESPONSE AS QST_BASED_ON_RESPONSE
    	          , TY_QSM_QUESTION(i).QST_TARGET AS QST_TARGET
    	          , TY_QSM_QUESTION(i).QST_DESCRIPTION AS QST_DESCRIPTION
    	          , TY_QSM_QUESTION(i).QST_RESPONSE_TYPE AS QST_RESPONSE_TYPE
    	          , TY_QSM_QUESTION(i).QST_LIST_OF_VALUES AS QST_LIST_OF_VALUES
    	          , TY_QSM_QUESTION(i).QST_DEFAULT_SCORE AS QST_DEFAULT_SCORE
    	          , TY_QSM_QUESTION(i).QST_BASED_ON_NUMBER AS QST_BASED_ON_NUMBER
    	          , TY_QSM_QUESTION(i).QST_DOCUMENTS AS QST_DOCUMENTS
    	          , TY_QSM_QUESTION(i).QST_INFOLET_SCORING AS QST_INFOLET_SCORING
    	          , TY_QSM_QUESTION(i).PARENT_RESPONSE_TYPE AS PARENT_RESPONSE_TYPE
    	          , TY_QSM_QUESTION(i).PARENT_LOV_VALUES AS PARENT_LOV_VALUES
    	          , TY_QSM_QUESTION(i).QST_METRIC_HYPERLINK AS QST_METRIC_HYPERLINK
    	          , TY_QSM_QUESTION(i).QST_TOTAL_SEC_WEIGHTAGE AS QST_TOTAL_SEC_WEIGHTAGE
    	          , TY_QSM_QUESTION(i).QST_AOC_DISP AS QST_AOC_DISP
    	          , TY_QSM_QUESTION(i).QST_REQ_DISP AS QST_REQ_DISP
    	          , TY_QSM_QUESTION(i).QST_OBJ_DISP AS QST_OBJ_DISP
    	          , TY_QSM_QUESTION(i).QST_RSK_DISP AS QST_RSK_DISP
    	          , TY_QSM_QUESTION(i).QST_CTL_DISP AS QST_CTL_DISP
    	          , TY_QSM_QUESTION(i).QST_CUSTOM_SCR_LOGIC AS QST_CUSTOM_SCR_LOGIC
    	          , TY_QSM_QUESTION(i).QST_SCR_INFOLET AS QST_SCR_INFOLET
    	          , TY_QSM_QUESTION(i).QST_TREE_LEVEL AS QST_TREE_LEVEL
    	          , TY_QSM_QUESTION(i).QST_SECTION_ID AS QST_SECTION_ID
    	          , TY_QSM_QUESTION(i).QST_UNIQUE_ID AS QST_UNIQUE_ID
    	          , TY_QSM_QUESTION(i).QST_ACTION_PLAN AS QST_ACTION_PLAN
    	          , TY_QSM_QUESTION(i).QST_SPRDSHEET_TEMPLATE AS QST_SPRDSHEET_TEMPLATE
    	          , TY_QSM_QUESTION(i).QST_ALLOW_RESP_NA AS QST_ALLOW_RESP_NA
    	          , TY_QSM_QUESTION(i).RESP_REQ_APPROVAL AS RESP_REQ_APPROVAL
    	          , TY_QSM_QUESTION(i).RESP_REQ_ACTION AS RESP_REQ_ACTION
    	          , TY_QSM_QUESTION(i).QST_MLOV_SCORING AS QST_MLOV_SCORING
    	          , TY_QSM_QUESTION(i).PRE_POPULATE_DATA AS PRE_POPULATE_DATA
    	          , TY_QSM_QUESTION(i).PRE_POPULATE_DATA_STORED AS PRE_POPULATE_DATA_STORED
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.QST_ID_PK = V.QST_ID_PK
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.QST_ID=V.QST_ID
 ,T.QST_SECTION_FK=V.QST_SECTION_FK
 ,T.QST_TYPE=V.QST_TYPE
 ,T.QST_PARENT_TYPE=V.QST_PARENT_TYPE
 ,T.QST_NAME=V.QST_NAME
 ,T.QST_OPTIONAL=V.QST_OPTIONAL
 ,T.QST_WEIGHTAGE=V.QST_WEIGHTAGE
 ,T.QST_BASED_ON_RESPONSE=V.QST_BASED_ON_RESPONSE
 ,T.QST_TARGET=V.QST_TARGET
 ,T.QST_DESCRIPTION=V.QST_DESCRIPTION
 ,T.QST_RESPONSE_TYPE=V.QST_RESPONSE_TYPE
 ,T.QST_LIST_OF_VALUES=V.QST_LIST_OF_VALUES
 ,T.QST_DEFAULT_SCORE=V.QST_DEFAULT_SCORE
 ,T.QST_BASED_ON_NUMBER=V.QST_BASED_ON_NUMBER
 ,T.QST_DOCUMENTS=V.QST_DOCUMENTS
 ,T.QST_INFOLET_SCORING=V.QST_INFOLET_SCORING
 ,T.PARENT_RESPONSE_TYPE=V.PARENT_RESPONSE_TYPE
 ,T.PARENT_LOV_VALUES=V.PARENT_LOV_VALUES
 ,T.QST_METRIC_HYPERLINK=V.QST_METRIC_HYPERLINK
 ,T.QST_TOTAL_SEC_WEIGHTAGE=V.QST_TOTAL_SEC_WEIGHTAGE
 ,T.QST_AOC_DISP=V.QST_AOC_DISP
 ,T.QST_REQ_DISP=V.QST_REQ_DISP
 ,T.QST_OBJ_DISP=V.QST_OBJ_DISP
 ,T.QST_RSK_DISP=V.QST_RSK_DISP
 ,T.QST_CTL_DISP=V.QST_CTL_DISP
 ,T.QST_CUSTOM_SCR_LOGIC=V.QST_CUSTOM_SCR_LOGIC
 ,T.QST_SCR_INFOLET=V.QST_SCR_INFOLET
 ,T.QST_TREE_LEVEL=V.QST_TREE_LEVEL
 ,T.QST_SECTION_ID=V.QST_SECTION_ID
 ,T.QST_UNIQUE_ID=V.QST_UNIQUE_ID
 ,T.QST_ACTION_PLAN=V.QST_ACTION_PLAN
 ,T.QST_SPRDSHEET_TEMPLATE=V.QST_SPRDSHEET_TEMPLATE
 ,T.QST_ALLOW_RESP_NA=V.QST_ALLOW_RESP_NA
 ,T.RESP_REQ_APPROVAL=V.RESP_REQ_APPROVAL
 ,T.RESP_REQ_ACTION=V.RESP_REQ_ACTION
 ,T.QST_MLOV_SCORING=V.QST_MLOV_SCORING
 ,T.PRE_POPULATE_DATA=V.PRE_POPULATE_DATA
 ,T.PRE_POPULATE_DATA_STORED=V.PRE_POPULATE_DATA_STORED
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.QST_ID_PK
 ,T.QST_ID
 ,T.QST_SECTION_FK
 ,T.QST_TYPE
 ,T.QST_PARENT_TYPE
 ,T.QST_NAME
 ,T.QST_OPTIONAL
 ,T.QST_WEIGHTAGE
 ,T.QST_BASED_ON_RESPONSE
 ,T.QST_TARGET
 ,T.QST_DESCRIPTION
 ,T.QST_RESPONSE_TYPE
 ,T.QST_LIST_OF_VALUES
 ,T.QST_DEFAULT_SCORE
 ,T.QST_BASED_ON_NUMBER
 ,T.QST_DOCUMENTS
 ,T.QST_INFOLET_SCORING
 ,T.PARENT_RESPONSE_TYPE
 ,T.PARENT_LOV_VALUES
 ,T.QST_METRIC_HYPERLINK
 ,T.QST_TOTAL_SEC_WEIGHTAGE
 ,T.QST_AOC_DISP
 ,T.QST_REQ_DISP
 ,T.QST_OBJ_DISP
 ,T.QST_RSK_DISP
 ,T.QST_CTL_DISP
 ,T.QST_CUSTOM_SCR_LOGIC
 ,T.QST_SCR_INFOLET
 ,T.QST_TREE_LEVEL
 ,T.QST_SECTION_ID
 ,T.QST_UNIQUE_ID
 ,T.QST_ACTION_PLAN
 ,T.QST_SPRDSHEET_TEMPLATE
 ,T.QST_ALLOW_RESP_NA
 ,T.RESP_REQ_APPROVAL
 ,T.RESP_REQ_ACTION
 ,T.QST_MLOV_SCORING
 ,T.PRE_POPULATE_DATA
 ,T.PRE_POPULATE_DATA_STORED
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.QST_ID_PK
        ,V.QST_ID
        ,V.QST_SECTION_FK
        ,V.QST_TYPE
        ,V.QST_PARENT_TYPE
        ,V.QST_NAME
        ,V.QST_OPTIONAL
        ,V.QST_WEIGHTAGE
        ,V.QST_BASED_ON_RESPONSE
        ,V.QST_TARGET
        ,V.QST_DESCRIPTION
        ,V.QST_RESPONSE_TYPE
        ,V.QST_LIST_OF_VALUES
        ,V.QST_DEFAULT_SCORE
        ,V.QST_BASED_ON_NUMBER
        ,V.QST_DOCUMENTS
        ,V.QST_INFOLET_SCORING
        ,V.PARENT_RESPONSE_TYPE
        ,V.PARENT_LOV_VALUES
        ,V.QST_METRIC_HYPERLINK
        ,V.QST_TOTAL_SEC_WEIGHTAGE
        ,V.QST_AOC_DISP
        ,V.QST_REQ_DISP
        ,V.QST_OBJ_DISP
        ,V.QST_RSK_DISP
        ,V.QST_CTL_DISP
        ,V.QST_CUSTOM_SCR_LOGIC
        ,V.QST_SCR_INFOLET
        ,V.QST_TREE_LEVEL
        ,V.QST_SECTION_ID
        ,V.QST_UNIQUE_ID
        ,V.QST_ACTION_PLAN
        ,V.QST_SPRDSHEET_TEMPLATE
        ,V.QST_ALLOW_RESP_NA
        ,V.RESP_REQ_APPROVAL
        ,V.RESP_REQ_ACTION
        ,V.QST_MLOV_SCORING
        ,V.PRE_POPULATE_DATA
        ,V.PRE_POPULATE_DATA_STORED
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_QSM_QUESTION.COUNT LOOP 
	   	  
 	  DELETE MS_QSM_QUESTION_AOC WHERE 
 	   	   	   		 QST_ID_PK =  TY_QSM_QUESTION(j).QST_ID_PK
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_QSM_QUESTION(j).QST_AREA_OF_COMPLIANCE) > 0 THEN
 		
 		INSERT INTO MS_QSM_QUESTION_AOC (
 		 		 		 QST_ID_PK
 		 		,  QST_AREA_OF_COMPLIANCE
 		 		) SELECT 
 		 		 		  TY_QSM_QUESTION(j).QST_ID_PK  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_QSM_QUESTION(j).QST_AREA_OF_COMPLIANCE,','));

 	   END IF;
 		  END LOOP; 	   
	  										

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_QSM_QUESTION.COUNT LOOP 
	   	  
 	  DELETE MS_QSM_QUESTION_REQ WHERE 
 	   	   	   		 QST_ID_PK =  TY_QSM_QUESTION(j).QST_ID_PK
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_QSM_QUESTION(j).QST_REQUIREMENTS) > 0 THEN
 		
 		INSERT INTO MS_QSM_QUESTION_REQ (
 		 		 		 QST_ID_PK
 		 		,  QST_REQUIREMENTS
 		 		) SELECT 
 		 		 		  TY_QSM_QUESTION(j).QST_ID_PK  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_QSM_QUESTION(j).QST_REQUIREMENTS,','));

 	   END IF;
 		  END LOOP; 	   
	  										

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_QSM_QUESTION.COUNT LOOP 
	   	  
 	  DELETE MS_QSM_QUESTION_OBJ WHERE 
 	   	   	   		 QST_ID_PK =  TY_QSM_QUESTION(j).QST_ID_PK
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_QSM_QUESTION(j).QST_OBJECTIVES) > 0 THEN
 		
 		INSERT INTO MS_QSM_QUESTION_OBJ (
 		 		 		 QST_ID_PK
 		 		,  QST_OBJECTIVES
 		 		) SELECT 
 		 		 		  TY_QSM_QUESTION(j).QST_ID_PK  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_QSM_QUESTION(j).QST_OBJECTIVES,','));

 	   END IF;
 		  END LOOP; 	   
	  										

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_QSM_QUESTION.COUNT LOOP 
	   	  
 	  DELETE MS_QSM_QUESTION_RSK WHERE 
 	   	   	   		 QST_ID_PK =  TY_QSM_QUESTION(j).QST_ID_PK
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_QSM_QUESTION(j).QST_RISKS) > 0 THEN
 		
 		INSERT INTO MS_QSM_QUESTION_RSK (
 		 		 		 QST_ID_PK
 		 		,  QST_RISKS
 		 		) SELECT 
 		 		 		  TY_QSM_QUESTION(j).QST_ID_PK  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_QSM_QUESTION(j).QST_RISKS,','));

 	   END IF;
 		  END LOOP; 	   
	  										

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_QSM_QUESTION.COUNT LOOP 
	   	  
 	  DELETE MS_QSM_QUESTION_CTL WHERE 
 	   	   	   		 QST_ID_PK =  TY_QSM_QUESTION(j).QST_ID_PK
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_QSM_QUESTION(j).QST_CONTROLS) > 0 THEN
 		
 		INSERT INTO MS_QSM_QUESTION_CTL (
 		 		 		 QST_ID_PK
 		 		,  QST_CONTROLS
 		 		) SELECT 
 		 		 		  TY_QSM_QUESTION(j).QST_ID_PK  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_QSM_QUESTION(j).QST_CONTROLS,','));

 	   END IF;
 		  END LOOP; 	   
	  										

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_QSM_QUESTION.COUNT LOOP 
	   	  
 	  DELETE MS_QSM_QUESTION_ATV WHERE 
 	   	   	   		 QST_ID_PK =  TY_QSM_QUESTION(j).QST_ID_PK
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_QSM_QUESTION(j).QST_ATTRIBUTE_VALUES) > 0 THEN
 		
 		INSERT INTO MS_QSM_QUESTION_ATV (
 		 		 		 QST_ID_PK
 		 		,  QST_ATTRIBUTE_VALUES
 		 		) SELECT 
 		 		 		  TY_QSM_QUESTION(j).QST_ID_PK  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_QSM_QUESTION(j).QST_ATTRIBUTE_VALUES,','));

 	   END IF;
 		  END LOOP; 	   
	  								 	   		 	     	/* --------------------------------------------------------------------------
	      	Loading data for related Child object. Data has been loaded into parent table
	      	-------------------------------------------------------------------------- */
			   	   		  			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_QSM_SECTION.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SECTION_ID_PK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SECTION_QUESTNR_FK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SECTION_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SECTION_NAME, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SECTION_SCORING_METHOD, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SECTION_OPTIONAL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SECTION_WEIGHTAGE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SECTION_PARENT_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SECTION_SECTION_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SEC_TOTAL_SCR_WEIGHTAGE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    	 END LOOP;
 				END IF;
				
												MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  FORALL i IN TY_QSM_SECTION.FIRST..TY_QSM_SECTION.LAST 
  
  MERGE 
    INTO MS_QSM_SECTION T 
  		USING (
  				SELECT     
          TY_QSM_SECTION(i).SECTION_ID_PK AS SECTION_ID_PK
    	          , TY_QSM_SECTION(i).SECTION_QUESTNR_FK AS SECTION_QUESTNR_FK
    	          , TY_QSM_SECTION(i).SECTION_TYPE AS SECTION_TYPE
    	          , TY_QSM_SECTION(i).SECTION_NAME AS SECTION_NAME
    	          , TY_QSM_SECTION(i).SECTION_SCORING_METHOD AS SECTION_SCORING_METHOD
    	          , TY_QSM_SECTION(i).SECTION_OPTIONAL AS SECTION_OPTIONAL
    	          , TY_QSM_SECTION(i).SECTION_WEIGHTAGE AS SECTION_WEIGHTAGE
    	          , TY_QSM_SECTION(i).SECTION_PARENT_TYPE AS SECTION_PARENT_TYPE
    	          , TY_QSM_SECTION(i).SECTION_SECTION_ID AS SECTION_SECTION_ID
    	          , TY_QSM_SECTION(i).SEC_TOTAL_SCR_WEIGHTAGE AS SEC_TOTAL_SCR_WEIGHTAGE
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.SECTION_ID_PK = V.SECTION_ID_PK
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.SECTION_QUESTNR_FK=V.SECTION_QUESTNR_FK
 ,T.SECTION_TYPE=V.SECTION_TYPE
 ,T.SECTION_NAME=V.SECTION_NAME
 ,T.SECTION_SCORING_METHOD=V.SECTION_SCORING_METHOD
 ,T.SECTION_OPTIONAL=V.SECTION_OPTIONAL
 ,T.SECTION_WEIGHTAGE=V.SECTION_WEIGHTAGE
 ,T.SECTION_PARENT_TYPE=V.SECTION_PARENT_TYPE
 ,T.SECTION_SECTION_ID=V.SECTION_SECTION_ID
 ,T.SEC_TOTAL_SCR_WEIGHTAGE=V.SEC_TOTAL_SCR_WEIGHTAGE
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.SECTION_ID_PK
 ,T.SECTION_QUESTNR_FK
 ,T.SECTION_TYPE
 ,T.SECTION_NAME
 ,T.SECTION_SCORING_METHOD
 ,T.SECTION_OPTIONAL
 ,T.SECTION_WEIGHTAGE
 ,T.SECTION_PARENT_TYPE
 ,T.SECTION_SECTION_ID
 ,T.SEC_TOTAL_SCR_WEIGHTAGE
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.SECTION_ID_PK
        ,V.SECTION_QUESTNR_FK
        ,V.SECTION_TYPE
        ,V.SECTION_NAME
        ,V.SECTION_SCORING_METHOD
        ,V.SECTION_OPTIONAL
        ,V.SECTION_WEIGHTAGE
        ,V.SECTION_PARENT_TYPE
        ,V.SECTION_SECTION_ID
        ,V.SEC_TOTAL_SCR_WEIGHTAGE
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
											 	   		 	     	/* --------------------------------------------------------------------------
	      	Loading data for related Child object. Data has been loaded into parent table
	      	-------------------------------------------------------------------------- */
			   	   		  			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_QSM_SCORING.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_ID_PK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_QST_FK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_SCORING_RULE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_VALUE_1, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_VALUE_2, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_VALUE_1_1, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_GRADE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_SCORE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_PARENT_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_RESP_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_LOV_VALUES, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    	 END LOOP;
 				END IF;
				
												MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  FORALL i IN TY_QSM_SCORING.FIRST..TY_QSM_SCORING.LAST 
  
  MERGE 
    INTO MS_QSM_SCORING T 
  		USING (
  				SELECT     
          TY_QSM_SCORING(i).SCR_ID_PK AS SCR_ID_PK
    	          , TY_QSM_SCORING(i).SCR_QST_FK AS SCR_QST_FK
    	          , TY_QSM_SCORING(i).SCR_SCORING_RULE AS SCR_SCORING_RULE
    	          , TY_QSM_SCORING(i).SCR_VALUE_1 AS SCR_VALUE_1
    	          , TY_QSM_SCORING(i).SCR_VALUE_2 AS SCR_VALUE_2
    	          , TY_QSM_SCORING(i).SCR_VALUE_1_1 AS SCR_VALUE_1_1
    	          , TY_QSM_SCORING(i).SCR_GRADE AS SCR_GRADE
    	          , TY_QSM_SCORING(i).SCR_SCORE AS SCR_SCORE
    	          , TY_QSM_SCORING(i).SCR_PARENT_TYPE AS SCR_PARENT_TYPE
    	          , TY_QSM_SCORING(i).SCR_RESP_TYPE AS SCR_RESP_TYPE
    	          , TY_QSM_SCORING(i).SCR_LOV_VALUES AS SCR_LOV_VALUES
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.SCR_ID_PK = V.SCR_ID_PK
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.SCR_QST_FK=V.SCR_QST_FK
 ,T.SCR_SCORING_RULE=V.SCR_SCORING_RULE
 ,T.SCR_VALUE_1=V.SCR_VALUE_1
 ,T.SCR_VALUE_2=V.SCR_VALUE_2
 ,T.SCR_VALUE_1_1=V.SCR_VALUE_1_1
 ,T.SCR_GRADE=V.SCR_GRADE
 ,T.SCR_SCORE=V.SCR_SCORE
 ,T.SCR_PARENT_TYPE=V.SCR_PARENT_TYPE
 ,T.SCR_RESP_TYPE=V.SCR_RESP_TYPE
 ,T.SCR_LOV_VALUES=V.SCR_LOV_VALUES
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.SCR_ID_PK
 ,T.SCR_QST_FK
 ,T.SCR_SCORING_RULE
 ,T.SCR_VALUE_1
 ,T.SCR_VALUE_2
 ,T.SCR_VALUE_1_1
 ,T.SCR_GRADE
 ,T.SCR_SCORE
 ,T.SCR_PARENT_TYPE
 ,T.SCR_RESP_TYPE
 ,T.SCR_LOV_VALUES
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.SCR_ID_PK
        ,V.SCR_QST_FK
        ,V.SCR_SCORING_RULE
        ,V.SCR_VALUE_1
        ,V.SCR_VALUE_2
        ,V.SCR_VALUE_1_1
        ,V.SCR_GRADE
        ,V.SCR_SCORE
        ,V.SCR_PARENT_TYPE
        ,V.SCR_RESP_TYPE
        ,V.SCR_LOV_VALUES
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
											 	   		 	     	/* --------------------------------------------------------------------------
	      	Loading data for related Child object. Data has been loaded into parent table
	      	-------------------------------------------------------------------------- */
			   	   		  			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_QSM_GRADE.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_GRADE(j).GRD_SCORING_RULE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_GRADE(j).GRD_SCORING_PK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_GRADE(j).GRD_GRADE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_GRADE(j).GRD_VALUE_1, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_GRADE(j).GRD_VALUE_2, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_GRADE(j).GRD_QUESTNR_FK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    	 END LOOP;
 				END IF;
				
												MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  FORALL i IN TY_QSM_GRADE.FIRST..TY_QSM_GRADE.LAST 
  
  MERGE 
    INTO MS_QSM_GRADE T 
  		USING (
  				SELECT     
          TY_QSM_GRADE(i).GRD_SCORING_RULE AS GRD_SCORING_RULE
    	          , TY_QSM_GRADE(i).GRD_SCORING_PK AS GRD_SCORING_PK
    	          , TY_QSM_GRADE(i).GRD_GRADE AS GRD_GRADE
    	          , TY_QSM_GRADE(i).GRD_VALUE_1 AS GRD_VALUE_1
    	          , TY_QSM_GRADE(i).GRD_VALUE_2 AS GRD_VALUE_2
    	          , TY_QSM_GRADE(i).GRD_QUESTNR_FK AS GRD_QUESTNR_FK
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.GRD_SCORING_PK = V.GRD_SCORING_PK
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.GRD_SCORING_RULE=V.GRD_SCORING_RULE
 ,T.GRD_GRADE=V.GRD_GRADE
 ,T.GRD_VALUE_1=V.GRD_VALUE_1
 ,T.GRD_VALUE_2=V.GRD_VALUE_2
 ,T.GRD_QUESTNR_FK=V.GRD_QUESTNR_FK
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.GRD_SCORING_RULE
 ,T.GRD_SCORING_PK
 ,T.GRD_GRADE
 ,T.GRD_VALUE_1
 ,T.GRD_VALUE_2
 ,T.GRD_QUESTNR_FK
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.GRD_SCORING_RULE
        ,V.GRD_SCORING_PK
        ,V.GRD_GRADE
        ,V.GRD_VALUE_1
        ,V.GRD_VALUE_2
        ,V.GRD_QUESTNR_FK
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
											 	   		 		  		   			 	
		/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
		  -------------------------------------------------------------------------- */ 	
		  		 		
  									    		IF LV_debug THEN
												

	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.REL_SOURCE_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.REL_SOURCE_OBJECT_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.ASSOCIATED_WITH_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CONFIGURED_OBJECT_TYPES, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.ADDITIONAL_COLUMN_H1, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.ATTRIBUTE_COLUMN_H3, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.ATTRIBUTE_COLUMN_H2, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    				             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
			             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
    			    	END IF;
    			    	
    			    							MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  
  MERGE 
    INTO MS_QSM_ORB_RELATION T 
  		USING (
  				SELECT     
          iop_data.REL_SOURCE_ID AS REL_SOURCE_ID
    	          , iop_data.REL_SOURCE_OBJECT_ID AS REL_SOURCE_OBJECT_ID
    	          , iop_data.ASSOCIATED_WITH_TYPE AS ASSOCIATED_WITH_TYPE
    	          , iop_data.CONFIGURED_OBJECT_TYPES AS CONFIGURED_OBJECT_TYPES
    	          , iop_data.ADDITIONAL_COLUMN_H1 AS ADDITIONAL_COLUMN_H1
    	          , iop_data.ATTRIBUTE_COLUMN_H3 AS ATTRIBUTE_COLUMN_H3
    	          , iop_data.ATTRIBUTE_COLUMN_H2 AS ATTRIBUTE_COLUMN_H2
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.REL_SOURCE_ID = V.REL_SOURCE_ID
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.REL_SOURCE_OBJECT_ID=V.REL_SOURCE_OBJECT_ID
 ,T.ASSOCIATED_WITH_TYPE=V.ASSOCIATED_WITH_TYPE
 ,T.CONFIGURED_OBJECT_TYPES=V.CONFIGURED_OBJECT_TYPES
 ,T.ADDITIONAL_COLUMN_H1=V.ADDITIONAL_COLUMN_H1
 ,T.ATTRIBUTE_COLUMN_H3=V.ATTRIBUTE_COLUMN_H3
 ,T.ATTRIBUTE_COLUMN_H2=V.ATTRIBUTE_COLUMN_H2
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.REL_SOURCE_ID
 ,T.REL_SOURCE_OBJECT_ID
 ,T.ASSOCIATED_WITH_TYPE
 ,T.CONFIGURED_OBJECT_TYPES
 ,T.ADDITIONAL_COLUMN_H1
 ,T.ATTRIBUTE_COLUMN_H3
 ,T.ATTRIBUTE_COLUMN_H2
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.REL_SOURCE_ID
        ,V.REL_SOURCE_OBJECT_ID
        ,V.ASSOCIATED_WITH_TYPE
        ,V.CONFIGURED_OBJECT_TYPES
        ,V.ADDITIONAL_COLUMN_H1
        ,V.ATTRIBUTE_COLUMN_H3
        ,V.ATTRIBUTE_COLUMN_H2
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
						
																		
		  		  	     	/* --------------------------------------------------------------------------
	      	Loading data for related Child object. Data has been loaded into parent table
	      	-------------------------------------------------------------------------- */
			   	   		  			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_QSM_QUESTION.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_ID_PK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_SECTION_FK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_PARENT_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_NAME, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_OPTIONAL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_WEIGHTAGE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_BASED_ON_RESPONSE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_TARGET, ip_pid);
				    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_RESPONSE_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_LIST_OF_VALUES, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_DEFAULT_SCORE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_BASED_ON_NUMBER, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_DOCUMENTS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_INFOLET_SCORING, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).PARENT_RESPONSE_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).PARENT_LOV_VALUES, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_METRIC_HYPERLINK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_TOTAL_SEC_WEIGHTAGE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_AOC_DISP, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_REQ_DISP, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_OBJ_DISP, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_RSK_DISP, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_CTL_DISP, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_CUSTOM_SCR_LOGIC, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_SCR_INFOLET, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_TREE_LEVEL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_SECTION_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_UNIQUE_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_ACTION_PLAN, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_SPRDSHEET_TEMPLATE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_ALLOW_RESP_NA, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).RESP_REQ_APPROVAL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).RESP_REQ_ACTION, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).QST_MLOV_SCORING, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).PRE_POPULATE_DATA, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_QUESTION(j).PRE_POPULATE_DATA_STORED, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    	 END LOOP;
 				END IF;
				
												MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  FORALL i IN TY_QSM_QUESTION.FIRST..TY_QSM_QUESTION.LAST 
  
  MERGE 
    INTO MS_QSM_QUESTION T 
  		USING (
  				SELECT     
          TY_QSM_QUESTION(i).QST_ID_PK AS QST_ID_PK
    	          , TY_QSM_QUESTION(i).QST_ID AS QST_ID
    	          , TY_QSM_QUESTION(i).QST_SECTION_FK AS QST_SECTION_FK
    	          , TY_QSM_QUESTION(i).QST_TYPE AS QST_TYPE
    	          , TY_QSM_QUESTION(i).QST_PARENT_TYPE AS QST_PARENT_TYPE
    	          , TY_QSM_QUESTION(i).QST_NAME AS QST_NAME
    	          , TY_QSM_QUESTION(i).QST_OPTIONAL AS QST_OPTIONAL
    	          , TY_QSM_QUESTION(i).QST_WEIGHTAGE AS QST_WEIGHTAGE
    	          , TY_QSM_QUESTION(i).QST_BASED_ON_RESPONSE AS QST_BASED_ON_RESPONSE
    	          , TY_QSM_QUESTION(i).QST_TARGET AS QST_TARGET
    	          , TY_QSM_QUESTION(i).QST_DESCRIPTION AS QST_DESCRIPTION
    	          , TY_QSM_QUESTION(i).QST_RESPONSE_TYPE AS QST_RESPONSE_TYPE
    	          , TY_QSM_QUESTION(i).QST_LIST_OF_VALUES AS QST_LIST_OF_VALUES
    	          , TY_QSM_QUESTION(i).QST_DEFAULT_SCORE AS QST_DEFAULT_SCORE
    	          , TY_QSM_QUESTION(i).QST_BASED_ON_NUMBER AS QST_BASED_ON_NUMBER
    	          , TY_QSM_QUESTION(i).QST_DOCUMENTS AS QST_DOCUMENTS
    	          , TY_QSM_QUESTION(i).QST_INFOLET_SCORING AS QST_INFOLET_SCORING
    	          , TY_QSM_QUESTION(i).PARENT_RESPONSE_TYPE AS PARENT_RESPONSE_TYPE
    	          , TY_QSM_QUESTION(i).PARENT_LOV_VALUES AS PARENT_LOV_VALUES
    	          , TY_QSM_QUESTION(i).QST_METRIC_HYPERLINK AS QST_METRIC_HYPERLINK
    	          , TY_QSM_QUESTION(i).QST_TOTAL_SEC_WEIGHTAGE AS QST_TOTAL_SEC_WEIGHTAGE
    	          , TY_QSM_QUESTION(i).QST_AOC_DISP AS QST_AOC_DISP
    	          , TY_QSM_QUESTION(i).QST_REQ_DISP AS QST_REQ_DISP
    	          , TY_QSM_QUESTION(i).QST_OBJ_DISP AS QST_OBJ_DISP
    	          , TY_QSM_QUESTION(i).QST_RSK_DISP AS QST_RSK_DISP
    	          , TY_QSM_QUESTION(i).QST_CTL_DISP AS QST_CTL_DISP
    	          , TY_QSM_QUESTION(i).QST_CUSTOM_SCR_LOGIC AS QST_CUSTOM_SCR_LOGIC
    	          , TY_QSM_QUESTION(i).QST_SCR_INFOLET AS QST_SCR_INFOLET
    	          , TY_QSM_QUESTION(i).QST_TREE_LEVEL AS QST_TREE_LEVEL
    	          , TY_QSM_QUESTION(i).QST_SECTION_ID AS QST_SECTION_ID
    	          , TY_QSM_QUESTION(i).QST_UNIQUE_ID AS QST_UNIQUE_ID
    	          , TY_QSM_QUESTION(i).QST_ACTION_PLAN AS QST_ACTION_PLAN
    	          , TY_QSM_QUESTION(i).QST_SPRDSHEET_TEMPLATE AS QST_SPRDSHEET_TEMPLATE
    	          , TY_QSM_QUESTION(i).QST_ALLOW_RESP_NA AS QST_ALLOW_RESP_NA
    	          , TY_QSM_QUESTION(i).RESP_REQ_APPROVAL AS RESP_REQ_APPROVAL
    	          , TY_QSM_QUESTION(i).RESP_REQ_ACTION AS RESP_REQ_ACTION
    	          , TY_QSM_QUESTION(i).QST_MLOV_SCORING AS QST_MLOV_SCORING
    	          , TY_QSM_QUESTION(i).PRE_POPULATE_DATA AS PRE_POPULATE_DATA
    	          , TY_QSM_QUESTION(i).PRE_POPULATE_DATA_STORED AS PRE_POPULATE_DATA_STORED
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.QST_ID_PK = V.QST_ID_PK
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.QST_ID=V.QST_ID
 ,T.QST_SECTION_FK=V.QST_SECTION_FK
 ,T.QST_TYPE=V.QST_TYPE
 ,T.QST_PARENT_TYPE=V.QST_PARENT_TYPE
 ,T.QST_NAME=V.QST_NAME
 ,T.QST_OPTIONAL=V.QST_OPTIONAL
 ,T.QST_WEIGHTAGE=V.QST_WEIGHTAGE
 ,T.QST_BASED_ON_RESPONSE=V.QST_BASED_ON_RESPONSE
 ,T.QST_TARGET=V.QST_TARGET
 ,T.QST_DESCRIPTION=V.QST_DESCRIPTION
 ,T.QST_RESPONSE_TYPE=V.QST_RESPONSE_TYPE
 ,T.QST_LIST_OF_VALUES=V.QST_LIST_OF_VALUES
 ,T.QST_DEFAULT_SCORE=V.QST_DEFAULT_SCORE
 ,T.QST_BASED_ON_NUMBER=V.QST_BASED_ON_NUMBER
 ,T.QST_DOCUMENTS=V.QST_DOCUMENTS
 ,T.QST_INFOLET_SCORING=V.QST_INFOLET_SCORING
 ,T.PARENT_RESPONSE_TYPE=V.PARENT_RESPONSE_TYPE
 ,T.PARENT_LOV_VALUES=V.PARENT_LOV_VALUES
 ,T.QST_METRIC_HYPERLINK=V.QST_METRIC_HYPERLINK
 ,T.QST_TOTAL_SEC_WEIGHTAGE=V.QST_TOTAL_SEC_WEIGHTAGE
 ,T.QST_AOC_DISP=V.QST_AOC_DISP
 ,T.QST_REQ_DISP=V.QST_REQ_DISP
 ,T.QST_OBJ_DISP=V.QST_OBJ_DISP
 ,T.QST_RSK_DISP=V.QST_RSK_DISP
 ,T.QST_CTL_DISP=V.QST_CTL_DISP
 ,T.QST_CUSTOM_SCR_LOGIC=V.QST_CUSTOM_SCR_LOGIC
 ,T.QST_SCR_INFOLET=V.QST_SCR_INFOLET
 ,T.QST_TREE_LEVEL=V.QST_TREE_LEVEL
 ,T.QST_SECTION_ID=V.QST_SECTION_ID
 ,T.QST_UNIQUE_ID=V.QST_UNIQUE_ID
 ,T.QST_ACTION_PLAN=V.QST_ACTION_PLAN
 ,T.QST_SPRDSHEET_TEMPLATE=V.QST_SPRDSHEET_TEMPLATE
 ,T.QST_ALLOW_RESP_NA=V.QST_ALLOW_RESP_NA
 ,T.RESP_REQ_APPROVAL=V.RESP_REQ_APPROVAL
 ,T.RESP_REQ_ACTION=V.RESP_REQ_ACTION
 ,T.QST_MLOV_SCORING=V.QST_MLOV_SCORING
 ,T.PRE_POPULATE_DATA=V.PRE_POPULATE_DATA
 ,T.PRE_POPULATE_DATA_STORED=V.PRE_POPULATE_DATA_STORED
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.QST_ID_PK
 ,T.QST_ID
 ,T.QST_SECTION_FK
 ,T.QST_TYPE
 ,T.QST_PARENT_TYPE
 ,T.QST_NAME
 ,T.QST_OPTIONAL
 ,T.QST_WEIGHTAGE
 ,T.QST_BASED_ON_RESPONSE
 ,T.QST_TARGET
 ,T.QST_DESCRIPTION
 ,T.QST_RESPONSE_TYPE
 ,T.QST_LIST_OF_VALUES
 ,T.QST_DEFAULT_SCORE
 ,T.QST_BASED_ON_NUMBER
 ,T.QST_DOCUMENTS
 ,T.QST_INFOLET_SCORING
 ,T.PARENT_RESPONSE_TYPE
 ,T.PARENT_LOV_VALUES
 ,T.QST_METRIC_HYPERLINK
 ,T.QST_TOTAL_SEC_WEIGHTAGE
 ,T.QST_AOC_DISP
 ,T.QST_REQ_DISP
 ,T.QST_OBJ_DISP
 ,T.QST_RSK_DISP
 ,T.QST_CTL_DISP
 ,T.QST_CUSTOM_SCR_LOGIC
 ,T.QST_SCR_INFOLET
 ,T.QST_TREE_LEVEL
 ,T.QST_SECTION_ID
 ,T.QST_UNIQUE_ID
 ,T.QST_ACTION_PLAN
 ,T.QST_SPRDSHEET_TEMPLATE
 ,T.QST_ALLOW_RESP_NA
 ,T.RESP_REQ_APPROVAL
 ,T.RESP_REQ_ACTION
 ,T.QST_MLOV_SCORING
 ,T.PRE_POPULATE_DATA
 ,T.PRE_POPULATE_DATA_STORED
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.QST_ID_PK
        ,V.QST_ID
        ,V.QST_SECTION_FK
        ,V.QST_TYPE
        ,V.QST_PARENT_TYPE
        ,V.QST_NAME
        ,V.QST_OPTIONAL
        ,V.QST_WEIGHTAGE
        ,V.QST_BASED_ON_RESPONSE
        ,V.QST_TARGET
        ,V.QST_DESCRIPTION
        ,V.QST_RESPONSE_TYPE
        ,V.QST_LIST_OF_VALUES
        ,V.QST_DEFAULT_SCORE
        ,V.QST_BASED_ON_NUMBER
        ,V.QST_DOCUMENTS
        ,V.QST_INFOLET_SCORING
        ,V.PARENT_RESPONSE_TYPE
        ,V.PARENT_LOV_VALUES
        ,V.QST_METRIC_HYPERLINK
        ,V.QST_TOTAL_SEC_WEIGHTAGE
        ,V.QST_AOC_DISP
        ,V.QST_REQ_DISP
        ,V.QST_OBJ_DISP
        ,V.QST_RSK_DISP
        ,V.QST_CTL_DISP
        ,V.QST_CUSTOM_SCR_LOGIC
        ,V.QST_SCR_INFOLET
        ,V.QST_TREE_LEVEL
        ,V.QST_SECTION_ID
        ,V.QST_UNIQUE_ID
        ,V.QST_ACTION_PLAN
        ,V.QST_SPRDSHEET_TEMPLATE
        ,V.QST_ALLOW_RESP_NA
        ,V.RESP_REQ_APPROVAL
        ,V.RESP_REQ_ACTION
        ,V.QST_MLOV_SCORING
        ,V.PRE_POPULATE_DATA
        ,V.PRE_POPULATE_DATA_STORED
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_QSM_QUESTION.COUNT LOOP 
	   	  
 	  DELETE MS_QSM_QUESTION_AOC WHERE 
 	   	   	   		 QST_ID_PK =  TY_QSM_QUESTION(j).QST_ID_PK
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_QSM_QUESTION(j).QST_AREA_OF_COMPLIANCE) > 0 THEN
 		
 		INSERT INTO MS_QSM_QUESTION_AOC (
 		 		 		 QST_ID_PK
 		 		,  QST_AREA_OF_COMPLIANCE
 		 		) SELECT 
 		 		 		  TY_QSM_QUESTION(j).QST_ID_PK  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_QSM_QUESTION(j).QST_AREA_OF_COMPLIANCE,','));

 	   END IF;
 		  END LOOP; 	   
	  										

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_QSM_QUESTION.COUNT LOOP 
	   	  
 	  DELETE MS_QSM_QUESTION_REQ WHERE 
 	   	   	   		 QST_ID_PK =  TY_QSM_QUESTION(j).QST_ID_PK
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_QSM_QUESTION(j).QST_REQUIREMENTS) > 0 THEN
 		
 		INSERT INTO MS_QSM_QUESTION_REQ (
 		 		 		 QST_ID_PK
 		 		,  QST_REQUIREMENTS
 		 		) SELECT 
 		 		 		  TY_QSM_QUESTION(j).QST_ID_PK  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_QSM_QUESTION(j).QST_REQUIREMENTS,','));

 	   END IF;
 		  END LOOP; 	   
	  										

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_QSM_QUESTION.COUNT LOOP 
	   	  
 	  DELETE MS_QSM_QUESTION_OBJ WHERE 
 	   	   	   		 QST_ID_PK =  TY_QSM_QUESTION(j).QST_ID_PK
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_QSM_QUESTION(j).QST_OBJECTIVES) > 0 THEN
 		
 		INSERT INTO MS_QSM_QUESTION_OBJ (
 		 		 		 QST_ID_PK
 		 		,  QST_OBJECTIVES
 		 		) SELECT 
 		 		 		  TY_QSM_QUESTION(j).QST_ID_PK  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_QSM_QUESTION(j).QST_OBJECTIVES,','));

 	   END IF;
 		  END LOOP; 	   
	  										

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_QSM_QUESTION.COUNT LOOP 
	   	  
 	  DELETE MS_QSM_QUESTION_RSK WHERE 
 	   	   	   		 QST_ID_PK =  TY_QSM_QUESTION(j).QST_ID_PK
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_QSM_QUESTION(j).QST_RISKS) > 0 THEN
 		
 		INSERT INTO MS_QSM_QUESTION_RSK (
 		 		 		 QST_ID_PK
 		 		,  QST_RISKS
 		 		) SELECT 
 		 		 		  TY_QSM_QUESTION(j).QST_ID_PK  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_QSM_QUESTION(j).QST_RISKS,','));

 	   END IF;
 		  END LOOP; 	   
	  										

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_QSM_QUESTION.COUNT LOOP 
	   	  
 	  DELETE MS_QSM_QUESTION_CTL WHERE 
 	   	   	   		 QST_ID_PK =  TY_QSM_QUESTION(j).QST_ID_PK
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_QSM_QUESTION(j).QST_CONTROLS) > 0 THEN
 		
 		INSERT INTO MS_QSM_QUESTION_CTL (
 		 		 		 QST_ID_PK
 		 		,  QST_CONTROLS
 		 		) SELECT 
 		 		 		  TY_QSM_QUESTION(j).QST_ID_PK  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_QSM_QUESTION(j).QST_CONTROLS,','));

 	   END IF;
 		  END LOOP; 	   
	  										

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_QSM_QUESTION.COUNT LOOP 
	   	  
 	  DELETE MS_QSM_QUESTION_ATV WHERE 
 	   	   	   		 QST_ID_PK =  TY_QSM_QUESTION(j).QST_ID_PK
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_QSM_QUESTION(j).QST_ATTRIBUTE_VALUES) > 0 THEN
 		
 		INSERT INTO MS_QSM_QUESTION_ATV (
 		 		 		 QST_ID_PK
 		 		,  QST_ATTRIBUTE_VALUES
 		 		) SELECT 
 		 		 		  TY_QSM_QUESTION(j).QST_ID_PK  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_QSM_QUESTION(j).QST_ATTRIBUTE_VALUES,','));

 	   END IF;
 		  END LOOP; 	   
	  								 	   		 	     	/* --------------------------------------------------------------------------
	      	Loading data for related Child object. Data has been loaded into parent table
	      	-------------------------------------------------------------------------- */
			   	   		  			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_QSM_SECTION.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SECTION_ID_PK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SECTION_QUESTNR_FK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SECTION_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SECTION_NAME, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SECTION_SCORING_METHOD, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SECTION_OPTIONAL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SECTION_WEIGHTAGE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SECTION_PARENT_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SECTION_SECTION_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SECTION(j).SEC_TOTAL_SCR_WEIGHTAGE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    	 END LOOP;
 				END IF;
				
												MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  FORALL i IN TY_QSM_SECTION.FIRST..TY_QSM_SECTION.LAST 
  
  MERGE 
    INTO MS_QSM_SECTION T 
  		USING (
  				SELECT     
          TY_QSM_SECTION(i).SECTION_ID_PK AS SECTION_ID_PK
    	          , TY_QSM_SECTION(i).SECTION_QUESTNR_FK AS SECTION_QUESTNR_FK
    	          , TY_QSM_SECTION(i).SECTION_TYPE AS SECTION_TYPE
    	          , TY_QSM_SECTION(i).SECTION_NAME AS SECTION_NAME
    	          , TY_QSM_SECTION(i).SECTION_SCORING_METHOD AS SECTION_SCORING_METHOD
    	          , TY_QSM_SECTION(i).SECTION_OPTIONAL AS SECTION_OPTIONAL
    	          , TY_QSM_SECTION(i).SECTION_WEIGHTAGE AS SECTION_WEIGHTAGE
    	          , TY_QSM_SECTION(i).SECTION_PARENT_TYPE AS SECTION_PARENT_TYPE
    	          , TY_QSM_SECTION(i).SECTION_SECTION_ID AS SECTION_SECTION_ID
    	          , TY_QSM_SECTION(i).SEC_TOTAL_SCR_WEIGHTAGE AS SEC_TOTAL_SCR_WEIGHTAGE
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.SECTION_ID_PK = V.SECTION_ID_PK
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.SECTION_QUESTNR_FK=V.SECTION_QUESTNR_FK
 ,T.SECTION_TYPE=V.SECTION_TYPE
 ,T.SECTION_NAME=V.SECTION_NAME
 ,T.SECTION_SCORING_METHOD=V.SECTION_SCORING_METHOD
 ,T.SECTION_OPTIONAL=V.SECTION_OPTIONAL
 ,T.SECTION_WEIGHTAGE=V.SECTION_WEIGHTAGE
 ,T.SECTION_PARENT_TYPE=V.SECTION_PARENT_TYPE
 ,T.SECTION_SECTION_ID=V.SECTION_SECTION_ID
 ,T.SEC_TOTAL_SCR_WEIGHTAGE=V.SEC_TOTAL_SCR_WEIGHTAGE
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.SECTION_ID_PK
 ,T.SECTION_QUESTNR_FK
 ,T.SECTION_TYPE
 ,T.SECTION_NAME
 ,T.SECTION_SCORING_METHOD
 ,T.SECTION_OPTIONAL
 ,T.SECTION_WEIGHTAGE
 ,T.SECTION_PARENT_TYPE
 ,T.SECTION_SECTION_ID
 ,T.SEC_TOTAL_SCR_WEIGHTAGE
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.SECTION_ID_PK
        ,V.SECTION_QUESTNR_FK
        ,V.SECTION_TYPE
        ,V.SECTION_NAME
        ,V.SECTION_SCORING_METHOD
        ,V.SECTION_OPTIONAL
        ,V.SECTION_WEIGHTAGE
        ,V.SECTION_PARENT_TYPE
        ,V.SECTION_SECTION_ID
        ,V.SEC_TOTAL_SCR_WEIGHTAGE
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
											 	   		 	     	/* --------------------------------------------------------------------------
	      	Loading data for related Child object. Data has been loaded into parent table
	      	-------------------------------------------------------------------------- */
			   	   		  			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_QSM_SCORING.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_ID_PK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_QST_FK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_SCORING_RULE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_VALUE_1, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_VALUE_2, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_VALUE_1_1, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_GRADE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_SCORE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_PARENT_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_RESP_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_SCORING(j).SCR_LOV_VALUES, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    	 END LOOP;
 				END IF;
				
												MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  FORALL i IN TY_QSM_SCORING.FIRST..TY_QSM_SCORING.LAST 
  
  MERGE 
    INTO MS_QSM_SCORING T 
  		USING (
  				SELECT     
          TY_QSM_SCORING(i).SCR_ID_PK AS SCR_ID_PK
    	          , TY_QSM_SCORING(i).SCR_QST_FK AS SCR_QST_FK
    	          , TY_QSM_SCORING(i).SCR_SCORING_RULE AS SCR_SCORING_RULE
    	          , TY_QSM_SCORING(i).SCR_VALUE_1 AS SCR_VALUE_1
    	          , TY_QSM_SCORING(i).SCR_VALUE_2 AS SCR_VALUE_2
    	          , TY_QSM_SCORING(i).SCR_VALUE_1_1 AS SCR_VALUE_1_1
    	          , TY_QSM_SCORING(i).SCR_GRADE AS SCR_GRADE
    	          , TY_QSM_SCORING(i).SCR_SCORE AS SCR_SCORE
    	          , TY_QSM_SCORING(i).SCR_PARENT_TYPE AS SCR_PARENT_TYPE
    	          , TY_QSM_SCORING(i).SCR_RESP_TYPE AS SCR_RESP_TYPE
    	          , TY_QSM_SCORING(i).SCR_LOV_VALUES AS SCR_LOV_VALUES
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.SCR_ID_PK = V.SCR_ID_PK
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.SCR_QST_FK=V.SCR_QST_FK
 ,T.SCR_SCORING_RULE=V.SCR_SCORING_RULE
 ,T.SCR_VALUE_1=V.SCR_VALUE_1
 ,T.SCR_VALUE_2=V.SCR_VALUE_2
 ,T.SCR_VALUE_1_1=V.SCR_VALUE_1_1
 ,T.SCR_GRADE=V.SCR_GRADE
 ,T.SCR_SCORE=V.SCR_SCORE
 ,T.SCR_PARENT_TYPE=V.SCR_PARENT_TYPE
 ,T.SCR_RESP_TYPE=V.SCR_RESP_TYPE
 ,T.SCR_LOV_VALUES=V.SCR_LOV_VALUES
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.SCR_ID_PK
 ,T.SCR_QST_FK
 ,T.SCR_SCORING_RULE
 ,T.SCR_VALUE_1
 ,T.SCR_VALUE_2
 ,T.SCR_VALUE_1_1
 ,T.SCR_GRADE
 ,T.SCR_SCORE
 ,T.SCR_PARENT_TYPE
 ,T.SCR_RESP_TYPE
 ,T.SCR_LOV_VALUES
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.SCR_ID_PK
        ,V.SCR_QST_FK
        ,V.SCR_SCORING_RULE
        ,V.SCR_VALUE_1
        ,V.SCR_VALUE_2
        ,V.SCR_VALUE_1_1
        ,V.SCR_GRADE
        ,V.SCR_SCORE
        ,V.SCR_PARENT_TYPE
        ,V.SCR_RESP_TYPE
        ,V.SCR_LOV_VALUES
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
											 	   		 	     	/* --------------------------------------------------------------------------
	      	Loading data for related Child object. Data has been loaded into parent table
	      	-------------------------------------------------------------------------- */
			   	   		  			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_QSM_GRADE.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_GRADE(j).GRD_SCORING_RULE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_GRADE(j).GRD_SCORING_PK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_GRADE(j).GRD_GRADE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_GRADE(j).GRD_VALUE_1, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_GRADE(j).GRD_VALUE_2, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_GRADE(j).GRD_QUESTNR_FK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    	 END LOOP;
 				END IF;
				
												MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  FORALL i IN TY_QSM_GRADE.FIRST..TY_QSM_GRADE.LAST 
  
  MERGE 
    INTO MS_QSM_GRADE T 
  		USING (
  				SELECT     
          TY_QSM_GRADE(i).GRD_SCORING_RULE AS GRD_SCORING_RULE
    	          , TY_QSM_GRADE(i).GRD_SCORING_PK AS GRD_SCORING_PK
    	          , TY_QSM_GRADE(i).GRD_GRADE AS GRD_GRADE
    	          , TY_QSM_GRADE(i).GRD_VALUE_1 AS GRD_VALUE_1
    	          , TY_QSM_GRADE(i).GRD_VALUE_2 AS GRD_VALUE_2
    	          , TY_QSM_GRADE(i).GRD_QUESTNR_FK AS GRD_QUESTNR_FK
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.GRD_SCORING_PK = V.GRD_SCORING_PK
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.GRD_SCORING_RULE=V.GRD_SCORING_RULE
 ,T.GRD_GRADE=V.GRD_GRADE
 ,T.GRD_VALUE_1=V.GRD_VALUE_1
 ,T.GRD_VALUE_2=V.GRD_VALUE_2
 ,T.GRD_QUESTNR_FK=V.GRD_QUESTNR_FK
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.GRD_SCORING_RULE
 ,T.GRD_SCORING_PK
 ,T.GRD_GRADE
 ,T.GRD_VALUE_1
 ,T.GRD_VALUE_2
 ,T.GRD_QUESTNR_FK
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.GRD_SCORING_RULE
        ,V.GRD_SCORING_PK
        ,V.GRD_GRADE
        ,V.GRD_VALUE_1
        ,V.GRD_VALUE_2
        ,V.GRD_QUESTNR_FK
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
											 	   		 		  		            
          							 	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING UPDATE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	UPDATE MS_QSM_ORB_RELATION_ORB 
 	SET DD_STATUS_FLAG   = 'N'
 	WHERE			
			REL_SOURCE_ID= iop_data.REL_SOURCE_ID	
	 	 ;
	 
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in UPDATE : ' || SQL%ROWCOUNT, 'D');
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

	                            
          						   	
               			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_QSM_ORB_RELATION_ORB.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).ORB_REL_SOURCE_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).REL_INST_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).REL_CONFIG_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).TGT_OBJ_NAME, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).TGT_OBJ_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).REL_VALID_FROM, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).REL_VALID_UNTIL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).REL_COMMENTS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).PARENT_REL_INST_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).SELF_REL_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).TGT_OBJ_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).ROW_NUM, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).APPLICABLE_TO, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).ADDITIONAL_DETAILS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).ADDITIONAL_COLUMN1, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).ADDITIONAL_COLUMN2, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).ADDITIONAL_COLUMN3, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).ADDITIONAL_DETAILS_WITH_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).ORB_FORM_URL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).ADDITIONAL_COLUMN4, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_ORB_RELATION_ORB(j).ADDITIONAL_COLUMN5, ip_pid);
			 END LOOP;
 				END IF;
				
								MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  FORALL i IN TY_QSM_ORB_RELATION_ORB.FIRST..TY_QSM_ORB_RELATION_ORB.LAST 
  
  MERGE 
    INTO MS_QSM_ORB_RELATION_ORB T 
  		USING (
  				SELECT     
          TY_QSM_ORB_RELATION_ORB(i).ORB_REL_SOURCE_ID AS REL_SOURCE_ID
    	          , TY_QSM_ORB_RELATION_ORB(i).REL_INST_ID AS REL_INST_ID
    	          , TY_QSM_ORB_RELATION_ORB(i).REL_CONFIG_ID AS REL_CONFIG_ID
    	          , TY_QSM_ORB_RELATION_ORB(i).TGT_OBJ_NAME AS TGT_OBJ_NAME
    	          , TY_QSM_ORB_RELATION_ORB(i).TGT_OBJ_ID AS TGT_OBJ_ID
    	          , TY_QSM_ORB_RELATION_ORB(i).REL_VALID_FROM AS REL_VALID_FROM
    	          , TY_QSM_ORB_RELATION_ORB(i).REL_VALID_UNTIL AS REL_VALID_UNTIL
    	          , TY_QSM_ORB_RELATION_ORB(i).REL_COMMENTS AS REL_COMMENTS
    	          , TY_QSM_ORB_RELATION_ORB(i).PARENT_REL_INST_ID AS PARENT_REL_INST_ID
    	          , TY_QSM_ORB_RELATION_ORB(i).SELF_REL_TYPE AS SELF_REL_TYPE
    	          , TY_QSM_ORB_RELATION_ORB(i).TGT_OBJ_TYPE AS TGT_OBJ_TYPE
    	          , TY_QSM_ORB_RELATION_ORB(i).ROW_NUM AS ROW_NUM
    	          , TY_QSM_ORB_RELATION_ORB(i).APPLICABLE_TO AS APPLICABLE_TO
    	          , TY_QSM_ORB_RELATION_ORB(i).ADDITIONAL_DETAILS AS ADDITIONAL_DETAILS
    	          , TY_QSM_ORB_RELATION_ORB(i).ADDITIONAL_COLUMN1 AS ADDITIONAL_COLUMN1
    	          , TY_QSM_ORB_RELATION_ORB(i).ADDITIONAL_COLUMN2 AS ADDITIONAL_COLUMN2
    	          , TY_QSM_ORB_RELATION_ORB(i).ADDITIONAL_COLUMN3 AS ADDITIONAL_COLUMN3
    	          , TY_QSM_ORB_RELATION_ORB(i).ADDITIONAL_DETAILS_WITH_ID AS ADDITIONAL_DETAILS_WITH_ID
    	          , TY_QSM_ORB_RELATION_ORB(i).ORB_FORM_URL AS ORB_FORM_URL
    	          , TY_QSM_ORB_RELATION_ORB(i).ADDITIONAL_COLUMN4 AS ADDITIONAL_COLUMN4
    	          , TY_QSM_ORB_RELATION_ORB(i).ADDITIONAL_COLUMN5 AS ADDITIONAL_COLUMN5
    	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.REL_SOURCE_ID = V.REL_SOURCE_ID
 AND  T.REL_INST_ID = V.REL_INST_ID
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.REL_CONFIG_ID=V.REL_CONFIG_ID
 ,T.TGT_OBJ_NAME=V.TGT_OBJ_NAME
 ,T.TGT_OBJ_ID=V.TGT_OBJ_ID
 ,T.REL_VALID_FROM=V.REL_VALID_FROM
 ,T.REL_VALID_UNTIL=V.REL_VALID_UNTIL
 ,T.REL_COMMENTS=V.REL_COMMENTS
 ,T.PARENT_REL_INST_ID=V.PARENT_REL_INST_ID
 ,T.SELF_REL_TYPE=V.SELF_REL_TYPE
 ,T.TGT_OBJ_TYPE=V.TGT_OBJ_TYPE
 ,T.ROW_NUM=V.ROW_NUM
 ,T.APPLICABLE_TO=V.APPLICABLE_TO
 ,T.ADDITIONAL_DETAILS=V.ADDITIONAL_DETAILS
 ,T.ADDITIONAL_COLUMN1=V.ADDITIONAL_COLUMN1
 ,T.ADDITIONAL_COLUMN2=V.ADDITIONAL_COLUMN2
 ,T.ADDITIONAL_COLUMN3=V.ADDITIONAL_COLUMN3
 ,T.ADDITIONAL_DETAILS_WITH_ID=V.ADDITIONAL_DETAILS_WITH_ID
 ,T.ORB_FORM_URL=V.ORB_FORM_URL
 ,T.ADDITIONAL_COLUMN4=V.ADDITIONAL_COLUMN4
 ,T.ADDITIONAL_COLUMN5=V.ADDITIONAL_COLUMN5
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.REL_SOURCE_ID
 ,T.REL_INST_ID
 ,T.REL_CONFIG_ID
 ,T.TGT_OBJ_NAME
 ,T.TGT_OBJ_ID
 ,T.REL_VALID_FROM
 ,T.REL_VALID_UNTIL
 ,T.REL_COMMENTS
 ,T.PARENT_REL_INST_ID
 ,T.SELF_REL_TYPE
 ,T.TGT_OBJ_TYPE
 ,T.ROW_NUM
 ,T.APPLICABLE_TO
 ,T.ADDITIONAL_DETAILS
 ,T.ADDITIONAL_COLUMN1
 ,T.ADDITIONAL_COLUMN2
 ,T.ADDITIONAL_COLUMN3
 ,T.ADDITIONAL_DETAILS_WITH_ID
 ,T.ORB_FORM_URL
 ,T.ADDITIONAL_COLUMN4
 ,T.ADDITIONAL_COLUMN5
)
VALUES 
  ('Y'         
     ,V.REL_SOURCE_ID
        ,V.REL_INST_ID
        ,V.REL_CONFIG_ID
        ,V.TGT_OBJ_NAME
        ,V.TGT_OBJ_ID
        ,V.REL_VALID_FROM
        ,V.REL_VALID_UNTIL
        ,V.REL_COMMENTS
        ,V.PARENT_REL_INST_ID
        ,V.SELF_REL_TYPE
        ,V.TGT_OBJ_TYPE
        ,V.ROW_NUM
        ,V.APPLICABLE_TO
        ,V.ADDITIONAL_DETAILS
        ,V.ADDITIONAL_COLUMN1
        ,V.ADDITIONAL_COLUMN2
        ,V.ADDITIONAL_COLUMN3
        ,V.ADDITIONAL_DETAILS_WITH_ID
        ,V.ORB_FORM_URL
        ,V.ADDITIONAL_COLUMN4
        ,V.ADDITIONAL_COLUMN5
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
								               									  
				   						  	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
    
    DELETE MS_QSM_ORB_RELATION_ORB 
    WHERE DD_STATUS_FLAG = 'N'
  	  			AND REL_SOURCE_ID = iop_data.REL_SOURCE_ID
  	  	  ;
  	   
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in DELETE : ' || SQL%ROWCOUNT, 'D');
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
	   			   		
    END LOOP;	 
        EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in call ETL ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END CALL_ETL;        
END MS_QSM_CREATE_QUESTNR_P ;   
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_CREQSM_CREQSM_PROD" (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN OUT CLOB,
                                                                       lt_out_data          IN OUT CLOB,
                                                                       pc_process_code      IN     VARCHAR2,
                                                                       lc_from_stage        IN     VARCHAR2,
                                                                       lc_to_stage          IN     VARCHAR2,
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
    AS
    
        l_out_xml                                               XMLTYPE:=NULL;    
        l_tmp_out_xml                                               XMLTYPE:=NULL;      
        l_error_code                                           NUMBER;
        l_error_message                                     VARCHAR2 (100);
        
        ln_log_no                                                 NUMBER;           
        
        l_rel_source_id                                         VARCHAR2(255);           
        l_version_number                                    NUMBER;    
        ln_response_pid                                             NUMBER;
        ln_response_iid                                              NUMBER;                 
        l_temp_pk_id                                            VARCHAR2(255);        
        l_lov_delimeter                                          VARCHAR2(10);                  
        l_stored_val                                               NUMBER;
        l_version                                                     VARCHAR(100):='1.0';    
        l_internal_questionnaire_id                                 VARCHAR2(255); 
        x_internal_questnr_id                                        VARCHAR2(255);                   
        l_old_temp_pk_id                                     VARCHAR2(255);
        l_display_order                                     number:=0;
        l_prev_process_instance_id                          number;
        l_prev_instance_id                                  number;
        l_prev_version_number                               NUMBER;
        lx_child_xml_template                               XMLTYPE:=NULL;
        l_metric_id                                         NUMBER;
        lc_max_inst_id                                      NUMBER;   
        org_name                                            SI_ORG_ENTITY_HIERARCHY_V.ORG_ENTITY_NAME%TYPE;
        cnt                                                 NUMBER:=0;
        obj_typ                                             MS_QSM_ORB_SETUP.dest_obj_type%TYPE;
        is_active                                           MS_QSM_ORB_SETUP.active%TYPE;
        obj_type                                            VARCHAR2(4000);
        l_orb_url                                           VARCHAR2(10000);
        l_orb_id                                            MS_QSM_ORB_SETUP.ID%TYPE;
    BEGIN
        
        l_out_xml := xmltype (lt_in_data);

        
        IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0)  THEN
            ms_qsm_utilities.initialize_metric_maint ('QSM');
        END IF;
        
            
            ms_qsm_log_activity ('', 'HOOK XML~',lt_in_data);
          ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                     pn_error_sequence    => xn_error_seq,
                     pc_error_type        => 'I',
                     pc_error_text        => 'From Stage n To stage'||lc_from_stage||';'||lc_to_stage);
        
        FOR non_multirow_rec IN ( SELECT previous_stage, key_col_name,qsm_save,assignee,new_version,que_name_valid_check,indv_item_labels,dd_object_type,dd_event_user_name,dd_current_stage,
                                                            dd_process_code,que_id,que_name,internal_questnr_id,que_type,include_metrics,metric_frequency,scoring_flag,navigation,scoring_logic,level_1_approver,
                                                            level_2_approver,restrict_access_to,valid_from,valid_untill,que_action,que_comments,version_number,published,dd_current_user_name,initiator,status,config_flag,
                                                            instance_rec_num,instance_id,metric_id,metric_run_date,metric_completed_date,latest_flag,created_by,creation_date,process_flow_status,process_instance_id,
                                                            rel_source_id,rtf_attach,temp_pk_id,upload
                                                FROM XMLTABLE (
                                                xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:nonmultirow'
                                                PASSING xmltype (lt_in_data_orig)
                                                COLUMNS  previous_stage VARCHAR2(100)  PATH 'msa:previous_stage',
                                                                key_col_name VARCHAR2(255) PATH 'msa:key_col_name',
                                                                qsm_save VARCHAR2(255) PATH 'msa:qsm_save',
                                                                assignee VARCHAR2(4000) PATH 'msa:assignee',
                                                                new_version VARCHAR2(10) PATH 'msa:new_version',
                                                                que_name_valid_check VARCHAR2(100) PATH 'msa:que_name_valid_check',
                                                                indv_item_labels VARCHAR2(255) PATH 'msa:indv_item_labels',
                                                                dd_object_type VARCHAR2(100) PATH 'msa:dd_object_type',
                                                                dd_event_user_name VARCHAR2(100) PATH 'msa:dd_event_user_name',
                                                                dd_current_stage VARCHAR2(100) PATH 'msa:dd_current_stage',
                                                                dd_process_code VARCHAR2(255) PATH 'msa:dd_process_code',
                                                                que_id VARCHAR2(255) PATH 'msa:que_id',
                                                                que_name VARCHAR2(255) PATH 'msa:que_name',
                                                                internal_questnr_id VARCHAR2(255) PATH 'msa:internal_questnr_id',
                                                                que_type VARCHAR2(100) PATH 'msa:que_type',
                                                                include_metrics VARCHAR2(100) PATH 'msa:include_metrics',
                                                                metric_frequency VARCHAR2(100) PATH 'msa:metric_frequency',
                                                                scoring_flag VARCHAR2(10) PATH 'msa:scoring_flag',
                                                                navigation VARCHAR2(100) PATH 'msa:navigation',
                                                                scoring_logic VARCHAR2(100) PATH 'msa:scoring_logic',
                                                                level_1_approver VARCHAR2(100) PATH 'msa:level_1_approver',
                                                                level_2_approver VARCHAR2(100) PATH 'msa:level_2_approver',
                                                                restrict_access_to VARCHAR2(100) PATH 'msa:restrict_access_to',
                                                                valid_from VARCHAR2(100) PATH 'msa:valid_from',
                                                                valid_untill VARCHAR2(100) PATH 'msa:valid_untill',
                                                                que_action VARCHAR2(100) PATH 'msa:que_action',
                                                                que_comments VARCHAR2(4000) PATH 'msa:que_comments',
                                                                version_number VARCHAR2(255) PATH 'msa:version_number',
                                                                published VARCHAR2(255) PATH 'msa:published',
                                                                dd_current_user_name VARCHAR2(255) PATH 'msa:dd_current_user_name',
                                                                initiator VARCHAR2(255) PATH 'msa:initiator',
                                                                status VARCHAR2(255) PATH 'msa:status',
                                                                config_flag VARCHAR2(4000) PATH 'msa:config_flag',
                                                                applies_to VARCHAR2(4000) PATH 'msa:applies_to',
                                                                instance_rec_num NUMBER PATH 'msa:instance_rec_num',
                                                                instance_id NUMBER PATH 'msa:instance_id',
                                                                metric_id NUMBER PATH 'msa:metric_id',
                                                                metric_run_date VARCHAR2(100) PATH 'msa:metric_run_date',
                                                                metric_completed_date VARCHAR2(100) PATH 'msa:metric_completed_date',
                                                                latest_flag VARCHAR2(255) PATH 'msa:latest_flag',
                                                                created_by VARCHAR2(255) PATH 'msa:created_by',
                                                                creation_date VARCHAR2(100) PATH 'msa:creation_date',
                                                                process_flow_status VARCHAR2(255) PATH 'msa:process_flow_status',
                                                                process_instance_id NUMBER PATH 'msa:process_instance_id',
                                                                rel_source_id   VARCHAR2(255) PATH 'msa:rel_source_id',
                                                                rtf_attach  VARCHAR2(4000) PATH 'msa:rtf_attach',
                                                                temp_pk_id VARCHAR2(255) PATH 'msa:temp_pk_id',
                                                                upload VARCHAR2(100) PATH 'msa:upload'))
        LOOP     

            -- Below Block is for Generating and Updating the IDs for Questionnaire, Sections, Questions, Grades and Scoring
            
             ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
             pn_error_sequence    => xn_error_seq,
             pc_error_type        => 'I',
             pc_error_text        => 'STAGES:'||lc_from_stage||':'||lc_to_stage);
             
             ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
             pn_error_sequence    => xn_error_seq,
             pc_error_type        => 'I',
             pc_error_text        => 'PREV:'||non_multirow_rec.previous_stage||':'||non_multirow_rec.dd_current_stage);
                                
--            ms_qsm_utilities.process_multirow(l_out_xml,'sec,grd,qst,scr,orb','section_id_pk,grd_value_1,qst_id_pk,scr_id_pk,tgt_obj_id');
            
--            l_que_id:=ms_qsm_utilities.get_tag_value(l_out_xml, 'datapacket/data/nonmultirow/que_id/text()');
             
            IF TRIM(non_multirow_rec.que_id) IS NULL AND TRIM(non_multirow_rec.new_version)='no' AND non_multirow_rec.previous_stage='NONE'  THEN
                                
                ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/version_number/text()','1.0');
                ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/new_version/text()','no');
                                    
            ELSIF TRIM(non_multirow_rec.que_id) IS NOT NULL AND (TRIM(non_multirow_rec.new_version)='yes') 
                            AND non_multirow_rec.previous_stage='PUB_QST' AND  non_multirow_rec.dd_current_stage='CR_ED_QST' THEN
                            
                ms_qsm_log_activity ('', 'INSIDE NEW VERSION~',lt_in_data);                            
                                    
                SELECT  MAX(SUBSTR(VERSION_NUMBER,1,INSTR(VERSION_NUMBER,'.',1)-1)+1)
                INTO l_version_number
                FROM MS_QSM_QUESTIONNAIRE
                WHERE QUE_ID = trim(non_multirow_rec.QUE_ID);
--                WHERE INTERNAL_QUESTNR_ID = trim(non_multirow_rec.INTERNAL_QUESTNR_ID);
                
                ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/version_number/text()',TO_CHAR(l_version_number)||'.0');
                
                 ms_qsm_utilities.generate_questionnaire_id (l_out_xml);     
            END IF;
/*                 
                ms_qsm_utilities.generate_section_id(l_out_xml);
                ms_qsm_utilities.generate_grade_id(l_out_xml);
                ms_qsm_utilities.generate_question_id(l_out_xml);
                ms_qsm_utilities.generate_scoring_id(l_out_xml);   */
                                  
--                ln_response_pid := si_process_instance_id_s.NEXTVAL;
--                ln_response_iid := si_metric_results_s.NEXTVAL;
--                 
--                ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/nonmultirow/ln_response_iid/text()',ln_response_iid);
--                ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/nonmultirow/process_instance_id/text()',ln_response_pid);
            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'I',
                    pc_error_text        => 'Google 1111.....: ');
                                                        
            IF   SUBSTR(TRIM(non_multirow_rec.internal_questnr_id),1,3)='QNR' OR non_multirow_rec.internal_questnr_id IS NULL OR non_multirow_rec.rtf_attach = 'Y' THEN --rtf_attach='Y' mean data upload
               ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'I',
                    pc_error_text        => 'Google 222.....: ');                       
              ms_qsm_utilities.generate_questionnaire_id (l_out_xml);     
            
            END IF;        
             
             ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'I',
                    pc_error_text        => 'Google 333 .....: ');   
                    
            ms_qsm_utilities.generate_section_id(l_out_xml);
            ms_qsm_utilities.generate_grade_id(l_out_xml);
            ms_qsm_utilities.generate_question_id(l_out_xml);
            ms_qsm_utilities.generate_scoring_id(l_out_xml);         

--          x_internal_questnr_id:=ms_qsm_utilities.get_tag_value(l_out_xml, 'datapacket/data/nonmultirow/internal_questnr_id/text()');
            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'I',
                    pc_error_text        => 'Google 444 non_multirow_rec.rtf_attach.....: '||non_multirow_rec.rtf_attach);    
           /*Starting : insert data into Orb in case of Data Upload*/   
			   IF non_multirow_rec.rtf_attach = 'Y' THEN
					MS_QSM_UTILITIES.get_multirow_template (p_multirow => lx_child_xml_template, p_metric_id => l_metric_id,p_region_name=>'orb', p_full_blown => 'N');
				   
				  SELECT NVL(MAX (instance_rec_num),0)
					INTO lc_max_inst_id
					FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),'msa:datapacket/msa:data/*/msa:row'
												 PASSING l_out_xml
												 COLUMNS
												 instance_rec_num    NUMBER      PATH    'msa:instance_rec_num'
												 );
					
					FOR iop_data_ORB_table IN (SELECT REL_COMMENTS
													  ,TGT_OBJ_ID
													  ,TGT_OBJ_TYPE
													 FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
																   'msa:datapacket/msa:data/msa:orb/msa:row'
																   PASSING xmltype (lt_in_data_orig)
																   COLUMNS
																   REL_COMMENTS                     VARCHAR2(4000)  PATH  'msa:rel_comments'
																  ,TGT_OBJ_ID                       VARCHAR2(4000)  PATH  'msa:tgt_obj_id'
																  ,TGT_OBJ_TYPE                     VARCHAR2(4000)  PATH  'msa:tgt_obj_type'                                                      
													))LOOP  
													
						cnt :=cnt+1;
						--lc_max_inst_id := lc_max_inst_id +1;
						
						BEGIN 
							IF iop_data_ORB_table.TGT_OBJ_TYPE = 'Organization(s)' THEN
								obj_type := iop_data_ORB_table.TGT_OBJ_TYPE;
								
								SELECT distinct org_entity_name into org_name
								FROM SI_ORG_ENTITY_HIERARCHY_V 
								WHERE org_entity_id = iop_data_ORB_table.TGT_OBJ_ID;
								
							ELSIF iop_data_ORB_table.TGT_OBJ_TYPE = 'Core Object(s)' THEN
								obj_type := iop_data_ORB_table.TGT_OBJ_TYPE;
								
								SELECT  distinct object_name into org_name
								FROM ms_grc_core_object_pub_v
								WHERE object_id = iop_data_ORB_table.TGT_OBJ_ID;
								
								SELECT MS_QSM_UTILITIES.GET_GRC_FORM_URL(dd_object_type,object_id) into l_orb_url
								FROM ms_grc_core_object_pub_v
								WHERE object_id = iop_data_ORB_table.TGT_OBJ_ID;
								
							ELSIF iop_data_ORB_table.TGT_OBJ_TYPE = 'Risk(s)' THEN
								obj_type := iop_data_ORB_table.TGT_OBJ_TYPE;
								
								SELECT  distinct object_name into org_name
								FROM MS_GRC_RISK_rv
								WHERE TRUNC(sysdate) BETWEEN  NVL(TRUNC(valid_from),TRUNC(sysdate)) AND NVL(TRUNC(valid_until),TRUNC(sysdate)) 
								AND object_id = iop_data_ORB_table.TGT_OBJ_ID;
								
                SELECT MS_QSM_UTILITIES.GET_GRC_FORM_URL(dd_object_type,object_id) into l_orb_url
								FROM ms_grc_risk_pub_v
								WHERE object_id = iop_data_ORB_table.TGT_OBJ_ID;
                
								/*SELECT MS_QSM_UTILITIES.GET_GRC_FORM_URL(dd_object_type,object_id) into l_orb_url
								FROM ms_grc_risk_pub_v
								WHERE object_id = iop_data_ORB_table.TGT_OBJ_ID;*/
								
							ELSIF iop_data_ORB_table.TGT_OBJ_TYPE = 'Control(s)' THEN
								obj_type := iop_data_ORB_table.TGT_OBJ_TYPE;
								
								SELECT  distinct object_name into org_name
								FROM MS_GRC_CONTROL_RV
								WHERE TRUNC(sysdate) BETWEEN  NVL(TRUNC(valid_from),TRUNC(sysdate)) AND NVL(TRUNC(valid_until),TRUNC(sysdate))
								AND object_id = iop_data_ORB_table.TGT_OBJ_ID;
								
								SELECT MS_QSM_UTILITIES.GET_GRC_FORM_URL(dd_object_type,object_id) into l_orb_url
								FROM ms_grc_control_pub_v
								WHERE object_id = iop_data_ORB_table.TGT_OBJ_ID;
									
							ELSIF iop_data_ORB_table.TGT_OBJ_TYPE = 'Area(s) of Compliance' THEN
								obj_type := iop_data_ORB_table.TGT_OBJ_TYPE;
								
								SELECT  distinct object_name into org_name
								FROM ((SELECT 
								object_name, object_id, NULL AS requirement_name,
								NULL AS requirement_id
								 FROM ms_grc_area_of_compliance_rv
								WHERE TRUNC (SYSDATE) BETWEEN NVL (TRUNC (valid_from),
								 TRUNC (SYSDATE)
								)
								AND NVL (TRUNC (valid_until),
								 TRUNC (SYSDATE)
								)and object_id = iop_data_ORB_table.TGT_OBJ_ID)
								UNION
								(SELECT 
								a.object_name, a.object_id, requirement_name, requirement_id
								 FROM ms_grc_area_of_compliance_rv a,
								(SELECT substr(object_name,1,600) AS requirement_name,
								object_id AS requirement_id
								 FROM ms_grc_requirement_rv
								WHERE TRUNC (SYSDATE) BETWEEN NVL (TRUNC (valid_from),
								 TRUNC (SYSDATE)
								)
								AND NVL (TRUNC (valid_until),
								 TRUNC (SYSDATE)
								)) b
								WHERE TRUNC (SYSDATE) BETWEEN NVL (TRUNC (a.valid_from),
								 TRUNC (SYSDATE)
								)
								AND NVL (TRUNC (a.valid_until),
								 TRUNC (SYSDATE)) and object_id = iop_data_ORB_table.TGT_OBJ_ID))
								WHERE (REQUIREMENT_ID IS NULL OR REQUIREMENT_id IN
								 (select REL_SOURCE_OBJECt_ID from MS_GRC_ORB_rELATIONS_ORB A,MS_GRC_ORB_RELATIONS B 
								where rel_config_id = (
								SELECT REL_ID FROM MS_gRC_REL_dEFN
								WHERE SRC_OBJ_TYPE='MS_GRC_REQUIREMENT'
								AND DEST_OBJ_TYPE='MS_GRC_AREA_OF_COMPLIANCE'
								)
								AND A.REL_SOURCE_ID = B.REL_SOURCE_ID
								AND TGT_OBJ_ID = OBJECT_ID));
								
								SELECT MS_QSM_UTILITIES.GET_GRC_FORM_URL(dd_object_type,object_id) into l_orb_url
								FROM ms_grc_area_of_complia_pub_v
								WHERE object_id = iop_data_ORB_table.TGT_OBJ_ID;
										   
							ELSIF iop_data_ORB_table.TGT_OBJ_TYPE = 'Question/Procedure(s)' THEN
								obj_type := 'Question(s)/Procedure(s)';
								
								SELECT distinct object_name into org_name
								FROM MS_GRC_QUESTION_PROC_PUB_V
								WHERE TRUNC(sysdate) BETWEEN  NVL(TRUNC(valid_from),TRUNC(sysdate)) AND NVL(TRUNC(valid_until),TRUNC(sysdate)) 
								and object_id = iop_data_ORB_table.TGT_OBJ_ID;  
								
								MS_QSM_UTILITIES.update_xml (l_out_xml, 'datapacket/data/orb/row[tgt_obj_id="'||
											iop_data_ORB_table.TGT_OBJ_ID||'"]/tgt_obj_type/text()','Question(s)/Procedure(s)');
											
							ELSIF iop_data_ORB_table.TGT_OBJ_TYPE = 'Asset Class(s)' THEN
								obj_type := 'Asset Class(es)';
								
								BEGIN
									SELECT ACTIVE into is_active 
									FROM MS_QSM_ORB_SETUP 
									WHERE form_title = 'Asset Class(es)';
												 
								EXCEPTION WHEN OTHERS THEN
								 is_active := 'N';
								END;
								
								IF is_active = 'N'
								THEN
									SELECT  distinct object_name into org_name
									FROM ms_grc_core_object_pub_v
									WHERE object_id = iop_data_ORB_table.TGT_OBJ_ID;
									
									SELECT MS_QSM_UTILITIES.GET_GRC_FORM_URL(dd_object_type,object_id) 
                  into l_orb_url
									FROM ms_grc_core_object_pub_v
									WHERE object_id = iop_data_ORB_table.TGT_OBJ_ID;
									
									MS_QSM_UTILITIES.update_xml (l_out_xml, 'datapacket/data/orb/row[tgt_obj_id="'||
											iop_data_ORB_table.TGT_OBJ_ID||'"]/tgt_obj_type/text()','Core Object(s)');
								ELSE            
									SELECT distinct object_name into org_name                      
									FROM MS_GRC_ASSET_CLASS_RV
									where TRUNC(sysdate) BETWEEN  NVL(TRUNC(valid_from),TRUNC(sysdate)) 
										AND NVL(TRUNC(valid_until),TRUNC(sysdate)) 
									and object_id = iop_data_ORB_table.TGT_OBJ_ID;  
									
									MS_QSM_UTILITIES.update_xml (l_out_xml, 'datapacket/data/orb/row[tgt_obj_id="'||
											iop_data_ORB_table.TGT_OBJ_ID||'"]/tgt_obj_type/text()','Asset Class(es)');
								END IF;                   
								
							ELSIF iop_data_ORB_table.TGT_OBJ_TYPE = 'Asset(s)' THEN
								obj_type := iop_data_ORB_table.TGT_OBJ_TYPE;
								
								BEGIN
									SELECT ACTIVE into is_active 
									FROM MS_QSM_ORB_SETUP 
									WHERE form_title = iop_data_ORB_table.TGT_OBJ_TYPE;
												 
								EXCEPTION WHEN OTHERS THEN
								 is_active := 'N';
								END;
								
								IF is_active = 'N'
								THEN
									SELECT  distinct object_name into org_name
									FROM ms_grc_core_object_pub_v
									WHERE object_id = iop_data_ORB_table.TGT_OBJ_ID;
									
									SELECT MS_QSM_UTILITIES.GET_GRC_FORM_URL(dd_object_type,object_id) into l_orb_url
									FROM ms_grc_core_object_pub_v
									WHERE object_id = iop_data_ORB_table.TGT_OBJ_ID;
									
									MS_QSM_UTILITIES.update_xml (l_out_xml, 'datapacket/data/orb/row[tgt_obj_id="'||
											iop_data_ORB_table.TGT_OBJ_ID||'"]/tgt_obj_type/text()','Core Object(s)');
								ELSE
									select  object_name into org_name
									FROM MS_GRC_ASSET_RV
									where TRUNC(sysdate) BETWEEN  NVL(TRUNC(valid_from),TRUNC(sysdate)) AND NVL(TRUNC(valid_until),TRUNC(sysdate))
									and object_id =iop_data_ORB_table.TGT_OBJ_ID; 
								END IF; 
								
							ELSIF iop_data_ORB_table.TGT_OBJ_TYPE = 'Financial Account(s)' THEN
								obj_type := iop_data_ORB_table.TGT_OBJ_TYPE;
								
								SELECT object_name into org_name                 
								FROM MS_GRC_financial_accounts_RV
								where TRUNC(sysdate) BETWEEN  NVL(TRUNC(valid_from),TRUNC(sysdate)) AND NVL(TRUNC(valid_until),TRUNC(sysdate)) 
								and object_id =iop_data_ORB_table.TGT_OBJ_ID;         
							
							ELSIF iop_data_ORB_table.TGT_OBJ_TYPE = 'Framework Reference(s)' THEN
								obj_type := iop_data_ORB_table.TGT_OBJ_TYPE;
								
								SELECT object_name into org_name
								FROM MS_GRC_MODEL_REFERENCE_RV
								WHERE TRUNC(sysdate) BETWEEN  NVL(TRUNC(valid_from),TRUNC(sysdate)) AND NVL(TRUNC(valid_until),TRUNC(sysdate)) 
								and object_id =iop_data_ORB_table.TGT_OBJ_ID;   
								
							ELSIF iop_data_ORB_table.TGT_OBJ_TYPE = 'Function(s)' THEN
								obj_type := iop_data_ORB_table.TGT_OBJ_TYPE;
								
								SELECT object_name into org_name
								FROM MS_GRC_FUNCTION_RV
								where TRUNC(sysdate) BETWEEN  NVL(TRUNC(valid_from),TRUNC(sysdate)) AND NVL(TRUNC(valid_until),TRUNC(sysdate)) 
								and object_id =iop_data_ORB_table.TGT_OBJ_ID;  
								
							ELSIF iop_data_ORB_table.TGT_OBJ_TYPE = 'Objective(s)' THEN
								obj_type := iop_data_ORB_table.TGT_OBJ_TYPE;
								
                   ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'I',
                    pc_error_text        => 'ORB 1111..... iop_data_ORB_table.TGT_OBJ_ID: '|| iop_data_ORB_table.TGT_OBJ_ID);
                
								SELECT object_name into org_name
								FROM MS_GRC_OBJECTIVES_RV
								WHERE TRUNC(sysdate) BETWEEN  NVL(TRUNC(valid_from),TRUNC(sysdate)) AND NVL(TRUNC(valid_until),TRUNC(sysdate)) 
								and object_id =iop_data_ORB_table.TGT_OBJ_ID;
                
                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'I',
                    pc_error_text        => 'ORB 222..... org_name: '|| org_name);
                
                SELECT MS_QSM_UTILITIES.GET_GRC_FORM_URL(dd_object_type,object_id) into l_orb_url
								FROM MS_GRC_OBJECTIVES_PUB_V
								WHERE object_id = iop_data_ORB_table.TGT_OBJ_ID;
                
							 ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'I',
                    pc_error_text        => 'ORB 222..... l_orb_url: '|| l_orb_url);
              
							ELSIF iop_data_ORB_table.TGT_OBJ_TYPE = 'Process(s)' THEN
								obj_type := 'Process(es)';
								
								BEGIN
									SELECT ACTIVE into is_active 
									FROM MS_QSM_ORB_SETUP 
									WHERE form_title = obj_type;
												 
								EXCEPTION WHEN OTHERS THEN
								 is_active := 'N';
								END;
								
								IF is_active = 'N'
								THEN
									SELECT  distinct object_name into org_name
									FROM ms_grc_core_object_pub_v
									WHERE object_id = iop_data_ORB_table.TGT_OBJ_ID;
									
									SELECT MS_QSM_UTILITIES.GET_GRC_FORM_URL(dd_object_type,object_id) into l_orb_url
									FROM ms_grc_core_object_pub_v
									WHERE object_id = iop_data_ORB_table.TGT_OBJ_ID;
									
									MS_QSM_UTILITIES.update_xml (l_out_xml, 'datapacket/data/orb/row[tgt_obj_id="'||
											iop_data_ORB_table.TGT_OBJ_ID||'"]/tgt_obj_type/text()','Core Object(s)');    
								ELSE
									SELECT object_name into org_name
									FROM MS_GRC_PROCESS_RV
									WHERE TRUNC(sysdate) BETWEEN  NVL(TRUNC(valid_from),TRUNC(sysdate)) AND NVL(TRUNC(valid_until),TRUNC(sysdate)) 
									and object_id =iop_data_ORB_table.TGT_OBJ_ID;   
								END IF;
								
							ELSIF iop_data_ORB_table.TGT_OBJ_TYPE = 'Reference(s)' THEN
								obj_type := iop_data_ORB_table.TGT_OBJ_TYPE;
								
								SELECT object_name into org_name
								FROM ms_grc_reference_rv
								WHERE TRUNC (SYSDATE) BETWEEN NVL (TRUNC (valid_from), TRUNC (SYSDATE))
														 AND NVL (TRUNC (valid_until), TRUNC (SYSDATE))
								and object_id =iop_data_ORB_table.TGT_OBJ_ID;  
								
							ELSIF iop_data_ORB_table.TGT_OBJ_TYPE = 'Regulatory Bod(s)' THEN
								obj_type := 'Regulatory Bod(ies)';
								
								SELECT object_name into org_name
								FROM MS_GRC_REGULATORY_BODY_RV
								WHERE 
								TRUNC(sysdate) BETWEEN  NVL(TRUNC(valid_from),TRUNC(sysdate)) AND NVL(TRUNC(valid_until),TRUNC(sysdate)) 
								and object_id =iop_data_ORB_table.TGT_OBJ_ID; 
								
								MS_QSM_UTILITIES.update_xml (l_out_xml, 'datapacket/data/orb/row[tgt_obj_id="'||
											iop_data_ORB_table.TGT_OBJ_ID||'"]/tgt_obj_type/text()','Regulatory Bod(ies)');
								
							ELSIF iop_data_ORB_table.TGT_OBJ_TYPE = 'Requirement(s)' THEN
								obj_type := iop_data_ORB_table.TGT_OBJ_TYPE;
								
								SELECT object_name into org_name
								FROM MS_GRC_REQUIREMENT_rv
								WHERE TRUNC(sysdate) BETWEEN  NVL(TRUNC(valid_from),TRUNC(sysdate)) AND NVL(TRUNC(valid_until),TRUNC(sysdate)) 
								AND object_id =iop_data_ORB_table.TGT_OBJ_ID; 
                
                SELECT MS_QSM_UTILITIES.GET_GRC_FORM_URL(dd_object_type,object_id) into l_orb_url
									FROM MS_GRC_REQUIREMENT_PUB_V
									WHERE object_id = iop_data_ORB_table.TGT_OBJ_ID;
								
							END IF;
						EXCEPTION WHEN OTHERS THEN
							org_name := null;
						END;        
						
						
						/*ms_apps_mdf_errors_pkg.insert_log (
							 pn_error_handle_id   => xn_error_handle_id,
							 pn_error_sequence    => xn_error_seq,
							 pc_error_type        => 'E',
							 pc_error_text        =>   'Inside ORB block Object Name is: '
													|| org_name);*/
													
						BEGIN
							IF obj_type <> 'Core Object(s)' THEN
								SELECT dest_obj_type into obj_typ
								FROM MS_QSM_ORB_SETUP
								WHERE form_title = obj_type;
							
								SELECT MS_QSM_UTILITIES.GET_GRC_FORM_URL(obj_typ,iop_data_ORB_table.TGT_OBJ_ID) into l_orb_url
								FROM dual;
							END IF;
							
						EXCEPTION WHEN OTHERS THEN
							l_orb_url := null;
						END;
													
						BEGIN
							select ID into l_orb_id 
							from MS_QSM_ORB_SETUP where form_title=obj_type;--iop_data_ORB_table.TGT_OBJ_TYPE;
						
						EXCEPTION WHEN OTHERS THEN
							l_orb_id := 5; 
						END; 
						

					   
					   /* Update ORB values per tgt_obj_id*/
					   MS_QSM_UTILITIES.update_xml (l_out_xml, 'datapacket/data/orb/row[tgt_obj_id="'||iop_data_ORB_table.TGT_OBJ_ID||'"]/rel_inst_id/text()',cnt);
					   
					   MS_QSM_UTILITIES.update_xml (l_out_xml, 'datapacket/data/orb/row[tgt_obj_id="'||iop_data_ORB_table.TGT_OBJ_ID||'"]/rel_config_id/text()',l_orb_id);
					   
					   MS_QSM_UTILITIES.update_xml (l_out_xml, 'datapacket/data/orb/row[tgt_obj_id="'||iop_data_ORB_table.TGT_OBJ_ID||'"]/orb_form_url/text()',l_orb_url);
					   
					   MS_QSM_UTILITIES.update_xml (l_out_xml, 'datapacket/data/orb/row[tgt_obj_id="'||iop_data_ORB_table.TGT_OBJ_ID||'"]/tgt_obj_name/text()',org_name);
					   
					   MS_QSM_UTILITIES.update_xml (l_out_xml, 'datapacket/data/orb/row[tgt_obj_id="'||iop_data_ORB_table.TGT_OBJ_ID||'"]/row_num/text()',cnt); 
														   
							--ms_ism_log_activity ('', 'After updatexml out  xml is ', l_out_xml.getclobval());      
				   
						 --DBMS_LOB.APPEND (lc_child_xml_clob,lx_child_xml.getclobval());        
						 --lc_du_orb_count :=lc_du_orb_count+1;     
									 
				   END LOOP;
			END IF;

			/*End : insert data into Orb in case of Data Upload*/ 
                        
            IF non_multirow_rec.rel_source_id = 'NONE' OR TRIM(non_multirow_rec.rel_source_id) IS NULL OR (TRIM(non_multirow_rec.new_version)='yes' AND  non_multirow_rec.previous_stage='PUB_QST' AND  non_multirow_rec.dd_current_stage='CR_ED_QST') THEN
              l_rel_source_id := 'ORS-'||MS_QSM_REL_SOURCE_ID_S.NEXTVAL;
              ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/rel_source_id/text()',l_rel_source_id);
           ELSE 
             l_rel_source_id:= non_multirow_rec.rel_source_id;
           END IF;
             ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/orb/row/orb_rel_source_id/text()',l_rel_source_id);
             ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/status/text()',ms_qsm_utilities.get_status (non_multirow_rec.dd_current_stage, non_multirow_rec.previous_stage, non_multirow_rec.que_action));
            
            IF lc_from_stage = 'CREATE_EDIT' AND lc_to_stage ='CREATE_EDIT' THEN
              ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'CR_ED_QST');
              ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'CR_ED_QST');
              ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/published/text()', 'No');
              
            ELSIF lc_from_stage = 'CREATE_EDIT' AND lc_to_stage ='L1_APPROVE' THEN -- Transition INI_To_L1 Create/Edit Questionnaire --> Level 1 Approval
                
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'CR_ED_QST');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'L1_APP');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/published/text()', 'No');
                      
            ELSIF  lc_from_stage = 'CREATE_EDIT' AND lc_to_stage ='OBJECT_EDITORS' THEN -- Transition INI_To_OWN Create/Edit Questionnaire --> Owners

                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'CR_ED_QST');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'OWN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/published/text()', 'No');
                      
            ELSIF  lc_from_stage = 'CREATE_EDIT' AND lc_to_stage ='PUBLISH' THEN -- Transition INI_To_PUB Create/Edit Questionnaire --> Publish Questionnaire
                        
                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'I',
                    pc_error_text        => 'Yahoo 4444.....: ');
--                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'CR_ED_QST');
--                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'PUB_QST');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/published/text()', 'Yes');  
                      ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/status/text()','3');                    
                                            
            ELSIF  lc_from_stage = 'OBJECT_EDITORS' AND lc_to_stage ='CREATE_EDIT' THEN -- Transition OWN_To_INI Owners --> Create Questionnaire (Request for Clarification)

                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'OWN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'CR_ED_QST');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/published/text()', 'No');                           
                      
            ELSIF  lc_from_stage = 'OBJECT_EDITORS' AND lc_to_stage ='L1_APPROVE' THEN -- Transition OWN_To_L1 Owners --> Level 1 Approver (Request for Approval)

                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'OWN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'L1_APP');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/published/text()', 'No');
                      
            ELSIF  lc_from_stage = 'OBJECT_EDITORS' AND lc_to_stage ='PUBLISH' THEN -- Transition OWN_To_PUB Owners --> Publish 
                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'I',
                    pc_error_text        => 'Yahoo 333.....: ');
--                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'OWN_QST');
--                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'PUB_QST');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/published/text()', 'Yes');      
                      ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/status/text()','3');                
                      
            ELSIF  lc_from_stage = 'OBJECT_EDITORS' AND lc_to_stage ='REQUEST_CANCEL' THEN -- Transition OWN_To_CAN Owners --> Cancel 

                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'OWN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'CAN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/published/text()', 'No');
                                            
            ELSIF  lc_from_stage = 'L1_APPROVE' AND lc_to_stage ='L2_APPROVE' THEN -- Transition L1_To_L2 - Level 1 Approval --> Level 2 Approval 

                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'L1_APP');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'L2_APP');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/published/text()', 'No');
                      
            ELSIF  lc_from_stage = 'L1_APPROVE' AND lc_to_stage ='OBJECT_EDITORS' THEN -- Transition L1_To_OWN - Level 1 Approval --> Owners (Request for Clarification 

                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'L1_APP');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'OWN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/published/text()', 'No');                      
                      
            ELSIF  lc_from_stage = 'L1_APPROVE' AND lc_to_stage ='PUBLISH' THEN -- Transition L1_To_PUB - Level 1 Approval --> Publish
                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'I',
                    pc_error_text        => 'Yahoo 2222.....: ');
--                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'L1_APP');
--                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'PUB_QST');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/published/text()', 'Yes');
                      ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/status/text()','3');
                      
            ELSIF  lc_from_stage = 'L1_APPROVE' AND lc_to_stage ='REQUEST_CANCEL' THEN -- Transition L1_To_CAN - Level 1 Approval --> Cancel

                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'L1_APP');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'CAN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/published/text()', 'No');
                                                                  
            ELSIF  lc_from_stage = 'L2_APPROVE' AND lc_to_stage ='OBJECT_EDITORS' THEN -- Transition L2_To_OWN - Level 2 Approval --> Owners (Request for Clarification 

                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'L2_APP');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'OWN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/published/text()', 'No');
                      
            ELSIF  lc_from_stage = 'L2_APPROVE' AND lc_to_stage ='PUBLISH' THEN -- Transition L2_To_PUB - Level 2 Approval --> Publish
                         ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'I',
                    pc_error_text        => 'Yahoo111111.....: ');
--                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'L2_APP');
--                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'PUB_QST');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/published/text()', 'Yes');
                      ms_qsm_utilities.update_xml (l_out_xml,'datapacket/data/nonmultirow/status/text()','3');
                      
            ELSIF  lc_from_stage = 'L2_APPROVE' AND lc_to_stage ='REQUEST_CANCEL' THEN -- Transition L2_To_CAN - Level 2 Approval --> Cancel

                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'L2_APP');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'CAN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/published/text()', 'No');

            END IF;
            
--            IF non_multirow_rec.previous_stage='PUB_QST' AND  non_multirow_rec.dd_current_stage='CR_ED_QST' THEN
--                
--                     ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
--                     pn_error_sequence    => xn_error_seq,
--                     pc_error_type        => 'E',
--                     pc_error_text        => 'OLD:'||non_multirow_rec.PROCESS_INSTANCE_ID||':'||non_multirow_rec.INSTANCE_ID);
----                
----                DELETE FROM MS_QSM_CREATE_QUESTNR_V
----                WHERE PROCESS_INSTANCE_ID = non_multirow_rec.PROCESS_INSTANCE_ID
----                AND INSTANCE_ID <> (SELECT MIN(INSTANCE_ID) FROM MS_QSM_CREATE_QUESTNR_V WHERE PROCESS_INSTANCE_ID = non_multirow_rec.PROCESS_INSTANCE_ID); 
--                
----                    ln_response_pid := si_process_instance_id_s.NEXTVAL;
----                    ln_response_iid := si_metric_results_s.NEXTVAL;
----                
----                     ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
----                     pn_error_sequence    => xn_error_seq,
----                     pc_error_type        => 'E',
----                     pc_error_text        => 'NEW:'||ln_response_pid||':'||ln_response_iid);
----                                 
----                    ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/nonmultirow/instance_id/text()',ln_response_iid);
----                    ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/nonmultirow/process_instance_id/text()',ln_response_pid);   
--                                   
--                
--            END IF;

            l_prev_version_number := TO_NUMBER(SUBSTR(non_multirow_rec.version_number,1,1));
            
            IF lc_to_stage ='PUBLISH' OR (lc_to_stage='REQUEST_CANCEL' AND l_prev_version_number >1) THEN
            
                ln_response_pid := si_process_instance_id_s.nextval;
                ln_response_iid := si_metric_results_s.NEXTVAL;
            
                IF lc_to_stage ='PUBLISH' THEN
                
                  l_tmp_out_xml :=l_out_xml;
               
                else
                
                  select dd_process_instance_id,dd_instance_id
                  into l_prev_PROCESS_INSTANCE_ID,l_prev_instance_id
                  from ms_qsm_questionnaire
                  where que_id=non_multirow_rec.que_id
                  AND VERSION_NUMBER=(SELECT MAX(TO_NUMBER(SUBSTR(VERSION_NUMBER,1,1)))||'.0' FROM ms_qsm_questionnaire WHERE que_id= non_multirow_rec.que_id) ;
                  
                  l_tmp_out_xml := xmltype(ms_apps_mdf_infoletoutput_pkg.get_xml(non_multirow_rec.metric_id,l_prev_process_instance_id,l_prev_instance_id));
                
                  update ms_qsm_questionnaire 
                  set config_flag=ln_response_pid
                  where que_id=non_multirow_rec.que_id
                  AND VERSION_NUMBER=(SELECT MAX(TO_NUMBER(SUBSTR(VERSION_NUMBER,1,1)))||'.0' FROM ms_qsm_questionnaire WHERE que_id= non_multirow_rec.que_id);
                
                END IF;
                

                
                ms_qsm_utilities.update_xml (l_tmp_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'PUB_QST');
                ms_qsm_utilities.update_xml (l_tmp_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'CR_ED_QST');
                               
--              ms_qsm_utilities.update_xml (l_tmp_out_xml, 'datapacket/data/nonmultirow/dd_event_user_name/text()',non_multirow_rec.dd_event_user_name);
                ms_qsm_utilities.update_xml (l_tmp_out_xml, 'datapacket/data/nonmultirow/dd_event_user_name/text()','');
                ms_qsm_utilities.update_xml (l_tmp_out_xml, 'datapacket/data/nonmultirow/created_by/text()', ms_apps_utilities.get_user_id(non_multirow_rec.dd_event_user_name));
                
                ms_qsm_utilities.update_xml (l_tmp_out_xml, 'datapacket/data/nonmultirow/que_action/text()','');
 
                ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/config_flag/text()',ln_response_pid );
                
                l_old_temp_pk_id:= non_multirow_rec.temp_pk_id;
                
                l_temp_pk_id :=  ln_response_pid||substr(non_multirow_rec.temp_pk_id,instr(non_multirow_rec.temp_pk_id,'~',1)) ;
                
                ms_qsm_utilities.update_xml (l_tmp_out_xml, 'datapacket/data/nonmultirow/temp_pk_id/text()',l_temp_pk_id);
                 
                ms_qsm_utilities.update_xml(l_tmp_out_xml, 'datapacket/data/nonmultirow/instance_id/text()',ln_response_iid);

                ms_qsm_utilities.update_xml(l_tmp_out_xml, 'datapacket/data/nonmultirow/process_instance_id/text()',ln_response_pid); 
                
                ms_qsm_utilities.update_xml(l_tmp_out_xml, 'datapacket/data/nonmultirow/new_version/text()','no'); 
                
                ms_qsm_utilities.update_xml (l_tmp_out_xml, 'datapacket/data/nonmultirow/published/text()', 'Yes');

               l_error_message:=ms_apps_mdf_infoletoutput_pkg.insert_xml(MS_QSM_UTILITIES.g_tbl_metric_maintenance('CREQSM')||'_V',
                                                                                    non_multirow_rec.metric_id,
                                                                                    ln_response_pid,
                                                                                    ln_response_iid,
                                                                                    l_tmp_out_xml.getclobval());
                                                                                                                                                
                IF l_error_message != 'SUCCESS' OR l_error_message IS NULL THEN
                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'E',
                    pc_error_text        => 'Error While Inserting XML into Response View in the ms_QSM_INIQSM_INIQSM_PROD '||l_error_message || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);   
                END IF;
              
        FOR qst_rec
                IN ( SELECT qst_id_pk,qst_list_of_values,qst_response_type, qst_allow_resp_na
                    FROM XMLTABLE (
                             xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:qst/msa:row'
                             PASSING l_out_xml
                            COLUMNS qst_id_pk    VARCHAR2 (100) PATH 'msa:qst_id_pk',
                                    qst_list_of_values VARCHAR2(4000) PATH 'msa:qst_list_of_values',
                                    qst_response_type   VARCHAR2(100) PATH 'msa:qst_response_type',
                                    qst_allow_resp_na   VARCHAR2(100)  PATH  'msa:qst_allow_resp_na' )
                            )
                 LOOP
                     
                    --IF  qst_rec.qst_response_type IN ('4','7') THEN --commented by Gaurav on 30th Jan, we changed the approach to get value on "Response required for 
                    --                                                  approval" & "Response required for action". Earlier for Resp_Type we were taking data from 
                    --                                                  application LOV & now we are writing Yes/No in field LOV on form.
                    --Changed by aman
                    
                    
                      IF  qst_rec.qst_response_type IN ('4','7','6','10','11') THEN                                        
                        l_internal_questionnaire_id := ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/internal_questnr_id');
                        
--                        DELETE FROM MS_QSM_QST_LOV_DATA
--                        WHERE QUESTIONNAIRE_ID = l_internal_questionnaire_id
--                        AND QUESTION_ID = qst_rec.qst_id_pk;

                          update MS_QSM_QST_LOV_DATA
                          set STATUS = 'N'
                          where  QUESTIONNAIRE_ID = L_INTERNAL_QUESTIONNAIRE_ID
                          AND QUESTION_ID = qst_rec.qst_id_pk;
                        
                     -- added by Gaurav on 23-jan-2013, if "Allow Not Applicable for Response" is checked in the from then insert hard coded value in MS_QSM_QST_LOV_DATA table
                      SELECT VALUE
                          INTO l_lov_delimeter
                          FROM ms_qsm_params
                         WHERE     PARAM_GROUP = 'QSM_PARAMS'
                               AND PARAMETER = 'QUESTION_LOV_DELIMETER'
                               AND ENABLED = 'Y';
                        
                        l_display_order := 0;
                        

                        
                        
                        --FOR Insert_rec IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (decode(qst_rec.qst_allow_resp_na,'yes',qst_rec.qst_list_of_values||l_lov_delimeter||'Not Applicable',qst_rec.qst_list_of_values),l_lov_delimeter)))
                          FOR Insert_rec IN (SELECT COLUMN_VALUE FROM TABLE 
                                            (ms_apps_utilities.parse_string (qst_rec.qst_list_of_values,l_lov_delimeter))
                                            UNION ALL (SELECT decode(qst_rec.qst_allow_resp_na,'yes','Not Applicable') FROM DUAL))
                        LOOP
                          IF Insert_rec.COLUMN_VALUE IS NOT NULL THEN
                            l_display_order := l_display_order+1;
                            
                            merge into MS_QSM_QST_LOV_DATA a
                            using (select INSERT_REC.column_value DISPLAY_VALUE,QST_REC.QST_ID_PK QUESTION_ID,L_INTERNAL_QUESTIONNAIRE_ID QUESTIONNAIRE_ID 
                                from dual)B
                            on (a.QUESTIONNAIRE_ID =B.QUESTIONNAIRE_ID
                            and a.QUESTION_ID = B.QUESTION_ID
                            and a.DISPLAY_VALUE=B.DISPLAY_VALUE)
                            when matched then
                            update set 
                            a.LAST_UPDATE_DATE = sysdate,
                            a.LAST_UPDATED_BY=NON_MULTIROW_REC.CREATED_BY,
                            a.DISPLAY_ORDER=l_display_order,
                            a.STATUS='Y'
                            when not matched then
                            insert
                            (CREATION_DATE,LAST_UPDATE_DATE,CREATED_BY,LAST_UPDATED_BY,LOCALE_ID
                                    ,STORED_VALUE,version,QUESTIONNAIRE_ID,QUESTION_ID,DISPLAY_VALUE,DISPLAY_ORDER,STATUS)
                            values(sysdate,sysdate,non_multirow_rec.created_by,non_multirow_rec.created_by,(select locale_id from si_locales where locale_string='en_US'),
                                 DECODE(qst_rec.qst_allow_resp_na,'yes',DECODE(Insert_rec.COLUMN_VALUE,'Not Applicable','QST_NA','LOV'||MS_QSM_QST_LOV_ID_S.NEXTVAL),'LOV'||MS_QSM_QST_LOV_ID_S.NEXTVAL),l_version, l_internal_questionnaire_id,qst_rec.qst_id_pk,Insert_rec.COLUMN_VALUE,l_display_order,'Y');
                                 
--                            SELECT MS_QSM_QST_LOV_ID_S.NEXTVAL INTO l_stored_val FROM DUAL;
--                            
--                            INSERT INTO MS_QSM_QST_LOV_DATA 
--                                (CREATION_DATE,LAST_UPDATE_DATE,CREATED_BY,LAST_UPDATED_BY,LOCALE_ID
--                                ,STORED_VALUE,VERSION,QUESTIONNAIRE_ID,QUESTION_ID,DISPLAY_VALUE,DISPLAY_ORDER)
--                            VALUES
--                                (SYSDATE,SYSDATE,non_multirow_rec.created_by,non_multirow_rec.created_by,(SELECT LOCALE_ID FROM SI_LOCALES WHERE LOCALE_STRING='en_US'),
--                                'LOV'||l_stored_val,l_version, l_internal_questionnaire_id,qst_rec.qst_id_pk,Insert_rec.COLUMN_VALUE,l_display_order);
--                                    
--                                --l_stored_val :=l_stored_val+1;
                          END IF;                                    
                        END LOOP;
                        
                        delete from MS_QSM_QST_LOV_DATA
                          WHERE QUESTIONNAIRE_ID = L_INTERNAL_QUESTIONNAIRE_ID
                          and QUESTION_ID = QST_REC.QST_ID_PK
                          and STATUS = 'N';

--                        If qst_rec.qst_allow_resp_na = 'yes' then
--                        
--                            l_display_order := l_display_order+1;
--
--                        
--                            INSERT INTO MS_QSM_QST_LOV_DATA 
--                                (CREATION_DATE,LAST_UPDATE_DATE,CREATED_BY,LAST_UPDATED_BY,LOCALE_ID
--                                ,STORED_VALUE,VERSION,QUESTIONNAIRE_ID,QUESTION_ID,DISPLAY_VALUE)
--                            VALUES
--                                (SYSDATE,SYSDATE,non_multirow_rec.created_by,non_multirow_rec.created_by,(SELECT LOCALE_ID FROM SI_LOCALES WHERE LOCALE_STRING='en_US'),
--                                'QST_NA',l_version, l_internal_questionnaire_id,qst_rec.qst_id_pk,'Not Applicable');
--                        end If;

                        
                        
                    END IF;                                                   
                        
                 END LOOP;
                                

            END IF;                
            
            MS_QSM_UTILITIES.UPDATE_INOUT_DATA(l_out_xml,lt_in_data,lt_out_data);
                       
            ms_qsm_log_activity ('', 'Final XML~', lt_out_data);
                                    
            ms_qsm_utilities.insert_comments (non_multirow_rec.process_instance_id,
                                                                non_multirow_rec.instance_id,
                                                                non_multirow_rec.metric_id,
                                                                non_multirow_rec.dd_current_user_name,
                                                                ms_apps_utilities.get_user_full_name (non_multirow_rec.dd_current_user_name),
                                                                'QUESTNR_COMMENTS',
                                                                non_multirow_rec.que_comments,
                                                                l_error_code,
                                                                l_error_message);
            IF lc_to_stage ='PUBLISH' --OR (non_multirow_rec.previous_stage='PUB_QST' AND  non_multirow_rec.dd_current_stage='CR_ED_QST')   
            THEN
                
                INSERT INTO MS_QSM_COMMENTS_LOG
                SELECT COMMENTS_COLUMN_NAME,ln_response_pid,ln_response_iid,INFOLET_ID,COMMENTS,USER_NAME,USER_FULL_NAME,ENTERED_DATE 
                FROM MS_QSM_COMMENTS_LOG WHERE PROCESS_INSTANCE_ID = TO_NUMBER(SUBSTR(l_old_temp_pk_id,1, INSTR(l_old_temp_pk_id,'~',1)-1));
                --TO_NUMBER(SUBSTR(l_old_temp_pk_id,1,INSTR(l_old_temp_pk_id,;
                    
                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    PC_ERROR_TYPE        => 'I',
                    pc_error_text        => lc_to_stage||'AM CALLING etl .....: ');         
                                    
                    MS_QSM_ENGINE.pr_call_etl(iop_xml_data => lt_out_data,
    --                 ms_qsm_create_questnr_p.call_etl(iop_xml_data => lt_out_data,
                                    iop_log_no => ln_log_no,
                                    op_error_code =>l_error_code,
                                    op_error_message =>l_error_message,
                                    iop_error_seq =>xn_error_code,
                                    ip_pid => non_multirow_rec.process_instance_id)  ;      
                                    
                    IF l_error_code = '-1'  THEN
                        ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                        pn_error_sequence    => xn_error_seq,
                        pc_error_type        => 'E',
                        pc_error_text        => 'Error While Calling ETL - pr_call_etl' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);   
                    END IF;   
            
            elsif lc_to_stage='REQUEST_CANCEL' then
            
                INSERT INTO MS_QSM_COMMENTS_LOG
                select comments_column_name,ln_response_pid,ln_response_iid,infolet_id,comments,user_name,user_full_name,entered_date 
                FROM MS_QSM_COMMENTS_LOG WHERE PROCESS_INSTANCE_ID = l_prev_PROCESS_INSTANCE_ID;
            
            END IF;
            
            

        END LOOP;             
        
    EXCEPTION
      WHEN OTHERS THEN
         ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                     pn_error_sequence    => xn_error_seq,
                     pc_error_type        => 'E',
                     pc_error_text        => 'Fatal Error in the ms_QSM_CREQSM_CREQSM_PROD ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
    END ; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_CUSTOM_PKG" 
as
    type sprd_rec is record (clm_spreadsheet_id					  ms_qsm_response_spreadsheet_v.clm_spreadsheet_id%type,
                             clm_response_id						  ms_qsm_response_spreadsheet_v.clm_response_id%type,
                             clm_question_id						  ms_qsm_response_spreadsheet_v.clm_question_id%type,
                             resp_sprd_param_list				  ms_qsm_response_spreadsheet_v.resp_sprd_param_list%type,
                             resp_sprd_infolet_caller			ms_qsm_response_spreadsheet_v.resp_sprd_infolet_caller%type,                           
                             resp_sprd_infoelt_name				ms_qsm_response_spreadsheet_v.resp_sprd_infoelt_name%type,
                             resp_sprd_columns_name				ms_qsm_response_spreadsheet_v.resp_sprd_columns_name%type,
                             temp_pk_id							      ms_qsm_response_spreadsheet_v.temp_pk_id%type,
                             field_20							        ms_qsm_response_spreadsheet_v.field_20%type,
                             field_19							        ms_qsm_response_spreadsheet_v.field_19%type,
                             field_18							        ms_qsm_response_spreadsheet_v.field_18%type,
                             field_17							        ms_qsm_response_spreadsheet_v.field_17%type,
                             field_16							        ms_qsm_response_spreadsheet_v.field_16%type,
                             field_15							        ms_qsm_response_spreadsheet_v.field_15%type,
                             field_14							        ms_qsm_response_spreadsheet_v.field_14%type,
                             field_13							        ms_qsm_response_spreadsheet_v.field_13%type,
                             field_12							        ms_qsm_response_spreadsheet_v.field_12%type,
                             field_11							        ms_qsm_response_spreadsheet_v.field_11%type,
                             field_10							        ms_qsm_response_spreadsheet_v.field_10%type,
                             field_9								      ms_qsm_response_spreadsheet_v.field_9%type,
                             field_8								      ms_qsm_response_spreadsheet_v.field_8%type,
                             field_7								      ms_qsm_response_spreadsheet_v.field_7%type,
                             field_6								      ms_qsm_response_spreadsheet_v.field_6%type,
                             field_5								      ms_qsm_response_spreadsheet_v.field_5%type,
                             field_4								      ms_qsm_response_spreadsheet_v.field_4%type,
                             field_3								      ms_qsm_response_spreadsheet_v.field_3%type,
                             field_2								      ms_qsm_response_spreadsheet_v.field_2%type,
                             field_1								      ms_qsm_response_spreadsheet_v.field_1%type,                       
                             data_id_pk							      ms_qsm_response_spreadsheet_v.data_id_pk%type,
                             json_object							    ms_qsm_response_spreadsheet_v.json_object%type,
                             spreadsheet_id						    ms_qsm_response_spreadsheet_v.spreadsheet_id%type,
                             question_id							    ms_qsm_response_spreadsheet_v.question_id%type,
                             questionnaire_id					    ms_qsm_response_spreadsheet_v.questionnaire_id%type,
                             response_id                  ms_qsm_response_spreadsheet_v.response_id%type,
                             dd_process_code              ms_qsm_response_spreadsheet_v.dd_process_code%type,
                             dd_current_stage             ms_qsm_response_spreadsheet_v.dd_current_stage%type,
                             dd_enterprise_info           ms_qsm_response_spreadsheet_v.dd_enterprise_info%type,
                             dd_event_user_name           ms_qsm_response_spreadsheet_v.dd_event_user_name%type,
                             dd_current_user_name         ms_qsm_response_spreadsheet_v.dd_current_user_name%type,
                             dd_object_type               ms_qsm_response_spreadsheet_v.dd_object_type%type,
                             instance_rec_num             ms_qsm_response_spreadsheet_v.instance_rec_num%type,
                             instance_id                  ms_qsm_response_spreadsheet_v.instance_id%type,
                             metric_id                    ms_qsm_response_spreadsheet_v.metric_id%type,
                             metric_run_date              ms_qsm_response_spreadsheet_v.metric_run_date%type,
                             metric_completed_date        ms_qsm_response_spreadsheet_v.metric_completed_date%type,
                             latest_flag                  ms_qsm_response_spreadsheet_v.latest_flag%type,
                             created_by                   ms_qsm_response_spreadsheet_v.created_by%type,
                             creation_date                ms_qsm_response_spreadsheet_v.creation_date%type,
                             process_flow_status          ms_qsm_response_spreadsheet_v.process_flow_status%type,
                             process_instance_id          ms_qsm_response_spreadsheet_v.process_instance_id%type,
                             multirow_group_name          ms_qsm_response_spreadsheet_v.multirow_group_name%type,
                             electronically_signed        ms_qsm_response_spreadsheet_v.electronically_signed%type,
                             multirow_region_id           ms_qsm_response_spreadsheet_v.multirow_region_id%type
                            );
                            
    type sprd_tbl is table of sprd_rec index by binary_integer;
    
    function ms_cms_get_context_fields (ip_response_xml in xmltype)  
    return xmltype    ;    
    
    procedure ms_cms_get_sprd_data (i_resp_id            in number,
                                    i_que_id             in varchar2,
                                    i_sprd_id            in varchar2,
                                    i_resp_xml           in xmltype,
                                    io_sprd_xml          in out xmltype,
                                    o_sprd_pid           out number,
                                    o_sprd_iid           out number,
                                    o_sprd_rec_cnt       out number);
                                    
END ms_qsm_custom_pkg; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_CUSTOM_PKG" 
as
    function ms_cms_get_context_fields (ip_response_xml in xmltype)  
    return xmltype
    is
        x_namespace                varchar2 (1000) := 'xmlns="http://www.metricstream.com/appstudio/msa"';
        x_path                     varchar2(100):='datapacket/data/nonmultirow/$/text()';
        l_ret                      xmltype;
        x_applies_to               VARCHAR2 (4000);
    begin
        l_ret := ip_response_xml;
        x_applies_to :=ms_qsm_utilities.get_tag_value(l_ret, 'datapacket/data/nonmultirow/applies_to_object_code/text()',x_namespace);   
        ms_qsm_utilities.update_xml(l_ret, replace(x_path,'$','context_field_1'),x_applies_to);
        return l_ret;
    end;

    procedure ms_cms_get_sprd_data(i_resp_id        in number,
                                   i_que_id         in varchar2,
                                   i_sprd_id        in varchar2,
                                   i_resp_xml       in xmltype,
                                   io_sprd_xml      in out xmltype,
                                   o_sprd_pid       out number,
                                   o_sprd_iid       out number,
                                   o_sprd_rec_cnt   out number)
    as
        g_namespace               varchar2 (1000) := 'xmlns="http://www.metricstream.com/appstudio/msa"';           
        l_sprd_tbl                sprd_tbl;
        l_sprd_metric_id          number;
        l_sprd_metric_nm          varchar2 (4000) := 'MS_QSM_SPREADSHEET';
       
        l_sql                     varchar2 (4000);
        l_inf_nm                  varchar2 (4000);
        l_inf_id                  number;
        l_instance_id             number;
        l_pid                     number;
        l_json                    varchar2 (4000);
        l_path                    varchar2(100) := 'datapacket/data/nonmultirow/$/text()';
        l_sprd_xml                xmltype;
        ln_sprd_metric_id         number;
        l_error_message           varchar2 (4000);                
        ln_proc_cd                varchar2 (4000);
        x_curr_usr_nm             varchar2 (4000);
        x_user_id                 number;

        l_resp_metric_id          number;
        l_resp_metric_nm          varchar2 (4000) := 'MS_QSM_RESPONSE_SPREADSHEET'; 
        i                         number := 0;
        l_child_xml_template      xmltype;
        l_child_xml               xmltype;
        l_child_xml_clob          clob := '<msa:clm xmlns:msa="http://www.metricstream.com/appstudio/msa">';
        l_child_xml_clob_end      clob := '</msa:clm>';
        l_instance_rec_num        number := 0;
        l_child_path              varchar2(100) := 'row/$/text()';
        x_prm                     varchar2 (4000);
        l_respm_xml               xmltype;
        x_questnr_id              varchar2 (4000);
        
       /* type metric_rec is record (
        supplier_code         varchar2 (4000),
        object_id             varchar2 (4000),
        object_name           varchar2 (4000),
        sit_service_name      varchar2 (4000),
        sit_service_code      varchar2 (4000),
        service_id            varchar2 (4000),
        sino                  varchar2 (4000)
        );*/
        type metric_rec is record (
        Que_name         varchar2 (4000),
        Que_id             varchar2 (4000));
        
        type metric_set is table of metric_rec;
        
        cur_metric metric_set;        
    begin                     
        l_sprd_xml := io_sprd_xml;
        l_respm_xml := i_resp_xml;
        
        ms_qsm_log_activity ('', 'Log by nagesh 1 ' || l_sprd_metric_id , '');
        
        select metric_id into l_sprd_metric_id from si_metrics_t
        where metric_name = l_sprd_metric_nm and metric_run_mode = 3;
        
        ms_qsm_log_activity ('', 'Log by nagesh 2 ' || l_sprd_metric_id , '');
        
        select metric_id into l_resp_metric_id from si_metrics_t
        where metric_name = l_resp_metric_nm and metric_run_mode = 3;
        
        ms_qsm_log_activity ('', 'Log by nagesh 3 ' || l_resp_metric_id , '');
 
        select si_metric_results_s.nextval into l_instance_id from dual;
        
        ms_qsm_log_activity ('', 'Log by nagesh 4 ' || l_instance_id , '');
        
        select si_process_instance_id_s.nextval into l_pid from dual;
        
         ms_qsm_log_activity ('', 'Log by nagesh 5 ' || l_pid , '');
     
         
            execute immediate 'select fld_infolet INTO :l_inf_nm from si_' || l_sprd_metric_id || '_t where sprd_sheet_internal_id = :1' ||
                 ' and instance_id = (select max(instance_id) from si_' || L_SPRD_METRIC_ID || '_t
                 where sprd_sheet_internal_id = :2' || ')
                 and fld_id_pk = ''FLD1''' into l_inf_nm using i_sprd_id,i_sprd_id;

        x_prm := ms_qsm_utilities.get_tag_value(l_respm_xml, 'datapacket/data/nonmultirow/context_field_1/text()',g_namespace);
        
        select metric_sql, metric_id into l_sql, l_inf_id from si_metrics_t where metric_name = l_inf_nm; 
        
            ms_qsm_log_activity ('', 'Log by nagesh 9 ' || l_sql , '');
         ms_qsm_log_activity ('', 'Log by nagesh 10 ' || l_inf_id , '');
         ms_qsm_log_activity ('', 'Log by nagesh 11 ' || l_inf_nm , '');

        execute immediate l_sql bulk collect into cur_metric;
        
        if cur_metric.count > 0 then
            begin
                select user_id 
                into x_user_id
                from si_users_t where user_name = x_curr_usr_nm;
            exception
            when no_data_found then
                x_user_id := 100000;
            end;
            o_sprd_pid := si_process_instance_id_s.nextval;
            o_sprd_iid := si_metric_results_s.nextval; 
            
            select ms_qsm_utilities.get_flow_code('QSM - Response Spreadsheet Flow') into ln_proc_cd from dual;
            
            x_questnr_id:=ms_qsm_utilities.get_tag_value(l_respm_xml, 'datapacket/data/nonmultirow/questionnaire_id/text()',g_namespace);
            
            l_json := '{"CID" : ["FLD1","FLD2"],"CNAME" : ["Clm1","clm2"],"CTYPE" : ["1","4"],"STO_VAL" : ["MET_ID",""],"DISP_VAL" : ["MET_NAME",""],"INFOLET_NAME" : ["101391","0"],"INFO_PARAM_LIST" : ["",""],"UPPER_LIMIT" : ["","9"],"LOWER_LIMIT" : ["","4"],"LOVS" : ["",""],"LOVS_STO" : ["",""],"ALLOW_PAST_DATE" : ["no","no"],"ALLOW_UNVALIDATE" : ["no","no"]}';
            ms_qsm_utilities.update_xml(l_sprd_xml, replace(l_path,'$','json_object'),l_json);
            ms_qsm_utilities.update_xml(l_sprd_xml, replace(l_path,'$','spreadsheet_id'),i_sprd_id);
            ms_qsm_utilities.update_xml(l_sprd_xml, replace(l_path,'$','question_id'),i_que_id);
            ms_qsm_utilities.update_xml(l_sprd_xml, replace(l_path,'$','questionnaire_id'),x_questnr_id);
            ms_qsm_utilities.update_xml(l_sprd_xml, replace(l_path,'$','response_id'),i_resp_id);                        
            ms_qsm_utilities.update_xml(l_sprd_xml, replace(l_path,'$','dd_object_type'),'MS_QSM_RESPONSE_SPREADSHEET');
            ms_qsm_utilities.update_xml(l_sprd_xml, replace(l_path,'$','dd_current_user_name'),x_curr_usr_nm);
            ms_qsm_utilities.update_xml(l_sprd_xml, replace(l_path,'$','dd_event_user_name'),x_curr_usr_nm);
            ms_qsm_utilities.update_xml(l_sprd_xml, replace(l_path,'$','dd_enterprise_info'),'MetricStream');
            ms_qsm_utilities.update_xml(l_sprd_xml, replace(l_path,'$','dd_process_code'),ln_proc_cd);                        
            ms_qsm_utilities.update_xml(l_sprd_xml, replace(l_path,'$','instance_rec_num'),i); 
            ms_qsm_utilities.update_xml(l_sprd_xml, replace(l_path,'$','instance_id'),o_sprd_iid);
            ms_qsm_utilities.update_xml(l_sprd_xml, replace(l_path,'$','metric_id'),l_resp_metric_id);
            ms_qsm_utilities.update_xml(l_sprd_xml, replace(l_path,'$','latest_flag'),'Y');
            ms_qsm_utilities.update_xml(l_sprd_xml, replace(l_path,'$','created_by'),x_user_id);
            ms_qsm_utilities.update_xml(l_sprd_xml, replace(l_path,'$','process_instance_id'),o_sprd_pid);
    
            ms_qsm_utilities.get_multirow_template (p_multirow => l_child_xml_template, p_metric_id => l_resp_metric_id, p_region_name=>'clm', p_full_blown => 'N');
    
            for i in cur_metric.first .. cur_metric.last 
            loop
                l_child_xml := l_child_xml_template;
                l_instance_rec_num := l_instance_rec_num + 1;  
                ms_qsm_utilities.update_xml(l_child_xml,replace(l_child_path,'$','field_1'), cur_metric (i).que_name || '#' || cur_metric (i).que_id);           
                ms_qsm_utilities.update_xml(l_child_xml,replace(l_child_path,'$','instance_rec_num'),l_instance_rec_num);            
                o_sprd_rec_cnt := i;
                dbms_lob.append (l_child_xml_clob,l_child_xml.getclobval());
            end loop;
    
            dbms_lob.append (l_child_xml_clob,l_child_xml_clob_end);            
            l_sprd_xml := ms_qsm_utilities.insert_xml(l_sprd_xml,'datapacket/data/nonmultirow',xmltype(l_child_xml_clob),'A');        
            io_sprd_xml := l_sprd_xml; 
                      
        else
            io_sprd_xml := io_sprd_xml;
            o_sprd_pid := 0;
            o_sprd_iid := 0;
            o_sprd_rec_cnt := 0;
        end if;
    exception
    when others then
        l_error_message := substr(sqlerrm,1,3900);
    end;
end ms_qsm_custom_pkg; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_EMAIL_PARAMETER" 
AS
   FUNCTION  get_object_name(i_OBJECT_ID IN  VARCHAR2 )
 RETURN VARCHAR2;
 FUNCTION MS_QSM_EMAIL_DUEDATE(l_que_request_id IN  VARCHAR2 )
 RETURN DATE;
function get_initiator_disp_value(
    pc_flow_code    VARCHAR2,
      pc_stage_code   varchar2,
      pn_pid          number,
      pn_id           number
     )
      RETURN VARCHAR2;
       FUNCTION get_lov_display_name(i_stored_value IN  VARCHAR2 )
 RETURN VARCHAR2;
 function get_response_options(l_qst_response_type varchar2,l_list_of_values varchar2)
      RETURN VARCHAR2;
 FUNCTION get_ful_respondent(
    pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
     )
      RETURN VARCHAR2;
         FUNCTION get_response_approver(
    pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
     )
      RETURN VARCHAR2;
       FUNCTION get_request_type(
    pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
     )
      RETURN VARCHAR2;
      FUNCTION get_init_request_type(
    pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
     )
      RETURN VARCHAR2;
        FUNCTION get_type_of_response(
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
     )
      RETURN VARCHAR2;
       FUNCTION get_response_due_date(
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
     )
      RETURN VARCHAR2;
      
    FUNCTION get_title_user(
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
     )
      RETURN VARCHAR2;
      
      Function Get_Admin_Email( pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      Pn_Pid          Number,
      pn_id           NUMBER)
      Return varchar2;
      
      FUNCTION get_response_due_date_init(
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
     )
      RETURN VARCHAR2;
      
         FUNCTION get_que_applies_to(
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
     )
      RETURN VARCHAR2;
 END MS_QSM_EMAIL_PARAMETER;
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_EMAIL_PARAMETER" 
AS
   FUNCTION get_object_name(i_OBJECT_ID IN  VARCHAR2 )
 RETURN VARCHAR2
   IS
      x_oject_name   MS_QSM_APPLIES_TO.object_name%TYPE;
      x_object_id   MS_QSM_APPLIES_TO.object_id%TYPE;
      lv_object_name varchar2(1000);
 Begin

    select WM_CONCAT(OBJECT_NAME) into lv_object_name from ms_qsm_applies_to b
   where INSTR(','||i_OBJECT_ID||',',','||OBJECT_ID||',',1)>0;
   
    return lv_object_name;
    EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
    End  get_object_name;
    
  FUNCTION MS_QSM_EMAIL_DUEDATE(l_que_request_id IN  VARCHAR2 )
 RETURN DATE
   IS
   
      l_sch_start_date DATE;
      ln_sch_due_after NUMBER;
      l_due_date  DATE;
      
 Begin

       select sch_start_date,sch_due_after,(sch_start_date+sch_due_after) as due_date 
       into l_sch_start_date,ln_sch_due_after,l_due_date 
       from MS_QSM_INITIATE_QUESTNR_V
       where que_request_id=l_que_request_id;
        IF l_due_date is null THEN
                    l_due_date:='  ';
        END IF;
    return l_due_date;
    EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
    End  MS_QSM_EMAIL_DUEDATE;
FUNCTION get_initiator_disp_value(
    pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          number,
      pn_id           number
     )
      RETURN VARCHAR2
   AS    
     -- l_created_by NUMBER;
      l_que_request_id  VARCHAR2 (4000);
      l_return   VARCHAR2 (4000);
      x_metric_id    NUMBER;
       x_exec_imd     VARCHAR2 (4000);
      x_stmt_no      NUMBER          := 0;
      l_initiator       varchar2(4000);
      xn_error_handle_id number;
      xn_error_seq  number;
      
   BEGIN
       SELECT metric_id
        INTO x_metric_id
        FROM si_metrics_t
       WHERE metric_name = (SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='RESQSM' AND IS_ACTIVE='Y');

      x_stmt_no := 20;
--      x_exec_imd :=    'SELECT QUE_REQUEST_ID,INITIATED_BY FROM SI_'
--                    || x_metric_id
--                    || '_T WHERE process_instance_id  = '
--                    || pn_pid
--                    || ' and instance_id = (SELECT max(instance_id) FROM SI_'
--                    || x_metric_id
--                    || '_T WHERE process_instance_id  = '
--                    || pn_pid
--                    || ')'
--                    || ' and rownum <= 1 ';
                    
                          x_exec_imd :=    'SELECT  MS_APPS_UTILITIES.GET_USER_FULL_NAME(INITIATED_BY) FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  =  :1'
                    || ' and instance_id = (SELECT max(instance_id) FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :2' 
                    || ')'
                    || ' and rownum <= 1 ';
                    
      x_stmt_no := 30;
      
      

      EXECUTE IMMEDIATE x_exec_imd
                   into l_return
                  using pn_pid,pn_pid;
     
                   
--       BEGIN
--       
--              x_stmt_no := 40;
--              
--            SELECT metric_id
--            INTO x_metric_id
--            FROM si_metrics_t
--            WHERE metric_name = (SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='INIQSM' AND IS_ACTIVE='Y');
--                  x_stmt_no := 50;
--                  
--              x_exec_imd :=    'SELECT MS_APPS_UTILITIES.GET_USER_FULL_NAME(DD_EVENT_USER_NAME) FROM SI_'
--                || x_metric_id
--                || '_T WHERE QUE_REQUEST_ID = '''||l_que_request_id||''' AND ROWNUM <=1';            
--
--      EXECUTE IMMEDIATE x_exec_imd
--                   INTO l_return;
--
--
----             select UNIQUE MS_APPS_UTILITIES.GET_USER_FULL_NAME(DD_EVENT_USER_NAME)
----              INTO l_return from MS_QSM_QUESTNR_RESP_DUP_V a
----              WHERE process_instance_id = pn_pid
----            AND que_request_id = l_que_request_id
----            AND instance_rec_num = 1
----            AND instance_id = (SELECT MAX (instance_id)
----                                 FROM MS_QSM_QUESTNR_RESP_DUP_V
----                                WHERE process_instance_id = a.process_instance_id
----                                  AND instance_id <>
----                                                (SELECT MAX (instance_id)
----                                                   FROM MS_QSM_QUESTNR_RESP_DUP_V
----                                                  WHERE process_instance_id = a.process_instance_id));
--
--
--                                                  
--         EXCEPTION
--          WHEN NO_DATA_FOUND
--          THEN
--            RETURN 'No Data Found ' || ' @ Statement ' || x_stmt_no||';'||x_exec_imd;
--      END;
       RETURN l_return;
   EXCEPTION
      WHEN OTHERS
      then
      
         RETURN 'Statement ' || x_stmt_no || ' ' || SQLCODE || SQLERRM;
   END;

  FUNCTION get_lov_display_name(i_stored_value IN  VARCHAR2 )
 RETURN VARCHAR2
   IS
      x_displayed_value   MS_QS_LOV_DISPLAY_VALUES_V.displayed_value%TYPE;
      x_stored_value   MS_QS_LOV_DISPLAY_VALUES_V.stored_value%TYPE;
      lv_displayed_value varchar2(1000);
 Begin
   
   select  DISPLAYED_VALUE into lv_displayed_value FROM MS_QS_LOV_DISPLAY_VALUES_V where lov_name='MS_QSM_Response_Type' and stored_value=i_stored_value;
   
    return lv_displayed_value;
    EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
    End  get_lov_display_name;
     FUNCTION get_response_options(l_qst_response_type varchar2,l_list_of_values varchar2)
      RETURN VARCHAR2
   AS   
            
        l_string VARCHAR2(4000);
        l_length    NUMBER;
        l_start_position NUMBER :=1;
        l_till_position NUMBER;
        l_input_string VARCHAR2(4000);
        l_delimeter     VARCHAR2(100);

   BEGIN
        
        IF l_qst_response_type in ('4','6','7','9','10','11') THEN
--            l_input_string := 'Yes,No';       
--        ELSE
            l_input_string :=l_list_of_values;
          ELSE
             RETURN NULL;                          
        END IF;
        
        BEGIN
            SELECT VALUE 
            INTO l_delimeter
            FROM MS_QSM_PARAMS
            WHERE PARAM_GROUP='QSM_PARAMS' 
            AND PARAMETER = 'QUESTION_LOV_DELIMETER'
            AND ENABLED='Y';
        EXCEPTION
            WHEN OTHERS THEN
                l_delimeter :=',';
        END;
        
        SELECT (LENGTH(l_input_string)-LENGTH(REPLACE(l_input_string,l_delimeter,'')))+1 
        INTO l_length
        FROM DUAL;
        
        FOR i in 1..l_length LOOP        
            
            SELECT DECODE(INSTR(l_input_string,l_delimeter,1,i),0,LENGTH(l_input_string)+1,INSTR(l_input_string,l_delimeter,1,i))
            INTO l_till_position
            FROM DUAL;
                    
            SELECT l_string||SUBSTR(l_input_string,l_start_position,(l_till_position-l_start_position))||CHR(10) 
            INTO l_string FROM DUAL;
                    
            l_start_position :=l_till_position+1;
                
        END LOOP;
    
      RETURN l_string;
      
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
   end get_response_options;
   
 FUNCTION get_ful_respondent(
    pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
     )
      RETURN VARCHAR2
   AS    
     -- l_created_by NUMBER;
      l_que_request_id  VARCHAR2 (4000);
      l_return   VARCHAR2 (4000);
      x_metric_id    NUMBER;
       x_exec_imd     VARCHAR2 (4000);
      x_stmt_no      NUMBER          := 0;
   BEGIN
       SELECT metric_id
        INTO x_metric_id
        FROM si_metrics_t
       WHERE metric_name =  (SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='RESQSM' AND IS_ACTIVE='Y');-- 'MS_QSM_QUESTNR_RESPONSE';

      x_stmt_no := 20;
      x_exec_imd :=    'SELECT QUE_REQUEST_ID FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :1'
                    || ' and instance_id = (SELECT max(instance_id) FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :2'
                    || ')'
                    || ' and rownum <= 1 ';
      x_stmt_no := 30;

      EXECUTE IMMEDIATE x_exec_imd
                   into l_que_request_id
                   using pn_pid,pn_pid;
     BEGIN
      
            select UNIQUE MS_APPS_UTILITIES.GET_USER_FULL_NAME(RESPONDED_BY) 
              INTO l_return from MS_QSM_QUESTNR_RESP_DUP_V a
              WHERE process_instance_id = pn_pid
            AND que_request_id = l_que_request_id
            AND instance_rec_num = 1
            AND instance_id = (SELECT MAX (instance_id)
                                 FROM MS_QSM_QUESTNR_RESP_DUP_V
                                WHERE process_instance_id = a.process_instance_id);
                                 

               if l_return is null then
                l_return:='  ';
            END IF;
     EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            RETURN 'No Data Found ' || ' @ Statement ' || x_stmt_no;
      --RETURN NULL;
      END;
       RETURN l_return;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN 'Statement ' || x_stmt_no || ' ' || SQLCODE || SQLERRM;
   END;
      FUNCTION get_response_approver(
    pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
     )
      RETURN VARCHAR2
   AS    
     -- l_created_by NUMBER;
      l_que_request_id  VARCHAR2 (4000);
      l_return   VARCHAR2 (4000);
      l_maint_cur_stage   VARCHAR2 (4000);
      x_metric_id    NUMBER;
       x_exec_imd     VARCHAR2 (4000);
      x_stmt_no      NUMBER          := 0;
      L_APPROVER VARCHAR2(4000);
   BEGIN
       SELECT metric_id
        INTO x_metric_id
        FROM si_metrics_t
       WHERE metric_name = (SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='RESQSM' AND IS_ACTIVE='Y');

      x_stmt_no := 20;
      x_exec_imd :=    'SELECT QUE_REQUEST_ID FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :1'
                    || ' and instance_id = (SELECT max(instance_id) FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :2'
                    || ')'
                    || ' and rownum <= 1 ';
      x_stmt_no := 30;

      EXECUTE IMMEDIATE x_exec_imd
                   into l_que_request_id
                   using pn_pid,pn_pid;
      BEGIN

--            select distinct MAINT_CURRENT_STAGE as current_stage
--              INTO l_maint_cur_stage 
--              from MS_QSM_QUESTNR_RESP_DUP_V a
--              WHERE process_instance_id = pn_pid
--            AND que_request_id = l_que_request_id
--            AND instance_rec_num = 1
--            AND instance_id = (SELECT MAX (instance_id)
--                                 FROM MS_QSM_QUESTNR_RESP_DUP_V
--                                WHERE process_instance_id = a.process_instance_id);
----                                  AND instance_id <>
----                                                (SELECT MAX (instance_id)
----                                                   FROM MS_QSM_QUESTNR_RESP_DUP_V
----                                                  WHERE process_instance_id = a.process_instance_id));
--                                                  
--            if l_maint_cur_stage = 'IA' then
            
            
            select decode(MAINT_CURRENT_STAGE,'OA',OVERALL_APPROVER,RESPONSE_APPROVER) as Response_Approver
              INTO L_APPROVER 
              from MS_QSM_QUESTNR_RESP_DUP_V a
              WHERE process_instance_id = pn_pid
            AND que_request_id = l_que_request_id
            AND instance_rec_num = 1
            AND instance_id = (SELECT MAX (instance_id)
                                 FROM MS_QSM_QUESTNR_RESP_DUP_V
                                WHERE process_instance_id = a.process_instance_id);
--                                  AND instance_id <>
--                                                (SELECT MAX (instance_id)
--                                                   FROM MS_QSM_QUESTNR_RESP_DUP_V
--                                                  WHERE process_instance_id = a.process_instance_id));
--            else
--            
--              if l_maint_cur_stage = 'OA' then
--              
--                 select UNIQUE OVERALL_APPROVER as Overall_Approver
--              INTO l_return 
--              from MS_QSM_QUESTNR_RESP_DUP_V a
--              WHERE process_instance_id = pn_pid
--            AND que_request_id = l_que_request_id
--            AND instance_rec_num = 1
--            AND instance_id = (SELECT MAX (instance_id)
--                                 FROM MS_QSM_QUESTNR_RESP_DUP_V
--                                WHERE process_instance_id = a.process_instance_id);
----                                  AND instance_id <>
----                                                (SELECT MAX (instance_id)
----                                                   FROM MS_QSM_QUESTNR_RESP_DUP_V
----                                                  WHERE process_instance_id = a.process_instance_id));
--              end if;
--            End if;
           
           
           SELECT ms_concat(ms_apps_utilities.get_user_full_name(COLUMN_VALUE))
           into l_return
           FROM TABLE(ms_apps_utilities.parse_string(L_APPROVER,','));
            
           if l_return is null then
                l_return:='  ';
            END IF;
       EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            RETURN 'No Data Found ' || ' @ Statement ' || x_stmt_no;
      END;
       RETURN l_return;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN 'Statement ' || x_stmt_no || ' ' || SQLCODE || SQLERRM;
   END;
   FUNCTION get_request_type(
    pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
     )
      RETURN VARCHAR2
   AS    
     -- l_created_by NUMBER;
      l_que_request_id  VARCHAR2 (4000);
      l_return   VARCHAR2 (4000);
      x_metric_id    NUMBER;
       x_exec_imd     VARCHAR2 (4000);
      x_stmt_no      NUMBER          := 0;
      l_enterprise_id  NUMBER;
   BEGIN
       SELECT metric_id
        INTO x_metric_id
        FROM si_metrics_t
       WHERE metric_name =(SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='RESQSM' AND IS_ACTIVE='Y');
       
        SELECT ENTERPRISE_ID
        INTO l_enterprise_id
        FROM SI_ENT WHERE ROWNUM <=1;
        
      x_stmt_no := 20;
      x_exec_imd :=    'SELECT QUESTIONNAIRE_ID FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :1'
                    || ' and instance_id = (SELECT max(instance_id) FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :2'
                    || ')'
                    || ' and rownum <= 1 ';
      x_stmt_no := 30;

      EXECUTE IMMEDIATE x_exec_imd
                   into l_que_request_id
                   using pn_pid,pn_pid;
      
     x_stmt_no := 40;
     
                select  TRIM(ms_apps_utilities.get_display_value (l_enterprise_id,
                                                     'MS_QSM_Init_Questionnaire_Type',
                                                     QUE_TYPE,
                                                     1,
                                                     NULL,
                                                     NULL
                                                    ))QUE_REQUEST_TYPE
                                                    into  l_return from MS_QSM_QUESTIONNAIRE 
            where INTERNAL_QUESTNR_ID = TRIM(l_que_request_id);
     
      x_stmt_no := 50;   
      
--            SELECT ms_apps_utilities.get_display_value (100000,
--                                                     'MS_QSM_Init_Questionnaire_Type',
--                                                     TMEP_QUE_TYPE,
--                                                     1,
--                                                     NULL,
--                                                     NULL
--                                                    ) into l_return
----           FROM MS_QSM_QUESTNR_RESPONSE_V a
--           FROM MS_QSM_QUESTNR_RESP_DUP_V a
--              WHERE process_instance_id = pn_pid
--            AND que_request_id = l_que_request_id
--            AND instance_rec_num = 1
--            AND instance_id = (SELECT MAX (instance_id)
----                                 FROM MS_QSM_QUESTNR_RESPONSE_V
--                                    FROM MS_QSM_QUESTNR_RESP_DUP_V 
--                                WHERE process_instance_id = a.process_instance_id
--                                  AND instance_id <>
--                                                (SELECT MAX (instance_id)
--                                                   FROM MS_QSM_QUESTNR_RESPONSE_V
--                                                  WHERE process_instance_id = a.process_instance_id));

       RETURN l_return;
       
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN 'Statement ' || x_stmt_no || ' ' ||pn_pid||l_que_request_id;-- SQLCODE || SQLERRM;
   END;

FUNCTION get_init_request_type(
    pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
     )
      RETURN VARCHAR2
   AS    
     -- l_created_by NUMBER;
      l_que_request_id  VARCHAR2 (4000);
      l_return   VARCHAR2 (4000);
      x_metric_id    NUMBER;
       x_exec_imd     VARCHAR2 (4000);
      x_stmt_no      NUMBER          := 0;
        l_enterprise_id   NUMBER;
   BEGIN
       SELECT metric_id
        INTO x_metric_id
        FROM si_metrics_t
       WHERE metric_name =(SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='INIQSM' AND IS_ACTIVE='Y');
       
         SELECT ENTERPRISE_ID
        INTO l_enterprise_id
        FROM SI_ENT WHERE ROWNUM <=1;
        
      x_stmt_no := 20;
      x_exec_imd :=    'SELECT QUESTIONNAIRE_ID FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :1'
                    || ' and instance_id = (SELECT max(instance_id) FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :2'
                    || ')'
                    || ' and rownum <= 1 ';
      x_stmt_no := 30;

      EXECUTE IMMEDIATE x_exec_imd
                   into l_que_request_id
                   using pn_pid,pn_pid;
      
     x_stmt_no := 40;
     
                select  TRIM(ms_apps_utilities.get_display_value (l_enterprise_id,
                                                     'MS_QSM_Init_Questionnaire_Type',
                                                     QUE_TYPE,
                                                     1,
                                                     NULL,
                                                     NULL
                                                    ))QUE_REQUEST_TYPE
                                                    into  l_return from MS_QSM_QUESTIONNAIRE 
            where INTERNAL_QUESTNR_ID = TRIM(l_que_request_id);
     

       RETURN l_return;
       
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN 'Statement ' || x_stmt_no || ' ' ||pn_pid||l_que_request_id;-- SQLCODE || SQLERRM;
   END;
   FUNCTION get_type_of_response(
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
     )
      RETURN VARCHAR2
   AS    
     -- l_created_by NUMBER;
      l_que_request_id  VARCHAR2 (4000);
      l_return           VARCHAR2 (4000);
      l_frequency        VARCHAR2(255);
      l_que_request_type VARCHAR2(100);
      x_metric_id        NUMBER;
      x_exec_imd         VARCHAR2 (4000);
      x_stmt_no          NUMBER := 0;
      l_enterprise_id   NUMBER;
   BEGIN
       SELECT metric_id
        INTO x_metric_id
        FROM si_metrics_t
       WHERE metric_name =(SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='INIQSM' AND IS_ACTIVE='Y');
       
        SELECT ENTERPRISE_ID
        INTO l_enterprise_id
        FROM SI_ENT WHERE ROWNUM <=1;

      x_stmt_no := 20;
      x_exec_imd :=    'SELECT QUE_REQUEST_TYPE,SCH_FREQUENCY FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :1'
                    || ' and instance_id = (SELECT max(instance_id) FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :2'
                    || ')'
                    || ' and rownum <= 1 ';
      x_stmt_no := 30;

      EXECUTE IMMEDIATE x_exec_imd
                   into l_que_request_type,l_frequency
                   using pn_pid,pn_pid;
      
     x_stmt_no := 40;

                select  TRIM(ms_apps_utilities.get_display_value (l_enterprise_id,
                                                     'MS_QSM_Init_Questionnaire_Type',
                                                     l_que_request_type,
                                                     1,
                                                     NULL,
                                                     NULL
                                                    ))QUE_REQUEST_TYPE
                                                    into  l_return from DUAL; 

            
        IF l_frequency='3' THEN
            l_return:='Live '||l_return;
        END IF; 
     
       RETURN l_return;
       
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN 'Statement ' || x_stmt_no || ' ' ||pn_pid||l_que_request_id;-- SQLCODE || SQLERRM;
   END;
   FUNCTION get_response_due_date(
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
     )
      RETURN VARCHAR2
   AS    
     -- l_created_by NUMBER;
      l_return          VARCHAR2(4000);
      x_metric_id       NUMBER;
      x_exec_imd       VARCHAR2 (4000);
      x_stmt_no         NUMBER          := 0;
   BEGIN
       SELECT metric_id
        INTO x_metric_id
        FROM si_metrics_t
       WHERE metric_name = (SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='RESQSM' AND IS_ACTIVE='Y');

      x_stmt_no := 20;
      x_exec_imd :=    'SELECT trim(DUE_DATE) FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :1'
                    || ' and instance_id = (SELECT max(instance_id) FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :2'
                    || ')'
                    || ' and rownum <= 1 ';
      x_stmt_no := 30;

      EXECUTE IMMEDIATE x_exec_imd
                   into l_return
                   using pn_pid,pn_pid;
       BEGIN
            IF l_return is null THEN
                l_return:=' ';
            END IF;
            
            EXCEPTION
              WHEN NO_DATA_FOUND
              THEN
                RETURN 'No Data Found ' || ' @ Statement ' || x_stmt_no;
      END;
       RETURN l_return;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN 'Statement ' || x_stmt_no || ' ' || SQLCODE || SQLERRM;
   END;
   
   
    FUNCTION get_title_user(
    pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
     )
      RETURN VARCHAR2
   AS    
     -- l_created_by NUMBER;
      l_que_request_id  VARCHAR2 (4000);
      l_return   VARCHAR2 (4000);
      x_metric_id    NUMBER;
       x_exec_imd     VARCHAR2 (4000);
      x_stmt_no      NUMBER          := 0;
      l_enterprise_id  NUMBER;
   BEGIN
       SELECT metric_id
        INTO x_metric_id
        FROM si_metrics_t
       WHERE metric_name =(SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='RESQSM' AND IS_ACTIVE='Y');
       
        SELECT ENTERPRISE_ID
        INTO l_enterprise_id
        FROM SI_ENT WHERE ROWNUM <=1;
        
      x_stmt_no := 20;
      x_exec_imd :=    'SELECT ms_apps_utilities.get_user_full_name(dd_current_user_name) FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :1'
                    || ' and instance_id = (SELECT max(instance_id) FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :2'
                    || ')'
                    || ' and rownum <= 1 ';
      x_stmt_no := 30;

      EXECUTE IMMEDIATE x_exec_imd
                   into l_return
                   using pn_pid,pn_pid;
      

       RETURN l_return;
       
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN 'Statement ' || x_stmt_no || ' ' ||pn_pid||l_que_request_id;-- SQLCODE || SQLERRM;
   END;
   
     Function Get_Admin_Email( pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      Pn_Pid          Number,
      pn_id           NUMBER)
      Return Varchar2
      As
      X_Email_Id Varchar2(4000);
      Begin
      Select ms_concat(First_Name||' '||Last_Name||'('||Email_Address||') ') into x_email_id From Si_Users_T where user_id in (select user_id from Si_User_Org_Roles where Org_Role_Id in (Select Org_Role_Id From Si_Org_Roles Where Role_Id = 100042));
      return x_email_id;
      end;
      
           FUNCTION get_response_due_date_init(
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
     )
      Return Varchar2
      As
      l_return          VARCHAR2(4000);
      x_metric_id       NUMBER;
      x_exec_imd       VARCHAR2 (4000);
      x_stmt_no         NUMBER          := 0;
   BEGIN
       SELECT metric_id
        INTO x_metric_id
        FROM si_metrics_t
       WHERE metric_name = (SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='INIQSM' AND IS_ACTIVE='Y');

      x_stmt_no := 20;
      x_exec_imd :=    'SELECT trim(Sch_Start_Date + Sch_Due_After) FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :1'
                    || ' and instance_id = (SELECT max(instance_id) FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :2'
                    || ')'
                    || ' and rownum <= 1 ';
      x_stmt_no := 30;

      EXECUTE IMMEDIATE x_exec_imd
                   into l_return
                   using pn_pid,pn_pid;
       BEGIN
            IF l_return is null THEN
                l_return:=' ';
            END IF;
            
            EXCEPTION
              WHEN NO_DATA_FOUND
              THEN
                RETURN 'No Data Found ' || ' @ Statement ' || x_stmt_no;
      END;
       RETURN l_return;
   EXCEPTION
      WHEN OTHERS
      THEN
         Return 'Statement ' || X_Stmt_No || ' ' || Sqlcode || Sqlerrm;
   End;
   
     FUNCTION get_que_applies_to(
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
     )
      Return Varchar2
      As
      l_return          VARCHAR2(4000);
      x_metric_id       NUMBER;
      x_exec_imd       VARCHAR2 (4000);
      x_stmt_no         NUMBER          := 0;
   BEGIN
       SELECT metric_id
        INTO x_metric_id
        FROM si_metrics_t
       WHERE metric_name = (SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='INIQSM' AND IS_ACTIVE='Y');

      X_Stmt_No := 20;
      x_exec_imd :=    'SELECT trim(OBJECT_NAME) from MS_QSM_APPLIES_TO where trim(OBJECT_ID) in ( select trim(QUE_APPLIES_TO) FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :1'
                    || ' and instance_id = (SELECT max(instance_id) FROM SI_'
                    || x_metric_id
                    || '_T WHERE process_instance_id  = :2'
                    || ')'
                    || ' and rownum <= 1 '||')';
      x_stmt_no := 30;

      EXECUTE IMMEDIATE x_exec_imd
                   into l_return
                   using pn_pid,pn_pid;
       BEGIN
            IF l_return is null THEN
                l_return:=' ';
            END IF;
            
            EXCEPTION
              WHEN NO_DATA_FOUND
              THEN
                RETURN 'No Data Found ' || ' @ Statement ' || x_stmt_no;
      END;
       RETURN l_return;
   EXCEPTION
      WHEN OTHERS
      THEN
         Return 'Statement ' || X_Stmt_No || ' ' || Sqlcode || Sqlerrm;
   End;
      
END;
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_EMAIL_RESPONSE_DUEDATE" (
   o_error_code      OUT   NUMBER,
   o_error_message   OUT   VARCHAR2
)
AS
     x_recipients            varchar2_array                          := varchar2_array ();
   x_param_names           varchar2_array                          := varchar2_array ();
   x_param_values          clob_array                              := clob_array ();
   x_subject               VARCHAR2 (500);
   x_error_code            NUMBER;
   x_error_message         VARCHAR2 (4000);
   x_progress              NUMBER;
   x_exception_message     VARCHAR2 (4000);
   x_user_exception        EXCEPTION;
   x_enterprise_id         NUMBER;
   x_message_id            NUMBER;
   l_string                VARCHAR2 (100);
   x_message_id            NUMBER;
   lv_due_days1               VARCHAR2 (100);
   lv_que_request_name  MS_QSM_QUESTNR_RESP_DUP_V.que_request_name%TYPE;
  lv_que_request_type    MS_QSM_QUESTNR_RESP_DUP_V.tmep_que_type%TYPE;
   ln_created_by            VARCHAR2(255);
   l_due_date                 MS_QSM_QUESTNR_RESP_DUP_V.due_date%TYPE;
   lv_que_applies_to       MS_QSM_QUESTNR_RESP_DUP_V.applies_to%TYPE;
   lv_response_approver  MS_QSM_QUESTNR_RESP_DUP_V.response_approver%TYPE;
   lv_que_request_id        MS_QSM_QUESTNR_RESP_DUP_V.que_request_id%TYPE;
   lv_respondent            MS_QSM_QUESTNR_RESP_DUP_V.respondent%TYPE;
   x_par_value               NUMBER;
   x_current_date        DATE;
   x_metric_id             VARCHAR2 (100);
   x_process_instance_id   VARCHAR2 (100);
   l_user_list             VARCHAR2 (4000);    
   l_count                     NUMBER;
   l_respondent_lenght NUMBER;
   l_respondent_comma VARCHAR2(255);

   CURSOR qsm_list
   IS
        select  distinct que_request_name,TO_DATE(due_date,'DD/MM/RRRR')  as Response_due_date,respondent,
                                            (TO_DATE (due_date,'DD/MM/RRRR') - TO_DATE (SYSDATE, 'DD/MM/RRRR')) as due_days,
                                            que_request_id,PROCESS_INSTANCE_ID,INITIATED_BY as created_by,MS_APPS_UTILITIES.GET_USER_FULL_NAME(RESPONSE_APPROVER) as Response_Approver,
                                            APPLIES_TO
                                  from  MS_QSM_QUESTNR_RESP_DUP_V a where TO_DATE (due_date,'DD/MM/RRRR') - TO_DATE (SYSDATE, 'DD/MM/RRRR') >=0 AND EXISTS (SELECT 1
               FROM MS_QSM_QUESTNR_RESP_DUP_V b
              WHERE a.que_request_id =b.que_request_id
              and due_date IS NOT NULL );
                                            
       
BEGIN
   x_progress := 10;
   x_exception_message := 'x_progress:- ' || x_progress || 'Procedure Begins';
   x_progress := 20;
   

   BEGIN
      SELECT enterprise_id, metric_id
        INTO x_enterprise_id, x_metric_id
        FROM si_metrics_t t
       WHERE t.metric_name = (SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='RESQSM' AND IS_ACTIVE='Y');-- 'MS_QSM_QUESTNR_RESP_DUP';
   EXCEPTION
      WHEN OTHERS
      THEN
         x_exception_message :=    SUBSTR (SQLERRM, 1, 255)
                                || '- x_progress:- '
                                || x_progress
                                || '-Exception in fetching the enterprise id from the si_metrics_t';
         RAISE x_user_exception;

   END;
   
   x_progress := 100;

   BEGIN
       SELECT ms_apps_utilities.get_parameter_value (1,
                                                    'MS_QSM_Email_Configuration',  
                                                    'Number_of_Days_before_due_date'  
                                                   ) 
        INTO x_par_value
        FROM DUAL;
   EXCEPTION
      WHEN OTHERS
      THEN
         x_exception_message :=    SUBSTR (SQLERRM, 1, 255)
                                || '- x_progress:- '
                                || x_progress
                                || '-Exception in fetching the parameter value';
         RAISE x_user_exception;

    END;
 
  x_progress := 30;

   FOR i IN qsm_list
   LOOP
        IF (i.Response_due_date IS NOT NULL) THEN
        
            IF (x_par_value = i.due_days) THEN
            
                x_progress := 40;
                
                BEGIN
                    select 
                    distinct que_request_name,TO_DATE(due_date,'DD/MM/RRRR')  as Response_due_date,ms_apps_utilities.get_display_value (100000,
                                                         'MS_QSM_Init_Questionnaire_Type',
                                                         TMEP_QUE_TYPE,
                                                        1,
                                                         NULL,
                                                         NULL
                                                        ) as que_request_type,respondent,
                                                        (TO_DATE (due_date,'DD/MM/RRRR') - TO_DATE (SYSDATE, 'DD/MM/RRRR')) as due_days,
                                                        que_request_id,MS_APPS_UTILITIES.GET_USER_FULL_NAME(INITIATED_BY) as created_by,MS_APPS_UTILITIES.GET_USER_FULL_NAME(RESPONSE_APPROVER) as Response_Approver,
                                                        applies_to,process_instance_id
                     INTO lv_que_request_name,
                             l_due_date,
                             lv_que_request_type,
                             lv_respondent,
                             lv_due_days1,
                             lv_que_request_id, 
                             ln_created_by,
                             lv_response_approver,
                             lv_que_applies_to,
                             x_process_instance_id                     
                        FROM MS_QSM_QUESTNR_RESP_DUP_V
                        WHERE que_request_id= i.que_request_id AND PROCESS_INSTANCE_ID=i.PROCESS_INSTANCE_ID AND instance_rec_num = 1; 
                EXCEPTION
                   WHEN OTHERS
                   THEN
                      x_exception_message :=    SUBSTR (SQLERRM, 1, 255)
                                             || ' x_progress:- '
                                             || x_progress
                                             || 'Exception in fetching details for email.';
                      RAISE x_user_exception;
                END;

       
               l_count:=0;
               l_respondent_lenght:=1;
               
                LOOP
                        l_count:=l_count+1;
                                            
                        IF INSTR(lv_respondent,',',1,l_count) = 0 THEN
                            IF l_count=1 THEN
                                l_respondent_comma:=lv_respondent;
                            ELSE
                                l_respondent_comma:=SUBSTR(lv_respondent, l_respondent_lenght);
                            END IF;
                        ELSE
                            SELECT SUBSTR(lv_respondent, l_respondent_lenght ,INSTR(lv_respondent, ',', 1, l_count)-l_respondent_lenght) AS Respondent
                               into l_respondent_comma
                            FROM DUAL;
                            l_respondent_lenght:=(length(l_respondent_comma)+1)+l_respondent_lenght;
                        END IF;
                        
                        x_progress := 50;
                        x_subject :='Your Attention Required: Response To '||lv_que_request_type||' Due in: ' ||lv_due_days1||'days';

                        x_param_names.EXTEND (12);
                        x_param_names (1) := 'Respondents';
                        x_param_names (2) := 'QUE_Req_Name';
                        x_param_names (3) := 'Response_Due_Date';
                        x_param_names (4) := 'QUE_Req_Type';
                        x_param_names (5) := 'Due_Days1';
                        x_param_names (6) := 'QUE_Request_Id';
                        x_param_names (7) := 'Initiator';
                        x_param_names (8) := 'Response_Approver';
                        x_param_names (9) := 'Applies_To'; 
                        x_param_names (10) := 'MDF_PROCESS_INSTANCE_ID';
                        x_param_names (11) := 'MDF_METRIC_ID';
                       -- ms_log_activity();
                        x_recipients.EXTEND;
                        x_param_values.EXTEND (12);
                        x_recipients (1) := i.respondent;
                        x_param_values (1) := l_respondent_comma;
                        x_param_values (2) :=lv_que_request_name;
                        x_param_values (3) :=TO_CHAR (l_due_date, 'DD/MM/RRRR');
                        x_param_values (4) := lv_que_request_type;
                        x_param_values (5) := lv_due_days1;
                         x_param_values (6) := lv_que_request_id;
                        x_param_values (7) :=to_clob(ln_created_by);
                        x_param_values (8) :=  lv_response_approver;
                        x_param_values (9) := lv_que_applies_to;
                        x_param_values (10) := x_process_instance_id;
                        x_param_values (11) := x_metric_id;

                           
                        x_progress := 80;

                       /* SELECT ms_concat (ms_apps_utilities.get_user_name (user_id))
                          INTO l_user_list
                          FROM si_event_assignments
                         WHERE infolet_id = x_metric_id AND process_instance_id = x_process_instance_id;
                         */    
                        --IF (INSTR (l_user_list, x_recipients (1) )<> 0 )
                        --THEN
                           si_alert_sv.send_email (2                             
                                                    ,
                                                   x_recipients,
                                                   x_enterprise_id,
                                                   x_subject,
                                                   'QSM/MS_QSM_RESP_DUE_DATE.vm',
                                                   x_param_names,
                                                   x_param_values,
                                                   x_error_code,
                                                   x_error_message
                                                  );
                       -- END IF;
                       EXIT WHEN INSTR(lv_respondent,',',1,l_count) = 0;
                END LOOP;
            
            /*
            
                x_progress := 50;
                x_subject := lv_que_request_name||'Your Attention Required: Response To Survey Due in: ' ||lv_due_days1||'days';

                x_param_names.EXTEND (12);
                x_param_names (1) := 'Respondents';
                x_param_names (2) := 'QUE_Req_Name';
                x_param_names (3) := 'Response_Due_Date';
                x_param_names (4) := 'QUE_Req_Type';
                x_param_names (5) := 'Due_Days1';
                x_param_names (6) := 'QUE_Request_Id';
                x_param_names (7) := 'Initiator';
                x_param_names (8) := 'Response_Approver';
                x_param_names (9) := 'Applies_To'; 
                x_param_names (10) := 'MDF_PROCESS_INSTANCE_ID';
                x_param_names (11) := 'MDF_METRIC_ID';
               -- ms_log_activity();
                x_recipients.EXTEND;
                x_param_values.EXTEND (12);
               x_recipients (1) := i.respondent;
               x_param_values (1) := lv_respondent;
                x_param_values (2) :=lv_que_request_name;
                x_param_values (3) :=TO_CHAR (l_due_date, 'DD/MM/RRRR');
                x_param_values (4) := lv_que_request_type;
                x_param_values (5) := lv_due_days1;
                 x_param_values (6) := lv_que_request_id;
                x_param_values (7) :=to_clob(ln_created_by);
                x_param_values (8) :=  lv_response_approver;
                x_param_values (9) := lv_que_applies_to;
                x_param_values (10) := x_process_instance_id;
                 x_param_values (11) := x_metric_id;

           
                x_progress := 80;

                SELECT ms_concat (ms_apps_utilities.get_user_name (user_id))
                  INTO l_user_list
                  FROM si_event_assignments
                 WHERE infolet_id = x_metric_id AND process_instance_id = x_process_instance_id;
                 
                IF (INSTR (l_user_list, x_recipients (1) )<> 0 )
                THEN
                   si_alert_sv.send_email (2                             
                                            ,
                                           x_recipients,
                                           x_enterprise_id,
                                           x_subject,
                                           'QSM/MS_QSM_RESP_DUE_DATE.vm',
                                           x_param_names,
                                           x_param_values,
                                           x_error_code,
                                           x_error_message
                                          );
                END IF;
            */

            END IF;
         END IF;
   END LOOP;

   x_error_code := 0;
   x_error_message := 'Successfully Completed';
EXCEPTION
   WHEN x_user_exception
   THEN
      x_error_code := -1;
      x_error_message := x_exception_message;
      ms_apps_mdf_errors_pkg.insert_log
                              (pn_error_handle_id      => x_progress,
                               pn_error_sequence       => x_progress,
                               pc_error_type           => 'ERROR',
                               pc_error_text           =>    'Problem Sending MS_QSM_EMAIL_RESPONSE_DUEDATE'
                                                          || DBMS_UTILITY.format_error_backtrace
                                                          || '~'
                                                          || SQLERRM
                              );
      ROLLBACK;
   WHEN OTHERS
   THEN
      x_exception_message :=    SUBSTR (SQLERRM, 1, 255)
                             || 'x_progress:- '
                             || x_progress
                             || 'No Others exception raised ';
      x_error_code := -1;
      x_error_message := x_exception_message;
      ms_apps_mdf_errors_pkg.insert_log
                            (pn_error_handle_id      => x_progress,
                             pn_error_sequence       => x_progress,
                             pc_error_type           => 'ERROR',
                             pc_error_text           =>    'WO Problem Sending MS_QSM_EMAIL_RESPONSE_DUEDATE'
                                                        || DBMS_UTILITY.format_error_backtrace
                                                        || '~'
                                                        || SQLERRM
                            );
      ROLLBACK;
END MS_QSM_EMAIL_RESPONSE_DUEDATE;
  
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_ENGINE" 
AS
   g_namespace   VARCHAR2 (1000) := 'xmlns="http://www.metricstream.com/appstudio/msa"';

   PROCEDURE process (lt_in_data_orig      IN     CLOB,
                      lt_in_data           IN OUT CLOB,
                      lt_out_data          IN OUT CLOB,
                      pc_process_code      IN     VARCHAR2,
                      lc_from_stage        IN     VARCHAR2,
                      lc_to_stage          IN     VARCHAR2,
                      xn_error_handle_id   IN OUT NUMBER,
                      xn_error_seq         IN OUT NUMBER,
                      xn_error_code           OUT VARCHAR2);

    PROCEDURE PR_CALL_ETL(
                iop_xml_data          IN     OUT     NOCOPY         CLOB,
                iop_log_no            IN     OUT                    NUMBER,
                op_error_code                OUT                    NUMBER,
                op_error_message             OUT                    VARCHAR2,
                iop_error_seq         IN     OUT                    NUMBER,
                ip_pid                IN                            NUMBER
                
            );
            
 PROCEDURE RESPONSE_CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY         CLOB,
            iop_log_no            IN     OUT                    NUMBER,
            op_error_code                OUT                    NUMBER,
            op_error_message             OUT                    VARCHAR2,
            iop_error_seq         IN     OUT                    NUMBER,
            ip_pid                IN                            NUMBER
            
        );
        
 PROCEDURE ISSUES_CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY         CLOB,
            iop_log_no            IN     OUT                    NUMBER,
            op_error_code                OUT                    NUMBER,
            op_error_message             OUT                    VARCHAR2,
            iop_error_seq         IN     OUT                    NUMBER,
            ip_pid                IN                            NUMBER
            
        );
        
PROCEDURE trigger_survey (i_event_log_id         IN            ms_apps_event_logs.event_log_id%TYPE,
                i_event_name           IN            ms_apps_events.event_name%TYPE,
                i_subscription_name    IN            ms_apps_event_subscriptions.subscription_name%TYPE,
                i_status               IN            PLS_INTEGER,
                i_action_text          IN            VARCHAR2,
                o_close_subscription      OUT NOCOPY VARCHAR2,
                o_notify_event_owner      OUT NOCOPY VARCHAR2,
                o_error_code              OUT NOCOPY NUMBER,
                o_error_message           OUT NOCOPY VARCHAR2);


END; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_ENGINE" 
AS
PROCEDURE process(
    lt_in_data_orig    IN CLOB,
    lt_in_data         IN OUT CLOB,
    lt_out_data        IN OUT CLOB,
    pc_process_code    IN VARCHAR2,
    lc_from_stage      IN VARCHAR2,
    lc_to_stage        IN VARCHAR2,
    xn_error_handle_id IN OUT NUMBER,
    xn_error_seq       IN OUT NUMBER,
    xn_error_code OUT VARCHAR2)
AS
  l_out_xml XMLTYPE := NULL;
  l_dd_process_code VARCHAR2 (1000);
  l_param_value ms_qsm_params.VALUE%TYPE;
  l_router_suffix VARCHAR2 (30);
BEGIN
  L_OUT_XML := XMLTYPE (LT_IN_DATA);
      insert into NOVT_ERR_LOG values(12345,'BEGIN ms_'||ms_qsm_utilities.G_MODULE_CODE||'_router_' || '' || '(:1,:2,:3,:4,:5,:6,:7,:8,:9); END; ');
    --       ms_qsm_log_activity ('', 'Afterl out xml:  ', l_out_xml.getclobval ());
  l_dd_process_code := ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/dd_process_code');
  ms_qsm_log_activity ('', 'After dd process code:  '||l_dd_process_code, l_out_xml.getclobval ());
  
  BEGIN
    SELECT UPPER (A.VALUE)
    INTO l_param_value
    FROM ms_qsm_params a
    WHERE a.param_group = 'QSM_PARAMS'
    AND a.parameter     = 'USE_GEN_CODE_BASE'
    AND enabled         = 'Y';
  EXCEPTION
  WHEN OTHERS THEN
    l_param_value := 'Y';
  END;

  IF l_param_value                                          = 'Y' THEN
    IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0) THEN
      ms_qsm_utilities.initialize_metric_maint ('QSM');
    END IF;
    
    l_router_suffix := ms_qsm_utilities.GET_ROUTER_SUFFIX(l_dd_process_code);
    
       insert into NOVT_ERR_LOG values(12345,'BEGIN ms_'||ms_qsm_utilities.G_MODULE_CODE||'_router_' || l_router_suffix || '(:1,:2,:3,:4,:5,:6,:7,:8,:9); END; ');

    --        ms_qsm_log_activity ('', 'After dd process code:  '||l_dd_process_code||'~'||l_router_suffix, l_out_xml.getclobval ());
    EXECUTE IMMEDIATE ' BEGIN ms_'||ms_qsm_utilities.G_MODULE_CODE||'_router_' || l_router_suffix || '(:1,:2,:3,:4,:5,:6,:7,:8,:9); END; ' USING lt_in_data_orig,
    IN OUT lt_in_data,
    IN OUT lt_out_data,
    pc_process_code,
    lc_from_stage,
    lc_to_stage,
    IN OUT xn_error_handle_id,
    IN OUT xn_error_seq,
    OUT xn_error_code;
  ELSE
    NULL;
    /*
    Place Holder for custom coding for ISM in case the implementor  decides  not use the
    auto gen code Route
    */
  END IF;

EXCEPTION
WHEN OTHERS THEN
  ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id => xn_error_handle_id, pn_error_sequence => xn_error_seq, pc_error_type => 'E', pc_error_text => 'Fatal Error in the MS_QSM_ENGINE Package ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
END process;
PROCEDURE PR_CALL_ETL(
    iop_xml_data IN OUT NOCOPY CLOB,
    iop_log_no   IN OUT NUMBER,
    op_error_code OUT NUMBER,
    op_error_message OUT VARCHAR2,
    iop_error_seq IN OUT NUMBER,
    ip_pid        IN NUMBER )
IS
  GC_package_name VARCHAR2(100):= 'PR_CALL_ETL';
  LV_progress     VARCHAR2(3)  := NULL;
  LV_cntr_1       NUMBER       := NULL;
  LV_cntr_2       NUMBER       := NULL;
  LV_debug        BOOLEAN      := FALSE;
  LV_XML XMLTYPE               := XMLTYPE(iop_xml_data);
  LV_err_code     NUMBER           := NULL;
  LV_err_msg      VARCHAR2(4000);
  lV_program_name VARCHAR2(100);
  l_temp CLOB;
  CURSOR LC_get_app_log_no
  IS
    SELECT ms_apps_mdf_error_handle_id_s.NEXTVAL AS APP_LOG_NO FROM DUAL;
  LV_log_no LC_get_app_log_no%ROWTYPE;
BEGIN
  SAVEPOINT MS_APPS_ETL_SAVEPOINT;
  LV_progress      := '001';
  op_error_code    := 0;
  op_error_message := '';
  lV_program_name  := 'CALL_ETL';
  LV_debug         := FALSE;
  IF iop_log_no    IS NULL THEN
    OPEN LC_get_app_log_no;
    FETCH LC_get_app_log_no
    INTO LV_log_no;
    CLOSE LC_get_app_log_no;
    iop_log_no := LV_log_no.APP_LOG_NO;
  ELSE
    LV_log_no.APP_LOG_NO := iop_log_no;
  END IF;
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_LOG_NO.APP_LOG_NO,IOP_ERROR_SEQ,SYSDATE,'I','[ ' || GC_PACKAGE_NAME || '.' || LV_PROGRAM_NAME || '] Start ', IP_PID);
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || ']  Updating Hierarchy', ip_pid);
  LV_cntr_1 := 0;
  LV_XML    := xmltype(iop_xml_data);
  /* --------------------------------------------------------------------------
  Cursor to fetch non multirow details from XML
  -------------------------------------------------------------------------- */
  FOR iop_data IN
  (SELECT INSTANCE_ID ,
    METRIC_ID
    --,TO_DATE(METRIC_RUN_DATE,'MM/DD/YYYY HH:MM:SS') AS METRIC_RUN_DATE
    ,
    TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss')       AS METRIC_RUN_DATE ,
    TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
    --        ,TO_DATE(METRIC_COMPLETED_DATE,'MM/DD/YYYY HH:MM:SS') AS METRIC_COMPLETED_DATE
    ,
    LATEST_FLAG ,
    CREATED_BY ,
    TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE
    --        ,TO_DATE(CREATION_DATE,'MM/DD/YYYY HH:MM:SS') AS CREATION_DATE
    ,
    PROCESS_FLOW_STATUS ,
    PROCESS_INSTANCE_ID ,
    ELECTRONICALLY_SIGNED ,
    INSTANCE_REC_NUM ,
    previous_stage ,
    key_col_name ,
    qsm_save ,
    assignee ,
    new_version ,
    que_name_valid_check ,
    indv_item_labels ,
    dd_object_type ,
    dd_event_user_name ,
    dd_enterprise_info ,
    dd_current_stage ,
    dd_process_code ,
    que_id ,
    que_name ,
    internal_questnr_id ,
    que_type ,
    include_metrics ,
    metric_frequency ,
    scoring_logic ,
    instructions ,
    instructions_htm ,
    checklist_type ,
    rpn_computation ,
    scoring_method ,
    minimum_score ,
    maximum_score ,
    certification_text ,
    certification_text_htm ,
    level_1_approver ,
    level_2_approver ,
    restrict_access_to ,
    TO_DATE(VALID_FROM,'MM/dd/yyyy HH24:mi:ss')   AS VALID_FROM ,
    TO_DATE(VALID_UNTILL,'MM/dd/yyyy HH24:mi:ss') AS VALID_UNTILL
    --                ,TO_DATE(VALID_FROM,'MM/DD/YYYY HH:MM:SS') AS VALID_FROM
    --                ,TO_DATE(VALID_UNTILL,'MM/DD/YYYY HH:MM:SS') AS VALID_UNTILL
    ,
    que_action ,
    que_comments ,
    version_number ,
    published ,
    dd_current_user_name ,
    initiator ,
    status ,
    config_flag ,
    rtf_attach ,
    applies_to ,
    default_attribute_values ,
    owner_organizations ,
    owners ,
    que_selected_met_qst ,
    scoring_flag ,
    navigation ,
    REPORTING_PERIOD_TYPE ,
    ASSOCIATED_WITH_TYPE ,
    ADDITIONAL_COLUMN_H1 ,
    ATTRIBUTE_COLUMN_H2 ,
    ATTRIBUTE_COLUMN_H3 ,
    CONFIGURED_OBJECT_TYPES ,
    REL_SOURCE_ID ,
    REL_SOURCE_OBJECT_ID ,
    QSTNR_CATEGORY
  FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:nonmultirow' PASSING LV_XML COLUMNS INSTANCE_ID NUMBER PATH 'msa:instance_id' ,METRIC_ID NUMBER PATH 'msa:metric_id' ,METRIC_RUN_DATE VARCHAR2(40) PATH 'msa:metric_run_date' ,METRIC_COMPLETED_DATE VARCHAR2(40) PATH 'msa:metric_completed_date' ,LATEST_FLAG VARCHAR2(1) PATH 'msa:latest_flag' ,CREATED_BY NUMBER PATH 'msa:created_by' ,CREATION_DATE VARCHAR2(40) PATH 'msa:creation_date' ,PROCESS_FLOW_STATUS NUMBER PATH 'msa:process_flow_status' ,PROCESS_INSTANCE_ID NUMBER PATH 'msa:process_instance_id' ,ELECTRONICALLY_SIGNED NUMBER PATH 'msa:electronically_signed' ,INSTANCE_REC_NUM NUMBER PATH 'msa:instance_rec_num' ,previous_stage VARCHAR2(4000) PATH 'msa:previous_stage' ,key_col_name VARCHAR2(4000) PATH 'msa:key_col_name' ,qsm_save VARCHAR2(4000) PATH 'msa:qsm_save' ,assignee VARCHAR2(4000) PATH 'msa:assignee' ,new_version VARCHAR2(4000) PATH 'msa:new_version' ,
    que_name_valid_check                                                                                                                                          VARCHAR2(4000) PATH 'msa:que_name_valid_check' ,indv_item_labels VARCHAR2(4000) PATH 'msa:indv_item_labels' ,dd_object_type VARCHAR2(4000) PATH 'msa:dd_object_type' ,dd_event_user_name VARCHAR2(4000) PATH 'msa:dd_event_user_name' ,dd_enterprise_info VARCHAR2(4000) PATH 'msa:dd_enterprise_info' ,dd_current_stage VARCHAR2(4000) PATH 'msa:dd_current_stage' ,dd_process_code VARCHAR2(4000) PATH 'msa:dd_process_code' ,que_id VARCHAR2(4000) PATH 'msa:que_id' ,que_name VARCHAR2(4000) PATH 'msa:que_name' ,internal_questnr_id VARCHAR2(4000) PATH 'msa:internal_questnr_id' ,que_type VARCHAR2(4000) PATH 'msa:que_type' ,include_metrics VARCHAR2(4000) PATH 'msa:include_metrics' ,metric_frequency VARCHAR2(4000) PATH 'msa:metric_frequency' ,scoring_logic VARCHAR2(4000) PATH 'msa:scoring_logic' ,instructions CLOB PATH 'msa:instructions' ,
    instructions_htm CLOB PATH 'msa:instructions_htm' ,checklist_type                                                                                             VARCHAR2(4000) PATH 'msa:checklist_type' ,rpn_computation VARCHAR2(4000) PATH 'msa:rpn_computation' ,scoring_method VARCHAR2(4000) PATH 'msa:scoring_method' ,minimum_score NUMBER PATH 'msa:minimum_score' ,maximum_score NUMBER PATH 'msa:maximum_score' ,certification_text CLOB PATH 'msa:certification_text' ,certification_text_htm CLOB PATH 'msa:certification_text_htm' ,level_1_approver VARCHAR2(4000) PATH 'msa:level_1_approver' ,level_2_approver VARCHAR2(4000) PATH 'msa:level_2_approver' ,restrict_access_to VARCHAR2(4000) PATH 'msa:restrict_access_to' ,valid_from VARCHAR2(100) PATH 'msa:valid_from' ,valid_untill VARCHAR2(100) PATH 'msa:valid_untill' ,que_action VARCHAR2(4000) PATH 'msa:que_action' ,que_comments VARCHAR2(4000) PATH 'msa:que_comments' ,version_number VARCHAR2(4000) PATH 'msa:version_number' ,published VARCHAR2(
    4000) PATH 'msa:published' ,dd_current_user_name                                                                                                              VARCHAR2(4000) PATH 'msa:dd_current_user_name' ,initiator VARCHAR2(4000) PATH 'msa:initiator' ,status VARCHAR2(4000) PATH 'msa:status' ,config_flag VARCHAR2(4000) PATH 'msa:config_flag' ,rtf_attach VARCHAR2(4000) PATH 'msa:rtf_attach' ,applies_to VARCHAR2(4000) PATH 'msa:applies_to' ,default_attribute_values VARCHAR2(4000) PATH 'msa:default_attribute_values' ,owner_organizations VARCHAR2(4000) PATH 'msa:owner_organizations' ,owners VARCHAR2(4000) PATH 'msa:owners' ,que_selected_met_qst VARCHAR2(4000) PATH 'msa:que_selected_met_qst' ,scoring_flag VARCHAR2(4000) PATH 'msa:scoring_flag' ,navigation VARCHAR2(4000) PATH 'msa:navigation' ,REPORTING_PERIOD_TYPE VARCHAR2(100) PATH 'msa:reporting_period_type' ,ASSOCIATED_WITH_TYPE VARCHAR2(4000) PATH 'msa:associated_with_type' ,ADDITIONAL_COLUMN_H1 VARCHAR2(4000) PATH
    'msa:additional_column_h1' ,ATTRIBUTE_COLUMN_H2                                                                                                               VARCHAR2(4000) PATH 'msa:attribute_column_h2' ,ATTRIBUTE_COLUMN_H3 VARCHAR2(4000) PATH 'msa:attribute_column_h3' ,CONFIGURED_OBJECT_TYPES VARCHAR2(4000) PATH 'msa:configured_object_types' ,REL_SOURCE_ID VARCHAR2(4000) PATH 'msa:rel_source_id' ,REL_SOURCE_OBJECT_ID VARCHAR2(4000) PATH 'msa:rel_source_object_id' ,qstnr_category VARCHAR2(255) PATH 'msa:qstnr_category' )
  )
  LOOP
  
    -- Added By Jamsheed
  
  	UPDATE MS_QSM_SECTION
    SET DD_STATUS_FLAG = 'N'
    WHERE SECTION_QUESTNR_FK = iop_data.INTERNAL_QUESTNR_ID;
    
    UPDATE MS_QSM_GRADE
    SET DD_STATUS_FLAG = 'N'
    WHERE GRD_QUESTNR_FK = iop_data.INTERNAL_QUESTNR_ID;
    
    UPDATE MS_QSM_QUESTION
    set dd_status_flag = 'N'
    WHERE QST_SECTION_ID IN (SELECT SECTION_ID_PK 
                              FROM MS_QSM_SECTION 
                              WHERE SECTION_QUESTNR_FK=iop_data.INTERNAL_QUESTNR_ID);
        
    UPDATE MS_QSM_SCORING
    SET DD_STATUS_FLAG = 'N'
    WHERE SCR_QST_FK IN (SELECT QST_ID_PK 
                         FROM MS_QSM_QUESTION A, MS_QSM_SECTION B 
                         WHERE A.QST_SECTION_FK = B.SECTION_ID_PK 
                         AND B.SECTION_QUESTNR_FK=iop_data.INTERNAL_QUESTNR_ID);
    
    -- Till Here
  
    MERGE INTO MS_QSM_QUESTIONNAIRE T USING
    (SELECT iop_data.certification_text_htm AS CERTIFICATION_TEXT,
      iop_data.CHECKLIST_TYPE               AS CHECKLIST_TYPE,
      iop_data.CONFIG_FLAG                  AS CONFIG_FLAG,
      iop_data.DD_EVENT_USER_NAME           AS DD_CREATED_BY,
      iop_data.INSTANCE_ID                  AS DD_INSTANCE_ID,
      iop_data.DD_CURRENT_USER_NAME         AS DD_MODIFIED_BY,
      iop_data.DD_OBJECT_TYPE               AS DD_OBJECT_TYPE,
      iop_data.DD_PROCESS_CODE              AS DD_PROCESS_CODE,
      iop_data.PROCESS_INSTANCE_ID          AS DD_PROCESS_INSTANCE_ID,
      iop_data.INCLUDE_METRICS              AS INCLUDE_METRICS,
      iop_data.INITIATOR                    AS INITIATOR,
      iop_data.INSTRUCTIONS_HTM             AS INSTRUCTIONS,
      iop_data.INTERNAL_QUESTNR_ID          AS INTERNAL_QUESTNR_ID,
      iop_data.LEVEL_1_APPROVER             AS LEVEL_1_APPROVER,
      iop_data.LEVEL_2_APPROVER             AS LEVEL_2_APPROVER,
      iop_data.MAXIMUM_SCORE                AS MAXIMUM_SCORE,
      iop_data.METRIC_FREQUENCY             AS METRIC_FREQUENCY,
      iop_data.MINIMUM_SCORE                AS MINIMUM_SCORE,
      iop_data.NAVIGATION                   AS NAVIGATION,
      iop_data.PUBLISHED                    AS PUBLISHED,
      iop_data.QUE_ACTION                   AS QUE_ACTION,
      iop_data.QUE_COMMENTS                 AS QUE_COMMENTS,
      iop_data.QUE_ID                       AS QUE_ID,
      iop_data.QUE_NAME                     AS QUE_NAME,
      iop_data.QUE_TYPE                     AS QUE_TYPE,
      iop_data.RESTRICT_ACCESS_TO           AS RESTRICT_ACCESS_TO,
      iop_data.RPN_COMPUTATION              AS RPN_COMPUTATION,
      iop_data.RTF_ATTACH                   AS RTF_ATTACH,
      iop_data.SCORING_FLAG                 AS SCORING_FLAG,
      iop_data.SCORING_LOGIC                AS SCORING_LOGIC,
      iop_data.SCORING_METHOD               AS SCORING_METHOD,
      iop_data.STATUS                       AS STATUS,
      iop_data.VALID_FROM                   AS VALID_FROM,
      iop_data.VALID_UNTILL                 AS VALID_UNTILL,
      iop_data.VERSION_NUMBER               AS VERSION_NUMBER,
      iop_data.REPORTING_PERIOD_TYPE        AS REPORTING_PERIOD_TYPE,
      iop_data.QSTNR_CATEGORY               AS QSTNR_CATEGORY
    FROM DUAL
    ) V ON (T.INTERNAL_QUESTNR_ID = V.INTERNAL_QUESTNR_ID)
  WHEN MATCHED THEN
    UPDATE
    SET T.CERTIFICATION_TEXT   = V.CERTIFICATION_TEXT,
      T.CHECKLIST_TYPE         = V.CHECKLIST_TYPE,
      T.CONFIG_FLAG            = V.CONFIG_FLAG,
      T.DD_CREATED_BY          = V.DD_CREATED_BY,
      T.DD_INSTANCE_ID         = V.DD_INSTANCE_ID,
      T.DD_MODIFIED_BY         = V.DD_MODIFIED_BY,
      T.DD_MODIFIED_ON         = SYSDATE,
      T.DD_OBJECT_TYPE         = V.DD_OBJECT_TYPE,
      T.DD_PROCESS_CODE        = V.DD_PROCESS_CODE,
      T.DD_PROCESS_INSTANCE_ID = V.DD_PROCESS_INSTANCE_ID,
      T.DD_STATUS_FLAG         = 'Y',
      T.INCLUDE_METRICS        = V.INCLUDE_METRICS,
      T.INITIATOR              = V.INITIATOR,
      T.INSTRUCTIONS           = V.INSTRUCTIONS,
      T.LEVEL_1_APPROVER       = V.LEVEL_1_APPROVER,
      T.LEVEL_2_APPROVER       = V.LEVEL_2_APPROVER,
      T.MAXIMUM_SCORE          = V.MAXIMUM_SCORE,
      T.METRIC_FREQUENCY       = V.METRIC_FREQUENCY,
      T.MINIMUM_SCORE          = V.MINIMUM_SCORE,
      T.NAVIGATION             = V.NAVIGATION,
      T.PUBLISHED              = V.PUBLISHED,
      T.QUE_ACTION             = V.QUE_ACTION,
      T.QUE_COMMENTS           = V.QUE_COMMENTS,
      T.QUE_ID                 = V.QUE_ID,
      T.QUE_NAME               = V.QUE_NAME,
      T.QUE_TYPE               = V.QUE_TYPE,
      T.RESTRICT_ACCESS_TO     = V.RESTRICT_ACCESS_TO,
      T.RPN_COMPUTATION        = V.RPN_COMPUTATION,
      T.RTF_ATTACH             = V.RTF_ATTACH,
      T.SCORING_FLAG           = V.SCORING_FLAG,
      T.SCORING_LOGIC          = V.SCORING_LOGIC,
      T.SCORING_METHOD         = V.SCORING_METHOD,
      T.STATUS                 = V.STATUS,
      T.VALID_FROM             = V.VALID_FROM,
      T.VALID_UNTILL           = V.VALID_UNTILL,
      T.VERSION_NUMBER         = V.VERSION_NUMBER,
      T.REPORTING_PERIOD_TYPE  = V.REPORTING_PERIOD_TYPE,
      T.QSTNR_CATEGORY         = V.QSTNR_CATEGORY WHEN NOT MATCHED THEN
    INSERT
      (
        T.CERTIFICATION_TEXT,
        T.CHECKLIST_TYPE,
        T.CONFIG_FLAG,
        T.DD_CREATED_BY,
        T.DD_CREATED_ON,
        T.DD_INSTANCE_ID,
        T.DD_MODIFIED_BY,
        T.DD_OBJECT_TYPE,
        T.DD_PROCESS_CODE,
        T.DD_PROCESS_INSTANCE_ID,
        T.DD_STATUS_FLAG,
        T.INCLUDE_METRICS,
        T.INITIATOR,
        T.INSTRUCTIONS,
        T.INTERNAL_QUESTNR_ID,
        T.LEVEL_1_APPROVER,
        T.LEVEL_2_APPROVER,
        T.MAXIMUM_SCORE,
        T.METRIC_FREQUENCY,
        T.MINIMUM_SCORE,
        T.NAVIGATION,
        T.PUBLISHED,
        T.QUE_ACTION,
        T.QUE_COMMENTS,
        T.QUE_ID,
        T.QUE_NAME,
        T.QUE_TYPE,
        T.RESTRICT_ACCESS_TO,
        T.RPN_COMPUTATION,
        T.RTF_ATTACH,
        T.SCORING_FLAG,
        T.SCORING_LOGIC,
        T.SCORING_METHOD,
        T.STATUS,
        T.VALID_FROM,
        T.VALID_UNTILL,
        T.VERSION_NUMBER,
        T.REPORTING_PERIOD_TYPE,
        T.QSTNR_CATEGORY
      )
      VALUES
      (
        V.CERTIFICATION_TEXT,
        V.CHECKLIST_TYPE,
        V.CONFIG_FLAG,
        V.DD_CREATED_BY,
        SYSDATE,
        V.DD_INSTANCE_ID,
        V.DD_MODIFIED_BY,
        V.DD_OBJECT_TYPE,
        V.DD_PROCESS_CODE,
        V.DD_PROCESS_INSTANCE_ID,
        'Y',
        V.INCLUDE_METRICS,
        V.INITIATOR,
        V.INSTRUCTIONS,
        V.INTERNAL_QUESTNR_ID,
        V.LEVEL_1_APPROVER,
        V.LEVEL_2_APPROVER,
        V.MAXIMUM_SCORE,
        V.METRIC_FREQUENCY,
        V.MINIMUM_SCORE,
        V.NAVIGATION,
        V.PUBLISHED,
        V.QUE_ACTION,
        V.QUE_COMMENTS,
        V.QUE_ID,
        V.QUE_NAME,
        V.QUE_TYPE,
        V.RESTRICT_ACCESS_TO,
        V.RPN_COMPUTATION,
        V.RTF_ATTACH,
        V.SCORING_FLAG,
        V.SCORING_LOGIC,
        V.SCORING_METHOD,
        V.STATUS,
        V.VALID_FROM,
        V.VALID_UNTILL,
        V.VERSION_NUMBER,
        V.REPORTING_PERIOD_TYPE,
        V.QSTNR_CATEGORY
      );
    DELETE MS_QSM_QUESTIONNAIRE_APT
    WHERE INTERNAL_QUESTNR_ID     = iop_data.INTERNAL_QUESTNR_ID;
    IF TRIM(iop_data.APPLIES_TO) IS NOT NULL THEN
      INSERT
      INTO MS_QSM_QUESTIONNAIRE_APT
        (
          DD_STATUS_FLAG,
          INTERNAL_QUESTNR_ID,
          APPLIES_TO
        )
      SELECT 'Y',
        iop_data.INTERNAL_QUESTNR_ID,
        COLUMN_VALUE
      FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.APPLIES_TO, ','));
    END IF;
    DELETE MS_QSM_QUESTIONNAIRE_DAV
    WHERE INTERNAL_QUESTNR_ID                   = iop_data.INTERNAL_QUESTNR_ID;
    IF TRIM(iop_data.DEFAULT_ATTRIBUTE_VALUES) IS NOT NULL THEN
      INSERT
      INTO MS_QSM_QUESTIONNAIRE_DAV
        (
          DD_STATUS_FLAG,
          INTERNAL_QUESTNR_ID,
          DEFAULT_ATTRIBUTE_VALUES
        )
      SELECT 'Y',
        iop_data.INTERNAL_QUESTNR_ID,
        COLUMN_VALUE
      FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.DEFAULT_ATTRIBUTE_VALUES, ','));
    END IF;
    DELETE MS_QSM_QUESTIONNAIRE_OWO
    WHERE INTERNAL_QUESTNR_ID              = iop_data.INTERNAL_QUESTNR_ID;
    IF TRIM(iop_data.OWNER_ORGANIZATIONS) IS NOT NULL THEN
      INSERT
      INTO MS_QSM_QUESTIONNAIRE_OWO
        (
          DD_STATUS_FLAG,
          INTERNAL_QUESTNR_ID,
          OWNER_ORGANIZATIONS
        )
      SELECT 'Y',
        iop_data.INTERNAL_QUESTNR_ID,
        COLUMN_VALUE
      FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.OWNER_ORGANIZATIONS, ','));
    END IF;
    DELETE MS_QSM_QUESTIONNAIRE_OWS
    WHERE INTERNAL_QUESTNR_ID = iop_data.INTERNAL_QUESTNR_ID;
    IF TRIM(iop_data.OWNERS) IS NOT NULL THEN
      INSERT
      INTO MS_QSM_QUESTIONNAIRE_OWS
        (
          DD_STATUS_FLAG,
          INTERNAL_QUESTNR_ID,
          OWNERS
        )
      SELECT 'Y',
        iop_data.INTERNAL_QUESTNR_ID,
        COLUMN_VALUE
      FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.OWNERS, ','));
    END IF;
    -- ORB Starts Here
    MERGE INTO MS_QSM_ORB_RELATION T USING
    (SELECT iop_data.REL_SOURCE_ID     AS REL_SOURCE_ID ,
      iop_data.REL_SOURCE_OBJECT_ID    AS REL_SOURCE_OBJECT_ID ,
      iop_data.CONFIGURED_OBJECT_TYPES AS CONFIGURED_OBJECT_TYPES ,
      iop_data.ASSOCIATED_WITH_TYPE    AS ASSOCIATED_WITH_TYPE ,
      iop_data.ADDITIONAL_COLUMN_H1    AS ADDITIONAL_COLUMN_H1 ,
      iop_data.ATTRIBUTE_COLUMN_H3     AS ATTRIBUTE_COLUMN_H3 ,
      iop_data.ATTRIBUTE_COLUMN_H2     AS ATTRIBUTE_COLUMN_H2 ,
      iop_data.DD_OBJECT_TYPE          AS DD_OBJECT_TYPE ,
      iop_data.DD_EVENT_USER_NAME      AS DD_CREATED_BY ,
      iop_data.DD_CURRENT_USER_NAME    AS DD_MODIFIED_BY ,
      iop_data.PROCESS_INSTANCE_ID     AS DD_PROCESS_INSTANCE_ID ,
      iop_data.INSTANCE_ID             AS DD_INSTANCE_ID ,
      iop_data.DD_PROCESS_CODE         AS DD_PROCESS_CODE
    FROM DUAL
    ) V ON ( T.REL_SOURCE_ID = V.REL_SOURCE_ID )
  WHEN MATCHED THEN
    UPDATE
    SET DD_STATUS_FLAG          = 'Y' ,
      T.REL_SOURCE_OBJECT_ID    = V.REL_SOURCE_OBJECT_ID ,
      T.CONFIGURED_OBJECT_TYPES = V.CONFIGURED_OBJECT_TYPES ,
      T.ASSOCIATED_WITH_TYPE    = V.ASSOCIATED_WITH_TYPE ,
      T.ADDITIONAL_COLUMN_H1    = V.ADDITIONAL_COLUMN_H1 ,
      T.ATTRIBUTE_COLUMN_H3     = V.ATTRIBUTE_COLUMN_H3 ,
      T.ATTRIBUTE_COLUMN_H2     = V.ATTRIBUTE_COLUMN_H2 ,
      T.DD_OBJECT_TYPE          = V.DD_OBJECT_TYPE ,
      T.DD_MODIFIED_BY          = V.DD_MODIFIED_BY ,
      T.DD_MODIFIED_ON          = SYSDATE ,
      T.DD_PROCESS_INSTANCE_ID  = V.DD_PROCESS_INSTANCE_ID ,
      T.DD_INSTANCE_ID          = V.DD_INSTANCE_ID ,
      T.DD_PROCESS_CODE         = V.DD_PROCESS_CODE WHEN NOT MATCHED THEN
    INSERT
      (
        DD_STATUS_FLAG ,
        T.REL_SOURCE_ID ,
        T.REL_SOURCE_OBJECT_ID ,
        T.CONFIGURED_OBJECT_TYPES ,
        T.ASSOCIATED_WITH_TYPE ,
        T.ADDITIONAL_COLUMN_H1 ,
        T.ATTRIBUTE_COLUMN_H3 ,
        T.ATTRIBUTE_COLUMN_H2 ,
        T.DD_OBJECT_TYPE ,
        T.DD_CREATED_BY ,
        T.DD_CREATED_ON ,
        T.DD_PROCESS_INSTANCE_ID ,
        T.DD_INSTANCE_ID ,
        T.DD_PROCESS_CODE
      )
      VALUES
      (
        'Y' ,
        V.REL_SOURCE_ID ,
        V.REL_SOURCE_OBJECT_ID ,
        V.CONFIGURED_OBJECT_TYPES ,
        V.ASSOCIATED_WITH_TYPE ,
        V.ADDITIONAL_COLUMN_H1 ,
        V.ATTRIBUTE_COLUMN_H3 ,
        V.ATTRIBUTE_COLUMN_H2 ,
        V.DD_OBJECT_TYPE ,
        V.DD_CREATED_BY ,
        SYSDATE ,
        V.DD_PROCESS_INSTANCE_ID ,
        V.DD_INSTANCE_ID ,
        V.DD_PROCESS_CODE
      );
      
    UPDATE MS_QSM_ORB_RELATION_ORB
    SET DD_STATUS_FLAG      = 'N'
    WHERE REL_SOURCE_ID     = IOP_DATA.REL_SOURCE_ID;
    
    FOR iop_data_ORB_table IN
    (SELECT ADDITIONAL_COLUMN1 ,
      ADDITIONAL_COLUMN2 ,
      ADDITIONAL_COLUMN3 ,
      ADDITIONAL_COLUMN4 ,
      ADDITIONAL_COLUMN5 ,
      ADDITIONAL_DETAILS ,
      ADDITIONAL_DETAILS_WITH_ID ,
      APPLICABLE_TO ,
      ORB_FORM_URL ,
      PARENT_REL_INST_ID ,
      REL_COMMENTS ,
      REL_CONFIG_ID ,
      REL_INST_ID ,
      ORB_REL_SOURCE_ID ,
      TO_DATE(REL_VALID_FROM,'MM/dd/yyyy HH24:mi:ss')  AS REL_VALID_FROM ,
      TO_DATE(REL_VALID_UNTIL,'MM/dd/yyyy HH24:mi:ss') AS REL_VALID_UNTIL ,
      ROW_NUM ,
      SELF_REL_TYPE ,
      TGT_OBJ_ID ,
      TGT_OBJ_NAME ,
      TGT_OBJ_TYPE
    FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:orb/msa:row' PASSING LV_xml COLUMNS ADDITIONAL_COLUMN1 VARCHAR2(4000) PATH 'msa:additional_column1' ,ADDITIONAL_COLUMN2 VARCHAR2(4000) PATH 'msa:additional_column2' ,ADDITIONAL_COLUMN3 VARCHAR2(4000) PATH 'msa:additional_column3' ,ADDITIONAL_COLUMN4 VARCHAR2(4000) PATH 'msa:additional_column4' ,ADDITIONAL_COLUMN5 VARCHAR2(4000) PATH 'msa:additional_column5' ,ADDITIONAL_DETAILS VARCHAR2(4000) PATH 'msa:additional_details' ,ADDITIONAL_DETAILS_WITH_ID VARCHAR2(4000) PATH 'msa:additional_details_with_id' ,APPLICABLE_TO VARCHAR2(4000) PATH 'msa:applicable_to' ,ORB_FORM_URL VARCHAR2(4000) PATH 'msa:orb_form_url' ,PARENT_REL_INST_ID VARCHAR2(4000) PATH 'msa:parent_rel_inst_id' ,REL_COMMENTS VARCHAR2(4000) PATH 'msa:rel_comments' ,REL_CONFIG_ID VARCHAR2(4000) PATH 'msa:rel_config_id' ,REL_INST_ID VARCHAR2(4000) PATH 'msa:rel_inst_id' ,ORB_REL_SOURCE_ID VARCHAR2(4000) PATH
      'msa:orb_rel_source_id' ,REL_VALID_FROM                                                                                                                              VARCHAR2(40) PATH 'msa:rel_valid_from' ,REL_VALID_UNTIL VARCHAR2(40) PATH 'msa:rel_valid_until' ,ROW_NUM NUMBER PATH 'msa:row_num' ,SELF_REL_TYPE VARCHAR2(4000) PATH 'msa:self_rel_type' ,TGT_OBJ_ID VARCHAR2(4000) PATH 'msa:tgt_obj_id' ,TGT_OBJ_NAME VARCHAR2(4000) PATH 'msa:tgt_obj_name' ,TGT_OBJ_TYPE VARCHAR2(4000) PATH 'msa:tgt_obj_type' )
    WHERE TGT_OBJ_ID IS NOT NULL
    )
    LOOP
      LV_cntr_2 := LV_cntr_2 + 1;
      MERGE INTO MS_QSM_ORB_RELATION_ORB T USING
      (SELECT iop_data_ORB_TABLE.REL_INST_ID          AS REL_INST_ID ,
        iop_data_ORB_TABLE.REL_CONFIG_ID              AS REL_CONFIG_ID ,
        iop_data_ORB_TABLE.TGT_OBJ_NAME               AS TGT_OBJ_NAME ,
        iop_data_ORB_TABLE.TGT_OBJ_ID                 AS TGT_OBJ_ID ,
        iop_data_ORB_TABLE.REL_VALID_FROM             AS REL_VALID_FROM ,
        iop_data_ORB_TABLE.REL_VALID_UNTIL            AS REL_VALID_UNTIL ,
        iop_data_ORB_TABLE.REL_COMMENTS               AS REL_COMMENTS ,
        iop_data_ORB_TABLE.PARENT_REL_INST_ID         AS PARENT_REL_INST_ID ,
        iop_data_ORB_TABLE.SELF_REL_TYPE              AS SELF_REL_TYPE ,
        iop_data_ORB_TABLE.TGT_OBJ_TYPE               AS TGT_OBJ_TYPE ,
        iop_data_ORB_TABLE.ROW_NUM                    AS ROW_NUM ,
        iop_data_ORB_TABLE.APPLICABLE_TO              AS APPLICABLE_TO ,
        iop_data_ORB_TABLE.ADDITIONAL_DETAILS         AS ADDITIONAL_DETAILS ,
        iop_data_ORB_TABLE.ADDITIONAL_COLUMN1         AS ADDITIONAL_COLUMN1 ,
        iop_data_ORB_TABLE.ADDITIONAL_COLUMN2         AS ADDITIONAL_COLUMN2 ,
        iop_data_ORB_TABLE.ADDITIONAL_COLUMN3         AS ADDITIONAL_COLUMN3 ,
        iop_data_ORB_TABLE.ADDITIONAL_DETAILS_WITH_ID AS ADDITIONAL_DETAILS_WITH_ID ,
        iop_data_ORB_TABLE.ORB_FORM_URL               AS ORB_FORM_URL ,
        iop_data_ORB_TABLE.ADDITIONAL_COLUMN4         AS ADDITIONAL_COLUMN4 ,
        iop_data_ORB_TABLE.ADDITIONAL_COLUMN5         AS ADDITIONAL_COLUMN5 ,
        iop_data_ORB_TABLE.ORB_REL_SOURCE_ID          AS REL_SOURCE_ID
      FROM DUAL
      ) V ON ( T.REL_INST_ID = V.REL_INST_ID AND T.REL_SOURCE_ID = V.REL_SOURCE_ID )
    WHEN MATCHED THEN
      UPDATE
      SET DD_STATUS_FLAG             = 'Y' ,
        T.REL_CONFIG_ID              = V.REL_CONFIG_ID ,
        T.TGT_OBJ_NAME               = V.TGT_OBJ_NAME ,
        T.TGT_OBJ_ID                 = V.TGT_OBJ_ID ,
        T.REL_VALID_FROM             = V.REL_VALID_FROM ,
        T.REL_VALID_UNTIL            = V.REL_VALID_UNTIL ,
        T.REL_COMMENTS               = V.REL_COMMENTS ,
        T.PARENT_REL_INST_ID         = V.PARENT_REL_INST_ID ,
        T.SELF_REL_TYPE              = V.SELF_REL_TYPE ,
        T.TGT_OBJ_TYPE               = V.TGT_OBJ_TYPE ,
        T.ROW_NUM                    = V.ROW_NUM ,
        T.APPLICABLE_TO              = V.APPLICABLE_TO ,
        T.ADDITIONAL_DETAILS         = V.ADDITIONAL_DETAILS ,
        T.ADDITIONAL_COLUMN1         = V.ADDITIONAL_COLUMN1 ,
        T.ADDITIONAL_COLUMN2         = V.ADDITIONAL_COLUMN2 ,
        T.ADDITIONAL_COLUMN3         = V.ADDITIONAL_COLUMN3 ,
        T.ADDITIONAL_DETAILS_WITH_ID = V.ADDITIONAL_DETAILS_WITH_ID ,
        T.ORB_FORM_URL               = V.ORB_FORM_URL ,
        T.ADDITIONAL_COLUMN4         = V.ADDITIONAL_COLUMN4 ,
        T.ADDITIONAL_COLUMN5         = V.ADDITIONAL_COLUMN5 WHEN NOT MATCHED THEN
      INSERT
        (
          DD_STATUS_FLAG ,
          T.REL_INST_ID ,
          T.REL_CONFIG_ID ,
          T.TGT_OBJ_NAME ,
          T.TGT_OBJ_ID ,
          T.REL_VALID_FROM ,
          T.REL_VALID_UNTIL ,
          T.REL_COMMENTS ,
          T.PARENT_REL_INST_ID ,
          T.SELF_REL_TYPE ,
          T.TGT_OBJ_TYPE ,
          T.ROW_NUM ,
          T.APPLICABLE_TO ,
          T.ADDITIONAL_DETAILS ,
          T.ADDITIONAL_COLUMN1 ,
          T.ADDITIONAL_COLUMN2 ,
          T.ADDITIONAL_COLUMN3 ,
          T.ADDITIONAL_DETAILS_WITH_ID ,
          T.ORB_FORM_URL ,
          T.ADDITIONAL_COLUMN4 ,
          T.ADDITIONAL_COLUMN5 ,
          T.REL_SOURCE_ID
        )
        VALUES
        (
          'Y' ,
          V.REL_INST_ID ,
          V.REL_CONFIG_ID ,
          V.TGT_OBJ_NAME ,
          V.TGT_OBJ_ID ,
          V.REL_VALID_FROM ,
          V.REL_VALID_UNTIL ,
          V.REL_COMMENTS ,
          V.PARENT_REL_INST_ID ,
          V.SELF_REL_TYPE ,
          V.TGT_OBJ_TYPE ,
          V.ROW_NUM ,
          V.APPLICABLE_TO ,
          V.ADDITIONAL_DETAILS ,
          V.ADDITIONAL_COLUMN1 ,
          V.ADDITIONAL_COLUMN2 ,
          V.ADDITIONAL_COLUMN3 ,
          V.ADDITIONAL_DETAILS_WITH_ID ,
          V.ORB_FORM_URL ,
          V.ADDITIONAL_COLUMN4 ,
          V.ADDITIONAL_COLUMN5 ,
          V.REL_SOURCE_ID
        );
      --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);
      --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
    END LOOP;
    -- ORB Ends Here
    FOR iop_data_GRD_table IN
    (SELECT GRD_GRADE ,
        GRD_QUESTNR_FK ,
        GRD_SCORING_PK ,
        GRD_SCORING_RULE ,
        GRD_VALUE_1 ,
        GRD_VALUE_2
      FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:grd/msa:row' PASSING LV_xml COLUMNS GRD_GRADE VARCHAR2(4000) PATH 'msa:grd_grade' ,GRD_QUESTNR_FK VARCHAR2(4000) PATH 'msa:grd_questnr_fk' ,GRD_SCORING_PK VARCHAR2(4000) PATH 'msa:grd_scoring_pk' ,GRD_SCORING_RULE VARCHAR2(4000) PATH 'msa:grd_scoring_rule' ,GRD_VALUE_1 NUMBER PATH 'msa:grd_value_1' ,GRD_VALUE_2 NUMBER PATH 'msa:grd_value_2' )
      WHERE GRD_SCORING_PK IS NOT NULL
    )
    LOOP
      LV_cntr_2                           := LV_cntr_2 + 1;
      IF iop_data_GRD_table.GRD_QUESTNR_FK = iop_data.INTERNAL_QUESTNR_ID THEN
        MERGE INTO MS_QSM_GRADE T USING
        (SELECT iop_data_GRD_TABLE.GRD_QUESTNR_FK AS GRD_QUESTNR_FK,
            iop_data_GRD_TABLE.GRD_SCORING_RULE   AS GRD_SCORING_RULE,
            iop_data_GRD_TABLE.GRD_GRADE          AS GRD_GRADE,
            iop_data_GRD_TABLE.GRD_VALUE_2        AS GRD_VALUE_2,
            iop_data_GRD_TABLE.GRD_VALUE_1        AS GRD_VALUE_1,
            iop_data_GRD_TABLE.GRD_SCORING_PK     AS GRD_SCORING_PK,
            iop_data.DD_OBJECT_TYPE               AS DD_OBJECT_TYPE,
            iop_data.DD_EVENT_USER_NAME           AS DD_CREATED_BY,
            iop_data.DD_CURRENT_USER_NAME         AS DD_MODIFIED_BY,
            iop_data.PROCESS_INSTANCE_ID          AS DD_PROCESS_INSTANCE_ID,
            iop_data.INSTANCE_ID                  AS DD_INSTANCE_ID,
            iop_data.DD_PROCESS_CODE              AS DD_PROCESS_CODE
          FROM DUAL
        )
        V ON (T.GRD_SCORING_PK = V.GRD_SCORING_PK)
      WHEN MATCHED THEN
        UPDATE
        SET DD_STATUS_FLAG         = 'Y',
          T.GRD_QUESTNR_FK         = V.GRD_QUESTNR_FK,
          T.GRD_SCORING_RULE       = V.GRD_SCORING_RULE,
          T.GRD_GRADE              = V.GRD_GRADE,
          T.GRD_VALUE_2            = V.GRD_VALUE_2,
          T.GRD_VALUE_1            = V.GRD_VALUE_1,
          T.DD_OBJECT_TYPE         = V.DD_OBJECT_TYPE,
          T.DD_MODIFIED_BY         = V.DD_MODIFIED_BY,
          T.DD_MODIFIED_ON         = SYSDATE,
          T.DD_PROCESS_INSTANCE_ID = V.DD_PROCESS_INSTANCE_ID,
          T.DD_INSTANCE_ID         = V.DD_INSTANCE_ID,
          T.DD_PROCESS_CODE        = V.DD_PROCESS_CODE WHEN NOT MATCHED THEN
        INSERT
          (
            DD_STATUS_FLAG,
            T.GRD_QUESTNR_FK,
            T.GRD_SCORING_RULE,
            T.GRD_GRADE,
            T.GRD_VALUE_2,
            T.GRD_VALUE_1,
            T.GRD_SCORING_PK,
            T.DD_OBJECT_TYPE,
            T.DD_CREATED_BY,
            T.DD_CREATED_ON,
            T.DD_PROCESS_INSTANCE_ID,
            T.DD_INSTANCE_ID,
            T.DD_PROCESS_CODE
          )
          VALUES
          (
            'Y',
            V.GRD_QUESTNR_FK,
            V.GRD_SCORING_RULE,
            V.GRD_GRADE,
            V.GRD_VALUE_2,
            V.GRD_VALUE_1,
            V.GRD_SCORING_PK,
            V.DD_OBJECT_TYPE,
            V.DD_CREATED_BY,
            SYSDATE,
            V.DD_PROCESS_INSTANCE_ID,
            V.DD_INSTANCE_ID,
            V.DD_PROCESS_CODE
          );
      END IF;
    END LOOP;
    LV_cntr_2 :=0;
    --section starts
    FOR iop_data_SEC_table IN
    (SELECT SECTION_ID_PK ,
        SECTION_NAME ,
        SECTION_OPTIONAL ,
        SECTION_PARENT_TYPE ,
        SECTION_QUESTNR_FK ,
        SECTION_SCORING_METHOD ,
        SECTION_SECTION_ID ,
        SECTION_TYPE ,
        SECTION_WEIGHTAGE ,
        SEC_TOTAL_SCR_WEIGHTAGE
      FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:sec/msa:row' PASSING LV_xml COLUMNS SECTION_ID_PK VARCHAR2(4000) PATH 'msa:section_id_pk' ,SECTION_NAME VARCHAR2(4000) PATH 'msa:section_name' ,SECTION_OPTIONAL VARCHAR2(4000) PATH 'msa:section_optional' ,SECTION_PARENT_TYPE VARCHAR2(4000) PATH 'msa:section_parent_type' ,SECTION_QUESTNR_FK VARCHAR2(4000) PATH 'msa:section_questnr_fk' ,SECTION_SCORING_METHOD VARCHAR2(4000) PATH 'msa:section_scoring_method' ,SECTION_SECTION_ID VARCHAR2(4000) PATH 'msa:section_section_id' ,SECTION_TYPE VARCHAR2(4000) PATH 'msa:section_type' ,SECTION_WEIGHTAGE NUMBER PATH 'msa:section_weightage' ,SEC_TOTAL_SCR_WEIGHTAGE NUMBER PATH 'msa:sec_total_scr_weightage' )
      WHERE SECTION_ID_PK IS NOT NULL
    )
    LOOP
      LV_cntr_2 := LV_cntr_2 + 1;
      /* --------------------------------------------------------------------------
      To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
      -------------------------------------------------------------------------- */
      --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ').SEC_TABLE(' || LV_cntr_2 || ')', ip_pid);
      --                    IF LV_debug THEN
      ----                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SEC_TABLE.SECTION_QUESTNR_FK, ip_pid);
      ----                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SEC_TABLE.SECTION_NAME, ip_pid);
      ----                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SEC_TABLE.SEC_TOTAL_SCR_WEIGHTAGE, ip_pid);
      ----                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SEC_TABLE.SECTION_WEIGHTAGE, ip_pid);
      ----                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SEC_TABLE.SECTION_SCORING_METHOD, ip_pid);
      ----                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SEC_TABLE.SECTION_ID_PK, ip_pid);
      ----                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SEC_TABLE.SECTION_SECTION_ID, ip_pid);
      ----                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SEC_TABLE.SECTION_PARENT_TYPE, ip_pid);
      ----                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SEC_TABLE.SECTION_OPTIONAL, ip_pid);
      ----                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SEC_TABLE.SECTION_TYPE, ip_pid);
      ----                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_OBJECT_TYPE, ip_pid);
      ----                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
      ----                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
      ----                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
      ----                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
      ----                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_PROCESS_CODE, ip_pid);
      --                    END IF;
      --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
      IF iop_data_SEC_table.SECTION_QUESTNR_FK = iop_data.INTERNAL_QUESTNR_ID THEN
        MERGE INTO MS_QSM_SECTION T USING
        (SELECT iop_data_SEC_TABLE.SECTION_QUESTNR_FK  AS SECTION_QUESTNR_FK,
            iop_data_SEC_TABLE.SECTION_NAME            AS SECTION_NAME,
            iop_data_SEC_TABLE.SEC_TOTAL_SCR_WEIGHTAGE AS SEC_TOTAL_SCR_WEIGHTAGE,
            iop_data_SEC_TABLE.SECTION_WEIGHTAGE       AS SECTION_WEIGHTAGE,
            iop_data_SEC_TABLE.SECTION_SCORING_METHOD  AS SECTION_SCORING_METHOD,
            iop_data_SEC_TABLE.SECTION_ID_PK           AS SECTION_ID_PK,
            iop_data_SEC_TABLE.SECTION_SECTION_ID      AS SECTION_SECTION_ID,
            iop_data_SEC_TABLE.SECTION_PARENT_TYPE     AS SECTION_PARENT_TYPE,
            iop_data_SEC_TABLE.SECTION_OPTIONAL        AS SECTION_OPTIONAL,
            iop_data_SEC_TABLE.SECTION_TYPE            AS SECTION_TYPE,
            iop_data.DD_OBJECT_TYPE                    AS DD_OBJECT_TYPE,
            iop_data.DD_EVENT_USER_NAME                AS DD_CREATED_BY,
            iop_data.DD_CURRENT_USER_NAME              AS DD_MODIFIED_BY,
            iop_data.PROCESS_INSTANCE_ID               AS DD_PROCESS_INSTANCE_ID,
            iop_data.INSTANCE_ID                       AS DD_INSTANCE_ID,
            iop_data.DD_PROCESS_CODE                   AS DD_PROCESS_CODE
          FROM DUAL
        )
        V ON (T.SECTION_ID_PK = V.SECTION_ID_PK)
      WHEN MATCHED THEN
        UPDATE
        SET DD_STATUS_FLAG          = 'Y',
          T.SECTION_QUESTNR_FK      = V.SECTION_QUESTNR_FK,
          T.SECTION_NAME            = V.SECTION_NAME,
          T.SEC_TOTAL_SCR_WEIGHTAGE = V.SEC_TOTAL_SCR_WEIGHTAGE,
          T.SECTION_WEIGHTAGE       = V.SECTION_WEIGHTAGE,
          T.SECTION_SCORING_METHOD  = V.SECTION_SCORING_METHOD,
          T.SECTION_SECTION_ID      = V.SECTION_SECTION_ID,
          T.SECTION_PARENT_TYPE     = V.SECTION_PARENT_TYPE,
          T.SECTION_OPTIONAL        = V.SECTION_OPTIONAL,
          T.SECTION_TYPE            = V.SECTION_TYPE,
          T.DD_OBJECT_TYPE          = V.DD_OBJECT_TYPE,
          T.DD_MODIFIED_BY          = V.DD_MODIFIED_BY,
          T.DD_MODIFIED_ON          = SYSDATE,
          T.DD_PROCESS_INSTANCE_ID  = V.DD_PROCESS_INSTANCE_ID,
          T.DD_INSTANCE_ID          = V.DD_INSTANCE_ID,
          T.DD_PROCESS_CODE         = V.DD_PROCESS_CODE WHEN NOT MATCHED THEN
        INSERT
          (
            DD_STATUS_FLAG,
            T.SECTION_QUESTNR_FK,
            T.SECTION_NAME,
            T.SEC_TOTAL_SCR_WEIGHTAGE,
            T.SECTION_WEIGHTAGE,
            T.SECTION_SCORING_METHOD,
            T.SECTION_ID_PK,
            T.SECTION_SECTION_ID,
            T.SECTION_PARENT_TYPE,
            T.SECTION_OPTIONAL,
            T.SECTION_TYPE,
            T.DD_OBJECT_TYPE,
            T.DD_CREATED_BY,
            T.DD_CREATED_ON,
            T.DD_PROCESS_INSTANCE_ID,
            T.DD_INSTANCE_ID,
            T.DD_PROCESS_CODE
          )
          VALUES
          (
            'Y',
            V.SECTION_QUESTNR_FK,
            V.SECTION_NAME,
            V.SEC_TOTAL_SCR_WEIGHTAGE,
            V.SECTION_WEIGHTAGE,
            V.SECTION_SCORING_METHOD,
            V.SECTION_ID_PK,
            V.SECTION_SECTION_ID,
            V.SECTION_PARENT_TYPE,
            V.SECTION_OPTIONAL,
            V.SECTION_TYPE,
            V.DD_OBJECT_TYPE,
            V.DD_CREATED_BY,
            SYSDATE,
            V.DD_PROCESS_INSTANCE_ID,
            V.DD_INSTANCE_ID,
            V.DD_PROCESS_CODE
          );
        --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);
        --
        --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
        -- Commented From Here
        --                    FOR iop_data_QST_table IN (SELECT
        --                                        parent_response_type
        --                                        ,qst_metric_hyperlink
        --                                        ,qst_type
        --                                        ,qst_parent_type
        --                                        ,qst_name
        --                                        ,qst_optional
        --                                        ,qst_weightage
        --                                        ,qst_based_on_response
        --                                        ,qst_target
        --                                        ,qst_description
        --                                        ,qst_description_htm
        --                                        ,qst_response_type
        --                                        ,qst_list_of_values
        --                                        ,qst_default_score
        --                                        ,qst_based_on_number
        --                                        ,qst_documents
        --                                        ,qst_total_sec_weightage
        --                                        ,qst_infolet_scoring
        --                                        ,qst_custom_scr_logic
        --                                        ,qst_attribute_values
        --                                        ,qst_area_of_compliance
        --                                        ,qst_requirements
        --                                        ,qst_objectives
        --                                        ,qst_risks
        --                                        ,qst_controls
        --                                        ,qst_id_pk
        --                                        ,qst_id
        --                                        ,qst_section_fk
        --                                        ,multirow_region_id
        --                                        ,instance_rec_num
        --                                       FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
        --                                                     'msa:datapacket/msa:data/msa:qst/msa:row'
        --                                          PASSING LV_xml
        --                                          COLUMNS
        --                                          parent_response_type        VARCHAR2(4000)  PATH 'msa:parent_response_type'
        --                                          ,qst_metric_hyperlink        VARCHAR2(4000)  PATH 'msa:qst_metric_hyperlink'
        --                                          ,qst_type        VARCHAR2(4000)  PATH 'msa:qst_type'
        --                                          ,qst_parent_type        VARCHAR2(4000)  PATH 'msa:qst_parent_type'
        --                                          ,qst_name        VARCHAR2(4000)  PATH 'msa:qst_name'
        --                                          ,qst_optional        VARCHAR2(4000)  PATH 'msa:qst_optional'
        --                                          ,qst_weightage        VARCHAR2(4000)  PATH 'msa:qst_weightage'
        --                                          ,qst_based_on_response        VARCHAR2(4000)  PATH 'msa:qst_based_on_response'
        --                                          ,qst_target        VARCHAR2(4000)  PATH 'msa:qst_target'
        --                                          ,qst_description        CLOB  PATH 'msa:qst_description'
        --                                          ,qst_description_htm        CLOB  PATH 'msa:qst_description_htm'
        --                                          ,qst_response_type        VARCHAR2(4000)  PATH 'msa:qst_response_type'
        --                                          ,qst_list_of_values        VARCHAR2(4000)  PATH 'msa:qst_list_of_values'
        --                                          ,qst_default_score        VARCHAR2(4000)  PATH 'msa:qst_default_score'
        --                                          ,qst_based_on_number        VARCHAR2(4000)  PATH 'msa:qst_based_on_number'
        --                                          ,qst_documents        VARCHAR2(4000)  PATH 'msa:qst_documents'
        --                                          ,qst_total_sec_weightage        VARCHAR2(4000)  PATH 'msa:qst_total_sec_weightage'
        --                                          ,qst_infolet_scoring        VARCHAR2(4000)  PATH 'msa:qst_infolet_scoring'
        --                                          ,qst_custom_scr_logic        VARCHAR2(4000)  PATH 'msa:qst_custom_scr_logic'
        --                                          ,qst_attribute_values        VARCHAR2(4000)  PATH 'msa:qst_attribute_values'
        --                                          ,qst_area_of_compliance        VARCHAR2(4000)  PATH 'msa:qst_area_of_compliance'
        --                                          ,qst_requirements        VARCHAR2(4000)  PATH 'msa:qst_requirements'
        --                                          ,qst_objectives        VARCHAR2(4000)  PATH 'msa:qst_objectives'
        --                                          ,qst_risks        VARCHAR2(4000)  PATH 'msa:qst_risks'
        --                                          ,qst_controls        VARCHAR2(4000)  PATH 'msa:qst_controls'
        --                                          ,qst_id_pk        VARCHAR2(4000)  PATH 'msa:qst_id_pk'
        --                                          ,qst_id        VARCHAR2(4000)  PATH 'msa:qst_id'
        --                                          ,qst_section_fk        VARCHAR2(4000)  PATH 'msa:qst_section_fk'
        --                                          ,multirow_region_id        VARCHAR2(4000)  PATH 'msa:multirow_region_id'
        --                                          ,instance_rec_num        VARCHAR2(4000)  PATH 'msa:instance_rec_num'
        --                                         ))
        --                    LOOP
        --                        LV_cntr_2 := LV_cntr_2 + 1;
        --
        --                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ').QST_TABLE(' || LV_cntr_2 || ')', ip_pid);
        --
        --                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
        --
        --                        IF iop_data_SEC_table.SECTION_ID_PK = iop_data_QST_table.qst_section_fk THEN
        --                            MERGE
        --                             INTO MS_QSM_QUESTION T
        --                            USING
        --                                (
        --                                    SELECT
        --                                         iop_data_QST_TABLE.PARENT_RESPONSE_TYPE    AS PARENT_RESPONSE_TYPE
        --                                        ,iop_data_QST_TABLE.qst_area_of_compliance    AS qst_area_of_compliance
        --                                        ,iop_data_QST_TABLE.QST_BASED_ON_NUMBER    AS QST_BASED_ON_NUMBER
        --                                        ,iop_data_QST_TABLE.QST_BASED_ON_RESPONSE    AS QST_BASED_ON_RESPONSE
        --                                        ,iop_data_QST_TABLE.qst_controls    AS qst_controls
        --                                        ,iop_data_QST_TABLE.QST_CUSTOM_SCR_LOGIC    AS QST_CUSTOM_SCR_LOGIC
        --                                        ,iop_data_QST_TABLE.QST_DEFAULT_SCORE    AS QST_DEFAULT_SCORE
        --                                        ,iop_data_QST_TABLE.QST_DESCRIPTION    AS QST_DESCRIPTION
        --                                        ,iop_data_QST_TABLE.QST_DOCUMENTS    AS QST_DOCUMENTS
        --                                        ,iop_data_QST_TABLE.QST_ID    AS QST_ID
        --                                        ,iop_data_QST_TABLE.QST_ID_PK    AS QST_ID_PK
        --                                        ,iop_data_QST_TABLE.QST_INFOLET_SCORING    AS QST_INFOLET_SCORING
        --                                        ,iop_data_QST_TABLE.QST_LIST_OF_VALUES    AS QST_LIST_OF_VALUES
        --                                        ,iop_data_QST_TABLE.QST_METRIC_HYPERLINK    AS QST_METRIC_HYPERLINK
        --                                        ,iop_data_QST_TABLE.QST_NAME    AS QST_NAME
        --                                        --,iop_data_QST_TABLE.QST_OBJ_DISP    AS QST_OBJ_DISP
        --                                        ,iop_data_QST_TABLE.QST_OPTIONAL    AS QST_OPTIONAL
        --                                        ,iop_data_QST_TABLE.QST_PARENT_TYPE    AS QST_PARENT_TYPE
        --                                        --,iop_data_QST_TABLE.QST_REQ_DISP    AS QST_REQ_DISP
        --                                        ,iop_data_QST_TABLE.QST_RESPONSE_TYPE    AS QST_RESPONSE_TYPE
        --                                        --,iop_data_QST_TABLE.QST_RSK_DISP    AS QST_RSK_DISP
        --                                        ,iop_data_QST_TABLE.QST_SECTION_FK    AS QST_SECTION_FK
        --                                        ,iop_data_QST_TABLE.QST_TARGET    AS QST_TARGET
        --                                        ,iop_data_QST_TABLE.QST_TOTAL_SEC_WEIGHTAGE    AS QST_TOTAL_SEC_WEIGHTAGE
        --                                        ,iop_data_QST_TABLE.QST_TYPE    AS QST_TYPE
        --                                        ,iop_data_QST_TABLE.QST_WEIGHTAGE    AS QST_WEIGHTAGE
        --                                        ,iop_data.DD_OBJECT_TYPE                                     AS DD_OBJECT_TYPE
        --                                        ,iop_data.DD_EVENT_USER_NAME                                 AS DD_CREATED_BY
        --                                        ,iop_data.DD_CURRENT_USER_NAME                               AS DD_MODIFIED_BY
        --                                        ,iop_data.PROCESS_INSTANCE_ID                                AS DD_PROCESS_INSTANCE_ID
        --                                        ,iop_data.INSTANCE_ID                                        AS DD_INSTANCE_ID
        --                                        ,iop_data.DD_PROCESS_CODE                                    AS DD_PROCESS_CODE
        --                                      FROM DUAL
        --                                ) V
        --                                ON
        --                                (
        --                                     T.QST_ID_PK                              = V.QST_ID_PK
        --                                )
        --                                 WHEN
        --                                    MATCHED THEN
        --                                        UPDATE SET  DD_STATUS_FLAG                         = 'Y'
        --                                                , T.QST_RESPONSE_TYPE                      = V.QST_RESPONSE_TYPE
        --                                                , T.QST_TARGET                             = V.QST_TARGET
        --                                                , T.QST_CUSTOM_SCR_LOGIC                   = V.QST_CUSTOM_SCR_LOGIC
        --                                                , T.QST_LIST_OF_VALUES                     = V.QST_LIST_OF_VALUES
        --                                                , T.PARENT_RESPONSE_TYPE                   = V.PARENT_RESPONSE_TYPE
        --                                                , T.QST_PARENT_TYPE                        = V.QST_PARENT_TYPE
        --                                                --, T.QST_OBJ_DISP                           = V.QST_OBJ_DISP
        --                                                , T.QST_WEIGHTAGE                          = V.QST_WEIGHTAGE
        --                                                , T.QST_DOCUMENTS                          = V.QST_DOCUMENTS
        --                                                , T.QST_METRIC_HYPERLINK                   = V.QST_METRIC_HYPERLINK
        --                                                --, T.QST_CTL_DISP                           = V.QST_CTL_DISP
        --                                                , T.QST_DEFAULT_SCORE                      = V.QST_DEFAULT_SCORE
        --                                                --, T.QST_REQ_DISP                           = V.QST_REQ_DISP
        --                                                , T.QST_TYPE                               = V.QST_TYPE
        --                                                , T.QST_OPTIONAL                           = V.QST_OPTIONAL
        --                                                , T.QST_TOTAL_SEC_WEIGHTAGE                = V.QST_TOTAL_SEC_WEIGHTAGE
        --                                                --, T.QST_RSK_DISP                           = V.QST_RSK_DISP
        --                                                , T.QST_NAME                               = V.QST_NAME
        --                                                , T.QST_BASED_ON_RESPONSE                  = V.QST_BASED_ON_RESPONSE
        --                                                --, T.QST_AOC_DISP                           = V.QST_AOC_DISP
        --                                                , T.QST_SECTION_FK                         = V.QST_SECTION_FK
        --                                                , T.QST_ID                                 = V.QST_ID
        --                                                , T.QST_DESCRIPTION                        = V.QST_DESCRIPTION
        --                                                , T.QST_INFOLET_SCORING                    = V.QST_INFOLET_SCORING
        --                                                , T.QST_BASED_ON_NUMBER                    = V.QST_BASED_ON_NUMBER
        --                                                , T.DD_OBJECT_TYPE                         = V.DD_OBJECT_TYPE
        --                                                , T.DD_MODIFIED_BY                         = V.DD_MODIFIED_BY
        --                                                , T.DD_MODIFIED_ON                         = SYSDATE
        --                                                , T.DD_PROCESS_INSTANCE_ID                 = V.DD_PROCESS_INSTANCE_ID
        --                                                , T.DD_INSTANCE_ID                         = V.DD_INSTANCE_ID
        --                                                , T.DD_PROCESS_CODE                        = V.DD_PROCESS_CODE
        --                                     WHEN
        --                                        NOT MATCHED THEN
        --                                            INSERT
        --                                                (DD_STATUS_FLAG
        --                                               , T.QST_RESPONSE_TYPE
        --                                               , T.QST_TARGET
        --                                               , T.QST_CUSTOM_SCR_LOGIC
        --                                               , T.QST_LIST_OF_VALUES
        --                                               , T.PARENT_RESPONSE_TYPE
        --                                               , T.QST_PARENT_TYPE
        --                                               --, T.QST_OBJ_DISP
        --                                               , T.QST_WEIGHTAGE
        --                                               , T.QST_DOCUMENTS
        --                                               , T.QST_ID_PK
        --                                               --, T.QST_METRIC_HYPERLINK
        --                                               , T.QST_CTL_DISP
        --                                               , T.QST_DEFAULT_SCORE
        --                                               --, T.QST_REQ_DISP
        --                                               , T.QST_TYPE
        --                                               , T.QST_OPTIONAL
        --                                               , T.QST_TOTAL_SEC_WEIGHTAGE
        --                                               --, T.QST_RSK_DISP
        --                                               , T.QST_NAME
        --                                               , T.QST_BASED_ON_RESPONSE
        --                                               --, T.QST_AOC_DISP
        --                                               , T.QST_SECTION_FK
        --                                               , T.QST_ID
        --                                               , T.QST_DESCRIPTION
        --                                               , T.QST_INFOLET_SCORING
        --                                               , T.QST_BASED_ON_NUMBER
        --                                               , T.DD_OBJECT_TYPE
        --                                               , T.DD_CREATED_BY
        --                                               , T.DD_CREATED_ON
        --                                               , T.DD_PROCESS_INSTANCE_ID
        --                                               , T.DD_INSTANCE_ID
        --                                               , T.DD_PROCESS_CODE
        --                                                )
        --                                            VALUES
        --                                                ('Y'
        --                                               , V.QST_RESPONSE_TYPE
        --                                               , V.QST_TARGET
        --                                               , V.QST_CUSTOM_SCR_LOGIC
        --                                               , V.QST_LIST_OF_VALUES
        --                                               , V.PARENT_RESPONSE_TYPE
        --                                               , V.QST_PARENT_TYPE
        --                                               --, V.QST_OBJ_DISP
        --                                               , V.QST_WEIGHTAGE
        --                                               , V.QST_DOCUMENTS
        --                                               , V.QST_ID_PK
        --                                               , V.QST_METRIC_HYPERLINK
        --                                               --, V.QST_CTL_DISP
        --                                               , V.QST_DEFAULT_SCORE
        --                                               --, V.QST_REQ_DISP
        --                                               , V.QST_TYPE
        --                                               , V.QST_OPTIONAL
        --                                               , V.QST_TOTAL_SEC_WEIGHTAGE
        --                                               --, V.QST_RSK_DISP
        --                                               , V.QST_NAME
        --                                               , V.QST_BASED_ON_RESPONSE
        --                                               --, V.QST_AOC_DISP
        --                                               , V.QST_SECTION_FK
        --                                               , V.QST_ID
        --                                               , V.QST_DESCRIPTION
        --                                               , V.QST_INFOLET_SCORING
        --                                               , V.QST_BASED_ON_NUMBER
        --                                               , V.DD_OBJECT_TYPE
        --                                               , V.DD_CREATED_BY
        --                                               , SYSDATE
        --                                               , V.DD_PROCESS_INSTANCE_ID
        --                                               , V.DD_INSTANCE_ID
        --                                               , V.DD_PROCESS_CODE
        --                                                );
        --
        --                                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);
        --
        --                                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
        --
        --                            IF length(iop_data_QST_TABLE.QST_AREA_OF_COMPLIANCE) > 0 THEN
        --                               INSERT INTO MS_QSM_QUESTION_AOC
        --                               (
        --                                 DD_STATUS_FLAG
        --                                 ,QST_ID_PK
        --                                 ,QST_AREA_OF_COMPLIANCE
        --                               )
        --                               SELECT
        --                                    'Y'
        --                                    ,iop_data_QST_TABLE.QST_ID_PK
        --                                    ,COLUMN_VALUE
        --                               FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data_QST_TABLE.qst_area_of_compliance,','));
        --                            END IF;
        --
        --                           IF length(iop_data_QST_TABLE.QST_AREA_OF_COMPLIANCE) > 0 THEN
        --                               INSERT INTO MS_QSM_QUESTION_ATV
        --                               (
        --                                 DD_STATUS_FLAG
        --                                 ,QST_ID_PK
        --                                 ,qst_attribute_values
        --                               )
        --                               SELECT
        --                                    'Y'
        --                                    ,iop_data_QST_TABLE.QST_ID_PK
        --                                    ,COLUMN_VALUE
        --                               FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data_QST_TABLE.qst_attribute_values,','));
        --                           END IF;
        --
        --                           IF length(iop_data_QST_TABLE.QST_CONTROLS) > 0 THEN
        --                               INSERT INTO MS_QSM_QUESTION_CTL
        --                               (
        --                                 DD_STATUS_FLAG
        --                                 ,QST_ID_PK
        --                                 ,QST_CONTROLS
        --                               )
        --                               SELECT
        --                                    'Y'
        --                                    ,iop_data_QST_TABLE.QST_ID_PK
        --                                    ,COLUMN_VALUE
        --                               FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data_QST_TABLE.QST_CONTROLS,','));
        --                           END IF;
        --
        --                           IF length(iop_data_QST_TABLE.QST_OBJECTIVES) > 0 THEN
        --
        --                               INSERT INTO MS_QSM_QUESTION_OBJ
        --                               (
        --                                 DD_STATUS_FLAG
        --                                 ,QST_ID_PK
        --                                 ,QST_OBJECTIVES
        --                               )
        --                               SELECT
        --                                    'Y'
        --                                    ,iop_data_QST_TABLE.QST_ID_PK
        --                                    ,COLUMN_VALUE
        --                               FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data_QST_TABLE.QST_OBJECTIVES,','));
        --
        --                           END IF;
        --
        --                           IF length(iop_data_QST_TABLE.QST_REQUIREMENTS) > 0 THEN
        --
        --                               INSERT INTO MS_QSM_QUESTION_REQ
        --                               (
        --                                 DD_STATUS_FLAG
        --                                 ,QST_ID_PK
        --                                 ,QST_REQUIREMENTS
        --                               )
        --                               SELECT
        --                                    'Y'
        --                                    ,iop_data_QST_TABLE.QST_ID_PK
        --                                    ,COLUMN_VALUE
        --                               FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data_QST_TABLE.QST_REQUIREMENTS,','));
        --
        --                           END IF;
        --
        --                           IF length(iop_data_QST_TABLE.QST_RISKS) > 0 THEN
        --
        --                               INSERT INTO MS_QSM_QUESTION_RSK
        --                               (
        --                                 DD_STATUS_FLAG
        --                                 ,QST_ID_PK
        --                                 ,QST_RISKS
        --                               )
        --                               SELECT
        --                                    'Y'
        --                                    ,iop_data_QST_TABLE.QST_ID_PK
        --                                    ,COLUMN_VALUE
        --                               FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data_QST_TABLE.QST_RISKS,','));
        --
        --                           END IF;
        --                          --scoring starts
        --                          FOR iop_data_SCR_table IN (SELECT
        --                                                         SCR_GRADE
        --                                                        ,SCR_ID_PK
        --                                                        ,SCR_QST_FK
        --                                                        ,SCR_SCORE
        --                                                        ,SCR_SCORING_RULE
        --                                                        ,SCR_VALUE_1
        --                                                        ,SCR_VALUE_2
        --                                                        ,SCR_VALUE_1_1
        --                                                       FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
        --                                                                     'msa:datapacket/msa:data/msa:scr/msa:row'
        --                                                                     PASSING LV_xml
        --                                                                     COLUMNS
        --                                                                     SCR_GRADE                        VARCHAR2(4000)  PATH  'msa:scr_grade'
        --                                                                    ,SCR_ID_PK                        VARCHAR2(4000)  PATH  'msa:scr_id_pk'
        --                                                                    ,SCR_QST_FK                       VARCHAR2(4000)  PATH  'msa:scr_qst_fk'
        --                                                                    ,SCR_SCORE                        NUMBER          PATH  'msa:scr_score'
        --                                                                    ,SCR_SCORING_RULE                 VARCHAR2(4000)  PATH  'msa:scr_scoring_rule'
        --                                                                    ,SCR_VALUE_1                      NUMBER          PATH  'msa:scr_value_1'
        --                                                                    ,SCR_VALUE_2                      NUMBER          PATH  'msa:scr_value_2'
        --                                                                    ,SCR_VALUE_1_1                  VARCHAR2(255) PATH  'msa:scr_value_1_1'
        --                                        ))
        --                          LOOP
        --                                    LV_cntr_2 := LV_cntr_2 + 1;
        --
        --                            /* --------------------------------------------------------------------------
        --                                To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
        --                               -------------------------------------------------------------------------- */
        --
        --                                MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ').SCR_TABLE(' || LV_cntr_2 || ')', ip_pid);
        --                                IF LV_debug THEN
        --                                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_OBJECT_TYPE, ip_pid);
        --                                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
        --                                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
        --                                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
        --                                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
        --                                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_PROCESS_CODE, ip_pid);
        --                                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SCR_TABLE.SCR_ID_PK, ip_pid);
        --                                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SCR_TABLE.SCR_SCORE, ip_pid);
        --                                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SCR_TABLE.SCR_SCORING_RULE, ip_pid);
        --                                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SCR_TABLE.SCR_VALUE_1, ip_pid);
        --                                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SCR_TABLE.SCR_QST_FK, ip_pid);
        --                                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SCR_TABLE.SCR_GRADE, ip_pid);
        --                                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SCR_TABLE.SCR_VALUE_2, ip_pid);
        --                                END IF;
        --
        --                                MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
        --
        --                                IF iop_data_QST_TABLE.QST_ID_PK = iop_data_SCR_table.SCR_QST_FK THEN
        --                                    MERGE
        --                                     INTO MS_QSM_SCORING T
        --                                    USING
        --                                        (
        --                                            SELECT
        --                                                   iop_data.DD_OBJECT_TYPE                                     AS DD_OBJECT_TYPE
        --                                                 , iop_data.DD_EVENT_USER_NAME                                 AS DD_CREATED_BY
        --                                                 , iop_data.DD_CURRENT_USER_NAME                               AS DD_MODIFIED_BY
        --                                                 , iop_data.PROCESS_INSTANCE_ID                                AS DD_PROCESS_INSTANCE_ID
        --                                                 , iop_data.INSTANCE_ID                                        AS DD_INSTANCE_ID
        --                                                 , iop_data.DD_PROCESS_CODE                                    AS DD_PROCESS_CODE
        --                                                 , iop_data_SCR_TABLE.SCR_ID_PK                                AS SCR_ID_PK
        --                                                 , iop_data_SCR_TABLE.SCR_SCORE                                AS SCR_SCORE
        --                                                 , iop_data_SCR_TABLE.SCR_SCORING_RULE                         AS SCR_SCORING_RULE
        --                                                 , iop_data_SCR_TABLE.SCR_VALUE_1                              AS SCR_VALUE_1
        --                                                 , iop_data_SCR_TABLE.SCR_VALUE_1_1                          AS SCR_VALUE_1_1
        --                                                 , iop_data_SCR_TABLE.SCR_QST_FK                               AS SCR_QST_FK
        --                                                 , iop_data_SCR_TABLE.SCR_GRADE                                AS SCR_GRADE
        --                                                 , iop_data_SCR_TABLE.SCR_VALUE_2                              AS SCR_VALUE_2
        --                                              FROM DUAL
        --                                        ) V
        --                                       ON
        --                                        (
        --                                                     T.SCR_ID_PK                              = V.SCR_ID_PK
        --                                        )
        --                                     WHEN
        --                                        MATCHED THEN
        --                                            UPDATE SET  DD_STATUS_FLAG                         = 'Y'
        --                                                    , T.DD_OBJECT_TYPE                         = V.DD_OBJECT_TYPE
        --                                                    , T.DD_MODIFIED_BY                         = V.DD_MODIFIED_BY
        --                                                    , T.DD_MODIFIED_ON                         = SYSDATE
        --                                                    , T.DD_PROCESS_INSTANCE_ID                 = V.DD_PROCESS_INSTANCE_ID
        --                                                    , T.DD_INSTANCE_ID                         = V.DD_INSTANCE_ID
        --                                                    , T.DD_PROCESS_CODE                        = V.DD_PROCESS_CODE
        --                                                    , T.SCR_SCORE                              = V.SCR_SCORE
        --                                                    , T.SCR_SCORING_RULE                       = V.SCR_SCORING_RULE
        --                                                    , T.SCR_VALUE_1                            = V.SCR_VALUE_1
        --                                                    , T.SCR_VALUE_1_1                        = V.SCR_VALUE_1_1
        --                                                    , T.SCR_QST_FK                             = V.SCR_QST_FK
        --                                                    , T.SCR_GRADE                              = V.SCR_GRADE
        --                                                    , T.SCR_VALUE_2                            = V.SCR_VALUE_2
        --                                     WHEN
        --                                        NOT MATCHED THEN
        --                                            INSERT
        --                                                (DD_STATUS_FLAG
        --                                               , T.DD_OBJECT_TYPE
        --                                               , T.DD_CREATED_BY
        --                                               , T.DD_CREATED_ON
        --                                               , T.DD_PROCESS_INSTANCE_ID
        --                                               , T.DD_INSTANCE_ID
        --                                               , T.DD_PROCESS_CODE
        --                                               , T.SCR_ID_PK
        --                                               , T.SCR_SCORE
        --                                               , T.SCR_SCORING_RULE
        --                                               , T.SCR_VALUE_1
        --                                               , T.SCR_VALUE_1_1
        --                                               , T.SCR_QST_FK
        --                                               , T.SCR_GRADE
        --                                               , T.SCR_VALUE_2
        --                                                )
        --                                            VALUES
        --                                                ('Y'
        --                                               , V.DD_OBJECT_TYPE
        --                                               , V.DD_CREATED_BY
        --                                                     , SYSDATE
        --                                               , V.DD_PROCESS_INSTANCE_ID
        --                                               , V.DD_INSTANCE_ID
        --                                               , V.DD_PROCESS_CODE
        --                                               , V.SCR_ID_PK
        --                                               , V.SCR_SCORE
        --                                               , V.SCR_SCORING_RULE
        --                                               , V.SCR_VALUE_1
        --                                               , V.SCR_VALUE_1_1
        --                                               , V.SCR_QST_FK
        --                                               , V.SCR_GRADE
        --                                               , V.SCR_VALUE_2
        --                                                );
        --
        --                                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);
        --
        --                                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
        --                                END IF;
        --
        --                          END LOOP;
        --                        --scoring ends
        --                        END IF;
        --                    END LOOP;  -- Commented Till Here
        --question ends
      END IF;
    END LOOP;
    --section ends
    -- Added By Jamsheed
    LV_cntr_2              := 0;
    FOR iop_data_QST_table IN
    (SELECT parent_response_type ,
        qst_metric_hyperlink ,
        qst_type ,
        qst_parent_type ,
        qst_name ,
        qst_optional ,
        qst_weightage ,
        qst_based_on_response ,
        qst_target ,
        qst_description ,
        qst_description_htm ,
        qst_response_type ,
        qst_list_of_values ,
        qst_default_score ,
        qst_based_on_number ,
        qst_documents ,
        qst_total_sec_weightage ,
        qst_infolet_scoring ,
        qst_custom_scr_logic ,
        qst_attribute_values ,
        qst_area_of_compliance ,
        qst_requirements ,
        qst_objectives ,
        qst_risks ,
        qst_controls ,
        qst_id_pk ,
        qst_id ,
        qst_section_fk ,
        multirow_region_id ,
        instance_rec_num ,
        qst_section_id ,
        qst_scr_infolet ,
        qst_unique_id ,
        qst_action_plan ,
        qst_sprdsheet_template ,
        qst_allow_resp_na ,
        resp_req_action ,
        RESP_REQ_APPROVAL,
        qst_tree_level,
        PARENT_LOV_VALUES,
        QST_MLOV_SCORING,
        PRE_POPULATE_DATA,
        PRE_POPULATE_DATA_STORED
      FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:qst/msa:row' PASSING LV_xml COLUMNS parent_response_type VARCHAR2(4000) PATH 'msa:parent_response_type' ,qst_metric_hyperlink VARCHAR2(4000) PATH 'msa:qst_metric_hyperlink' ,qst_type VARCHAR2(4000) PATH 'msa:qst_type' ,qst_parent_type VARCHAR2(4000) PATH 'msa:qst_parent_type' ,qst_name VARCHAR2(4000) PATH 'msa:qst_name' ,qst_optional VARCHAR2(4000) PATH 'msa:qst_optional' ,qst_weightage VARCHAR2(4000) PATH 'msa:qst_weightage' ,qst_based_on_response VARCHAR2(4000) PATH 'msa:qst_based_on_response' ,qst_target VARCHAR2(4000) PATH 'msa:qst_target' ,qst_description CLOB PATH 'msa:qst_description' ,qst_description_htm CLOB PATH 'msa:qst_description_htm' ,qst_response_type VARCHAR2(4000) PATH 'msa:qst_response_type' ,qst_list_of_values VARCHAR2(4000) PATH 'msa:qst_list_of_values' ,qst_default_score VARCHAR2(4000) PATH 'msa:qst_default_score' ,qst_based_on_number VARCHAR2(
        4000) PATH 'msa:qst_based_on_number' ,QST_DOCUMENTS                                                                                                                    VARCHAR2(4000) PATH 'msa:qst_documents' ,QST_TOTAL_SEC_WEIGHTAGE VARCHAR2(4000) PATH 'msa:qst_total_sec_weightage' ,QST_INFOLET_SCORING VARCHAR2(4000) PATH 'msa:qst_infolet_scoring' ,QST_CUSTOM_SCR_LOGIC VARCHAR2(4000) PATH 'msa:qst_custom_scr_logic' ,QST_ATTRIBUTE_VALUES VARCHAR2(4000) PATH 'msa:qst_attribute_values' ,QST_AREA_OF_COMPLIANCE VARCHAR2(4000) PATH 'msa:qst_area_of_compliance' ,QST_REQUIREMENTS VARCHAR2(4000) PATH 'msa:qst_requirements' ,QST_OBJECTIVES VARCHAR2(4000) PATH 'msa:qst_objectives' ,QST_RISKS VARCHAR2(4000) PATH 'msa:qst_risks' ,QST_CONTROLS VARCHAR2(4000) PATH 'msa:qst_controls' ,QST_ID_PK VARCHAR2(4000) PATH 'msa:qst_id_pk' ,QST_ID VARCHAR2(4000) PATH 'msa:qst_id' ,QST_SECTION_FK VARCHAR2(4000) PATH 'msa:qst_section_fk' ,MULTIROW_REGION_ID VARCHAR2(4000) PATH 'msa:multirow_region_id' ,
        INSTANCE_REC_NUM                                                                                                                                                       varchar2(4000) PATH 'msa:instance_rec_num' ,QST_SECTION_ID varchar2(255) PATH 'msa:qst_section_id' ,QST_SCR_INFOLET varchar2(255) PATH 'msa:qst_scr_infolet' ,QST_UNIQUE_ID varchar2(255) PATH 'msa:qst_unique_id' ,QST_ACTION_PLAN varchar2(4000) PATH 'msa:qst_action_plan' ,QST_SPRDSHEET_TEMPLATE varchar2(1000) PATH 'msa:qst_sprdsheet_template' ,QST_ALLOW_RESP_NA varchar2(100) PATH 'msa:qst_allow_resp_na' ,RESP_REQ_ACTION varchar2(4000) PATH 'msa:resp_req_action' ,RESP_REQ_APPROVAL varchar2(4000) PATH 'msa:resp_req_approval', QST_TREE_LEVEL varchar2(255) PATH 'msa:qst_tree_level',
        parent_lov_values  varchar2(1000) path 'msa:parent_lov_values',qst_mlov_scoring VARCHAR2(10) PATH 'msa:qst_mlov_scoring',PRE_POPULATE_DATA VARCHAR2(10) PATH 'msa:pre_populate_data',PRE_POPULATE_DATA_STORED VARCHAR2(255) PATH 'msa:pre_populate_data_stored')
      WHERE qst_id_pk IS NOT NULL
    )
    LOOP
      LV_cntr_2 := LV_cntr_2 + 1;
      --        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ').QST_TABLE(' || LV_cntr_2 || ')'||iop_data_QST_table.qst_section_fk||';'||iop_data_QST_table.qst_name, ip_pid);
      --
      --        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
      --IF iop_data_SEC_table.SECTION_ID_PK = iop_data_QST_table.qst_section_fk THEN
      MERGE INTO MS_QSM_QUESTION T USING
      (SELECT iop_data_QST_TABLE.PARENT_RESPONSE_TYPE AS PARENT_RESPONSE_TYPE ,
          iop_data_QST_TABLE.qst_area_of_compliance   AS qst_area_of_compliance ,
          iop_data_QST_TABLE.QST_BASED_ON_NUMBER      AS QST_BASED_ON_NUMBER ,
          iop_data_QST_TABLE.QST_BASED_ON_RESPONSE    AS QST_BASED_ON_RESPONSE ,
          iop_data_QST_TABLE.qst_controls             AS qst_controls ,
          iop_data_QST_TABLE.QST_CUSTOM_SCR_LOGIC     AS QST_CUSTOM_SCR_LOGIC ,
          iop_data_QST_TABLE.QST_DEFAULT_SCORE        AS QST_DEFAULT_SCORE ,
          --iop_data_QST_TABLE.QST_DESCRIPTION          AS QST_DESCRIPTION ,
          iop_data_QST_TABLE.QST_DESCRIPTION_HTM          AS QST_DESCRIPTION ,
          iop_data_QST_TABLE.QST_DOCUMENTS            AS QST_DOCUMENTS ,
          iop_data_QST_TABLE.QST_ID                   AS QST_ID ,
          iop_data_QST_TABLE.QST_ID_PK                AS QST_ID_PK ,
          iop_data_QST_TABLE.QST_INFOLET_SCORING      AS QST_INFOLET_SCORING ,
          iop_data_QST_TABLE.QST_LIST_OF_VALUES       AS QST_LIST_OF_VALUES ,
          iop_data_QST_TABLE.QST_METRIC_HYPERLINK     AS QST_METRIC_HYPERLINK ,
          iop_data_QST_TABLE.QST_NAME                 AS QST_NAME
          --,iop_data_QST_TABLE.QST_OBJ_DISP    AS QST_OBJ_DISP
          ,
          iop_data_QST_TABLE.QST_OPTIONAL    AS QST_OPTIONAL ,
          iop_data_QST_TABLE.QST_PARENT_TYPE AS QST_PARENT_TYPE
          --,iop_data_QST_TABLE.QST_REQ_DISP    AS QST_REQ_DISP
          ,
          iop_data_QST_TABLE.QST_RESPONSE_TYPE AS QST_RESPONSE_TYPE
          --,iop_data_QST_TABLE.QST_RSK_DISP    AS QST_RSK_DISP
          ,
          iop_data_QST_TABLE.QST_SECTION_FK          AS QST_SECTION_FK ,
          iop_data_QST_TABLE.QST_TARGET              AS QST_TARGET ,
          iop_data_QST_TABLE.QST_TOTAL_SEC_WEIGHTAGE AS QST_TOTAL_SEC_WEIGHTAGE ,
          iop_data_QST_TABLE.QST_TYPE                AS QST_TYPE ,
          iop_data_QST_TABLE.QST_WEIGHTAGE           AS QST_WEIGHTAGE ,
          iop_data_QST_TABLE.QST_SECTION_ID          AS QST_SECTION_ID -- Added
          ,
          iop_data.DD_OBJECT_TYPE                   AS DD_OBJECT_TYPE ,
          iop_data.DD_EVENT_USER_NAME               AS DD_CREATED_BY ,
          iop_data.DD_CURRENT_USER_NAME             AS DD_MODIFIED_BY ,
          iop_data.PROCESS_INSTANCE_ID              AS DD_PROCESS_INSTANCE_ID ,
          iop_data.INSTANCE_ID                      AS DD_INSTANCE_ID ,
          iop_data.DD_PROCESS_CODE                  AS DD_PROCESS_CODE ,
          iop_data_QST_TABLE.QST_SCR_INFOLET        AS QST_SCR_INFOLET ,
          iop_data_QST_TABLE.QST_UNIQUE_ID          AS QST_UNIQUE_ID ,
          iop_data_QST_TABLE.QST_ACTION_PLAN        AS QST_ACTION_PLAN ,
          iop_data_QST_TABLE.QST_SPRDSHEET_TEMPLATE AS QST_SPRDSHEET_TEMPLATE ,
          iop_data_QST_TABLE.QST_ALLOW_RESP_NA      AS QST_ALLOW_RESP_NA ,
          iop_data_QST_TABLE.RESP_REQ_APPROVAL      AS RESP_REQ_APPROVAL ,
          IOP_DATA_QST_TABLE.RESP_REQ_ACTION        AS RESP_REQ_ACTION,
          iop_data_qst_table.qst_tree_level         as qst_tree_level,
          iop_data_qst_table.parent_lov_values      as parent_lov_values,
          IOP_DATA_QST_TABLE.QST_MLOV_SCORING       as QST_MLOV_SCORING,
          IOP_DATA_QST_TABLE.PRE_POPULATE_DATA       as PRE_POPULATE_DATA,
         IOP_DATA_QST_TABLE.PRE_POPULATE_DATA_STORED       as PRE_POPULATE_DATA_STORED  
        FROM DUAL
      )
      V ON ( T.QST_ID_PK = V.QST_ID_PK )
    WHEN MATCHED THEN
      UPDATE
      SET DD_STATUS_FLAG       = 'Y' ,
        T.QST_RESPONSE_TYPE    = V.QST_RESPONSE_TYPE ,
        T.QST_TARGET           = V.QST_TARGET ,
        T.QST_CUSTOM_SCR_LOGIC = V.QST_CUSTOM_SCR_LOGIC ,
        T.QST_LIST_OF_VALUES   = V.QST_LIST_OF_VALUES ,
        T.PARENT_RESPONSE_TYPE = V.PARENT_RESPONSE_TYPE ,
        T.QST_PARENT_TYPE      = V.QST_PARENT_TYPE
        --, T.QST_OBJ_DISP                           = V.QST_OBJ_DISP
        ,
        T.QST_WEIGHTAGE        = V.QST_WEIGHTAGE ,
        T.QST_DOCUMENTS        = V.QST_DOCUMENTS ,
        T.QST_METRIC_HYPERLINK = V.QST_METRIC_HYPERLINK
        --, T.QST_CTL_DISP                           = V.QST_CTL_DISP
        ,
        T.QST_DEFAULT_SCORE = V.QST_DEFAULT_SCORE
        --, T.QST_REQ_DISP                           = V.QST_REQ_DISP
        ,
        T.QST_TYPE                = V.QST_TYPE ,
        T.QST_OPTIONAL            = V.QST_OPTIONAL ,
        T.QST_TOTAL_SEC_WEIGHTAGE = V.QST_TOTAL_SEC_WEIGHTAGE
        --, T.QST_RSK_DISP                           = V.QST_RSK_DISP
        ,
        T.QST_NAME              = V.QST_NAME ,
        T.QST_BASED_ON_RESPONSE = V.QST_BASED_ON_RESPONSE
        --, T.QST_AOC_DISP                           = V.QST_AOC_DISP
        ,
        T.QST_SECTION_FK         = V.QST_SECTION_FK ,
        T.QST_ID                 = V.QST_ID ,
        T.QST_DESCRIPTION        = V.QST_DESCRIPTION ,
        T.QST_INFOLET_SCORING    = V.QST_INFOLET_SCORING ,
        T.QST_BASED_ON_NUMBER    = V.QST_BASED_ON_NUMBER ,
        T.DD_OBJECT_TYPE         = V.DD_OBJECT_TYPE ,
        T.DD_MODIFIED_BY         = V.DD_MODIFIED_BY ,
        T.DD_MODIFIED_ON         = SYSDATE ,
        T.DD_PROCESS_INSTANCE_ID = V.DD_PROCESS_INSTANCE_ID ,
        T.DD_INSTANCE_ID         = V.DD_INSTANCE_ID ,
        T.DD_PROCESS_CODE        = V.DD_PROCESS_CODE ,
        T.QST_SECTION_ID         = V.QST_SECTION_ID ,
        T.QST_SCR_INFOLET        = V.QST_SCR_INFOLET ,
        T.QST_UNIQUE_ID          = V.QST_UNIQUE_ID ,
        T.QST_ACTION_PLAN        = V.QST_ACTION_PLAN ,
        T.QST_SPRDSHEET_TEMPLATE = V.QST_SPRDSHEET_TEMPLATE ,
        T.QST_ALLOW_RESP_NA      = V.QST_ALLOW_RESP_NA ,
        T.RESP_REQ_APPROVAL      = V.RESP_REQ_APPROVAL ,
        T.RESP_REQ_ACTION        = V.RESP_REQ_ACTION,
        t.PARENT_LOV_VALUES        = v.PARENT_LOV_VALUES,
        t.qst_tree_level         = v.qst_tree_level,
        T.QST_MLOV_SCORING       = V.QST_MLOV_SCORING,
        T.PRE_POPULATE_DATA      = V.PRE_POPULATE_DATA,
        T.PRE_POPULATE_DATA_STORED      = V.PRE_POPULATE_DATA_STORED    
      WHEN NOT MATCHED THEN        
      INSERT
        (
          DD_STATUS_FLAG ,
          T.QST_RESPONSE_TYPE ,
          T.QST_TARGET ,
          T.QST_CUSTOM_SCR_LOGIC ,
          T.QST_LIST_OF_VALUES ,
          T.PARENT_RESPONSE_TYPE ,
          T.QST_PARENT_TYPE
          --, T.QST_OBJ_DISP
          ,
          T.QST_WEIGHTAGE ,
          T.QST_DOCUMENTS ,
          T.QST_ID_PK
          --, T.QST_METRIC_HYPERLINK
          ,
          T.QST_CTL_DISP ,
          T.QST_DEFAULT_SCORE
          --, T.QST_REQ_DISP
          ,
          T.QST_TYPE ,
          T.QST_OPTIONAL ,
          T.QST_TOTAL_SEC_WEIGHTAGE
          --, T.QST_RSK_DISP
          ,
          T.QST_NAME ,
          T.QST_BASED_ON_RESPONSE
          --, T.QST_AOC_DISP
          ,
          T.QST_SECTION_FK ,
          T.QST_ID ,
          T.QST_DESCRIPTION ,
          T.QST_INFOLET_SCORING ,
          T.QST_BASED_ON_NUMBER ,
          T.DD_OBJECT_TYPE ,
          T.DD_CREATED_BY ,
          T.DD_CREATED_ON ,
          T.DD_PROCESS_INSTANCE_ID ,
          T.DD_INSTANCE_ID ,
          T.DD_PROCESS_CODE ,
          T.QST_SECTION_ID ,
          T.QST_SCR_INFOLET ,
          T.QST_UNIQUE_ID ,
          T.QST_ACTION_PLAN ,
          T.QST_SPRDSHEET_TEMPLATE ,
          T.QST_ALLOW_RESP_NA ,
          T.RESP_REQ_APPROVAL ,
          T.RESP_REQ_ACTION,
          t.qst_tree_level,
          T.PARENT_LOV_VALUES,
          T.QST_MLOV_SCORING,
          T.PRE_POPULATE_DATA,
          T.PRE_POPULATE_DATA_STORED
        )
        VALUES
        (
          'Y' ,
          V.QST_RESPONSE_TYPE ,
          V.QST_TARGET ,
          V.QST_CUSTOM_SCR_LOGIC ,
          V.QST_LIST_OF_VALUES ,
          V.PARENT_RESPONSE_TYPE ,
          V.QST_PARENT_TYPE
          --, V.QST_OBJ_DISP
          ,
          V.QST_WEIGHTAGE ,
          V.QST_DOCUMENTS ,
          V.QST_ID_PK ,
          V.QST_METRIC_HYPERLINK
          --, V.QST_CTL_DISP
          ,
          V.QST_DEFAULT_SCORE
          --, V.QST_REQ_DISP
          ,
          V.QST_TYPE ,
          V.QST_OPTIONAL ,
          V.QST_TOTAL_SEC_WEIGHTAGE
          --, V.QST_RSK_DISP
          ,
          V.QST_NAME ,
          V.QST_BASED_ON_RESPONSE
          --, V.QST_AOC_DISP
          ,
          V.QST_SECTION_FK ,
          V.QST_ID ,
          V.QST_DESCRIPTION ,
          V.QST_INFOLET_SCORING ,
          V.QST_BASED_ON_NUMBER ,
          V.DD_OBJECT_TYPE ,
          V.DD_CREATED_BY ,
          SYSDATE ,
          V.DD_PROCESS_INSTANCE_ID ,
          V.DD_INSTANCE_ID ,
          V.DD_PROCESS_CODE ,
          V.QST_SECTION_ID ,
          V.QST_SCR_INFOLET ,
          V.QST_UNIQUE_ID ,
          V.QST_ACTION_PLAN ,
          V.QST_SPRDSHEET_TEMPLATE ,
          V.QST_ALLOW_RESP_NA ,
          V.RESP_REQ_APPROVAL ,
          V.RESP_REQ_ACTION,
          v.qst_tree_level,
          V.PARENT_LOV_VALUES,
          V.QST_MLOV_SCORING,
          V.PRE_POPULATE_DATA,
          V.PRE_POPULATE_DATA_STORED
        );
      --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);
      --
      --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
      IF LENGTH
        (
          iop_data_QST_TABLE.QST_AREA_OF_COMPLIANCE
        )
        > 0 THEN
        INSERT
        INTO MS_QSM_QUESTION_AOC
          (
            DD_STATUS_FLAG ,
            QST_ID_PK ,
            QST_AREA_OF_COMPLIANCE
          )
        SELECT 'Y' ,
          iop_data_QST_TABLE.QST_ID_PK ,
          COLUMN_VALUE
        FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data_QST_TABLE.qst_area_of_compliance,','));
      END IF;
      IF LENGTH(iop_data_QST_TABLE.QST_AREA_OF_COMPLIANCE) > 0 THEN
        INSERT
        INTO MS_QSM_QUESTION_ATV
          (
            DD_STATUS_FLAG ,
            QST_ID_PK ,
            qst_attribute_values
          )
        SELECT 'Y' ,
          iop_data_QST_TABLE.QST_ID_PK ,
          COLUMN_VALUE
        FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data_QST_TABLE.qst_attribute_values,','));
      END IF;
      IF LENGTH(iop_data_QST_TABLE.QST_CONTROLS) > 0 THEN
        INSERT INTO MS_QSM_QUESTION_CTL
          ( DD_STATUS_FLAG ,QST_ID_PK ,QST_CONTROLS
          )
        SELECT 'Y' ,
          iop_data_QST_TABLE.QST_ID_PK ,
          COLUMN_VALUE
        FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data_QST_TABLE.QST_CONTROLS,','));
      END IF;
      IF LENGTH(iop_data_QST_TABLE.QST_OBJECTIVES) > 0 THEN
        INSERT INTO MS_QSM_QUESTION_OBJ
          ( DD_STATUS_FLAG ,QST_ID_PK ,QST_OBJECTIVES
          )
        SELECT 'Y' ,
          iop_data_QST_TABLE.QST_ID_PK ,
          COLUMN_VALUE
        FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data_QST_TABLE.QST_OBJECTIVES,','));
      END IF;
      IF LENGTH(iop_data_QST_TABLE.QST_REQUIREMENTS) > 0 THEN
        INSERT
        INTO MS_QSM_QUESTION_REQ
          (
            DD_STATUS_FLAG ,
            QST_ID_PK ,
            QST_REQUIREMENTS
          )
        SELECT 'Y' ,
          iop_data_QST_TABLE.QST_ID_PK ,
          COLUMN_VALUE
        FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data_QST_TABLE.QST_REQUIREMENTS,','));
      END IF;
      IF LENGTH(iop_data_QST_TABLE.QST_RISKS) > 0 THEN
        INSERT INTO MS_QSM_QUESTION_RSK
          ( DD_STATUS_FLAG ,QST_ID_PK ,QST_RISKS
          )
        SELECT 'Y' ,
          iop_data_QST_TABLE.QST_ID_PK ,
          COLUMN_VALUE
        FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data_QST_TABLE.QST_RISKS,','));
      END IF;
      --scoring starts
      FOR iop_data_SCR_table IN
      (SELECT SCR_GRADE ,
        SCR_ID_PK ,
        SCR_QST_FK ,
        SCR_SCORE ,
        SCR_SCORING_RULE ,
        SCR_VALUE_1 ,
        SCR_VALUE_2 ,
        SCR_VALUE_1_1,
        scr_parent_type,
        scr_lov_values,
        scr_resp_type
      FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:scr/msa:row' PASSING LV_xml COLUMNS SCR_GRADE VARCHAR2(4000) PATH 'msa:scr_grade' ,SCR_ID_PK VARCHAR2(4000) PATH 'msa:scr_id_pk' ,SCR_QST_FK VARCHAR2(4000) PATH 'msa:scr_qst_fk' ,SCR_SCORE NUMBER PATH 'msa:scr_score' ,SCR_SCORING_RULE VARCHAR2(4000) PATH 'msa:scr_scoring_rule' ,SCR_VALUE_1 NUMBER PATH 'msa:scr_value_1' ,SCR_VALUE_2 NUMBER PATH 'msa:scr_value_2' ,SCR_VALUE_1_1 VARCHAR2(255) PATH 'msa:scr_value_1_1',scr_parent_type varchar2(100) path 'msa:scr_parent_type',
      scr_lov_values varchar2(1000) path 'msa:scr_lov_values',
      scr_resp_type VARCHAR2(255) PATH 'msa:scr_resp_type' )
      WHERE SCR_ID_PK IS NOT NULL
      )
      LOOP
        LV_cntr_2 := LV_cntr_2 + 1;
        /* --------------------------------------------------------------------------
        To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
        -------------------------------------------------------------------------- */
        --                MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ').SCR_TABLE(' || LV_cntr_2 || ')', ip_pid);
        --                IF LV_debug THEN
        --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_OBJECT_TYPE, ip_pid);
        --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
        --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
        --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
        --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
        --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_PROCESS_CODE, ip_pid);
        --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SCR_TABLE.SCR_ID_PK, ip_pid);
        --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SCR_TABLE.SCR_SCORE, ip_pid);
        --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SCR_TABLE.SCR_SCORING_RULE, ip_pid);
        --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SCR_TABLE.SCR_VALUE_1, ip_pid);
        --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SCR_TABLE.SCR_QST_FK, ip_pid);
        --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SCR_TABLE.SCR_GRADE, ip_pid);
        --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_SCR_TABLE.SCR_VALUE_2, ip_pid);
        --                END IF;
        --                MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
        IF iop_data_QST_TABLE.QST_ID_PK = iop_data_SCR_table.SCR_QST_FK THEN
          MERGE INTO MS_QSM_SCORING T USING
          (SELECT iop_data.DD_OBJECT_TYPE       AS DD_OBJECT_TYPE ,
            iop_data.DD_EVENT_USER_NAME         AS DD_CREATED_BY ,
            iop_data.DD_CURRENT_USER_NAME       AS DD_MODIFIED_BY ,
            iop_data.PROCESS_INSTANCE_ID        AS DD_PROCESS_INSTANCE_ID ,
            iop_data.INSTANCE_ID                AS DD_INSTANCE_ID ,
            iop_data.DD_PROCESS_CODE            AS DD_PROCESS_CODE ,
            iop_data_SCR_TABLE.SCR_ID_PK        AS SCR_ID_PK ,
            iop_data_SCR_TABLE.SCR_SCORE        AS SCR_SCORE ,
            iop_data_SCR_TABLE.SCR_SCORING_RULE AS SCR_SCORING_RULE ,
            iop_data_SCR_TABLE.SCR_VALUE_1      AS SCR_VALUE_1 ,
            iop_data_SCR_TABLE.SCR_VALUE_1_1    AS SCR_VALUE_1_1 ,
            iop_data_SCR_TABLE.SCR_QST_FK       AS SCR_QST_FK ,
            iop_data_SCR_TABLE.SCR_GRADE        AS SCR_GRADE ,
            iop_data_SCR_TABLE.SCR_VALUE_2      AS SCR_VALUE_2,
            iop_data_SCR_TABLE.scr_parent_type  AS scr_parent_type ,
            iop_data_scr_table.scr_lov_values   as scr_lov_values ,
            iop_data_SCR_TABLE.scr_resp_type    AS scr_resp_type
          FROM DUAL
          ) V ON ( T.SCR_ID_PK = V.SCR_ID_PK )
        WHEN MATCHED THEN
          UPDATE
          SET DD_STATUS_FLAG         = 'Y' ,
            T.DD_OBJECT_TYPE         = V.DD_OBJECT_TYPE ,
            T.DD_MODIFIED_BY         = V.DD_MODIFIED_BY ,
            T.DD_MODIFIED_ON         = SYSDATE ,
            T.DD_PROCESS_INSTANCE_ID = V.DD_PROCESS_INSTANCE_ID ,
            T.DD_INSTANCE_ID         = V.DD_INSTANCE_ID ,
            T.DD_PROCESS_CODE        = V.DD_PROCESS_CODE ,
            T.SCR_SCORE              = V.SCR_SCORE ,
            T.SCR_SCORING_RULE       = V.SCR_SCORING_RULE ,
            T.SCR_VALUE_1            = V.SCR_VALUE_1 ,
            T.SCR_VALUE_1_1          = V.SCR_VALUE_1_1 ,
            T.SCR_QST_FK             = V.SCR_QST_FK ,
            T.SCR_GRADE              = V.SCR_GRADE ,
            T.SCR_VALUE_2            = V.SCR_VALUE_2,
            T.scr_parent_type        = V.scr_parent_type ,
            t.scr_lov_values         = v.scr_lov_values ,
            T.scr_resp_type          = V.scr_resp_type 
            WHEN NOT MATCHED THEN
          INSERT
            (
              DD_STATUS_FLAG ,
              T.DD_OBJECT_TYPE ,
              T.DD_CREATED_BY ,
              T.DD_CREATED_ON ,
              T.DD_PROCESS_INSTANCE_ID ,
              T.DD_INSTANCE_ID ,
              T.DD_PROCESS_CODE ,
              T.SCR_ID_PK ,
              T.SCR_SCORE ,
              T.SCR_SCORING_RULE ,
              T.SCR_VALUE_1 ,
              T.SCR_VALUE_1_1 ,
              T.SCR_QST_FK ,
              T.SCR_GRADE ,
              T.SCR_VALUE_2,
              t.scr_parent_type,
              t.scr_lov_values,
              T.scr_resp_type          
            )
            VALUES
            (
              'Y' ,
              V.DD_OBJECT_TYPE ,
              V.DD_CREATED_BY ,
              SYSDATE ,
              V.DD_PROCESS_INSTANCE_ID ,
              V.DD_INSTANCE_ID ,
              V.DD_PROCESS_CODE ,
              V.SCR_ID_PK ,
              V.SCR_SCORE ,
              V.SCR_SCORING_RULE ,
              V.SCR_VALUE_1 ,
              V.SCR_VALUE_1_1 ,
              V.SCR_QST_FK ,
              V.SCR_GRADE ,
              V.SCR_VALUE_2,
              V.scr_parent_type ,
              v.scr_lov_values ,
              V.scr_resp_type  
            );
          --
          --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);
          --
          --                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
        END IF;
      END LOOP;
      --scoring ends
      --END IF;
    END LOOP;
    -- Added Till Here
    
    DELETE FROM MS_QSM_SECTION
    WHERE DD_STATUS_FLAG = 'N'
    AND SECTION_QUESTNR_FK = IOP_DATA.INTERNAL_QUESTNR_ID;
    
    DELETE FROM MS_QSM_GRADE
    WHERE DD_STATUS_FLAG = 'N'
    AND GRD_QUESTNR_FK = IOP_DATA.INTERNAL_QUESTNR_ID;


    DELETE FROM MS_QSM_QUESTION
    where dd_status_flag = 'N'
    AND QST_SECTION_ID IN (SELECT SECTION_ID_PK 
                              FROM MS_QSM_SECTION 
                              WHERE SECTION_QUESTNR_FK=iop_data.INTERNAL_QUESTNR_ID);
    
    
    DELETE FROM MS_QSM_SCORING
    WHERE DD_STATUS_FLAG = 'N'
    AND SCR_QST_FK IN (SELECT QST_ID_PK 
                         FROM MS_QSM_QUESTION A, MS_QSM_SECTION B 
                         WHERE A.QST_SECTION_FK = B.SECTION_ID_PK 
                         AND B.SECTION_QUESTNR_FK=iop_data.INTERNAL_QUESTNR_ID);


  END LOOP;
  --Questionnaire ends
  --        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ETL END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
  --        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] END ', ip_pid);
EXCEPTION
WHEN OTHERS THEN
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG
  (
    LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ERROR AT '||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, ip_pid
  )
  ;
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG
  (
    LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] SQLCODE : ' || SQLCODE , ip_pid
  )
  ;
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG
  (
    LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] SQLERRM : '||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || SUBSTR(SQLERRM, 1, 3900) , ip_pid
  )
  ;
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG
  (
    LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Calling Rollback ', ip_pid
  )
  ;
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG
  (
    LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Calling Rollback ', ip_pid
  )
  ;
  --dbms_output.put_line('error' || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
  op_error_code    := -1;
  op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR
  (
    SQLERRM, 1, 255
  )
  || ')';
END pr_call_etl;
PROCEDURE RESPONSE_CALL_ETL
  (
    iop_xml_data IN OUT NOCOPY CLOB,
    iop_log_no   IN OUT NUMBER,
    op_error_code OUT NUMBER,
    op_error_message OUT VARCHAR2,
    iop_error_seq IN OUT NUMBER,
    ip_pid        IN NUMBER
  )
IS
  GC_package_name VARCHAR2
  (
    100
  )
  := 'RESP_CALL_ETL_NEW';
  LV_progress VARCHAR2
  (
    3
  )
                    := NULL;
  LV_cntr_1 NUMBER  := NULL;
  LV_cntr_2 NUMBER  := NULL;
  LV_debug  BOOLEAN := FALSE;
  LV_XML XMLTYPE    := XMLTYPE
  (
    iop_xml_data
  )
  ;
  LV_err_code NUMBER := NULL;
  LV_err_msg  VARCHAR2
  (
    4000
  )
  ;
  lV_program_name VARCHAR2
  (
    100
  )
  ;
  temp_var VARCHAR2
  (
    100
  )
  ;
  l_temp CLOB;
  CURSOR LC_get_app_log_no
  IS
    SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL AS APP_LOG_NO FROM DUAL;
  LV_log_no LC_get_app_log_no%ROWTYPE;
BEGIN
  SAVEPOINT MS_APPS_ETL_SAVEPOINT;
  LV_progress      := '001';
  op_error_code    := 0;
  op_error_message := '';
  lV_program_name  := 'CALL_ETL';
  LV_debug         := FALSE;
  /* --------------------------------------------------------------------------
  To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
  -------------------------------------------------------------------------- */
  IF iop_log_no IS NULL THEN
    OPEN LC_get_app_log_no;
    FETCH LC_get_app_log_no
    INTO LV_log_no;
    CLOSE LC_get_app_log_no;
    iop_log_no := LV_log_no.APP_LOG_NO;
  ELSE
    LV_log_no.APP_LOG_NO := iop_log_no;
  END IF;
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Start ', ip_pid);
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || ']  Updating Hierarchy ', ip_pid);
  LV_cntr_1 := 0;
  LV_XML    := xmltype(iop_xml_data);
  /* --------------------------------------------------------------------------
  Cursor to fetch non multirow details from XML
  -------------------------------------------------------------------------- */
  FOR iop_data IN
  (SELECT INSTANCE_ID ,
    METRIC_ID
    --                                 ,TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_RUN_DATE
    --                                 ,TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
    --                                 ,LATEST_FLAG
    --                                 ,DD_EVENT_USER_NAME AS DD_CREATED_BY
    --                                 ,TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE
    ,
    TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss')       AS METRIC_RUN_DATE ,
    TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
    --        ,TO_DATE(METRIC_COMPLETED_DATE,'MM/DD/YYYY HH:MM:SS') AS METRIC_COMPLETED_DATE
    ,
    LATEST_FLAG ,
    DD_EVENT_USER_NAME                             AS DD_CREATED_BY ,
    TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE ,
    PROCESS_FLOW_STATUS ,
    PROCESS_INSTANCE_ID ,
    ELECTRONICALLY_SIGNED ,
    INSTANCE_REC_NUM ,
    ACTION_COMMENTS ,
    APPLIES_TO ,
    APPLIES_TO_OBJECT ,
    CERTIFICATION_COMMENT ,
    CERTIFICATION_TEXT ,
    CERTIFIED_BY ,
    CERTIFY_FLAG ,
    COLLABORATION_USERS ,
    CONTEXT_FIELD_1 ,
    CONTEXT_FIELD_2 ,
    CONTEXT_FIELD_3 ,
    DD_CURRENT_USER_NAME AS DD_MODIFIED_BY ,
    DD_OBJECT_TYPE ,
    DD_PROCESS_CODE ,
    TO_DATE(DUE_DATE,'MM/dd/yyyy HH24:mi:ss')AS DUE_DATE
    --                                 ,TO_DATE(DUE_DATE,'MM/dd/yyyy HH24:mi:ss') AS DUE_DATE
    ,
    INSTRUCTIONS ,
    QUE_REQUEST_ID ,
    QUE_REQUEST_NAME ,
    QUE_RESPONSE_ID ,
    RESPONDENT ,
    RESPONSE_APPROVER ,
    RESP_STATUS ,
    SUBMIT_ACTION ,
    resp_all_question_ids ,
    resp_all_section_ids ,
    tmep_que_type ,
    finding_can_be_added_by ,
    temp_config_flag ,
    temp_pk_id ,
    certification_text_htm ,
    instructions_htm ,
    questionnaire_id ,
    dd_enterprise_info ,
    dd_current_stage ,
    TO_DATE(responded_on,'MM/dd/yyyy HH24:mi:ss')AS responded_on
    --                                 ,responded_on
    ,
    REFERENCE_PROC_ID ,
    REFERENCE_METRIC_ID ,
    OVERALL_SCORE ,
    OVERALL_GRADE ,
    DD_STATUS_FLAG ,
    initiated_by ,
    responded_by,
    reporting_period,
    cert_result_status_flag,
    OVERALL_APPROVER,
    CONTEXT_FIELD_4,
    CONTEXT_FIELD_5,
    CONTEXT_FIELD_6,
    collaboration_users_disp,
    applies_to_object_code,
    approver_organization
  FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:nonmultirow' PASSING LV_XML COLUMNS INSTANCE_ID NUMBER PATH 'msa:instance_id' ,METRIC_ID NUMBER PATH 'msa:metric_id' ,METRIC_RUN_DATE VARCHAR2(40) PATH 'msa:metric_run_date' ,METRIC_COMPLETED_DATE VARCHAR2(40) PATH 'msa:metric_completed_date' ,LATEST_FLAG VARCHAR2(1) PATH 'msa:latest_flag' ,DD_EVENT_USER_NAME VARCHAR2(4000) PATH 'msa:dd_event_user_name' ,CREATION_DATE VARCHAR2(40) PATH 'msa:creation_date' ,PROCESS_FLOW_STATUS NUMBER PATH 'msa:process_flow_status' ,PROCESS_INSTANCE_ID NUMBER PATH 'msa:process_instance_id' ,ELECTRONICALLY_SIGNED NUMBER PATH 'msa:electronically_signed' ,INSTANCE_REC_NUM NUMBER PATH 'msa:instance_rec_num' ,ACTION_COMMENTS VARCHAR2(4000) PATH 'msa:action_comments' ,APPLIES_TO VARCHAR2(4000) PATH 'msa:applies_to' ,APPLIES_TO_OBJECT VARCHAR2(4000) PATH 'msa:applies_to_object' ,CERTIFICATION_COMMENT VARCHAR2(4000) PATH 'msa:certification_comment'
    ,CERTIFICATION_TEXT CLOB PATH 'msa:certification_text_htm' ,CERTIFIED_BY                                                                                      VARCHAR2(4000) PATH 'msa:certified_by' ,CERTIFY_FLAG VARCHAR2(4000) PATH 'msa:certify_flag' ,COLLABORATION_USERS VARCHAR2(4000) PATH 'msa:collaboration_users' ,CONTEXT_FIELD_1 VARCHAR2(4000) PATH 'msa:context_field_1' ,CONTEXT_FIELD_2 VARCHAR2(4000) PATH 'msa:context_field_2' ,CONTEXT_FIELD_3 VARCHAR2(4000) PATH 'msa:context_field_3' ,DD_CURRENT_USER_NAME VARCHAR2(4000) PATH 'msa:dd_current_user_name' ,DD_OBJECT_TYPE VARCHAR2(4000) PATH 'msa:dd_object_type' ,DD_PROCESS_CODE VARCHAR2(4000) PATH 'msa:dd_process_code' ,DUE_DATE VARCHAR2(40) PATH 'msa:due_date' ,INSTRUCTIONS CLOB PATH 'msa:instructions_htm' ,QUE_REQUEST_ID VARCHAR2(4000) PATH 'msa:que_request_id' ,QUE_REQUEST_NAME VARCHAR2(4000) PATH 'msa:que_request_name' ,QUE_RESPONSE_ID VARCHAR2(4000) PATH 'msa:que_response_id' ,RESPONDENT VARCHAR2(4000) PATH 'msa:respondent'
    ,response_approver varchar2(4000) path 'msa:response_approver' ,resp_status varchar2(4000) path 'msa:resp_status' ,submit_action varchar2(4000) path 'msa:submit_action' ,resp_all_question_ids varchar2(4000) path 'msa:resp_all_question_ids' ,resp_all_section_ids varchar2(4000) path 'msa:resp_all_section_ids' ,tmep_que_type varchar2(4000) path 'msa:tmep_que_type' ,finding_can_be_added_by varchar2(4000) path 'msa:finding_can_be_added_by' ,temp_config_flag varchar2(4000) path 'msa:temp_config_flag' ,temp_pk_id varchar2(4000) path 'msa:temp_pk_id' ,certification_text_htm varchar2(4000) path 'msa:certification_text_htm' ,instructions_htm varchar2(4000) path 'msa:instructions_htm' ,questionnaire_id varchar2(255) path 'msa:questionnaire_id' ,dd_enterprise_info varchar2(4000) path 'msa:dd_enterprise_info' ,dd_current_stage varchar2(4000) path
    'msa:dd_current_stage' ,responded_on VARCHAR2(100) PATH 'msa:responded_on' ,reference_proc_id VARCHAR2(4000) PATH 'msa:reference_proc_id' ,reference_metric_id VARCHAR2(4000) PATH 'msa:reference_metric_id' ,overall_score NUMBER PATH 'msa:overall_score' ,overall_grade VARCHAR2(255) PATH 'msa:overall_grade' ,dd_status_flag VARCHAR2(1) PATH 'msa:dd_status_flag' ,initiated_by VARCHAR2(4000) PATH 'msa:initiated_by' ,responded_by VARCHAR2(4000) PATH 'msa:responded_by',
                     reporting_period varchar2(255) path 'msa:reporting_period',
                          cert_result_status_flag varchar2(255) path 'msa:cert_result_status_flag',
                          overall_approver varchar2(400) path 'msa:overall_approver',
                          context_field_4 varchar2(4000) path 'msa:context_field_4',
                          context_field_5 varchar2(4000) path 'msa:context_field_5',
                          context_field_6 varchar2(4000) path 'msa:context_field_6',
                          collaboration_users_disp varchar2(4000) path 'msa:collaboration_users_disp',
                          applies_to_object_code varchar2(4000) path 'msa:applies_to_object_code',
                          approver_organization VARCHAR2(4000) PATH 'msa:approver_organization')
  )
  LOOP
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','LOOPCOUNT' , ip_pid);
    MERGE INTO MS_QSM_QUESTNR_RESP T USING
    (SELECT iop_data.QUE_RESPONSE_ID AS QUE_RESPONSE_ID ,
      iop_data.QUE_REQUEST_ID        AS QUE_REQUEST_ID ,
      iop_data.QUE_REQUEST_NAME      AS QUE_REQUEST_NAME ,
      iop_data.DUE_DATE              AS DUE_DATE ,
      iop_data.APPLIES_TO            AS APPLIES_TO ,
      iop_data.APPLIES_TO_OBJECT     AS APPLIES_TO_OBJECT ,
      iop_data.CONTEXT_FIELD_1       AS CONTEXT_FIELD_1 ,
      iop_data.CONTEXT_FIELD_2       AS CONTEXT_FIELD_2 ,
      iop_data.CONTEXT_FIELD_3       AS CONTEXT_FIELD_3 ,
      iop_data.RESPONDENT            AS RESPONDENT ,
      iop_data.INSTRUCTIONS          AS INSTRUCTIONS ,
      iop_data.CERTIFICATION_TEXT    AS CERTIFICATION_TEXT ,
      iop_data.CERTIFY_FLAG          AS CERTIFY_FLAG ,
      iop_data.CERTIFIED_BY          AS CERTIFIED_BY ,
      iop_data.CERTIFICATION_COMMENT AS CERTIFICATION_COMMENT ,
      iop_data.SUBMIT_ACTION         AS SUBMIT_ACTION ,
      iop_data.ACTION_COMMENTS       AS ACTION_COMMENTS ,
      iop_data.RESPONSE_APPROVER     AS RESPONSE_APPROVER ,
      iop_data.RESP_STATUS           AS RESP_STATUS ,
      iop_data.DD_OBJECT_TYPE        AS DD_OBJECT_TYPE ,
      iop_data.DD_CREATED_BY         AS DD_CREATED_BY ,
      iop_data.DD_MODIFIED_BY        AS DD_MODIFIED_BY ,
      iop_data.PROCESS_INSTANCE_ID   AS DD_PROCESS_INSTANCE_ID ,
      iop_data.INSTANCE_ID           AS DD_INSTANCE_ID ,
      iop_data.DD_PROCESS_CODE       AS DD_PROCESS_CODE ,
      iop_data.RESPONDED_ON          AS RESPONDED_ON ,
      iop_data.REFERENCE_PROC_ID     AS REFERENCE_PROC_ID ,
      iop_data.REFERENCE_METRIC_ID   AS REFERENCE_METRIC_ID ,
      iop_data.QUESTIONNAIRE_ID      AS QUESTIONNAIRE_ID ,
      iop_data.OVERALL_SCORE         AS OVERALL_SCORE ,
      iop_data.OVERALL_GRADE         AS OVERALL_GRADE ,
      iop_data.INITIATED_BY          AS INITIATED_BY ,
      iop_data.RESPONDED_BY          AS RESPONDED_BY,
      iop_data.reporting_period         AS reporting_period ,
      iop_data.cert_result_status_flag         AS cert_result_status_flag ,
      iop_data.OVERALL_APPROVER          as OVERALL_APPROVER ,
      iop_data.context_field_4          as context_field_4,
      iop_data.context_field_5         AS context_field_5 ,
      iop_data.context_field_6         AS context_field_6 ,
      iop_data.collaboration_users          as collaboration_users ,
      iop_data.collaboration_users_disp          as collaboration_users_disp,
      iop_data.applies_to_object_code         AS applies_to_object_code 
    FROM DUAL
    ) V ON ( T.QUE_RESPONSE_ID = V.QUE_RESPONSE_ID )
  WHEN MATCHED THEN
    UPDATE
    SET DD_STATUS_FLAG         = 'Y' ,
      T.QUE_REQUEST_ID         = V.QUE_REQUEST_ID ,
      T.QUE_REQUEST_NAME       = V.QUE_REQUEST_NAME ,
      T.DUE_DATE               = V.DUE_DATE ,
      T.APPLIES_TO             = V.APPLIES_TO ,
      T.APPLIES_TO_OBJECT      = V.APPLIES_TO_OBJECT ,
      T.CONTEXT_FIELD_1        = V.CONTEXT_FIELD_1 ,
      T.CONTEXT_FIELD_2        = V.CONTEXT_FIELD_2 ,
      T.CONTEXT_FIELD_3        = V.CONTEXT_FIELD_3 ,
      T.RESPONDENT             = V.RESPONDENT ,
      T.INSTRUCTIONS           = V.INSTRUCTIONS ,
      T.CERTIFICATION_TEXT     = V.CERTIFICATION_TEXT ,
      T.CERTIFY_FLAG           = V.CERTIFY_FLAG ,
      T.CERTIFIED_BY           = V.CERTIFIED_BY ,
      T.CERTIFICATION_COMMENT  = V.CERTIFICATION_COMMENT ,
      T.SUBMIT_ACTION          = V.SUBMIT_ACTION ,
      T.ACTION_COMMENTS        = V.ACTION_COMMENTS ,
      T.RESPONSE_APPROVER      = V.RESPONSE_APPROVER ,
      T.RESP_STATUS            = V.RESP_STATUS ,
      T.DD_OBJECT_TYPE         = V.DD_OBJECT_TYPE ,
      T.DD_MODIFIED_BY         = V.DD_MODIFIED_BY ,
      T.DD_MODIFIED_ON         = SYSDATE ,
      T.DD_PROCESS_INSTANCE_ID = V.DD_PROCESS_INSTANCE_ID ,
      T.DD_INSTANCE_ID         = V.DD_INSTANCE_ID ,
      T.DD_PROCESS_CODE        = V.DD_PROCESS_CODE ,
      T.RESPONDED_ON           = V.RESPONDED_ON ,
      T.REFERENCE_PROC_ID      = V.REFERENCE_PROC_ID ,
      T.REFERENCE_METRIC_ID    = V.REFERENCE_METRIC_ID ,
      T.QUESTIONNAIRE_ID       = V.QUESTIONNAIRE_ID ,
      T.OVERALL_SCORE          = V.OVERALL_SCORE ,
      T.OVERALL_GRADE          = V.OVERALL_GRADE ,
      T.INITIATED_BY           = V.INITIATED_BY ,
      t.responded_by           = v.responded_by,
      T.reporting_period           = V.reporting_period ,
      T.cert_result_status_flag      = V.cert_result_status_flag ,
      T.OVERALL_APPROVER    = V.OVERALL_APPROVER ,
      T.context_field_4       = V.context_field_4 ,
      T.context_field_5          = V.context_field_5 ,
      T.context_field_6          = V.context_field_6 ,
      t.collaboration_users_disp           = v.collaboration_users_disp ,
      T.applies_to_object_code           = V.applies_to_object_code 
      WHEN NOT MATCHED THEN
    INSERT
      (
        DD_STATUS_FLAG ,
        T.QUE_RESPONSE_ID ,
        T.QUE_REQUEST_ID ,
        T.QUE_REQUEST_NAME ,
        T.DUE_DATE ,
        T.APPLIES_TO ,
        T.APPLIES_TO_OBJECT ,
        T.CONTEXT_FIELD_1 ,
        T.CONTEXT_FIELD_2 ,
        T.CONTEXT_FIELD_3 ,
        T.RESPONDENT ,
        T.INSTRUCTIONS ,
        T.CERTIFICATION_TEXT ,
        T.CERTIFY_FLAG ,
        T.CERTIFIED_BY ,
        T.CERTIFICATION_COMMENT ,
        T.SUBMIT_ACTION ,
        T.ACTION_COMMENTS ,
        T.RESPONSE_APPROVER ,
        T.RESP_STATUS ,
        T.DD_OBJECT_TYPE ,
        T.DD_CREATED_BY ,
        T.DD_CREATED_ON ,
        T.DD_PROCESS_INSTANCE_ID ,
        T.DD_INSTANCE_ID ,
        T.DD_PROCESS_CODE ,
        T.RESPONDED_ON ,
        T.REFERENCE_PROC_ID ,
        T.REFERENCE_METRIC_ID ,
        T.QUESTIONNAIRE_ID ,
        T.OVERALL_SCORE ,
        T.OVERALL_GRADE ,
        T.INITIATED_BY ,
        T.RESPONDED_BY,
        T.reporting_period,
        T.cert_result_status_flag,
        T.OVERALL_APPROVER,
        T.context_field_4,
        T.context_field_5,
        T.context_field_6,
        t.collaboration_users_disp,
        T.applies_to_object_code
      )
      VALUES
      (
        'Y' ,
        V.QUE_RESPONSE_ID ,
        V.QUE_REQUEST_ID ,
        V.QUE_REQUEST_NAME ,
        V.DUE_DATE ,
        V.APPLIES_TO ,
        V.APPLIES_TO_OBJECT ,
        V.CONTEXT_FIELD_1 ,
        V.CONTEXT_FIELD_2 ,
        V.CONTEXT_FIELD_3 ,
        V.RESPONDENT ,
        V.INSTRUCTIONS ,
        V.CERTIFICATION_TEXT ,
        V.CERTIFY_FLAG ,
        V.CERTIFIED_BY ,
        V.CERTIFICATION_COMMENT ,
        V.SUBMIT_ACTION ,
        V.ACTION_COMMENTS ,
        V.RESPONSE_APPROVER ,
        V.RESP_STATUS ,
        V.DD_OBJECT_TYPE ,
        V.DD_CREATED_BY ,
        SYSDATE ,
        V.DD_PROCESS_INSTANCE_ID ,
        V.DD_INSTANCE_ID ,
        V.DD_PROCESS_CODE ,
        V.RESPONDED_ON ,
        V.REFERENCE_PROC_ID ,
        V.REFERENCE_METRIC_ID ,
        V.QUESTIONNAIRE_ID ,
        V.OVERALL_SCORE ,
        V.OVERALL_GRADE ,
        V.INITIATED_BY ,
        v.responded_by,
        v.reporting_period,
        v.cert_result_status_flag,
        v.OVERALL_APPROVER,
        v.context_field_4,
        v.context_field_5,
        v.context_field_6,
        v.collaboration_users_disp,
        v.applies_to_object_code
      );
    --           DELETE MS_QSM_QUESTNR_RESP_CLU
    --            WHERE QUE_RESPONSE_ID = iop_data.QUE_RESPONSE_ID;
    --
    --        IF length(iop_data.COLLABORATION_USERS) > 0 THEN
    --        INSERT INTO MS_QSM_QUESTNR_RESP_CLU
    --           (
    --                DD_STATUS_FLAG
    --                ,QUE_RESPONSE_ID
    --                ,COLLABORATION_USERS
    --           )
    --           SELECT
    --                'Y'
    --                ,iop_data.QUE_RESPONSE_ID
    --                ,COLUMN_VALUE
    --           FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.COLLABORATION_USERS,',')); --splitting comma seprated values
    --         END IF;
    /* --------------------------------------------------------------------------
    Loading data for related Child object. Data has been loaded into parent table
    -------------------------------------------------------------------------- */
    LV_cntr_2              := 0;
    FOR iop_data_ISS_table IN
    (SELECT FINDING_FK ,
        FINDING_ID ,
        ISSUE_APPROVER ,
        ISSUE_APPROVER_ORG ,
        ISSUE_DETAILS ,
        ISSUE_DISPOSITION ,
        TO_DATE(ISSUE_DUE_DATE,'MM/dd/yyyy HH24:mi:ss') AS ISSUE_DUE_DATE ,
        ISSUE_OWNER ,
        ISSUE_OWNER_ORG ,
        ISSUE_RATING ,
        ISSUE_RECOMENDATIONS ,
        ISSUE_TITLE ,
        ISSUE_TYPE
      FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:iss/msa:row' PASSING LV_xml COLUMNS FINDING_FK VARCHAR2(4000) PATH 'msa:finding_fk' ,FINDING_ID VARCHAR2(4000) PATH 'msa:finding_id' ,ISSUE_APPROVER VARCHAR2(4000) PATH 'msa:issue_approver' ,ISSUE_APPROVER_ORG VARCHAR2(4000) PATH 'msa:issue_approver_org' ,ISSUE_DETAILS CLOB PATH 'msa:issue_details_htm' ,ISSUE_DISPOSITION VARCHAR2(4000) PATH 'msa:issue_disposition' ,ISSUE_DUE_DATE VARCHAR2(40) PATH 'msa:issue_due_date' ,ISSUE_OWNER VARCHAR2(4000) PATH 'msa:issue_owner' ,ISSUE_OWNER_ORG VARCHAR2(4000) PATH 'msa:issue_owner_org' ,ISSUE_RATING VARCHAR2(4000) PATH 'msa:issue_rating' ,ISSUE_RECOMENDATIONS CLOB PATH 'msa:issue_recomendations_htm' ,ISSUE_TITLE VARCHAR2(4000) PATH 'msa:issue_title' ,ISSUE_TYPE VARCHAR2(4000) PATH 'msa:issue_type' )
    )
    LOOP
      LV_cntr_2 := LV_cntr_2 + 1;
      /* --------------------------------------------------------------------------
      To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
      -------------------------------------------------------------------------- */
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG
      (
        LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid
      )
      ;
      IF iop_data_ISS_table.FINDING_FK = iop_data.QUE_RESPONSE_ID THEN
        MERGE INTO MS_QSM_RESP_ISSUE T USING
        (SELECT iop_data_ISS_TABLE.FINDING_ID       AS FINDING_ID ,
            iop_data_ISS_TABLE.FINDING_FK           AS FINDING_FK ,
            iop_data_ISS_TABLE.ISSUE_TITLE          AS ISSUE_TITLE ,
            iop_data_ISS_TABLE.ISSUE_DETAILS        AS ISSUE_DETAILS ,
            iop_data_ISS_TABLE.ISSUE_RATING         AS ISSUE_RATING ,
            iop_data_ISS_TABLE.ISSUE_TYPE           AS ISSUE_TYPE ,
            iop_data_ISS_TABLE.ISSUE_DISPOSITION    AS ISSUE_DISPOSITION ,
            iop_data_ISS_TABLE.ISSUE_RECOMENDATIONS AS ISSUE_RECOMENDATIONS ,
            iop_data_ISS_TABLE.ISSUE_OWNER_ORG      AS ISSUE_OWNER_ORG ,
            iop_data_ISS_TABLE.ISSUE_OWNER          AS ISSUE_OWNER ,
            iop_data_ISS_TABLE.ISSUE_DUE_DATE       AS ISSUE_DUE_DATE ,
            iop_data_ISS_TABLE.ISSUE_APPROVER_ORG   AS ISSUE_APPROVER_ORG ,
            iop_data_ISS_TABLE.ISSUE_APPROVER       AS ISSUE_APPROVER ,
            iop_data.DD_OBJECT_TYPE                 AS DD_OBJECT_TYPE ,
            iop_data.DD_CREATED_BY                  AS DD_CREATED_BY ,
            iop_data.DD_MODIFIED_BY                 AS DD_MODIFIED_BY ,
            iop_data.PROCESS_INSTANCE_ID            AS DD_PROCESS_INSTANCE_ID ,
            iop_data.INSTANCE_ID                    AS DD_INSTANCE_ID ,
            iop_data.DD_PROCESS_CODE                AS DD_PROCESS_CODE
          FROM DUAL
        )
        V ON ( T.FINDING_ID = V.FINDING_ID )
      WHEN MATCHED THEN
        UPDATE
        SET DD_STATUS_FLAG         = 'Y' ,
          T.FINDING_FK             = V.FINDING_FK ,
          T.ISSUE_TITLE            = V.ISSUE_TITLE ,
          T.ISSUE_DETAILS          = V.ISSUE_DETAILS ,
          T.ISSUE_RATING           = V.ISSUE_RATING ,
          T.ISSUE_TYPE             = V.ISSUE_TYPE ,
          T.ISSUE_DISPOSITION      = V.ISSUE_DISPOSITION ,
          T.ISSUE_RECOMENDATIONS   = V.ISSUE_RECOMENDATIONS ,
          T.ISSUE_OWNER_ORG        = V.ISSUE_OWNER_ORG ,
          T.ISSUE_OWNER            = V.ISSUE_OWNER ,
          T.ISSUE_DUE_DATE         = V.ISSUE_DUE_DATE ,
          T.ISSUE_APPROVER_ORG     = V.ISSUE_APPROVER_ORG ,
          T.ISSUE_APPROVER         = V.ISSUE_APPROVER ,
          T.DD_OBJECT_TYPE         = V.DD_OBJECT_TYPE ,
          T.DD_MODIFIED_BY         = V.DD_MODIFIED_BY ,
          T.DD_MODIFIED_ON         = SYSDATE ,
          T.DD_PROCESS_INSTANCE_ID = V.DD_PROCESS_INSTANCE_ID ,
          T.DD_INSTANCE_ID         = V.DD_INSTANCE_ID ,
          T.DD_PROCESS_CODE        = V.DD_PROCESS_CODE WHEN NOT MATCHED THEN
        INSERT
          (
            DD_STATUS_FLAG ,
            T.FINDING_ID ,
            T.FINDING_FK ,
            T.ISSUE_TITLE ,
            T.ISSUE_DETAILS ,
            T.ISSUE_RATING ,
            T.ISSUE_TYPE ,
            T.ISSUE_DISPOSITION ,
            T.ISSUE_RECOMENDATIONS ,
            T.ISSUE_OWNER_ORG ,
            T.ISSUE_OWNER ,
            T.ISSUE_DUE_DATE ,
            T.ISSUE_APPROVER_ORG ,
            T.ISSUE_APPROVER ,
            T.DD_OBJECT_TYPE ,
            T.DD_CREATED_BY ,
            T.DD_CREATED_ON ,
            T.DD_PROCESS_INSTANCE_ID ,
            T.DD_INSTANCE_ID ,
            T.DD_PROCESS_CODE
          )
          VALUES
          (
            'Y' ,
            V.FINDING_ID ,
            V.FINDING_FK ,
            V.ISSUE_TITLE ,
            V.ISSUE_DETAILS ,
            V.ISSUE_RATING ,
            V.ISSUE_TYPE ,
            V.ISSUE_DISPOSITION ,
            V.ISSUE_RECOMENDATIONS ,
            V.ISSUE_OWNER_ORG ,
            V.ISSUE_OWNER ,
            V.ISSUE_DUE_DATE ,
            V.ISSUE_APPROVER_ORG ,
            V.ISSUE_APPROVER ,
            V.DD_OBJECT_TYPE ,
            V.DD_CREATED_BY ,
            SYSDATE ,
            V.DD_PROCESS_INSTANCE_ID ,
            V.DD_INSTANCE_ID ,
            V.DD_PROCESS_CODE
          );
      END IF;
      
      
    END LOOP; --Ending Issue Loop 
      
      
      FOR iop_data_ACT_table IN
      (SELECT ACTION_DESCRIPTION ,
          TO_DATE(ACTION_DUE_DATE,'MM/dd/yyyy HH24:mi:ss') AS ACTION_DUE_DATE ,
          ACTION_FK ,
          ACTION_ID ,
          ACTION_OWNER ,
          ACTION_PRIORITY ,
          ACTION_TITLE ,
          AC_ISSUE_TITLE
        FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:act/msa:row' PASSING LV_xml COLUMNS ACTION_DESCRIPTION CLOB PATH 'msa:action_description_htm' ,ACTION_DUE_DATE VARCHAR2(40) PATH 'msa:action_due_date' ,ACTION_FK VARCHAR2(4000) PATH 'msa:action_fk' ,ACTION_ID VARCHAR2(4000) PATH 'msa:action_id' ,ACTION_OWNER VARCHAR2(4000) PATH 'msa:action_owner' ,ACTION_PRIORITY VARCHAR2(4000) PATH 'msa:action_priority' ,ACTION_TITLE VARCHAR2(4000) PATH 'msa:action_title' ,AC_ISSUE_TITLE VARCHAR2(4000) PATH 'msa:ac_issue_title' )
      )
      LOOP
        
          MERGE INTO MS_QSM_RESP_ACTION T USING
          (SELECT iop_data_ACT_TABLE.ACTION_ID      AS ACTION_ID ,
              iop_data_ACT_TABLE.ACTION_FK          AS ACTION_FK ,
              iop_data_ACT_TABLE.AC_ISSUE_TITLE     AS AC_ISSUE_TITLE ,
              iop_data_ACT_TABLE.ACTION_TITLE       AS ACTION_TITLE ,
              iop_data_ACT_TABLE.ACTION_DESCRIPTION AS ACTION_DESCRIPTION ,
              iop_data_ACT_TABLE.ACTION_OWNER       AS ACTION_OWNER ,
              iop_data_ACT_TABLE.ACTION_PRIORITY    AS ACTION_PRIORITY ,
              iop_data_ACT_TABLE.ACTION_DUE_DATE    AS ACTION_DUE_DATE ,
              iop_data.DD_OBJECT_TYPE               AS DD_OBJECT_TYPE ,
              iop_data.DD_CREATED_BY                AS DD_CREATED_BY ,
              iop_data.DD_MODIFIED_BY               AS DD_MODIFIED_BY ,
              iop_data.PROCESS_INSTANCE_ID          AS DD_PROCESS_INSTANCE_ID ,
              iop_data.INSTANCE_ID                  AS DD_INSTANCE_ID ,
              iop_data.DD_PROCESS_CODE              AS DD_PROCESS_CODE
            FROM DUAL
          )
          V ON ( T.ACTION_ID = V.ACTION_ID )
        WHEN MATCHED THEN
          UPDATE
          SET DD_STATUS_FLAG         = 'Y' ,
            T.ACTION_FK              = V.ACTION_FK ,
            T.AC_ISSUE_TITLE         = V.AC_ISSUE_TITLE ,
            T.ACTION_TITLE           = V.ACTION_TITLE ,
            T.ACTION_DESCRIPTION     = V.ACTION_DESCRIPTION ,
            T.ACTION_OWNER           = V.ACTION_OWNER ,
            T.ACTION_PRIORITY        = V.ACTION_PRIORITY ,
            T.ACTION_DUE_DATE        = V.ACTION_DUE_DATE ,
            T.DD_OBJECT_TYPE         = V.DD_OBJECT_TYPE ,
            T.DD_MODIFIED_BY         = V.DD_MODIFIED_BY ,
            T.DD_MODIFIED_ON         = SYSDATE ,
            T.DD_PROCESS_INSTANCE_ID = V.DD_PROCESS_INSTANCE_ID ,
            T.DD_INSTANCE_ID         = V.DD_INSTANCE_ID ,
            T.DD_PROCESS_CODE        = V.DD_PROCESS_CODE WHEN NOT MATCHED THEN
          INSERT
            (
              DD_STATUS_FLAG ,
              T.ACTION_ID ,
              T.ACTION_FK ,
              T.AC_ISSUE_TITLE ,
              T.ACTION_TITLE ,
              T.ACTION_DESCRIPTION ,
              T.ACTION_OWNER ,
              T.ACTION_PRIORITY ,
              T.ACTION_DUE_DATE ,
              T.DD_OBJECT_TYPE ,
              T.DD_CREATED_BY ,
              T.DD_CREATED_ON ,
              T.DD_PROCESS_INSTANCE_ID ,
              T.DD_INSTANCE_ID ,
              T.DD_PROCESS_CODE
            )
            VALUES
            (
              'Y' ,
              V.ACTION_ID ,
              V.ACTION_FK ,
              V.AC_ISSUE_TITLE ,
              V.ACTION_TITLE ,
              V.ACTION_DESCRIPTION ,
              V.ACTION_OWNER ,
              V.ACTION_PRIORITY ,
              V.ACTION_DUE_DATE ,
              V.DD_OBJECT_TYPE ,
              V.DD_CREATED_BY ,
              SYSDATE ,
              V.DD_PROCESS_INSTANCE_ID ,
              V.DD_INSTANCE_ID ,
              V.DD_PROCESS_CODE
            );

       
      END LOOP; --Ending Action Loop

    /* --------------------------------------------------------------------------
    Loading data for related Child object. Data has been loaded into parent table
    -------------------------------------------------------------------------- */
    LV_cntr_2              := 0;
    FOR iop_data_SEC_table IN
    (SELECT OPTIONAL_SECTION ,
        SECTION_FK ,
        SECTION_ID ,
        SECTION_NAME ,
        SECTION_WEIGHTAGE ,
        SEC_GRADE ,
        WEIGHTED_SCORE
      FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:sec/msa:row' PASSING LV_xml COLUMNS OPTIONAL_SECTION VARCHAR2(4000) PATH 'msa:optional_section' ,SECTION_FK VARCHAR2(4000) PATH 'msa:section_fk' ,SECTION_ID VARCHAR2(4000) PATH 'msa:section_id' ,SECTION_NAME VARCHAR2(4000) PATH 'msa:section_name' ,SECTION_WEIGHTAGE NUMBER PATH 'msa:section_weightage' ,SEC_GRADE VARCHAR2(4000) PATH 'msa:sec_grade' ,WEIGHTED_SCORE NUMBER PATH 'msa:weighted_score' )
    )
    LOOP
      LV_cntr_2 := LV_cntr_2 + 1;
      /* --------------------------------------------------------------------------
      To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
      -------------------------------------------------------------------------- */
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG
      (
        LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid
      )
      ;
     -- insert into test1 values (iop_data_SEC_table.SECTION_FK,iop_data.QUE_RESPONSE_ID,iop_data_SEC_TABLE.SECTION_ID);
   --   commit;
      IF iop_data_SEC_table.SECTION_FK = iop_data.QUE_RESPONSE_ID THEN
        MERGE INTO MS_QSM_RESP_SECTION T USING
        (SELECT iop_data_SEC_TABLE.SECTION_ID    AS SECTION_ID ,
            iop_data_SEC_TABLE.SECTION_FK        AS SECTION_FK ,
            iop_data_SEC_TABLE.SECTION_NAME      AS SECTION_NAME ,
            iop_data_SEC_TABLE.OPTIONAL_SECTION  AS OPTIONAL_SECTION ,
            iop_data_SEC_TABLE.SECTION_WEIGHTAGE AS SECTION_WEIGHTAGE ,
            iop_data_SEC_TABLE.WEIGHTED_SCORE    AS WEIGHTED_SCORE ,
            iop_data_SEC_TABLE.SEC_GRADE         AS SEC_GRADE ,
            iop_data.DD_OBJECT_TYPE              AS DD_OBJECT_TYPE ,
            iop_data.DD_CREATED_BY               AS DD_CREATED_BY ,
            iop_data.DD_MODIFIED_BY              AS DD_MODIFIED_BY ,
            iop_data.PROCESS_INSTANCE_ID         AS DD_PROCESS_INSTANCE_ID ,
            iop_data.INSTANCE_ID                 AS DD_INSTANCE_ID ,
            iop_data.DD_PROCESS_CODE             AS DD_PROCESS_CODE
          FROM DUAL
        )
        V ON ( T.SECTION_ID = V.SECTION_ID AND T.SECTION_FK = V.SECTION_FK -- Added By Jamsheed
        )
      WHEN MATCHED THEN
        UPDATE
        SET DD_STATUS_FLAG = 'Y'
          --                                    , T.SECTION_FK                             = V.SECTION_FK  -- Commented By Jamsheed
          ,
          T.SECTION_NAME           = V.SECTION_NAME ,
          T.OPTIONAL_SECTION       = V.OPTIONAL_SECTION ,
          T.SECTION_WEIGHTAGE      = V.SECTION_WEIGHTAGE ,
          T.WEIGHTED_SCORE         = V.WEIGHTED_SCORE ,
          T.SEC_GRADE              = V.SEC_GRADE ,
          T.DD_OBJECT_TYPE         = V.DD_OBJECT_TYPE ,
          T.DD_MODIFIED_BY         = V.DD_MODIFIED_BY ,
          T.DD_MODIFIED_ON         = SYSDATE ,
          T.DD_PROCESS_INSTANCE_ID = V.DD_PROCESS_INSTANCE_ID ,
          T.DD_INSTANCE_ID         = V.DD_INSTANCE_ID ,
          T.DD_PROCESS_CODE        = V.DD_PROCESS_CODE WHEN NOT MATCHED THEN
        INSERT
          (
            DD_STATUS_FLAG ,
            T.SECTION_ID ,
            T.SECTION_FK ,
            T.SECTION_NAME ,
            T.OPTIONAL_SECTION ,
            T.SECTION_WEIGHTAGE ,
            T.WEIGHTED_SCORE ,
            T.SEC_GRADE ,
            T.DD_OBJECT_TYPE ,
            T.DD_CREATED_BY ,
            T.DD_CREATED_ON ,
            T.DD_PROCESS_INSTANCE_ID ,
            T.DD_INSTANCE_ID ,
            T.DD_PROCESS_CODE
          )
          VALUES
          (
            'Y' ,
            V.SECTION_ID ,
            V.SECTION_FK ,
            V.SECTION_NAME ,
            V.OPTIONAL_SECTION ,
            V.SECTION_WEIGHTAGE ,
            V.WEIGHTED_SCORE ,
            V.SEC_GRADE ,
            V.DD_OBJECT_TYPE ,
            V.DD_CREATED_BY ,
            SYSDATE ,
            V.DD_PROCESS_INSTANCE_ID ,
            V.DD_INSTANCE_ID ,
            V.DD_PROCESS_CODE
          );
      END IF;
      
       
    END LOOP; --Ending Section Loop
      
      
      FOR iop_data_QST_table IN
      (SELECT CHECK_RESPONSE ,
          HAS_SUB_QUESTIONS ,
          QST_PARENT_TYPE ,
          QUESTION_DESCRIPTION ,
          QUESTION_FK ,
          QUESTION_ID ,
          QUESTION_PK ,
          QUESTION_NAME ,
          QUESTION_SEC_ID ,
          QUESTION_TYPE ,
          RESPONSE_TYPE ,
          RESP_CLOB ,
          RESP_COMMENTS ,
          TO_DATE(RESP_DATE,'MM/dd/yyyy HH24:mi:ss') AS RESP_DATE ,
          RESP_DD ,
          RESP_GRADE ,
          RESP_MLOV ,
          RESP_NUMBER ,
          RESP_RADIO ,
          RESP_SCORE ,
          RESP_TARGET ,
          RESP_WEIGHTED_SCORE ,
          QST_RESPONSE_ID -- Added by jamsheed
          ,
          RESP_ATTACHMENT ,
          REFERENCE_PID ,
          QST_WEIGHTAGE ,
          QST_OPTIONAL ,
          DEFAULT_SCORE,
          COND_APP_REQ_FLAG,
          qst_json_value,
          resp_sprd,
          LIST_OF_VALUES_HIDDEN,
          qst_infolet_scoring,
          QST_TRIGER_SCR_INFOLET,
          response_field,
          APPROVER_COMMENT,
          RESP_REQ_APPROVAL,
          resp_req_action,
          resp_action_plan,
          resp_radio_b,
          resp_checkbox,
          checkbox_hidden_value
        from xmltable(xmlnamespaces('http://www.metricstream.com/appstudio/msa' as "msa"), 'msa:datapacket/msa:data/msa:qst/msa:row' passing lv_xml columns check_response varchar2(4000) path 'msa:check_response' ,has_sub_questions varchar2(4000) path 'msa:has_sub_questions' ,qst_parent_type varchar2(4000) path 'msa:qst_parent_type' ,question_description varchar2(4000) path 'msa:question_description' ,question_fk varchar2(4000) path 'msa:question_fk' ,question_id varchar2(4000) path 'msa:question_id' ,question_pk varchar2(4000) path 'msa:question_pk' ,question_name varchar2(4000) path 'msa:question_name' ,question_sec_id varchar2(4000) path 'msa:question_sec_id' ,question_type varchar2(4000) path 'msa:question_type' ,response_type varchar2(4000) path 'msa:response_type' ,resp_clob varchar2(4000) path 'msa:resp_clob' ,resp_comments varchar2(4000) path 'msa:resp_comments' ,resp_date varchar2(40) path 'msa:resp_date' ,resp_dd varchar2(4000) path 'msa:resp_dd' ,resp_grade varchar2(4000)
          PATH 'msa:resp_grade' ,RESP_MLOV                                                                                                                                 VARCHAR2(4000) PATH 'msa:resp_mlov' ,RESP_NUMBER NUMBER PATH 'msa:resp_number' ,RESP_RADIO VARCHAR2(4000) PATH 'msa:resp_radio' ,RESP_SCORE NUMBER PATH 'msa:resp_score' ,RESP_TARGET NUMBER PATH 'msa:resp_target' ,RESP_WEIGHTED_SCORE NUMBER PATH 'msa:resp_weighted_score' ,QST_RESPONSE_ID VARCHAR2(255) PATH 'msa:qst_response_id' ,RESP_ATTACHMENT VARCHAR2(4000) PATH 'msa:resp_attachment' ,REFERENCE_PID VARCHAR2(255) PATH 'msa:reference_pid' ,QST_WEIGHTAGE NUMBER PATH 'msa:qst_weightage' ,QST_OPTIONAL VARCHAR2(10) PATH 'msa:qst_optional' ,DEFAULT_SCORE NUMBER PATH 'msa:default_score',
          cond_app_req_flag varchar2(255) path 'msa:cond_app_req_flag',
                qst_json_value varchar2(4000) path 'msa:qst_json_value',
                resp_sprd varchar2(4000) path 'msa:resp_sprd',
                list_of_values_hidden varchar2(4000) path 'msa:list_of_values_hidden',
                qst_infolet_scoring varchar2(255) path 'msa:qst_infolet_scoring',
                qst_triger_scr_infolet varchar2(255) path 'msa:qst_triger_scr_infolet',
                response_field varchar2(4000) path 'msa:response_field',
                approver_comment varchar2(4000) path 'msa:approver_comment',
                resp_req_approval varchar2(4000) path 'msa:resp_req_approval',
                resp_req_action varchar2(4000) path 'msa:resp_req_action',
                resp_action_plan varchar2(4000) path 'msa:resp_action_plan',
                resp_radio_b varchar2(4000) path 'msa:resp_radio_b'     ,
                resp_checkbox varchar2(4000) path 'msa:resp_checkbox',
                checkbox_hidden_value varchar2(4000) path 'msa:checkbox_hidden_value')
      )
      LOOP
        LV_cntr_2 := LV_cntr_2 + 1;
        /* ------------------------------------------------------------------------
        To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
        ------------------------------------------------------------------------ */
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG
        (
          LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Processing Record : iop_data(' || LV_cntr_1 || ').QST_TABLE(' || LV_cntr_2 || ')', ip_pid
        )
        ;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG
        (
          LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid
        )
        ;
          
       --   insert into test1 values ('a'||'    '||iop_data_QST_TABLE.QUESTION_PK,iop_data_QST_table.QST_RESPONSE_ID,null);
       --   commit;
        
          MERGE INTO MS_QSM_RESP_QUESTION T USING
          (SELECT iop_data_QST_TABLE.QUESTION_ID      AS QUESTION_ID ,
              iop_data_QST_TABLE.QUESTION_PK          AS QUESTION_PK ,
              iop_data_QST_TABLE.QUESTION_FK          AS QUESTION_FK ,
              iop_data_QST_TABLE.QUESTION_SEC_ID      AS QUESTION_SEC_ID ,
              iop_data_QST_TABLE.QST_PARENT_TYPE      AS QST_PARENT_TYPE ,
              iop_data_QST_TABLE.QUESTION_TYPE        AS QUESTION_TYPE ,
              iop_data_QST_TABLE.QUESTION_NAME        AS QUESTION_NAME ,
              iop_data_QST_TABLE.QUESTION_DESCRIPTION AS QUESTION_DESCRIPTION ,
              iop_data_QST_TABLE.HAS_SUB_QUESTIONS    AS HAS_SUB_QUESTIONS ,
              iop_data_QST_TABLE.CHECK_RESPONSE       AS CHECK_RESPONSE ,
              iop_data_QST_TABLE.RESPONSE_TYPE        AS RESPONSE_TYPE ,
              iop_data_QST_TABLE.RESP_NUMBER          AS RESP_NUMBER ,
              iop_data_QST_TABLE.RESP_DATE            AS RESP_DATE ,
              iop_data_QST_TABLE.RESP_CLOB            AS RESP_CLOB ,
              iop_data_QST_TABLE.RESP_SCORE           AS RESP_SCORE ,
              iop_data_QST_TABLE.RESP_TARGET          AS RESP_TARGET ,
              iop_data_QST_TABLE.RESP_WEIGHTED_SCORE  AS RESP_WEIGHTED_SCORE ,
              iop_data_QST_TABLE.RESP_GRADE           AS RESP_GRADE ,
              iop_data_QST_TABLE.RESP_COMMENTS        AS RESP_COMMENTS ,
              iop_data_QST_TABLE.RESP_DD              AS RESP_DD ,
              iop_data_QST_TABLE.RESP_RADIO           AS RESP_RADIO ,
              iop_data.DD_OBJECT_TYPE                 AS DD_OBJECT_TYPE ,
              iop_data.DD_CREATED_BY                  AS DD_CREATED_BY ,
              iop_data.DD_MODIFIED_BY                 AS DD_MODIFIED_BY ,
              iop_data.PROCESS_INSTANCE_ID            AS DD_PROCESS_INSTANCE_ID ,
              iop_data.INSTANCE_ID                    AS DD_INSTANCE_ID ,
              iop_data.DD_PROCESS_CODE                AS DD_PROCESS_CODE ,
              iop_data_QST_table.QST_RESPONSE_ID      AS QST_RESPONSE_ID ,
              iop_data_QST_table.RESP_ATTACHMENT      AS RESP_ATTACHMENT ,
              iop_data_QST_table.REFERENCE_PID        AS REFERENCE_PID ,
              iop_data_QST_table.QST_WEIGHTAGE        AS QST_WEIGHTAGE ,
              iop_data_QST_table.QST_OPTIONAL         AS QST_OPTIONAL ,
              iop_data_QST_table.DEFAULT_SCORE        AS DEFAULT_SCORE,
              iop_data_QST_table.cond_app_req_flag            AS cond_app_req_flag ,
              iop_data_QST_table.qst_json_value                    AS qst_json_value ,
              iop_data_QST_table.resp_sprd                AS resp_sprd ,
              iop_data_QST_table.list_of_values_hidden      AS list_of_values_hidden ,
              iop_data_QST_table.qst_infolet_scoring      AS qst_infolet_scoring ,
              iop_data_QST_table.qst_triger_scr_infolet        AS qst_triger_scr_infolet ,
              iop_data_QST_table.response_field        AS response_field ,
              iop_data_QST_table.approver_comment         AS approver_comment ,
              iop_data_QST_table.resp_req_approval        AS resp_req_approval,
              iop_data_qst_table.resp_req_action         as resp_req_action ,
              iop_data_qst_table.resp_action_plan  as resp_action_plan,
              iop_data_qst_table.resp_radio_b as resp_radio_b,
              iop_data_qst_table.resp_checkbox as resp_checkbox,
              iop_data_qst_table.checkbox_hidden_value as checkbox_hidden_value
            FROM DUAL
          )
          V ON ( T.QUESTION_PK = V.QUESTION_PK AND T.QST_RESPONSE_ID =V.QST_RESPONSE_ID -- Added By Jamsheed
          )
        WHEN MATCHED THEN
          UPDATE
          SET DD_STATUS_FLAG         = 'Y' ,
            T.QUESTION_FK            = V.QUESTION_FK ,
            T.QUESTION_SEC_ID        = V.QUESTION_SEC_ID ,
            T.QST_PARENT_TYPE        = V.QST_PARENT_TYPE ,
            T.QUESTION_TYPE          = V.QUESTION_TYPE ,
            T.QUESTION_NAME          = V.QUESTION_NAME ,
            T.QUESTION_DESCRIPTION   = V.QUESTION_DESCRIPTION ,
            T.HAS_SUB_QUESTIONS      = V.HAS_SUB_QUESTIONS ,
            T.CHECK_RESPONSE         = V.CHECK_RESPONSE ,
            T.RESPONSE_TYPE          = V.RESPONSE_TYPE ,
            T.RESP_NUMBER            = V.RESP_NUMBER ,
            T.RESP_DATE              = V.RESP_DATE ,
            T.RESP_CLOB              = V.RESP_CLOB ,
            T.RESP_SCORE             = V.RESP_SCORE ,
            T.RESP_TARGET            = V.RESP_TARGET ,
            T.RESP_WEIGHTED_SCORE    = V.RESP_WEIGHTED_SCORE ,
            T.RESP_GRADE             = V.RESP_GRADE ,
            T.RESP_COMMENTS          = V.RESP_COMMENTS ,
            T.RESP_DD                = V.RESP_DD ,
            T.RESP_RADIO             = V.RESP_RADIO ,
            T.DD_OBJECT_TYPE         = V.DD_OBJECT_TYPE ,
            T.DD_MODIFIED_BY         = V.DD_MODIFIED_BY ,
            T.DD_MODIFIED_ON         = SYSDATE ,
            T.DD_PROCESS_INSTANCE_ID = V.DD_PROCESS_INSTANCE_ID ,
            T.DD_INSTANCE_ID         = V.DD_INSTANCE_ID ,
            T.DD_PROCESS_CODE        = V.DD_PROCESS_CODE ,
            T.RESP_ATTACHMENT        = V.RESP_ATTACHMENT ,
            T.REFERENCE_PID          =V.REFERENCE_PID ,
            T.QST_WEIGHTAGE          =V.QST_WEIGHTAGE ,
            t.qst_optional           =v.qst_optional ,
            t.default_score          =v.default_score, 
            T.cond_app_req_flag         = V.cond_app_req_flag ,
            T.qst_json_value         = v.qst_json_value ,
            T.resp_sprd = V.resp_sprd ,
            T.list_of_values_hidden         = V.list_of_values_hidden ,
            T.qst_infolet_scoring        = V.qst_infolet_scoring ,
            T.qst_triger_scr_infolet        = V.qst_triger_scr_infolet ,
            T.response_field          =V.response_field ,
            T.approver_comment          =V.approver_comment ,
            t.resp_req_approval           =v.resp_req_approval ,
            t.resp_req_action          =v.resp_req_action ,
            t.resp_action_plan          =v.resp_action_plan,   
            t.resp_radio_b = v.resp_radio_b,
            t.resp_checkbox = v.resp_checkbox,
            t.checkbox_hidden_value = v.checkbox_hidden_value
            WHEN NOT MATCHED THEN
          INSERT
            (
              DD_STATUS_FLAG ,
              T.QUESTION_ID ,
              T.QUESTION_PK ,
              T.QUESTION_FK ,
              T.QUESTION_SEC_ID ,
              T.QST_PARENT_TYPE ,
              T.QUESTION_TYPE ,
              T.QUESTION_NAME ,
              T.QUESTION_DESCRIPTION ,
              T.HAS_SUB_QUESTIONS ,
              T.CHECK_RESPONSE ,
              T.RESPONSE_TYPE ,
              T.RESP_NUMBER ,
              T.RESP_DATE ,
              T.RESP_CLOB ,
              T.RESP_SCORE ,
              T.RESP_TARGET ,
              T.RESP_WEIGHTED_SCORE ,
              T.RESP_GRADE ,
              T.RESP_COMMENTS ,
              T.RESP_DD ,
              T.RESP_RADIO ,
              T.DD_OBJECT_TYPE ,
              T.DD_CREATED_BY ,
              T.DD_CREATED_ON ,
              T.DD_PROCESS_INSTANCE_ID ,
              T.DD_INSTANCE_ID ,
              T.DD_PROCESS_CODE ,
              T.QST_RESPONSE_ID -- Added By Jamsheed
              ,
              T.RESP_ATTACHMENT ,
              T.REFERENCE_PID ,
              T.QST_WEIGHTAGE ,
              T.QST_OPTIONAL ,
              T.DEFAULT_SCORE,
              T.cond_app_req_flag,
              T.qst_json_value,
              T.resp_sprd,
              t.list_of_values_hidden,
              T.qst_infolet_scoring,
              T.qst_triger_scr_infolet,
              T.response_field,
              T.approver_comment,
              t.resp_req_approval,
              t.resp_req_action,
              t.resp_action_plan, 
              t.resp_radio_b,
              t.resp_checkbox,
              t.checkbox_hidden_value
            )
            VALUES
            (
              'Y' ,
              V.QUESTION_ID ,
              V.QUESTION_PK ,
              V.QUESTION_FK ,
              V.QUESTION_SEC_ID ,
              V.QST_PARENT_TYPE ,
              V.QUESTION_TYPE ,
              V.QUESTION_NAME ,
              V.QUESTION_DESCRIPTION ,
              V.HAS_SUB_QUESTIONS ,
              V.CHECK_RESPONSE ,
              V.RESPONSE_TYPE ,
              V.RESP_NUMBER ,
              V.RESP_DATE ,
              V.RESP_CLOB ,
              V.RESP_SCORE ,
              V.RESP_TARGET ,
              V.RESP_WEIGHTED_SCORE ,
              V.RESP_GRADE ,
              V.RESP_COMMENTS ,
              V.RESP_DD ,
              V.RESP_RADIO ,
              V.DD_OBJECT_TYPE ,
              V.DD_CREATED_BY ,
              SYSDATE ,
              V.DD_PROCESS_INSTANCE_ID ,
              V.DD_INSTANCE_ID ,
              V.DD_PROCESS_CODE ,
              V.QST_RESPONSE_ID ,
              V.RESP_ATTACHMENT ,
              V.REFERENCE_PID ,
              V.QST_WEIGHTAGE ,
              V.QST_OPTIONAL ,
              V.DEFAULT_SCORE,
              v.cond_app_req_flag,
              v.qst_json_value,
              V.resp_sprd,
              V.list_of_values_hidden,
              V.qst_infolet_scoring,
              V.qst_triger_scr_infolet,
              V.response_field,
              V.approver_comment,
              V.resp_req_approval,
              v.resp_req_action,
              V.resp_action_plan,
              v.resp_radio_b,
              v.resp_checkbox,
              v.checkbox_hidden_value
            );
          --INSERT INTO RESPONSE MLOV FIELD
          DELETE MS_QSM_RESP_QUESTION_RML
          WHERE QST_RESPONSE_ID = iop_data_QST_table.QST_RESPONSE_ID
          and QUESTION_PK       =IOP_DATA_QST_TABLE.QUESTION_PK;
          
          if IOP_DATA_QST_TABLE.RESP_MLOV is not null then
          
              INSERT
              INTO MS_QSM_RESP_QUESTION_RML
                (
                  DD_STATUS_FLAG,
                  QST_RESPONSE_ID,
                  QUESTION_PK,
                  RESP_MLOV
                )
              SELECT 'Y',
                iop_data_QST_table.QST_RESPONSE_ID,
                iop_data_QST_table.QUESTION_PK,
                COLUMN_VALUE
              FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data_QST_table.RESP_MLOV, ','));
          
          ELSIF IOP_DATA_QST_TABLE.CHECKBOX_HIDDEN_VALUE IS NOT NULL THEN
          
              INSERT
              INTO MS_QSM_RESP_QUESTION_RML
                (
                  DD_STATUS_FLAG,
                  QST_RESPONSE_ID,
                  QUESTION_PK,
                  RESP_MLOV
                )
              SELECT 'Y',
                iop_data_QST_table.QST_RESPONSE_ID,
                iop_data_QST_table.QUESTION_PK,
                COLUMN_VALUE
              from table(MS_APPS_UTILITIES.SPLIT_STRING(IOP_DATA_QST_TABLE.CHECKBOX_HIDDEN_VALUE, ','));
          END IF;        
      END LOOP; --Ending Question Loop
     
    LV_cntr_2 := 0;
  END LOOP; -- Ending response loop
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ETL END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] END ', ip_pid);
EXCEPTION
WHEN OTHERS THEN
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ERROR AT '||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, ip_pid);
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] SQLCODE : ' || SQLCODE , ip_pid);
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , ip_pid);
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Calling Rollback ', ip_pid);
  dbms_output.put_line('error' || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  --ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
  op_error_code    := -1;
  op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
END RESPONSE_CALL_ETL;
PROCEDURE ISSUES_CALL_ETL(
    iop_xml_data IN OUT NOCOPY CLOB,
    iop_log_no   IN OUT NUMBER,
    op_error_code OUT NUMBER,
    op_error_message OUT VARCHAR2,
    iop_error_seq IN OUT NUMBER,
    ip_pid        IN NUMBER )
AS
  /* --------------------------------------------------------------------------
  ETL procedure created by the ETL Engine of APP BUILDER.
  The procedure takes care of loading the data that is sent
  by the FLOW BUILDER and store the same in MS TABLES.
  Data is already processed and stored accordingly in the iop_data
  object structure. The object can have one or more records.
  The ETL is designed to take care of one or more records.
  If the data has to be manipulated before populating the main
  MS TABLES, please use the HOOKS that are generated by the
  FLOW BUILDER.
  -------------------------------------------------------------------------- */
  LV_progress VARCHAR2(3) := NULL;
  LV_cntr_1   NUMBER      := NULL;
  LV_cntr_2   NUMBER      := NULL;
  LV_debug    BOOLEAN     := FALSE;
  LV_XML XMLTYPE          := XMLTYPE(iop_xml_data);
  LV_err_code     NUMBER      := NULL;
  LV_err_msg      VARCHAR2(4000);
  lV_program_name VARCHAR2(100);
  GC_package_name VARCHAR2(100):= 'ISSUES_CALL_ETL';
  /* --------------------------------------------------------------------------
  CURSOR to get the next log no to log all the activities done
  by the ETL procedure.
  -------------------------------------------------------------------------- */
  CURSOR LC_get_app_log_no
  IS
    SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
      --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
      AS APP_LOG_NO
    FROM DUAL;
  LV_log_no LC_get_app_log_no%ROWTYPE;
BEGIN
  /* --------------------------------------------------------------------------
  Start of the procedure.
  -------------------------------------------------------------------------- */
  /* --------------------------------------------------------------------------
  Note: Defining SAVEPOINT TO ROLLBACK transactions done by ETL.
  -------------------------------------------------------------------------- */
  SAVEPOINT MS_APPS_ETL_SAVEPOINT;
  /* --------------------------------------------------------------------------
  Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
  the activity performed by this routine
  -------------------------------------------------------------------------- */
  LV_progress      := '001';
  op_error_code    := 0;
  op_error_message := '';
  lV_program_name  := 'CALL_ETL';
  /* --------------------------------------------------------------------------
  Note: Default DEBUG FLAG is set to FALSE to avoid unneccessary logging of data.
  If any issues found in ETL, to understand what goes into the ETL
  then set this variable to TRUE and run the ETL in the flow.
  It allows to log the entire relevant data set.
  -------------------------------------------------------------------------- */
  LV_debug := FALSE;
  /* --------------------------------------------------------------------------
  Fetch the App log seq no to log activities.
  -------------------------------------------------------------------------- */
  IF iop_log_no IS NULL THEN
    OPEN LC_get_app_log_no;
    FETCH LC_get_app_log_no
    INTO LV_log_no;
    CLOSE LC_get_app_log_no;
    iop_log_no := LV_log_no.APP_LOG_NO;
  ELSE
    LV_log_no.APP_LOG_NO := iop_log_no;
  END IF;
  --        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
  --        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);
  --        UPDATE_HIERARCHY
  --        (
  --           iop_log_no          => LV_log_no.APP_LOG_NO,
  --           iop_xml             => LV_XML,
  --           op_error_code       => LV_err_code,
  --           op_error_message    => LV_err_msg,
  --           iop_error_sequence  => iop_error_seq,
  --           ip_pid              => ip_pid
  --        );
  IF(LV_err_code !=0) THEN
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'W','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Failed while updating Hierarchy ', ip_pid);
  END IF;
  LV_cntr_1 := 0;
  /* --------------------------------------------------------------------------
  Cursor to fetch non multirow details from XML
  -------------------------------------------------------------------------- */
  FOR iop_data IN
  (SELECT INSTANCE_ID ,
    METRIC_ID ,
    TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss')       AS METRIC_RUN_DATE ,
    TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE ,
    LATEST_FLAG ,
    CREATED_BY ,
    TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE ,
    PROCESS_FLOW_STATUS ,
    PROCESS_INSTANCE_ID ,
    ELECTRONICALLY_SIGNED ,
    INSTANCE_REC_NUM ,
    DD_EVENT_USER_NAME ,
    DD_CURRENT_USER_NAME ,
    DD_OBJECT_TYPE ,
    DD_PROCESS_CODE ,
    FINDING_ISSUES_PK ,
    QUE_REQUEST_NAME ,
    QUE_RESPONSE_ID ,
    RTF_ATTACH
  FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:nonmultirow' PASSING LV_XML COLUMNS INSTANCE_ID NUMBER PATH 'msa:instance_id' ,METRIC_ID NUMBER PATH 'msa:metric_id' ,METRIC_RUN_DATE VARCHAR2(40) PATH 'msa:metric_run_date' ,METRIC_COMPLETED_DATE VARCHAR2(40) PATH 'msa:metric_completed_date' ,LATEST_FLAG VARCHAR2(1) PATH 'msa:latest_flag' ,CREATED_BY NUMBER PATH 'msa:created_by' ,CREATION_DATE VARCHAR2(40) PATH 'msa:creation_date' ,PROCESS_FLOW_STATUS NUMBER PATH 'msa:process_flow_status' ,PROCESS_INSTANCE_ID NUMBER PATH 'msa:process_instance_id' ,ELECTRONICALLY_SIGNED NUMBER PATH 'msa:electronically_signed' ,INSTANCE_REC_NUM NUMBER PATH 'msa:instance_rec_num' ,DD_EVENT_USER_NAME VARCHAR2(4000) PATH 'msa:dd_event_user_name' ,DD_CURRENT_USER_NAME VARCHAR2(4000) PATH 'msa:dd_current_user_name' ,DD_OBJECT_TYPE VARCHAR2(4000) PATH 'msa:dd_object_type' ,DD_PROCESS_CODE VARCHAR2(4000) PATH 'msa:dd_process_code' ,
    FINDING_ISSUES_PK                                                                                                                                             VARCHAR2(4000) PATH 'msa:finding_issues_pk' ,QUE_REQUEST_NAME VARCHAR2(4000) PATH 'msa:que_request_name' ,QUE_RESPONSE_ID VARCHAR2(4000) PATH 'msa:que_response_id' ,RTF_ATTACH VARCHAR2(4000) PATH 'msa:rtf_attach' )
  )
  LOOP
    LV_cntr_1 := LV_cntr_1 + 1;
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Data Found in iop_data. ', ip_pid);
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Processing Record : iop_data(' || LV_cntr_1 || ')', ip_pid);
    /* --------------------------------------------------------------------------
    Loop through the data object to load the data into MS tables.
    Header info is being loaded into the system.
    -------------------------------------------------------------------------- */
    /* --------------------------------------------------------------------------
    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
    -------------------------------------------------------------------------- */
    IF LV_debug THEN
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data.FINDING_ISSUES_PK, ip_pid);
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data.QUE_REQUEST_NAME, ip_pid);
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data.QUE_RESPONSE_ID, ip_pid);
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data.RTF_ATTACH, ip_pid);
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data.DD_OBJECT_TYPE, ip_pid);
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] '|| iop_data.INSTANCE_ID, ip_pid);
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data.DD_PROCESS_CODE, ip_pid);
    END IF;
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
    MERGE INTO MS_QSM_FINDING_ISSUES T USING
    (SELECT iop_data.FINDING_ISSUES_PK AS FINDING_ISSUES_PK ,
      iop_data.QUE_REQUEST_NAME        AS QUE_REQUEST_NAME ,
      iop_data.QUE_RESPONSE_ID         AS QUE_RESPONSE_ID ,
      iop_data.RTF_ATTACH              AS RTF_ATTACH ,
      iop_data.DD_OBJECT_TYPE          AS DD_OBJECT_TYPE ,
      iop_data.DD_CURRENT_USER_NAME      AS DD_CREATED_BY ,
      iop_data.DD_CURRENT_USER_NAME    AS DD_MODIFIED_BY ,
      iop_data.PROCESS_INSTANCE_ID     AS DD_PROCESS_INSTANCE_ID ,
      iop_data.INSTANCE_ID             AS DD_INSTANCE_ID ,
      iop_data.DD_PROCESS_CODE         AS DD_PROCESS_CODE
    FROM DUAL
    ) V ON ( T.FINDING_ISSUES_PK = V.FINDING_ISSUES_PK )
  WHEN MATCHED THEN
    UPDATE
    SET DD_STATUS_FLAG         = 'Y' ,
      T.QUE_REQUEST_NAME       = V.QUE_REQUEST_NAME ,
      T.QUE_RESPONSE_ID        = V.QUE_RESPONSE_ID ,
      T.RTF_ATTACH             = V.RTF_ATTACH ,
      T.DD_OBJECT_TYPE         = V.DD_OBJECT_TYPE ,
      T.DD_MODIFIED_BY         = V.DD_MODIFIED_BY ,
      T.DD_MODIFIED_ON         = SYSDATE ,
      T.DD_PROCESS_INSTANCE_ID = V.DD_PROCESS_INSTANCE_ID ,
      T.DD_INSTANCE_ID         = V.DD_INSTANCE_ID ,
      T.DD_PROCESS_CODE        = V.DD_PROCESS_CODE WHEN NOT MATCHED THEN
    INSERT
      (
        DD_STATUS_FLAG ,
        T.FINDING_ISSUES_PK ,
        T.QUE_REQUEST_NAME ,
        T.QUE_RESPONSE_ID ,
        T.RTF_ATTACH ,
        T.DD_OBJECT_TYPE ,
        T.DD_CREATED_BY ,
        T.DD_CREATED_ON ,
        T.DD_PROCESS_INSTANCE_ID ,
        T.DD_INSTANCE_ID ,
        T.DD_PROCESS_CODE
      )
      VALUES
      (
        'Y' ,
        V.FINDING_ISSUES_PK ,
        V.QUE_REQUEST_NAME ,
        V.QUE_RESPONSE_ID ,
        V.RTF_ATTACH ,
        V.DD_OBJECT_TYPE ,
        V.DD_CREATED_BY ,
        SYSDATE ,
        V.DD_PROCESS_INSTANCE_ID ,
        V.DD_INSTANCE_ID ,
        V.DD_PROCESS_CODE
      );
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG
    (
      LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid
    )
    ;
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG
    (
      LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid
    )
    ;
    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY
    (
      LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] CALLING UPDATE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D'
    )
    ;
    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY
    (
      LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Number of records affected in UPDATE : ' || SQL%ROWCOUNT, 'D'
    )
    ;
    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY
    (
      LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] UPDATE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D'
    )
    ;
    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY
    (
      LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] CALLING UPDATE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D'
    )
    ;
    UPDATE MS_QSM_RESP_ISSUE
    SET DD_STATUS_FLAG = 'N'
    WHERE FINDING_FK   = iop_data.QUE_RESPONSE_ID;
    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Number of records affected in UPDATE : ' || SQL%ROWCOUNT, 'D');
    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] UPDATE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
    /* --------------------------------------------------------------------------
    Loading data for related Child object. Data has been loaded into parent table
    -------------------------------------------------------------------------- */
    LV_cntr_2              := 0;
    FOR iop_data_ISS_table IN
    (SELECT FINDING_FK ,
      FINDING_ID ,
      ISSUE_APPROVER ,
      ISSUE_APPROVER_ORG ,
      ISSUE_DETAILS ,
      ISSUE_DISPOSITION ,
      TO_DATE(ISSUE_DUE_DATE,'MM/dd/yyyy HH24:mi:ss') AS ISSUE_DUE_DATE ,
      ISSUE_OWNER ,
      ISSUE_OWNER_ORG ,
      ISSUE_RATING ,
      ISSUE_RECOMENDATIONS ,
      ISSUE_TITLE ,
      ISSUE_TYPE
    FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:iss/msa:row' PASSING LV_xml COLUMNS FINDING_FK VARCHAR2(4000) PATH 'msa:finding_fk' ,FINDING_ID VARCHAR2(4000) PATH 'msa:finding_id' ,ISSUE_APPROVER VARCHAR2(4000) PATH 'msa:issue_approver' ,ISSUE_APPROVER_ORG VARCHAR2(4000) PATH 'msa:issue_approver_org' ,ISSUE_DETAILS VARCHAR2(4000) PATH 'msa:issue_details' ,ISSUE_DISPOSITION VARCHAR2(4000) PATH 'msa:issue_disposition' ,ISSUE_DUE_DATE VARCHAR2(40) PATH 'msa:issue_due_date' ,ISSUE_OWNER VARCHAR2(4000) PATH 'msa:issue_owner' ,ISSUE_OWNER_ORG VARCHAR2(4000) PATH 'msa:issue_owner_org' ,ISSUE_RATING VARCHAR2(4000) PATH 'msa:issue_rating' ,ISSUE_RECOMENDATIONS VARCHAR2(4000) PATH 'msa:issue_recomendations' ,ISSUE_TITLE VARCHAR2(4000) PATH 'msa:issue_title' ,ISSUE_TYPE VARCHAR2(4000) PATH 'msa:issue_type' )
    )
    LOOP
      LV_cntr_2 := LV_cntr_2 + 1;
      /* --------------------------------------------------------------------------
      To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
      -------------------------------------------------------------------------- */
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Processing Record : iop_data(' || LV_cntr_1 || ').ISS_TABLE(' || LV_cntr_2 || ')', ip_pid);
      IF LV_debug THEN
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ISS_TABLE.FINDING_ID, ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ISS_TABLE.FINDING_FK, ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ISS_TABLE.ISSUE_TITLE, ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ISS_TABLE.ISSUE_DETAILS, ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ISS_TABLE.ISSUE_RATING, ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ISS_TABLE.ISSUE_TYPE, ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ISS_TABLE.ISSUE_DISPOSITION, ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ISS_TABLE.ISSUE_RECOMENDATIONS, ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ISS_TABLE.ISSUE_OWNER_ORG, ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ISS_TABLE.ISSUE_OWNER, ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ISS_TABLE.ISSUE_DUE_DATE, ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ISS_TABLE.ISSUE_APPROVER_ORG, ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ISS_TABLE.ISSUE_APPROVER, ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data.DD_OBJECT_TYPE, ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] '|| iop_data.INSTANCE_ID, ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data.DD_PROCESS_CODE, ip_pid);
      END IF;
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
      MERGE INTO MS_QSM_RESP_ISSUE T USING
      (SELECT iop_data_ISS_TABLE.FINDING_ID     AS FINDING_ID ,
        iop_data_ISS_TABLE.FINDING_FK           AS FINDING_FK ,
        iop_data_ISS_TABLE.ISSUE_TITLE          AS ISSUE_TITLE ,
        iop_data_ISS_TABLE.ISSUE_DETAILS        AS ISSUE_DETAILS ,
        iop_data_ISS_TABLE.ISSUE_RATING         AS ISSUE_RATING ,
        iop_data_ISS_TABLE.ISSUE_TYPE           AS ISSUE_TYPE ,
        iop_data_ISS_TABLE.ISSUE_DISPOSITION    AS ISSUE_DISPOSITION ,
        iop_data_ISS_TABLE.ISSUE_RECOMENDATIONS AS ISSUE_RECOMENDATIONS ,
        iop_data_ISS_TABLE.ISSUE_OWNER_ORG      AS ISSUE_OWNER_ORG ,
        iop_data_ISS_TABLE.ISSUE_OWNER          AS ISSUE_OWNER ,
        iop_data_ISS_TABLE.ISSUE_DUE_DATE       AS ISSUE_DUE_DATE ,
        iop_data_ISS_TABLE.ISSUE_APPROVER_ORG   AS ISSUE_APPROVER_ORG ,
        iop_data_ISS_TABLE.ISSUE_APPROVER       AS ISSUE_APPROVER ,
        iop_data.DD_OBJECT_TYPE                 AS DD_OBJECT_TYPE ,
        iop_data.DD_CURRENT_USER_NAME             AS DD_CREATED_BY ,
        iop_data.DD_CURRENT_USER_NAME           AS DD_MODIFIED_BY ,
        iop_data.PROCESS_INSTANCE_ID            AS DD_PROCESS_INSTANCE_ID ,
        iop_data.INSTANCE_ID                    AS DD_INSTANCE_ID ,
        iop_data.DD_PROCESS_CODE                AS DD_PROCESS_CODE
      FROM DUAL
      ) V ON ( T.FINDING_ID = V.FINDING_ID )
    WHEN MATCHED THEN
      UPDATE
      SET DD_STATUS_FLAG         = 'Y' ,
        T.FINDING_FK             = V.FINDING_FK ,
        T.ISSUE_TITLE            = V.ISSUE_TITLE ,
        T.ISSUE_DETAILS          = V.ISSUE_DETAILS ,
        T.ISSUE_RATING           = V.ISSUE_RATING ,
        T.ISSUE_TYPE             = V.ISSUE_TYPE ,
        T.ISSUE_DISPOSITION      = V.ISSUE_DISPOSITION ,
        T.ISSUE_RECOMENDATIONS   = V.ISSUE_RECOMENDATIONS ,
        T.ISSUE_OWNER_ORG        = V.ISSUE_OWNER_ORG ,
        T.ISSUE_OWNER            = V.ISSUE_OWNER ,
        T.ISSUE_DUE_DATE         = V.ISSUE_DUE_DATE ,
        T.ISSUE_APPROVER_ORG     = V.ISSUE_APPROVER_ORG ,
        T.ISSUE_APPROVER         = V.ISSUE_APPROVER ,
        T.DD_OBJECT_TYPE         = V.DD_OBJECT_TYPE ,
        T.DD_MODIFIED_BY         = V.DD_MODIFIED_BY ,
        T.DD_MODIFIED_ON         = SYSDATE ,
        T.DD_PROCESS_INSTANCE_ID = V.DD_PROCESS_INSTANCE_ID ,
        T.DD_INSTANCE_ID         = V.DD_INSTANCE_ID ,
        T.DD_PROCESS_CODE        = V.DD_PROCESS_CODE WHEN NOT MATCHED THEN
      INSERT
        (
          DD_STATUS_FLAG ,
          T.FINDING_ID ,
          T.FINDING_FK ,
          T.ISSUE_TITLE ,
          T.ISSUE_DETAILS ,
          T.ISSUE_RATING ,
          T.ISSUE_TYPE ,
          T.ISSUE_DISPOSITION ,
          T.ISSUE_RECOMENDATIONS ,
          T.ISSUE_OWNER_ORG ,
          T.ISSUE_OWNER ,
          T.ISSUE_DUE_DATE ,
          T.ISSUE_APPROVER_ORG ,
          T.ISSUE_APPROVER ,
          T.DD_OBJECT_TYPE ,
          T.DD_CREATED_BY ,
          T.DD_CREATED_ON ,
          T.DD_PROCESS_INSTANCE_ID ,
          T.DD_INSTANCE_ID ,
          T.DD_PROCESS_CODE
        )
        VALUES
        (
          'Y' ,
          V.FINDING_ID ,
          V.FINDING_FK ,
          V.ISSUE_TITLE ,
          V.ISSUE_DETAILS ,
          V.ISSUE_RATING ,
          V.ISSUE_TYPE ,
          V.ISSUE_DISPOSITION ,
          V.ISSUE_RECOMENDATIONS ,
          V.ISSUE_OWNER_ORG ,
          V.ISSUE_OWNER ,
          V.ISSUE_DUE_DATE ,
          V.ISSUE_APPROVER_ORG ,
          V.ISSUE_APPROVER ,
          V.DD_OBJECT_TYPE ,
          V.DD_CREATED_BY ,
          SYSDATE ,
          V.DD_PROCESS_INSTANCE_ID ,
          V.DD_INSTANCE_ID ,
          V.DD_PROCESS_CODE
        );
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG
      (
        LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid
      )
      ;
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG
      (
        LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid
      )
      ;
      UPDATE MS_QSM_RESP_ACTION
      SET DD_STATUS_FLAG      = 'N'
      WHERE ACTION_FK         = iop_data_ISS_table.FINDING_ID;
      LV_cntr_2              := 0;
      FOR iop_data_ACT_table IN
      (SELECT ACTION_DESCRIPTION ,
        TO_DATE(ACTION_DUE_DATE,'MM/dd/yyyy HH24:mi:ss') AS ACTION_DUE_DATE ,
        ACTION_FK ,
        ACTION_ID ,
        ACTION_OWNER ,
        ACTION_PRIORITY ,
        ACTION_TITLE ,
        AC_ISSUE_TITLE
      FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:act/msa:row' PASSING LV_xml COLUMNS ACTION_DESCRIPTION VARCHAR2(4000) PATH 'msa:action_description' ,ACTION_DUE_DATE VARCHAR2(40) PATH 'msa:action_due_date' ,ACTION_FK VARCHAR2(4000) PATH 'msa:action_fk' ,ACTION_ID VARCHAR2(4000) PATH 'msa:action_id' ,ACTION_OWNER VARCHAR2(4000) PATH 'msa:action_owner' ,ACTION_PRIORITY VARCHAR2(4000) PATH 'msa:action_priority' ,ACTION_TITLE VARCHAR2(4000) PATH 'msa:action_title' ,AC_ISSUE_TITLE VARCHAR2(4000) PATH 'msa:ac_issue_title' )
      WHERE ACTION_FK = iop_data_ISS_table.FINDING_ID
      )
      LOOP
        LV_cntr_2 := LV_cntr_2 + 1;
        /* --------------------------------------------------------------------------
        To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
        -------------------------------------------------------------------------- */
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Processing Record : iop_data(' || LV_cntr_1 || ').ACT_TABLE(' || LV_cntr_2 || ')', ip_pid);
        IF LV_debug THEN
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ACT_TABLE.ACTION_ID, ip_pid);
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ACT_TABLE.ACTION_FK, ip_pid);
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ACT_TABLE.AC_ISSUE_TITLE, ip_pid);
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ACT_TABLE.ACTION_TITLE, ip_pid);
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ACT_TABLE.ACTION_DESCRIPTION, ip_pid);
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ACT_TABLE.ACTION_OWNER, ip_pid);
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ACT_TABLE.ACTION_PRIORITY, ip_pid);
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data_ACT_TABLE.ACTION_DUE_DATE, ip_pid);
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data.DD_OBJECT_TYPE, ip_pid);
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] '|| iop_data.INSTANCE_ID, ip_pid);
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ' || iop_data.DD_PROCESS_CODE, ip_pid);
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
        MERGE INTO MS_QSM_RESP_ACTION T USING
        (SELECT iop_data_ACT_TABLE.ACTION_ID    AS ACTION_ID ,
          iop_data_ACT_TABLE.ACTION_FK          AS ACTION_FK ,
          iop_data_ACT_TABLE.AC_ISSUE_TITLE     AS AC_ISSUE_TITLE ,
          iop_data_ACT_TABLE.ACTION_TITLE       AS ACTION_TITLE ,
          iop_data_ACT_TABLE.ACTION_DESCRIPTION AS ACTION_DESCRIPTION ,
          iop_data_ACT_TABLE.ACTION_OWNER       AS ACTION_OWNER ,
          iop_data_ACT_TABLE.ACTION_PRIORITY    AS ACTION_PRIORITY ,
          iop_data_ACT_TABLE.ACTION_DUE_DATE    AS ACTION_DUE_DATE ,
          iop_data.DD_OBJECT_TYPE               AS DD_OBJECT_TYPE ,
          iop_data.DD_CURRENT_USER_NAME           AS DD_CREATED_BY ,
          iop_data.DD_CURRENT_USER_NAME         AS DD_MODIFIED_BY ,
          iop_data.PROCESS_INSTANCE_ID          AS DD_PROCESS_INSTANCE_ID ,
          iop_data.INSTANCE_ID                  AS DD_INSTANCE_ID ,
          iop_data.DD_PROCESS_CODE              AS DD_PROCESS_CODE
        FROM DUAL
        ) V ON ( T.ACTION_ID = V.ACTION_ID )
      WHEN MATCHED THEN
        UPDATE
        SET DD_STATUS_FLAG         = 'Y' ,
          T.ACTION_FK              = V.ACTION_FK ,
          T.AC_ISSUE_TITLE         = V.AC_ISSUE_TITLE ,
          T.ACTION_TITLE           = V.ACTION_TITLE ,
          T.ACTION_DESCRIPTION     = V.ACTION_DESCRIPTION ,
          T.ACTION_OWNER           = V.ACTION_OWNER ,
          T.ACTION_PRIORITY        = V.ACTION_PRIORITY ,
          T.ACTION_DUE_DATE        = V.ACTION_DUE_DATE ,
          T.DD_OBJECT_TYPE         = V.DD_OBJECT_TYPE ,
          T.DD_MODIFIED_BY         = V.DD_MODIFIED_BY ,
          T.DD_MODIFIED_ON         = SYSDATE ,
          T.DD_PROCESS_INSTANCE_ID = V.DD_PROCESS_INSTANCE_ID ,
          T.DD_INSTANCE_ID         = V.DD_INSTANCE_ID ,
          T.DD_PROCESS_CODE        = V.DD_PROCESS_CODE WHEN NOT MATCHED THEN
        INSERT
          (
            DD_STATUS_FLAG ,
            T.ACTION_ID ,
            T.ACTION_FK ,
            T.AC_ISSUE_TITLE ,
            T.ACTION_TITLE ,
            T.ACTION_DESCRIPTION ,
            T.ACTION_OWNER ,
            T.ACTION_PRIORITY ,
            T.ACTION_DUE_DATE ,
            T.DD_OBJECT_TYPE ,
            T.DD_CREATED_BY ,
            T.DD_CREATED_ON ,
            T.DD_PROCESS_INSTANCE_ID ,
            T.DD_INSTANCE_ID ,
            T.DD_PROCESS_CODE
          )
          VALUES
          (
            'Y' ,
            V.ACTION_ID ,
            V.ACTION_FK ,
            V.AC_ISSUE_TITLE ,
            V.ACTION_TITLE ,
            V.ACTION_DESCRIPTION ,
            V.ACTION_OWNER ,
            V.ACTION_PRIORITY ,
            V.ACTION_DUE_DATE ,
            V.DD_OBJECT_TYPE ,
            V.DD_CREATED_BY ,
            SYSDATE ,
            V.DD_PROCESS_INSTANCE_ID ,
            V.DD_INSTANCE_ID ,
            V.DD_PROCESS_CODE
          );
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG
        (
          LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid
        )
        ;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG
        (
          LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid
        )
        ;
      END LOOP;
      DELETE MS_QSM_RESP_ACTION
      WHERE DD_STATUS_FLAG = 'N'
      AND ACTION_FK        = iop_data_ISS_table.FINDING_ID;
    END LOOP;
    /* --------------------------------------------------------------------------
    Loading data for related Child object. Data has been loaded into parent table
    -------------------------------------------------------------------------- */
    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Number of records affected in DELETE : ' || SQL%ROWCOUNT, 'D');
    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] DELETE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
    DELETE MS_QSM_RESP_ISSUE
    WHERE DD_STATUS_FLAG = 'N'
    AND FINDING_FK       = iop_data.QUE_RESPONSE_ID;
    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Number of records affected in DELETE : ' || SQL%ROWCOUNT, 'D');
    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] DELETE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
  END LOOP;
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ETL END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] END ', ip_pid);
EXCEPTION
WHEN OTHERS THEN
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] ERROR ', ip_pid);
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] SQLCODE : ' || SQLCODE , ip_pid);
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , ip_pid);
  MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Calling Rollback ', ip_pid);
  ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
  op_error_code    := -1;
  op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
end issues_call_etl;

PROCEDURE trigger_survey(
        i_event_log_id      IN ms_apps_event_logs.event_log_id%TYPE,
        i_event_name        IN ms_apps_events.event_name%TYPE,
        i_subscription_name IN ms_apps_event_subscriptions.subscription_name%TYPE,
        i_status            IN PLS_INTEGER,
        i_action_text       IN VARCHAR2,
        o_close_subscription OUT NOCOPY VARCHAR2,
        o_notify_event_owner OUT NOCOPY VARCHAR2,
        o_error_code OUT NOCOPY         NUMBER,
        o_error_message OUT NOCOPY      VARCHAR2)
    AS
      l_incoming_survey CLOB;
      l_out_xml XMLTYPE := NULL;
      l_questionnaire_id       VARCHAR2 (255);
      l_qstnr_path             VARCHAR2 (1000) := 'datapacket/data/nonmultirow/$/text()';
      l_qstnr_metric_id        NUMBER;
      l_que_request_name       VARCHAR2 (255);
      l_sections               VARCHAR2 (4000);
      l_que_applies_to         VARCHAR2 (255);
      l_que_send_to            VARCHAR2 (255);
      l_send_option            VARCHAR2 (100);
      l_send_user_role_disp    varchar2 (4000);
      l_response_approver      VARCHAR2 (4000);
      l_collaborative_response VARCHAR2 (100);
      l_sch_start_date         VARCHAR2 (400);
      l_sch_due_after          VARCHAR2 (400);
      l_instructions           VARCHAR2 (4000);
      l_findings_can_add_by    VARCHAR2 (400);
      l_display_scoring        VARCHAR2 (4000);
      l_level_1_approver       VARCHAR2 (4000);
      l_level_2_approver       VARCHAR2 (4000);
      l_restrict_access_to     VARCHAR2 (4000);
      l_init_comments          VARCHAR2 (4000);
      l_indv_item_field_1      VARCHAR2 (4000);
      l_indv_item_field_2      VARCHAR2 (4000);
      l_indv_item_field_3      VARCHAR2 (4000);
      l_indv_que_send_to       VARCHAR2 (4000);
      l_indv_send_option       VARCHAR2 (4000);
      l_send_to_assessor_disp  VARCHAR2 (4000);
      l_send_to_assessor_org   VARCHAR2 (4000);
      l_indv_resp_approver     VARCHAR2 (4000);
      l_indv_approver_organization VARCHAR2 (4000);
      l_approver_organization VARCHAR2 (4000);
      l_indv_collbortiv_resp   VARCHAR2 (4000);
      xn_error_code            VARCHAR2 (4000);
      xn_error_seq             NUMBER := '9999';
      xn_error_handle_id       NUMBER;
      l_qstnr_pid              NUMBER;
      l_qstnr_iid              NUMBER;
      l_sux PLS_INTEGER := 0;
      l_stage VARCHAR2 (100);
      L_AUTO_CREATE_ISSUE    VARCHAR2(10);--ADDED FOR AUTO CREATE ISSUE REQUIREMENT
      L_CHECK_AUTO_CREATE_ISSUE_FLAG PLS_INTEGER := MS_APPS_UTILITIES.GET_PARAMETER_VALUE (1,'MS_QSM_Configuration','Enable_Auto_Creation_of_Issues');--ADDED FOR AUTO CREATE ISSUE REQUIREMENT
      
  TYPE ty_response
  IS
    TABLE OF VARCHAR2 (32767) INDEX BY BINARY_INTEGER;
  TYPE ty_integration_log
  IS
    TABLE OF ms_qsm_integration_log%ROWTYPE INDEX BY BINARY_INTEGER;
    l_integration_log ty_integration_log;
    l_tab_response ty_response;
    l_err_ind PLS_INTEGER := 1;
    issue_exception     EXCEPTION;
    l_ret_code          VARCHAR2 (100);
    l_response          VARCHAR2 (32767);
    l_source_type       VARCHAR2 (100);
    l_survey_source_ref VARCHAR2 (100);
    l_issue_owner si_users_t.user_name%TYPE;
    l_enterprise_info si_ent.enterprise_name%TYPE;
    l_split_pid             NUMBER;
    l_exists                NUMBER := 0;
    l_final_action_approver VARCHAR2 (10);
    l_counter               NUMBER := 0;
    l_error_message         VARCHAR2 (4000);
    l_owner_org CLOB;
    l_owners CLOB;
    l_level1_approver       VARCHAR2(255);
    l_level2_approver       VARCHAR2(255);
    l_indv_count_n          NUMBER;
    l_que_req_type          VARCHAR2 (4000);
    l_que_request_id        VARCHAR2(4000);
    l_que_type              VARCHAR2(100);
    l_key_col_name          VARCHAR2(100):='N';
    l_dd_current_user_name  VARCHAR2(80);
    lv_user_locale_id       NUMBER;
    l_response_table        VARCHAR2(4000);
    l_event_count           NUMBER;
    l_sch_frequency         VARCHAR2(255);
    l_sch_end_date          VARCHAR2(400);
    l_indv_item_labels      VARCHAR2(4000);
    l_reporting_period_type VARCHAR2(100);
    l_period_id             NUMBER;
    l_sub_certification_for VARCHAR2(255);
    l_overall_app_org CLOB;
    l_overall_approver      VARCHAR2(4000);
    l_close_date            VARCHAR2(400);
    l_manage_survey         VARCHAR2(1);
    l_manage_survey_for_disp_scr         VARCHAR2(1);
    l_indv_item_contact     NUMBER :=0;
    l_publish_request_id    VARCHAR2(255);
    l_reinit_pid            NUMBER;
    l_reinit_iid            NUMBER;
    l_curr_req_name         VARCHAR2(4000);
    l_curr_questionnaire_id VARCHAR2(255) ;
    l_curr_applies_to       VARCHAR2(255) ;
    l_curr_scope_selection  VARCHAR2(255) ;
    l_curr_que_request_type VARCHAR2(255) ;
    l_cuur_frequency        VARCHAR2(255) ;
    l_exst_indv_count       NUMBER;
    l_curr_indv_item_pk     VARCHAR2(255);
    l_user_display          VARCHAR2(4000);
    L_USER_ROLE             varchar2(4000);
    l_send_user_role                   CLOB;
    L_APPLIES_TO                       VARCHAR2(10);
    L_TOT_COUNT                        NUMBER;
    L_QUE_SEND_OPTION                 VARCHAR2(255);
    L_INDV_SEND_OPTION                VARCHAR2(255);
    L_INDV_ITEM_DESC                  VARCHAR2(4000);
    L_DD_EVENT_USER_NAME            VARCHAR2(4000);
    L_DD_CREATED_BY               VARCHAR2(4000);
    l_send_to_approval            varchar2(10);
    l_all_user_approval           varchar2(10);
    l_resp_app_display            varchar2(4000);
    l_excel_based                 varchar2(10);
    l_applies_to_items            clob;
    l_contact_user_available      number;  
    l_fiilter_level               varchar2(10);
    l_field_key                   VARCHAR2(4000);
    
    l_transform_from_cif_payload  VARCHAR2(10);  
    L_XSL            XMLTYPE;
    l_table_exists NUMBER;
  PROCEDURE pr_populate_response(
      i_text VARCHAR2)
  AS
  BEGIN
    EXECUTE IMMEDIATE 'insert into ' || l_response_table || ' values (:1)' USING i_text || ';';
  END;
  BEGIN
    
    select clob_value,text_value
    INTO l_incoming_survey,l_transform_from_cif_payload
    FROM ms_apps_event_param_logs
    WHERE event_log_id = i_event_log_id;
    
     
    l_out_xml         := xmltype (l_incoming_survey);
  -- Modify the l_out_xml to CIF Template section start
     /* check if xml to be modified to support Common Integration Framework */
     IF l_transform_from_cif_payload = 'CIF' THEN
      /*   Get the xml stylesheet for CIF */
        SELECT XMLTYPE(XML)
         INTO L_XSL
        FROM MS_QSM_XML_TEMPLATES
        WHERE KEY='CIF_INBOUND';
      
      /* Transform the Input XML to CIF-XML format in xmltype variable l_out_xml */
        SELECT XMLTRANSFORM(l_out_xml, L_XSL)   
          INTO l_out_xml  
        FROM DUAL;
        
       END IF;
     -- Modify the l_out_xml to CIF Template section end
    
     l_response_table := 'QSM_API_RESPONSE_' || dbms_session.unique_session_id;
    
    SELECT COUNT(1)
    into l_table_exists
    FROM user_tables
    where table_name=l_response_table;
    
    IF l_table_exists >0  THEN
    
      EXECUTE IMMEDIATE 'TRUNCATE TABLE '||l_response_table;
      
    ELSE
      
      EXECUTE IMMEDIATE 'CREATE TABLE QSM_API_RESPONSE_' || DBMS_SESSION.unique_session_id ||' (resp varchar2(1000))';
      
    END IF;
    --l_response_table := 'QSM_API_RESPONSE_' || dbms_session.unique_session_id;
    
    ms_qsm_log_activity ('', 'API XML TABLE'||l_response_table,'');
    
    l_integration_log (1).event_log_id                     := i_event_log_id;
    l_integration_log (1).input_xml                        := l_out_xml;
    l_integration_log(1).received_on                       := sysdate;
    
    IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0) THEN
      ms_qsm_utilities.initialize_metric_maint ('QSM');
    END IF;
    
    l_source_type          := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/survey_source_type/text()');
    l_survey_source_ref    := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/survey_source_ref/text()');
    L_DD_CURRENT_USER_NAME := MS_QSM_UTILITIES.GET_TAG_VALUE (L_OUT_XML, '/datapacket/data/nonmultirow/dd_current_user_name/text()');
    l_dd_event_user_name := ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/dd_event_user_name/text()');
    l_dd_created_by := ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/created_by/text()');
    l_sch_frequency        := nvl(ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/sch_frequency'),'');
    
     SELECT COUNT(1)
                        INTO l_exists
                        FROM MS_QSM_ORG_FLOW_V fdo
                        WHERE USER_NAME = L_DD_EVENT_USER_NAME
                        AND ACTIVITY_NAME = 'QSM - Setup Surveys';
           
     IF l_exists <=0 THEN
          
          L_TAB_RESPONSE (L_ERR_IND) := 'Invalid event user name or user do not have rights to trigger survey';
          l_err_ind := l_err_ind + 1;    
     END IF;
                        
     SELECT COUNT(1)
                  INTO l_exists
                  FROM MS_QSM_ORG_FLOW_V FDO
                  WHERE USER_NAME = L_DD_CURRENT_USER_NAME
                  AND ACTIVITY_NAME = 'QSM - Setup Surveys';
                        
      IF l_exists <=0 THEN
            
            L_TAB_RESPONSE (L_ERR_IND) := 'Invalid current user name or user do not have rights to trigger survey';
            L_ERR_IND := L_ERR_IND + 1;    
            
       END IF;                        
                        
       SELECT COUNT(1)
                    INTO l_exists
                    FROM MS_QSM_ORG_FLOW_V FDO
                    WHERE USER_ID = l_dd_created_by
                    AND ACTIVITY_NAME = 'QSM - Setup Surveys';       
     
      IF l_exists <=0 THEN
            
            L_TAB_RESPONSE (L_ERR_IND) := 'Invalid user name or user do not have rights to trigger survey'||l_dd_created_by;
            L_ERR_IND := L_ERR_IND + 1;    
      end if;
      
      
         /*START OF ADDITION FOR AUTO-CREATE/CLOSE ISSUE REQ*/
   BEGIN
   
   L_AUTO_CREATE_ISSUE := MS_QSM_UTILITIES.GET_TAG_VALUE (L_OUT_XML, 'datapacket/data/nonmultirow/auto_create_issue/text()');
   
   IF (L_AUTO_CREATE_ISSUE = 'yes') AND (L_CHECK_AUTO_CREATE_ISSUE_FLAG = 2) THEN
   L_TAB_RESPONSE (L_ERR_IND) := 'The configuration parameter Enable_Auto_Creation_of_Issues is set to No';
    L_ERR_IND := L_ERR_IND + 1; 
   
   ELSIF L_AUTO_CREATE_ISSUE IS NULL THEN
    ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'auto_create_issue'), 'no');
   END IF;
   
   EXCEPTION
   WHEN OTHERS THEN
    L_TAB_RESPONSE (L_ERR_IND) := 'Auto-create Findings for Overdue Responses should either be yes or no';
    l_err_ind := l_err_ind + 1; 
   END;
   
   /*END OF ADDITION FOR AUTO-CREATE/CLOSE ISSUE REQ*/
      
                    
     L_SCH_FREQUENCY := NVL(MS_QSM_UTILITIES.GET_TAG_VALUE (L_OUT_XML, 'datapacket/data/nonmultirow/sch_frequency'),'');
    
    BEGIN
      
      select enterprise_id
      INTO l_enterprise_info
      FROM si_users_t
      WHERE user_name =l_dd_current_user_name;
    
    exception
    when OTHERS then
                L_TAB_RESPONSE (L_ERR_IND) := 'Invalid Enterprise Name';
                l_err_ind := l_err_ind + 1; 
    END;
    
    if nvl(ms_apps_utilities.get_display_value(l_enterprise_info,'MS_QSM_INTEGRATED_MODULES',l_source_type),'$$') = '$$' then
      l_tab_response (l_err_ind)  := 'Invalid Source Type'||l_source_type;
      l_err_ind := l_err_ind + 1;
    END IF;
    
    IF NVL(MS_APPS_UTILITIES.GET_DISPLAY_VALUE(L_ENTERPRISE_INFO,'MS_QSM_Frequency',l_sch_frequency),'$$') = '$$' THEN
      l_tab_response (l_err_ind) := 'Invalid frequency';
      L_ERR_IND := L_ERR_IND + 1;
    END IF;
    --Infolet Validations Start
    l_manage_survey  := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/manage_survey/text()');
    
     -- added by Gaurav on 16/05/2013 - to support Surveys6.0
    l_manage_survey_for_disp_scr := ms_qsm_utilities.get_tag_value(l_out_xml,'datapacket/data/nonmultirow/manage_survey/text()'); -- added to check if manage survey is null then considering that assignment as surveys6.0 where we did not have manage survey field.
    l_display_scoring := ms_qsm_utilities.get_tag_value(l_out_xml,'datapacket/data/nonmultirow/display_scoring/text()');
   
    IF l_manage_survey IS NULL THEN
      ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'manage_survey'),'2'); --added to support backward compatibility(i.e with Surveys6.0) - MS_QSM_MANAGE_SURVEY (finalize)
      --l_tab_response (l_err_ind) := 'Manage Survey option cannot be blank';
      --l_err_ind                  := l_err_ind + 1;
    END IF;
   
    IF l_manage_survey_for_disp_scr IS NULL THEN -- if empty then consider that its been triggerd for Surveys 6.0
      IF l_display_scoring = '1' THEN -- user is selecting Display Scoring as YES in Surveys6.0
        ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'display_scoring'),'1,2'); --added to support backward compatibility(i.e with Surveys6.0)
        --l_display_scoring := '1,2'; 
      ELSif l_display_scoring = '2' THEN -- user is selecting Display scoring as NO in Surveys6.0
        ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'display_scoring'),''); --added to support backward compatibility(i.e with Surveys6.0)
        --l_display_scoring := '';
      END IF;
    END IF;
    
    L_TOT_COUNT:=0;
    L_EXISTS := 0;
    
  -- End - to support Surveys6.0
    if l_sch_frequency  <> '6' then
      if ((trim (ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/owner_organizations/text()'))) is null ) then
        l_tab_response (l_err_ind) := 'Owner Organizations should not be Empty';
        l_err_ind  := l_err_ind + 1;
      END IF;
      l_owner_org := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/owner_organizations/text()');
      -- Validating the Owner Organizations
      
      L_TOT_COUNT:= LENGTH(TRIM(L_OWNER_ORG))-LENGTH(REPLACE(TRIM(L_OWNER_ORG),',',''))+1;
      
      EXECUTE IMMEDIATE 'select count(1) from ms_qsm_flow_down_org_v where INSTR('',''||:1||'','','',''||org_entity_id||'','') >0' INTO l_exists USING Trim(l_owner_org);
     
      IF L_EXISTS < L_TOT_COUNT  THEN
        l_tab_response (l_err_ind) := 'Some of the Owner Organizations are Invalid';
        L_ERR_IND := L_ERR_IND + 1;
        L_TOT_COUNT :=0;
      ELSE
        L_TOT_COUNT:=0;
        L_EXISTS := 0;
      END IF;
      
      -- Validating the owners
      
      l_owners                 := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/owners/text()');
      
      IF LENGTH(TRIM(l_owners)) > 0 THEN
        EXECUTE IMMEDIATE 'SELECT COUNT(1)                
      FROM MS_QSM_ORG_FLOW_V fdo                
      where ORG_ENTITY_ID in (SELECT COLUMN_VALUE                
      FROM TABLE(ms_apps_utilities.parse_string(:1,'','')))                
      AND ACTIVITY_NAME IN (''QSM - Manage Surveys'' )                
      AND USER_NAME IN (SELECT COLUMN_VALUE                
      FROM TABLE(ms_apps_utilities.parse_string(:2,'',''))) ' INTO l_exists USING l_owner_org,
      L_OWNERS;
      
      IF l_exists                   = 0 THEN
        l_tab_response (l_err_ind) := l_owners || ' is not a valid owner';
        l_err_ind                  := l_err_ind + 1;
      ELSE
        l_exists := 0;
      END IF;
    END IF;
    --validating L1 Approver
    l_level1_approver          := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/level_1_approver/text()');
    
    if trim(l_level1_approver) is not null then
      SELECT COUNT(1)
      INTO l_exists
      FROM MS_QSM_ORG_FLOW_V fdo
      WHERE ORG_ENTITY_ID IN
        (SELECT COLUMN_VALUE
        FROM TABLE(ms_apps_utilities.parse_string(l_owner_org,','))
        )
      AND USER_NAME                 = l_level1_approver
      AND ACTIVITY_NAME             = 'QSM - Approve Surveys';
      if L_EXISTS                   = 0 then
        l_tab_response (l_err_ind) := 'Invalid Level 1 Approver';
        l_err_ind                  := l_err_ind + 1;
      ELSE
        l_exists := 0;
      END IF;
    ELSE
      l_key_col_name :='Y';
    END IF;
    
    --validating L2 Approver
    l_level2_approver          := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/level_2_approver/text()');
    
    IF l_level1_approver IS NULL AND l_level2_approver IS NOT NULL THEN
        
          L_TAB_RESPONSE (L_ERR_IND) := 'Level 2 Approver cannot exist without specifying Level 1 Approver';
          l_err_ind := l_err_ind + 1;
      
    END IF;
    
    if trim(l_level2_approver) is not null then
      SELECT COUNT(1)
      INTO l_exists
      FROM MS_QSM_ORG_FLOW_V fdo
      WHERE ORG_ENTITY_ID IN
        (SELECT COLUMN_VALUE
        FROM TABLE(ms_apps_utilities.parse_string(l_owner_org,','))
        )
      AND USER_NAME                 = l_level2_approver
      AND ACTIVITY_NAME             = 'QSM - Approve Surveys';
      if L_EXISTS                   = 0 then
        l_tab_response (l_err_ind) :='Invalid Level 2 Approver';
        l_err_ind                  := l_err_ind + 1;
      ELSE
        l_exists := 0;
      END IF;
    END IF;
    
    l_overall_app_org := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/overall_approver_org/text()');

    --validating Approver organization added by raghu
    
    l_approver_organization := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/approver_organization/text()');
    
    if trim(l_approver_organization) is not null then
      SELECT COUNT(1)
      INTO l_exists
      FROM MS_QSM_ORG_FLOW_V fdo
      WHERE ORG_ENTITY_ID IN
        (SELECT COLUMN_VALUE
        FROM TABLE(ms_apps_utilities.parse_string(l_approver_organization,','))
        )
      AND ACTIVITY_NAME             = 'QSM - Approve Surveys';
      if L_EXISTS                   = 0 then
        l_tab_response (l_err_ind) := 'Invalid Approver Organization';
        l_err_ind                  := l_err_ind + 1;
      ELSE
        l_exists := 0;
      END IF;
    END IF;
       
    -- Validating the Approver Organizations
    IF l_overall_app_org IS NOT NULL THEN
    
      execute immediate 'select count(1) from ms_qsm_flow_down_org_v where INSTR('',''||:1||'','','',''||org_entity_id||'','') >0' into l_exists using trim(l_overall_app_org);
    
      IF l_exists                  <= 0 THEN
        l_tab_response (l_err_ind) := l_overall_app_org || ' is not a valid Approver Organization';
        l_err_ind                  := l_err_ind + 1;
      ELSE
        l_exists := 0;
      END IF;
    END IF;
    
    l_overall_approver          := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/overall_approver/text()');
    
    if trim(l_overall_approver) is not null then
    
      select count(1)
      INTO l_exists
      FROM MS_QSM_ORG_FLOW_V fdo
      WHERE ORG_ENTITY_ID IN
        (SELECT COLUMN_VALUE
        FROM TABLE(ms_apps_utilities.parse_string(l_overall_app_org,','))
        )
      AND USER_NAME                 = l_overall_approver
      AND ACTIVITY_NAME             = 'QSM - Approve Surveys';
    
      if l_exists                   = 0 then
        l_tab_response (l_err_ind) := l_overall_approver || ' is not a valid Approver';
        l_err_ind                  := l_err_ind + 1;
      ELSE
        l_exists := 0;
      END IF;
    END IF;
    --validating Respondents
    --Ifolet Validations End
    BEGIN
    
      l_sch_start_date := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/sch_start_date');
      --                     l_sch_start_date := TO_DATE (l_sch_start_date, 'mm/dd/yyyy hh24:mi:ss');
      IF (TRIM (l_sch_start_date)) IS NULL THEN
        l_tab_response (l_err_ind) := 'Start Date should not be Empty';
        l_err_ind                  := l_err_ind + 1;
      END IF;
    
    exception
    WHEN OTHERS THEN
      l_tab_response (l_err_ind) := 'Date Should be in the format of mm/dd/yyyy hh24:mi:ss' || SQLERRM;
      l_err_ind                  := l_err_ind + 1;
    END;
    
    IF l_sch_frequency<>'8' THEN
      BEGIN
        l_sch_end_date := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/sch_end_by');
        --                         l_sch_end_date := TO_DATE (l_sch_end_date, 'mm/dd/yyyy hh24:mi:ss');
        IF (TRIM (l_sch_end_date))   IS NULL THEN
          l_tab_response (l_err_ind) := 'End Date should not be Empty';
          l_err_ind                  := l_err_ind + 1;
        END IF;
      EXCEPTION
      WHEN OTHERS THEN
        l_tab_response (l_err_ind) := 'Date Should be in the format of mm/dd/yyyy hh24:mi:ss' || SQLERRM;
        l_err_ind                  := l_err_ind + 1;
      END;
    
      IF TO_DATE (l_sch_end_date, 'mm/dd/yyyy hh24:mi:ss') < TO_DATE (l_sch_start_date, 'mm/dd/yyyy hh24:mi:ss')THEN
        l_tab_response (l_err_ind)                        := 'End Date should not be less than Start Date';
        l_err_ind                                         := l_err_ind + 1;
      END IF;
    ELSE
      IF l_manage_survey = 1 THEN
        BEGIN
          l_close_date := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/sch_close_date');
          --                         l_sch_end_date := TO_DATE (l_sch_end_date, 'mm/dd/yyyy hh24:mi:ss');
          IF (TRIM (l_close_date))     IS NULL THEN
            l_tab_response (l_err_ind) := 'Close should not be Empty';
            l_err_ind                  := l_err_ind + 1;
          END IF;
        EXCEPTION
        WHEN OTHERS THEN
          l_tab_response (l_err_ind) := 'Date Should be in the format of mm/dd/yyyy hh24:mi:ss' || SQLERRM;
          l_err_ind                  := l_err_ind + 1;
        END;
    
        if to_date (l_close_date, 'mm/dd/yyyy hh24:mi:ss') < to_date (l_sch_start_date, 'mm/dd/yyyy hh24:mi:ss')then
          l_tab_response (l_err_ind)                      := 'Close Date should not be less than Start Date';
          l_err_ind                                       := l_err_ind + 1;
        END IF;
      END IF;
    END IF;
  ELSE
    l_sch_start_date  := TO_CHAR (sysdate, 'mm/dd/yyyy hh24:mi:ss');
    
    IF l_manage_survey = 1 THEN
      BEGIN
        l_close_date := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/sch_close_date');
        --                         l_sch_end_date := TO_DATE (l_sch_end_date, 'mm/dd/yyyy hh24:mi:ss');
        IF (TRIM (l_close_date))     IS NULL THEN
          l_tab_response (l_err_ind) := 'Close should not be Empty';
          l_err_ind                  := l_err_ind + 1;
        END IF;
      EXCEPTION
      WHEN OTHERS THEN
        l_tab_response (l_err_ind) := 'Date Should be in the format of mm/dd/yyyy hh24:mi:ss' || SQLERRM;
        l_err_ind                  := l_err_ind + 1;
      END;
    
      if to_date (l_close_date, 'mm/dd/yyyy hh24:mi:ss') < to_date (l_sch_start_date, 'mm/dd/yyyy hh24:mi:ss')then
        l_tab_response (l_err_ind)                      := 'Close Date should not be less than Start Date';
        l_err_ind                                       := l_err_ind + 1;
      END IF;
    END IF;
  END IF;
  --Put here all the validations for the fields<Starts>
  IF (TRIM (ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/que_request_name/text()'))) IS NULL THEN
    l_tab_response (l_err_ind)  := 'Name should not be Empty';
    l_err_ind := l_err_ind + 1;
  END IF;
  l_curr_req_name := trim (ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/que_request_name/text()'));
  
  IF (TRIM (ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/published/text()'))='Y') THEN
    BEGIN
      l_curr_questionnaire_id := TRIM (ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/questionnaire_id/text()'));
      l_curr_applies_to       := TRIM (ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/que_applies_to/text()'));
      l_curr_scope_selection  := TRIM (ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/survey_scope_selection/text()'));
      l_curr_que_request_type :=TRIM (ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/que_request_type/text()'));
      l_cuur_frequency        := TRIM (ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/sch_frequency/text()'));
      
      select que_request_id,
        REINIT_PID
      INTO l_publish_request_id,
        l_reinit_pid
      FROM MS_QSM_INIT_QUESTNR
      WHERE QUE_REQUEST_NAME     = l_curr_req_name
      AND MANAGE_SURVEY          ='1'
      AND QUESTIONNAIRE_ID       = l_curr_questionnaire_id
      AND QUE_APPLIES_TO         = l_curr_applies_to
      AND SURVEY_SCOPE_SELECTION = l_curr_scope_selection
      AND QUE_REQUEST_TYPE       = l_curr_que_request_type;
      
      select count(1)
      INTO l_exists
      FROM ms_qsm_questnr_sch
      WHERE sch_req_id              = l_publish_request_id
      AND sch_frequency             = l_cuur_frequency;
      
      if l_exists                  <= 0 then
        l_tab_response (l_err_ind) := 'Frequency does not match with the existing data';
        l_err_ind                  := l_err_ind + 1;
      ELSE
        l_exists:=0;
      END IF;
      
      if l_curr_scope_selection = 2 and (l_cuur_frequency = '6' or l_cuur_frequency = '8') then
        SELECT COUNT(1)
        INTO l_exst_indv_count
        FROM MS_QSM_INIT_QUESTNR_IND
        WHERE QUE_REQUEST_ID = l_publish_request_id;
        /*
        SELECT COUNT(*)
        INTO l_exists
        FROM XMLTABLE(xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:ind/msa:row'
        PASSING  (l_out_xml)
        COLUMNS  indv_item_field_1 VARCHAR2 (255) PATH 'msa:indv_item_field_1'
        ,indv_item_pk  VARCHAR2 (255) PATH 'msa:indv_item_pk'
        ,ind_que_request_id VARCHAR2 (100) PATH 'msa:ind_que_request_id') A,MS_QSM_INIT_QUESTNR_IND B
        WHERE
        -- A.ind_que_request_id = B.QUE_REQUEST_ID
        -- AND A.indv_item_pk = B.INDV_ITEM_PK
        -- AND
        A.indv_item_field_1 = B.INDV_ITEM_FIELD_1;
        IF l_exists <> l_exst_indv_count THEN
        l_tab_response (l_err_ind) := 'Individual Item Details does not match with the existing data';
        l_err_ind := l_err_ind + 1;
        END IF;
        */
        l_exists          := 0;
      
        for indv_item_rec in
        (SELECT indv_item_field_1,
          indv_item_pk,
          ind_que_request_id,
          instance_rec_num
        FROM XMLTABLE(xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:ind/msa:row' PASSING (l_out_xml) COLUMNS indv_item_field_1 VARCHAR2 (255) PATH 'msa:indv_item_field_1' ,indv_item_pk VARCHAR2 (255) PATH 'msa:indv_item_pk' ,ind_que_request_id VARCHAR2 (100) PATH 'msa:ind_que_request_id' ,instance_rec_num NUMBER PATH 'msa:instance_rec_num')
        )
        LOOP
          BEGIN
            
            select indv_item_pk
            INTO l_curr_indv_item_pk
            FROM MS_QSM_INIT_QUESTNR_IND
            WHERE INDV_ITEM_FIELD_1 = indv_item_rec.indv_item_field_1
            AND que_request_id      = l_publish_request_id;
            ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/ind/row[instance_rec_num ='||indv_item_rec.instance_rec_num||']/indv_item_pk/text()',l_curr_indv_item_pk);
            l_exists := l_exists+1;
          EXCEPTION
          WHEN OTHERS THEN
            NULL;
          END;
        END LOOP;
        
        if l_exists                  <> l_exst_indv_count then
          l_tab_response (l_err_ind) := 'Individual Item Details does not match with the existing data';
          l_err_ind                  := l_err_ind + 1;
        END IF;
      END IF;
    
    EXCEPTION
    WHEN OTHERS THEN
      l_tab_response (l_err_ind) := 'There are no open survey with the information provided. please check the value of published parameter';
      l_err_ind                  := l_err_ind + 1;
    END;
    /*
    EXECUTE IMMEDIATE  'SELECT MAX(INSTANCE_ID) FROM '||ms_qsm_utilities.g_tbl_metric_maintenance ('INIQSM')||'_V WHERE PROCESS_INSTANCE_ID ='||l_reinit_pid
    INTO l_reinit_iid; */
  else
    
    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id => xn_error_handle_id, pn_error_sequence => xn_error_seq, pc_error_type => 'E', pc_error_text => 'REQ_NAME:'||l_curr_req_name);
    
    begin
    
      select que_request_id
      INTO l_publish_request_id
      FROM MS_QSM_INIT_QUESTNR
      WHERE QUE_REQUEST_NAME      = l_curr_req_name;
    
      l_tab_response (l_err_ind) := 'Survey with same Name has published before';
    
      l_err_ind                  := l_err_ind + 1;
    
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL;
    WHEN OTHERS THEN
      l_tab_response (l_err_ind) := 'Survey with same Name has published before';
      l_err_ind                  := l_err_ind + 1;
    END;
  END IF;
  
  if (trim (ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/que_applies_to/text()'))) is null then
    l_tab_response (l_err_ind)  := 'Applies To should not be Empty';
    l_err_ind  := l_err_ind + 1;
  END IF;
  
  l_que_applies_to := ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/que_applies_to/text()');
    
  select count(1)
  INTO l_contact_user_available
  FROM MS_QSM_APPLIES_TO
  WHERE OBJECT_ID               = l_que_applies_to
  and contact_user_available    = 'Y'
  AND IS_ACTIVE                 = 'Y' ;
  
  l_fiilter_level := ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/fiilter_level/text()');
  
  if l_fiilter_level is null or trim (l_fiilter_level)='' then
     ms_qsm_utilities.update_xml (l_out_xml, replace (l_qstnr_path, '$', 'fiilter_level'),'1');
  elsif l_fiilter_level = '2' and l_contact_user_available <=0 then
      l_tab_response (l_err_ind) := 'Invalid Filter Level';
       L_ERR_IND := L_ERR_IND + 1;
  END IF;
  
  l_applies_to_items :=ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/applies_to_items/text()');
  
  if l_applies_to_items IS NOT NULL AND l_contact_user_available <=0  THEN
  
      l_tab_response (l_err_ind) := 'Selected Applies to do not have contact users available in the system';
      L_ERR_IND := L_ERR_IND + 1;
      
  elsif   l_applies_to_items is not null and l_contact_user_available > 0 and nvl(l_fiilter_level,'1')='2' then     
      l_tot_count := 0;
      L_TOT_COUNT := LENGTH(TRIM(l_applies_to_items))-(LENGTH(REPLACE(TRIM(l_applies_to_items),',','')))+1;
      
       SELECT B.FIELD_KEY
       into l_field_key
       from ms_qsm_applies_to_flds b
       where b.object_seq_id = l_que_applies_to
       AND B.COLUMN_SEQ = 1;
        
        select count(1)
        into l_exists
        from table (ms_qsm_stage_parametrs.get_applies_to_details(p_obj_seq_id=> l_que_applies_to,p_field_key=>l_field_key)) A,
        (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string(l_applies_to_items,','))) B
        where a.object_id=b.column_value;
      
      IF l_exists < L_TOT_COUNT THEN
      
          l_tab_response (l_err_ind) := 'Some of the items specified are invalid';
          L_ERR_IND := L_ERR_IND + 1;
      
      END IF;

  END IF;
  
  if (trim (l_que_applies_to)  =1) then

     l_que_send_to :=TRIM (ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/que_send_to/text()'));
                      
     IF l_que_send_to IS NULL THEN
     
        l_tab_response (l_err_ind) := 'Send To should not be Empty';
        L_ERR_IND := L_ERR_IND + 1;
     
     ELSIF l_que_send_to NOT IN ('3','4')THEN
        
        L_TAB_RESPONSE (L_ERR_IND) := 'Invalid Send To value specified';
        L_ERR_IND := L_ERR_IND + 1;
        
     END IF;
     
     l_que_send_option := TRIM (ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/send_option/text()'));
     
     IF l_que_send_to='3' and l_que_send_option IS NOT NULL THEN
      
        IF NVL(MS_APPS_UTILITIES.GET_DISPLAY_VALUE(L_ENTERPRISE_INFO,'MS_QSM_Send_Option',L_QUE_SEND_OPTION),'$$') = '$$' THEN
          l_tab_response (l_err_ind) := 'Invalid Send Option Specified';
          L_ERR_IND := L_ERR_IND + 1;
        END IF;
        
     ELSIF l_que_send_to <> '3' AND l_que_send_option IS NOT NULL AND l_que_send_option <>'2' THEN
     
        L_TAB_RESPONSE (L_ERR_IND) := 'Invalid Send Option Specified';
        L_ERR_IND := L_ERR_IND + 1;
     
     END IF;
     
     L_SEND_USER_ROLE := TRIM (MS_QSM_UTILITIES.GET_TAG_CLOB_VALUE (L_OUT_XML, '/datapacket/data/nonmultirow/send_user_role/text()'));
      
     IF LENGTH(l_send_user_role) <= 0
     THEN
       l_tab_response (l_err_ind) := 'User/Role(s) should not be Empty';
       L_ERR_IND := L_ERR_IND + 1;
     ELSE
     
      L_TOT_COUNT := LENGTH(TRIM(l_send_user_role))-(LENGTH(REPLACE(TRIM(l_send_user_role),',','')))+1;
     
      IF l_que_send_to = '4' THEN
          
          SELECT COUNT(1) 
          INTO L_EXISTS
          FROM (
                SELECT DISTINCT USER_NAME
                FROM MS_QSM_ORG_FLOW_V FDO
                WHERE ACTIVITY_NAME='QSM - Respond to Surveys'
                AND INSTR(','||L_SEND_USER_ROLE||',',','||USER_NAME||',',1,1)>0);
         
         IF L_EXISTS < L_TOT_COUNT THEN
            L_TAB_RESPONSE (L_ERR_IND) := 'Some of the users does not have the survey response activity';
            L_ERR_IND := L_ERR_IND + 1;
         END IF;
         
         L_EXISTS :=0;
         
      ELSIF l_que_send_to='3' THEN
         
         SELECT COUNT(1)
         INTO L_EXISTS
         FROM SI_ROLES
         WHERE INSTR(','||L_SEND_USER_ROLE||',',','||ROLE_ID||',',1,1)>0;
         
         IF L_EXISTS < L_TOT_COUNT THEN
            L_TAB_RESPONSE (L_ERR_IND) := 'Some of the specified roles does not exist in the system';
            L_ERR_IND := L_ERR_IND + 1;
         END IF;
         
         L_EXISTS :=0;
         
      END IF;
      
     END IF;

     l_response_approver := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/response_approver/text()');
     l_approver_organization := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/approver_organization/text()');
     
     IF l_response_approver IS NOT NULL THEN
        
        l_send_to_approval := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/send_to_approval/text()');
           
        if l_send_to_approval IS NULL or l_send_to_approval ='' THEN
            
           ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'send_to_approval'), '4');  
           
           l_send_to_approval := '4';
           
        END IF;     
        
        l_all_user_approval := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/all_user_approval/text()');
        
        if l_all_user_approval is null or l_all_user_approval='' then
        
          ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'all_user_approval'), '2');
        
        end if;
                
        L_TOT_COUNT :=0;
        
        L_TOT_COUNT := LENGTH(TRIM(l_response_approver))-(LENGTH(REPLACE(TRIM(l_response_approver),',','')))+1;

        IF l_send_to_approval = '4' THEN
          
           l_exists :=0;
            
            select count(1),MS_CONCAT(ms_apps_utilities.get_user_full_name(USER_NAME)) 
            INTO L_EXISTS,l_resp_app_display
            FROM (
                SELECT DISTINCT USER_NAME
                FROM MS_QSM_ORG_FLOW_V FDO
                where activity_name='QSM - Approve Response'
                and ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (l_approver_organization,',')))
                AND INSTR(','||l_response_approver||',',','||USER_NAME||',',1,1)>0);
            
          if l_exists < l_tot_count then
            L_TAB_RESPONSE (L_ERR_IND) := 'Some of the users do not have the survey response approve activity';
            L_ERR_IND := L_ERR_IND + 1;
          END IF;
         
         L_EXISTS :=0;
         
         ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'response_approver_disp'),l_resp_app_display);

       ELSif l_send_to_approval = '3' THEN
       
         select count(1),ms_concat(role_name)
         INTO L_EXISTS,l_resp_app_display
         FROM SI_ROLES
         WHERE INSTR(','||L_SEND_USER_ROLE||',',','||ROLE_ID||',',1,1)>0;
        
        --raghu
        
         IF L_EXISTS < L_TOT_COUNT THEN
                    L_TAB_RESPONSE (L_ERR_IND) := 'Some of the specified roles does not exist in the system';
                    L_ERR_IND := L_ERR_IND + 1;
                 
                 ELSE
                     L_EXISTS := 0;
                     L_TOT_COUNT :=0;
                     
                     SELECT count(1)
                                                  INTO L_EXISTS
                                                  FROM (
                                                        select distinct user_name
                                                        from ms_qsm_org_flow_v fdo
                                                        where 
                                                        --raghu
                                                        ORG_ENTITY_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR(l_approver_organization) ,',')))
                                                        AND ROLE_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR(L_SEND_USER_ROLE) ,',')))
                                                        AND ACTIVITY_NAME='QSM - Approve Response') A;
                     
                     IF L_EXISTS <=0 THEN
                        L_TAB_RESPONSE (L_ERR_IND) := 'There are no users with Response Approve Activity in the specified Role(s) for the organization';
                        L_ERR_IND := L_ERR_IND + 1;
                     END IF;
                 END IF;
         
         L_EXISTS :=0;
         
         ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'response_approver_disp'),l_resp_app_display);
       
       END IF;

    end if;


    if ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/approval_based_on_response/text()') is null then
      ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'approval_based_on_response'), 'no');
    end if;
    
  ELSE
    l_indv_count_n    := 0;
    FOR indv_item_rec IN
    (SELECT indv_item_field_1,
      indv_item_pk,
      indv_item_field_2,
      indv_item_field_3,
      indv_send_option,
      indv_collbortiv_resp,
      indv_resp_approver,
      indv_approver_organization,
      indv_que_send_to,
      ind_que_request_id,
      send_to_assessor_org,
      send_to_assessor,
      item_reltd_collaborator,
      item_reltd_respondent,
      indv_send_to_approval,
      indv_all_user_approval,
      instance_rec_num
    from xmltable(xmlnamespaces ('http://www.metricstream.com/appstudio/msa' as "msa"), 'msa:datapacket/msa:data/msa:ind/msa:row' passing (l_out_xml) columns indv_item_field_1 varchar2 (255) path 'msa:indv_item_field_1' ,indv_item_pk varchar2 (255) path 'msa:indv_item_pk' ,indv_item_field_2 varchar2 (255) path 'msa:indv_item_field_2' ,indv_item_field_3 varchar2 (255) path 'msa:indv_item_field_3' ,indv_send_option varchar2 (100) path 'msa:indv_send_option' ,indv_collbortiv_resp varchar2 (100) path 'msa:indv_collbortiv_resp' ,indv_resp_approver varchar2 (255) path 'msa:indv_resp_approver' ,indv_que_send_to varchar2 (255) path 'msa:indv_que_send_to' ,ind_que_request_id varchar2 (100) path 'msa:ind_que_request_id' ,send_to_assessor_org clob path 'msa:send_to_assessor_org' ,send_to_assessor clob path 'msa:send_to_assessor' ,item_reltd_collaborator varchar2(200) path 'msa:item_reltd_collaborator' ,
    item_reltd_respondent varchar2(200) path 'msa:item_reltd_respondent',
    indv_send_to_approval varchar2(10) path 'msa:indv_send_to_approval',
    indv_all_user_approval varchar2(10) path 'msa:indv_all_user_approval',
    indv_approver_organization VARCHAR2 (255) PATH 'msa:indv_approver_organization',
    instance_rec_num  NUMBER PATH 'msa:instance_rec_num')
    )
    LOOP
     --raghu
      l_indv_count_n                           := l_indv_count_n+1;
      IF TRIM(indv_item_rec.indv_item_field_1) IS NULL THEN
        l_tab_response (l_err_ind)             := 'Individual Item cannot be Empty';
        L_ERR_IND                              := L_ERR_IND + 1;
      ELSE
      
        L_INDV_ITEM_DESC:=ms_qsm_utilities.get_applies_to_object_desc(l_que_applies_to,indv_item_rec.indv_item_field_1);
        
        IF L_INDV_ITEM_DESC is null then  
          L_TAB_RESPONSE (L_ERR_IND) := 'Invalid Item specified';
          L_ERR_IND := L_ERR_IND + 1; 
        END IF;
      
      END IF;
      
                                  
      IF TRIM(indv_item_rec.indv_item_field_2) IS NOT NULL THEN
        
        L_INDV_ITEM_DESC:=ms_qsm_utilities.get_applies_to_object_desc(l_que_applies_to,indv_item_rec.indv_item_field_2,indv_item_rec.indv_item_field_1,2);
        
        IF L_INDV_ITEM_DESC is null then  
          L_TAB_RESPONSE (L_ERR_IND) := 'Invalid Item specified';
          L_ERR_IND := L_ERR_IND + 1; 
        END IF;
      
      END IF;

     IF TRIM(indv_item_rec.indv_item_field_3) IS NOT NULL THEN
        
        L_INDV_ITEM_DESC:=ms_qsm_utilities.get_applies_to_object_desc(l_que_applies_to,indv_item_rec.indv_item_field_3,indv_item_rec.indv_item_field_1,3);
        
        IF L_INDV_ITEM_DESC is null then  
          L_TAB_RESPONSE (L_ERR_IND) := 'Invalid Item specified';
          L_ERR_IND := L_ERR_IND + 1; 
        end if;
      
      END IF;                      
      
      if trim(indv_item_rec.indv_que_send_to) is null then
        l_tab_response (l_err_ind)            := 'Send to option cannot be Empty';
        l_err_ind                             := l_err_ind + 1;
      
      ELSIF TRIM(indv_item_rec.indv_que_send_to) NOT IN ('3','4')THEN
          
            L_TAB_RESPONSE (L_ERR_IND) := 'Invalid Send To Option for the individual Item';
            l_err_ind := l_err_ind + 1;
        
      END IF;

     IF TRIM(indv_item_rec.indv_que_send_to) ='3' AND TRIM(indv_item_rec.indv_send_option) IS NOT NULL THEN
                        
        IF NVL(MS_APPS_UTILITIES.GET_DISPLAY_VALUE(L_ENTERPRISE_INFO,'MS_QSM_Send_Option',TRIM(indv_item_rec.indv_send_option)),'$$') = '$$' THEN
          l_tab_response (l_err_ind) := 'Invalid Send Option Specified';
          L_ERR_IND := L_ERR_IND + 1;
        END IF;
      
        ELSIF TRIM(indv_item_rec.indv_que_send_to) <>'3' AND TRIM(indv_item_rec.indv_send_option) IS NOT NULL AND TRIM(indv_item_rec.indv_send_option) <>'2' THEN
            L_TAB_RESPONSE (L_ERR_IND) := 'Invalid Send Option Specified';
            L_ERR_IND := L_ERR_IND + 1;
        END IF;
  
        IF TRIM(indv_item_rec.send_to_assessor_org) IS NULL THEN
    
            l_tab_response (l_err_ind) := 'Assessor Organization cannot be Empty';
            l_err_ind := l_err_ind + 1;
        
        ELSE
        
          L_TOT_COUNT :=0;
          L_EXISTS := 0;
          
          L_TOT_COUNT := LENGTH(TRIM(INDV_ITEM_REC.SEND_TO_ASSESSOR_ORG))-LENGTH(REPLACE(TRIM(INDV_ITEM_REC.SEND_TO_ASSESSOR_ORG),',',''))+1;
          
          SELECT COUNT(1)
          INTO L_EXISTS
          FROM SI_ORG_ENTITIES
          WHERE INSTR(','||TRIM(INDV_ITEM_REC.SEND_TO_ASSESSOR_ORG)||',',','||ORG_ENTITY_ID||',',1,1)>0;
          
            IF L_EXISTS < L_TOT_COUNT THEN
            
              l_tab_response (l_err_ind) := 'Some of the Assessor Organizations are Invalid';
              l_err_ind := l_err_ind + 1;
            
            END IF;
        
        END IF;

        IF TRIM(indv_item_rec.send_to_assessor) IS NULL THEN

            l_tab_response (l_err_ind) := 'Send to Assessors cannot be Empty';
            l_err_ind := l_err_ind + 1;
        
        ELSE
                        
          L_TOT_COUNT := LENGTH(TRIM(indv_item_rec.send_to_assessor))-(LENGTH(REPLACE(TRIM(indv_item_rec.send_to_assessor),',','')))+1;
                       
          IF TRIM(indv_item_rec.indv_que_send_to) = '4' THEN
              
              SELECT COUNT(1) 
              INTO L_EXISTS
              FROM (
                    SELECT DISTINCT USER_NAME
                    FROM MS_QSM_ORG_FLOW_V FDO
                    WHERE ACTIVITY_NAME='QSM - Respond to Surveys'
                    AND INSTR(','||TRIM(indv_item_rec.send_to_assessor)||',',','||USER_NAME||',',1,1)>0);
             
               IF L_EXISTS < L_TOT_COUNT THEN
                  L_TAB_RESPONSE (L_ERR_IND) := 'Some of the users does not have the survey response activity';
                  L_ERR_IND := L_ERR_IND + 1;
               END IF;
               
               L_EXISTS :=0;
                               
          ELSIF TRIM(indv_item_rec.indv_que_send_to) = '3' THEN
                               
             SELECT COUNT(1)
             INTO L_EXISTS
             FROM SI_ROLES
             WHERE INSTR(','||TRIM(indv_item_rec.send_to_assessor)||',',','||ROLE_ID||',',1,1)>0;
             
             IF L_EXISTS < L_TOT_COUNT THEN
                L_TAB_RESPONSE (L_ERR_IND) := 'Some of the specified roles does not exist in the system';
                L_ERR_IND := L_ERR_IND + 1;
             END IF;
                               
             L_EXISTS :=0;
                               
          END IF;
                        
        END IF;

        --validating Indv Approver organization added by raghu
  
        l_response_approver :=indv_item_rec.indv_resp_approver;
        l_indv_approver_organization :=indv_item_rec.indv_approver_organization;
        l_send_to_approval:=indv_item_rec.indv_send_to_approval;
       
    If (l_send_to_approval IS NULL or l_send_to_approval ='') and nvl(l_indv_approver_organization,'1') is not null THEN
        
        IF nvl(l_indv_approver_organization,'1')<>'1' Then
          l_tab_response (l_err_ind) := 'Send to Approval cannot be Empty when Approver organization and has values';
          l_err_ind := l_err_ind + 1;
        END IF;
        
    ELSIF  (l_send_to_approval IS NULL or l_send_to_approval ='') and l_response_approver is not null THEN        
        l_tab_response (l_err_ind) := 'Send to Approval cannot be Empty when Response Approver has values';
        l_err_ind := l_err_ind + 1;
    
    ELSIF l_send_to_approval IS Not NULL  THEN
     
          SELECT COUNT(1)
          INTO l_exists
          FROM MS_QSM_ORG_FLOW_V fdo
          WHERE ORG_ENTITY_ID IN
            (SELECT COLUMN_VALUE
             FROM TABLE(ms_apps_utilities.parse_string(nvl(l_indv_approver_organization,(select distinct ms_concat(ORG_ENTITY_ID) from MS_QSM_ORG_FLOW_V where ACTIVITY_NAME= 'QSM - Approve Surveys')),','))
            )
          AND ACTIVITY_NAME             = 'QSM - Approve Surveys';
          if L_EXISTS                   = 0 then
            l_tab_response (l_err_ind) := 'Invalid Indvidual Approver Organization';
            l_err_ind                  := l_err_ind + 1;
          ELSE
            l_exists := 0;
          END IF;
        
       
    If nvl(l_indv_approver_organization,'1') is not null and (l_response_approver is null or l_response_approver='') then 
      IF nvl(l_indv_approver_organization,'1')<>'1' Then
        l_tab_response (l_err_ind) := 'Response Approver Cannot be Empty when Approver Organization is selected';
        l_err_ind := l_err_ind + 1;
      END IF;        
    Else      
        IF l_response_approver IS NOT NULL THEN
  
            /*l_send_to_approval:=indv_item_rec.indv_send_to_approval;
            
            if l_send_to_approval IS NULL or l_send_to_approval ='' THEN
                
               ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/ind/row[instance_rec_num ='||indv_item_rec.instance_rec_num||']/indv_send_to_approval/text()','4');
               
               l_send_to_approval := '4';
               
            END IF;     */
                
            l_all_user_approval := indv_item_rec.indv_all_user_approval;
                
            if l_all_user_approval is null or l_all_user_approval='' then
                
              ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/ind/row[instance_rec_num ='||indv_item_rec.instance_rec_num||']/indv_all_user_approval/text()','2');
                
            end if;
                        
            L_TOT_COUNT :=0;
                
            L_TOT_COUNT := LENGTH(TRIM(l_response_approver))-(LENGTH(REPLACE(TRIM(l_response_approver),',','')))+1;
        
                IF l_send_to_approval = '4' THEN
                  
                   l_exists :=0;
                    
                    select count(1),MS_CONCAT(ms_apps_utilities.get_user_full_name(USER_NAME)) 
                    INTO L_EXISTS,l_resp_app_display
                    FROM (
                        SELECT DISTINCT USER_NAME
                        FROM MS_QSM_ORG_FLOW_V FDO
                        where activity_name='QSM - Approve Response'
                        and ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (nvl(l_indv_approver_organization,(select distinct ms_concat(ORG_ENTITY_ID) from MS_QSM_ORG_FLOW_V where ACTIVITY_NAME= 'QSM - Approve Surveys')),',')))
                        AND INSTR(','||l_response_approver||',',','||USER_NAME||',',1,1)>0);
                    
                  if l_exists < l_tot_count then
                    L_TAB_RESPONSE (L_ERR_IND) := 'Some of the users do not have the survey response approve activity';
                    L_ERR_IND := L_ERR_IND + 1;
                  END IF;
                 
                 L_EXISTS :=0;
                 
                 ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/ind/row[instance_rec_num ='||indv_item_rec.instance_rec_num||']/indv_resp_approver_disp/text()',l_resp_app_display);
               
        
               ELSif l_send_to_approval = '3' THEN
               
                 select count(1),ms_concat(role_name)
                 INTO L_EXISTS,l_resp_app_display
                 FROM SI_ROLES
                 WHERE 
                 INSTR(','||l_response_approver||',',','||ROLE_ID||',',1,1)>0;
                 --raghu
                 
                 IF L_EXISTS < L_TOT_COUNT THEN
                    L_TAB_RESPONSE (L_ERR_IND) := 'Some of the specified roles does not exist in the system';
                    L_ERR_IND := L_ERR_IND + 1;
                 
                 ELSE
                     L_EXISTS := 0;
                     L_TOT_COUNT :=0;
                     
                     SELECT count(1)
                                                  INTO L_EXISTS
                                                  FROM (
                                                        select distinct user_name
                                                        from ms_qsm_org_flow_v fdo
                                                        where 
                                                        --raghu
                                                        ORG_ENTITY_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR(nvl(l_indv_approver_organization,(select distinct ms_concat(ORG_ENTITY_ID) from MS_QSM_ORG_FLOW_V where ACTIVITY_NAME= 'QSM - Approve Surveys'))) ,',')))
                                                        AND ROLE_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR(l_response_approver) ,',')))
                                                        AND ACTIVITY_NAME='QSM - Approve Response') A;
                     
                     IF L_EXISTS <=0 THEN
                        L_TAB_RESPONSE (L_ERR_IND) := 'There are no users with Response Approve Activity in the specified Role(s) for the organization';
                        L_ERR_IND := L_ERR_IND + 1;
                     END IF;
                 END IF;
                    L_EXISTS :=0;
                 
                    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/ind/row[instance_rec_num ='||indv_item_rec.instance_rec_num||']/indv_resp_approver_disp/text()',l_resp_app_display);
               
               END IF;
  
           /* l_exists :=0;
  
            SELECT COUNT(1)
            INTO l_exists
            FROM MS_QSM_ORG_FLOW_V fdo
            where USER_NAME = l_response_approver
            AND ACTIVITY_NAME = 'QSM - Approve Response';
  
            IF l_exists <=0 THEn
                l_tab_response (l_err_ind) := 'Response Approver is not valid';
                l_err_ind := l_err_ind + 1;
            END IF;*/
  
        END IF;
    END IF;
  END IF;    
      
        IF NVL(trim(indv_item_rec.item_reltd_collaborator),'no')='yes' THEN
          l_indv_item_contact :=0;
          
          select count(1)
          INTO l_indv_item_contact
          FROM MS_QSM_APPLIES_TO
          WHERE OBJECT_ID               = l_que_applies_to
          AND CONTACT_USER_AVAILABLE    = 'Y'
          AND IS_ACTIVE                 = 'Y' ;
          
          IF l_indv_item_contact       <=0 THEN
            l_tab_response (l_err_ind) := 'Collaborate with Users Related to Item value is invalid';
            l_err_ind                  := l_err_ind + 1;
          END IF;
        END IF;
      
      IF NVL(trim(indv_item_rec.item_reltd_respondent),'no')='yes' THEN
        l_indv_item_contact                                :=0;
        
        select count(1)
        INTO l_indv_item_contact
        FROM MS_QSM_APPLIES_TO
        WHERE OBJECT_ID               = l_que_applies_to
        AND CONTACT_USER_AVAILABLE    = 'Y'
        AND IS_ACTIVE                 = 'Y' ;
        
        if l_indv_item_contact       <=0 or indv_item_rec.indv_que_send_to <>'4' then
          l_tab_response (l_err_ind) := 'Users Related to Item value is invalid';
          l_err_ind                  := l_err_ind + 1;
        ELSE
          l_indv_item_contact :=0;
          
          select count(1)
          INTO l_indv_item_contact
          FROM TABLE (ms_apps_utilities.parse_string (indv_item_rec.send_to_assessor ,','))
          WHERE COLUMN_VALUE NOT IN
            (SELECT USER_NAME
            FROM TABLE (MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(l_que_applies_to
              ||'~'
              ||indv_item_rec.indv_item_field_1))
            );
          
          if L_INDV_ITEM_CONTACT        > 0 then
            l_tab_response (l_err_ind) := 'Specified Users are not associated with Item';
            l_err_ind                  := l_err_ind + 1;
          END IF;
        END IF;
      END IF;
    END LOOP;
    
    if l_indv_count_n            <=0 then
      l_tab_response (l_err_ind) := 'Individual Item cannot be Empty';
      l_err_ind                  := l_err_ind + 1;
    END IF;
  END IF;
  
  if ((trim (ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/sch_due_after/text()'))) is null) then
    l_tab_response (l_err_ind)  := 'Due After (Calendar Days) should not be Empty';
    l_err_ind  := l_err_ind + 1;
   ELSIF TO_NUMBER(TRIM (ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/sch_due_after/text()'))) < 0 THEN 

      L_TAB_RESPONSE (L_ERR_IND) := 'Due After (Calendar Days) should not be negative';
      L_ERR_IND := L_ERR_IND + 1;
      
    END IF;
  
  if ((trim (ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/restrict_access_to/text()'))) is null) then
    l_tab_response (l_err_ind):= 'Restrict Access To should not be Empty';
    L_ERR_IND:= L_ERR_IND + 1;
  ELSIF TRIM (ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/restrict_access_to/text()')) NOT IN ('O','N') THEN
              
    L_TAB_RESPONSE (L_ERR_IND) := 'Invalid Restrict Access To value specified';
    L_ERR_IND := L_ERR_IND + 1;
  
  END IF;
  
    l_findings_can_add_by :=TRIM (ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/findings_can_add_by/text()'));
    
    IF L_FINDINGS_CAN_ADD_BY IS NOT NULL THEN
        
        L_EXISTS :=0;
        
        select count(1)
        into L_EXISTS
        from table (ms_apps_utilities.parse_string(L_FINDINGS_CAN_ADD_BY,','))
        where nvl(MS_APPS_UTILITIES.GET_DISPLAY_VALUE(L_ENTERPRISE_INFO,'MS_QSM_Finding_Added_By',column_value),'$$')='$$';
        
        IF L_EXISTS > 0 THEN
        
          l_tab_response (l_err_ind) := 'Invalid value specified for Finding can be added by';
          L_ERR_IND := L_ERR_IND + 1;
          
        END IF;
    
    END IF;
  
  l_qstnr_metric_id  := ms_apps_utilities.get_infolet_id (ms_qsm_utilities.g_tbl_metric_maintenance ('INIQSM'));
  l_questionnaire_id := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/questionnaire_id/text()');
  
   BEGIN

       SELECT QUE_TYPE,REPORTING_PERIOD_TYPE
       INTO l_que_type,l_reporting_period_type
       FROM  MS_QSM_QUESTIONNAIRE
       WHERE INTERNAL_QUESTNR_ID = L_QUESTIONNAIRE_ID
       AND STATUS='3'
       AND ms_apps_security_pkg.check_object_access(dd_object_type, restrict_access_to,(SELECT MS_CONCAT(OWNER_ORGANIZATIONS)FROM MS_QSM_QUESTIONNAIRE_OWO WHERE INTERNAL_QUESTNR_ID =L_QUESTIONNAIRE_ID),l_dd_current_user_name, 'VIEW') = 'ACCESS';

   EXCEPTION
        WHEN OTHERS THEN
            l_tab_response (l_err_ind) := 'Invalid Questionnaire or User does not have access to the Questionnaire';
            l_err_ind := l_err_ind + 1;
   END;
  
   L_SECTIONS := MS_QSM_UTILITIES.GET_TAG_VALUE (L_OUT_XML, 'datapacket/data/nonmultirow/sections/text()');
   
   IF L_SECTIONS IS NOT NULL THEN
      
      L_TOT_COUNT :=0;
      L_EXISTS:=0;
      
      L_TOT_COUNT:= LENGTH(TRIM(L_SECTIONS))-LENGTH(REPLACE(TRIM(L_SECTIONS),',',''))+1;               
    
      SELECT COUNT(1) 
      INTO L_EXISTS 
      FROM MS_QSM_SECTION 
      WHERE INSTR(','||L_SECTIONS||',',','||SECTION_ID_PK||',',1,1)>0;
      
      IF L_EXISTS < L_TOT_COUNT THEN
        L_TAB_RESPONSE (L_ERR_IND) := 'Some of the specified sections does not exist in the system';
        L_ERR_IND := L_ERR_IND + 1;
      END IF;
   
   END IF;  
  
   if l_sch_frequency      = '6' then-- Run Now
    l_period_id          := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/reporting_period/text()');
    
    if trim(l_period_id) is not null then
      l_exists           :=0;
      
      SELECT COUNT(1)
      INTO l_exists
      FROM MS_QSM_REPORTING_PERIOD
      WHERE PERIOD_TYPE             = l_reporting_period_type
      AND PERIOD_ID                 = l_period_id;
      
      if l_exists                  <=0 then
        l_tab_response (l_err_ind) := 'Invalid Reporting Period';
        l_err_ind                  := l_err_ind + 1;
      END IF;
    END IF;
  ELSIF l_sch_frequency IN ('1','5','7') THEN -- Quarterly,Semi Annually,Annually
    BEGIN
      
      select period_id
      INTO l_period_id
      FROM MS_QSM_REPORTING_PERIOD a
      WHERE A.PERIOD_TYPE = l_reporting_period_type
      AND TRUNC(SYSDATE) BETWEEN TRUNC(A.ASSIGNMENT_START_DATE) AND TRUNC(A.ASSIGNMENT_END_DATE);
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      l_period_id := NULL;
    END;
  ELSE
    l_period_id := NULL;
  END IF;
  IF l_sch_frequency            = '3' AND l_manage_survey='1' THEN
    l_tab_response (l_err_ind) := 'Live Surveys cannot be kept open';
    l_err_ind                  := l_err_ind + 1;
  END IF;
  IF l_que_type                       = '3' THEN
    
    l_sub_certification_for          := ms_qsm_utilities.get_tag_value (l_out_xml, 'datapacket/data/nonmultirow/sub_certification_for/text()');
    
    if trim(l_sub_certification_for) is not null then
      l_exists                       :=0;
      
      SELECT COUNT(1)
      INTO l_exists
      FROM MS_QSM_INIT_QUESTNR
      where QUE_REQUEST_ID          = L_SUB_CERTIFICATION_FOR
      AND QUE_REQUEST_TYPE='3';
      IF l_exists                  <=0 THEN
        l_tab_response (l_err_ind) := 'Invalid Value for This is a sub certification for';
        l_err_ind                  := l_err_ind + 1;
      END IF;
    END IF;
  END IF;
  
  if (l_tab_response.count               <> 0) then
    l_ret_code                           := 'ERROR';
    l_integration_log (1).que_request_id :=l_que_request_id ;
    l_integration_log (1).metric_name    := ms_qsm_utilities.g_tbl_metric_maintenance ('INIQSM');
    l_integration_log (1).status         := 'E';
    l_integration_log (1).source_type    := l_source_type;
    l_integration_log (1).source_ref     := l_survey_source_ref;
    RAISE issue_exception;
  END IF;
  
  select b.locale_id
  INTO lv_user_locale_id
  FROM SI_USERS_T a,
    SI_LOCALES b
  WHERE a.USER_NAME = l_dd_current_user_name
  AND A.LOCALE      = B.LOCALE_STRING;
  
  ms_qsm_utilities.update_xml (l_out_xml, replace (l_qstnr_path, '$', 'survey_scope_selection'), '2');
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'questionnaire_id'), l_questionnaire_id);
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'key_col_name'), l_key_col_name);
  --     ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'temp_pk_id'), l_qstnr_pid);
  --     ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'process_instance_id'), l_qstnr_pid);
  --     ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'instance_id'), l_qstnr_iid);
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'instance_rec_num'), '1');
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'metric_id'), l_qstnr_metric_id);
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'metric_run_date'), TO_CHAR (SYSDATE, 'MM/DD/YYYY HH24:MI:SS'));
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'metric_completed_date'), TO_CHAR (SYSDATE, 'MM/DD/YYYY HH24:MI:SS'));
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'latest_flag'), 'Y');
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'creation_date'), TO_CHAR (SYSDATE, 'MM/DD/YYYY HH24:MI:SS'));
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'dd_current_stage'), 'CR_ED_QST');
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'dd_object_type'), ms_qsm_utilities.g_tbl_metric_maintenance ('INIQSM'));
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'previous_stage'), 'NONE');
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'que_action'), 'SUBMIT');
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'process_flow_status'), '4');
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'que_request_type'),l_que_type );
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'sch_next_date'), '');
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'sch_start_date'), l_sch_start_date);
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'del_config_flag'), MS_QSM_UTILITIES.GET_CONTACT_USER_AVAILABLE());
  
  l_user_role    := ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/send_user_role/text()');
  
  l_excel_based    := ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/excel_based/text()');
  
  if l_excel_based is null or l_excel_based='' then
      ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'excel_based'), 'no');
  END IF;
  
  IF l_user_role IS NOT NULL THEN
    SELECT MS_CONCAT(ms_apps_utilities.get_user_full_name(USER_NAME))
    INTO l_user_display
    FROM SI_USERS_T
    WHERE INSTR(','
      ||l_user_role
      ||',',','
      ||USER_NAME
      ||',',1)>0;
    ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'send_user_role_disp'), l_user_display);
  END IF;
  
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'dd_process_code'), ms_qsm_utilities.get_flow_code('QSM Questionnaire Initiation Workflow'));
  ms_qsm_utilities.update_multirow_ids(l_out_xml,l_qstnr_metric_id);
  
  if (trim (ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/published/text()'))='Y') and l_publish_request_id is not null then
    ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'previous_stage'), 'PUB_QST');
    ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'que_request_id'), l_publish_request_id);
    ms_qsm_utilities.update_xml(l_out_xml, REPLACE(l_qstnr_path,'$','sch_req_id'),l_publish_request_id);
    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/ind/row/ind_que_request_id/text()',l_publish_request_id);
    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/rmd/row/reminder_fk/text()',l_publish_request_id);
    l_qstnr_pid:=l_reinit_pid;
    --ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'temp_pk_id'), l_reinit_pid);
    --ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'process_instance_id'),l_reinit_pid);
    --ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'instance_id'), l_reinit_iid);
  ELSE
    l_qstnr_pid      := si_process_instance_id_s.NEXTVAL;
    l_que_request_id := MS_APPS_UTILITIES.GET_DISPLAY_VALUE(i_lov_name=>'MS_QSM_Init_Questionnaire_Type',i_stored_value=>l_que_type,i_locale_id=>lv_user_locale_id,i_enterprise_id=>l_enterprise_info) ||'-'||ms_qsm_que_request_id_s.NEXTVAL;
    ms_qsm_utilities.update_xml(l_out_xml, REPLACE(l_qstnr_path,'$','que_request_id'),l_que_request_id);
    ms_qsm_utilities.update_xml(l_out_xml, REPLACE(l_qstnr_path,'$','sch_req_id'),l_que_request_id);
    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/ind/row/ind_que_request_id/text()',l_que_request_id);
    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/rmd/row/reminder_fk/text()',l_que_request_id);
  END IF;
  
  l_qstnr_iid := si_metric_results_s.NEXTVAL;
  
  ms_qsm_utilities.update_xml (l_out_xml, replace (l_qstnr_path, '$', 'temp_pk_id'), l_qstnr_pid);
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'process_instance_id'), l_qstnr_pid);
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'instance_id'), l_qstnr_iid);
  --      if l_sch_frequency ='6' THEN
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'dd_event_user_name'),l_dd_current_user_name);
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'indv_item_dummy'),l_dd_current_user_name);
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'reporting_period'),l_period_id);
  ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'reporting_period_type'),l_reporting_period_type);
  
  select ms_concat(field_label)
    ||'|'
    ||MS_CONCAT(FIELD_KEY)
  INTO l_indv_item_labels
  FROM MS_QSM_APPLIES_TO_FLDS
  WHERE OBJECT_SEQ_ID =l_que_applies_to
  ORDER BY COLUMN_SEQ;
  
  ms_qsm_utilities.update_xml (l_out_xml, replace (l_qstnr_path, '$', 'indv_item_labels'),l_indv_item_labels);
  
  FOR KEY IN
  (SELECT FIELD_KEY,
    COLUMN_SEQ
  FROM MS_QSM_APPLIES_TO_FLDS
  WHERE OBJECT_SEQ_ID =l_que_applies_to
  ORDER BY COLUMN_SEQ
  )
  LOOP
    IF key.COLUMN_SEQ = 1 THEN
      ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'indv_item_key_1'),key.FIELD_KEY);
    ELSIF key.COLUMN_SEQ =2 THEN
      ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'indv_item_key_2'),key.FIELD_KEY);
    ELSIF key.COLUMN_SEQ =3 THEN
      ms_qsm_utilities.update_xml (l_out_xml, REPLACE (l_qstnr_path, '$', 'indv_item_key_3'),key.FIELD_KEY);
    END IF;
  END LOOP;
  
  for indiv_item_rec in
  (SELECT indv_item_pk,
    instance_rec_num,
    indv_appr_based_on_response,
    item_reltd_collaborator,
    item_reltd_respondent,
    send_to_assessor
  FROM XMLTABLE(xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:ind/msa:row' PASSING l_out_xml COLUMNS indv_item_pk VARCHAR2 (255) PATH 'msa:indv_item_pk', instance_rec_num NUMBER PATH 'msa:instance_rec_num', indv_appr_based_on_response VARCHAR2(100) PATH 'msa:indv_appr_based_on_response', item_reltd_collaborator VARCHAR2(100) PATH 'msa:item_reltd_collaborator', item_reltd_respondent VARCHAR2(100) PATH 'msa:item_reltd_respondent', send_to_assessor VARCHAR2(4000) PATH 'msa:send_to_assessor')
  )
  LOOP
    IF TRIM(indiv_item_rec.indv_item_pk) IS NULL THEN
      ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/ind/row[instance_rec_num ='||indiv_item_rec.instance_rec_num||']/indv_item_pk/text()','INDV-'||ms_qsm_indv_item_id_s.NEXTVAL);
    END IF;
    IF TRIM(indiv_item_rec.indv_appr_based_on_response) IS NULL THEN
      ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/ind/row[instance_rec_num ='||indiv_item_rec.instance_rec_num||']/indv_appr_based_on_response/text()','no');
    END IF;
    IF TRIM(indiv_item_rec.item_reltd_collaborator) IS NULL THEN
      ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/ind/row[instance_rec_num ='||indiv_item_rec.instance_rec_num||']/item_reltd_collaborator/text()','no');
    END IF;
    IF TRIM(indiv_item_rec.item_reltd_respondent) IS NULL THEN
      ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/ind/row[instance_rec_num ='||indiv_item_rec.instance_rec_num||']/item_reltd_respondent/text()','no');
    END IF;
    IF TRIM(indiv_item_rec.send_to_assessor) IS NOT NULL THEN
      
      select ms_concat(ms_apps_utilities.get_user_full_name(user_name))
      INTO l_user_display
      FROM SI_USERS_T
      WHERE INSTR(','
        ||indiv_item_rec.send_to_assessor
        ||',',','
        ||USER_NAME
        ||',',1)>0;
      ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/ind/row[instance_rec_num ='||indiv_item_rec.instance_rec_num||']/send_to_assessor_disp/text()',l_user_display);
    END IF;
  END LOOP;
  --      END IF;
  ms_qsm_log_activity ('', 'API XML',l_out_xml.getclobval());
  
  l_integration_log (1).enriched_xml   := l_out_xml;
  l_integration_log (1).que_request_id := l_que_request_id;
  l_integration_log (1).metric_name    := ms_qsm_utilities.g_tbl_metric_maintenance ('INIQSM');
  l_integration_log (1).status         := 'P';
  l_integration_log (1).source_type    := l_source_type;
  l_integration_log (1).source_ref     := l_survey_source_ref;
  l_error_message                      := ms_apps_mdf_infoletoutput_pkg.insert_xml (ms_qsm_utilities.g_tbl_metric_maintenance ('INIQSM')||'_V', l_qstnr_metric_id, l_qstnr_pid, l_qstnr_iid, l_out_xml.getclobval ());
  
  if l_error_message                   != 'SUCCESS' or l_error_message is null then
    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id => xn_error_handle_id, pn_error_sequence => xn_error_seq, pc_error_type => 'E', pc_error_text => 'Error While Inserting XML into Response View in the ms_QSM_INIQSM_INIQSM_PROD '||l_error_message || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
    l_tab_response (l_err_ind)           := l_error_message;
    l_err_ind                            := l_err_ind + 1;
    l_ret_code                           := 'ERROR';
    l_que_request_id                     := 'NA';
    l_integration_log (1).que_request_id := l_que_request_id;
    l_integration_log (1).metric_name    := ms_qsm_utilities.g_tbl_metric_maintenance ('INIQSM');
    l_integration_log (1).status         := 'E';
    l_integration_log (1).source_type    := l_source_type;
    l_integration_log (1).source_ref     := l_survey_source_ref;
    RAISE issue_exception;
  END IF;
  
  ms_apps_mdf_engine_pkg.start_flow(pn_pid => l_qstnr_pid ,pc_flow_code=>ms_qsm_utilities.get_flow_code('QSM Questionnaire Initiation Workflow') ,pc_metric_name=>ms_qsm_utilities.g_tbl_metric_maintenance('INIQSM') ,xn_error_handle_id =>xn_error_handle_id ,xn_error_code=>xn_error_code);
  
  IF xn_error_code = '-1' THEN
    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id => xn_error_handle_id, pn_error_sequence => xn_error_seq, pc_error_type => 'E', pc_error_text => 'Error While Starting the Response Flow' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
    l_tab_response (l_err_ind)           := 'Unable to Start the Flow';
    l_err_ind                            := l_err_ind + 1;
    l_ret_code                           := 'ERROR';
    l_integration_log (1).que_request_id := l_que_request_id;
    l_integration_log (1).metric_name    := ms_qsm_utilities.g_tbl_metric_maintenance ('INIQSM');
    l_integration_log (1).status         := 'E';
    l_integration_log (1).source_type    := l_source_type;
    l_integration_log (1).source_ref     := l_survey_source_ref;
    RAISE issue_exception;
  END IF;
  --        SELECT COUNT (1)
  --        INTO l_event_count
  --        FROM si_event_assignments
  --        WHERE infolet_id = l_qstnr_metric_id AND process_instance_id = l_qstnr_pid;
  --         IF l_event_count > 0 OR  l_sch_frequency ='6' THEN
  l_ret_code := 'PROCESSED';
  
  EXECUTE IMMEDIATE 'SELECT XMLElement("SURVEY",                  
  ms_qsm_response(:1,:2,                         
  CAST(MULTISET(SELECT resp from ' || l_response_table || ')                              
  AS VARCHAR2_ARRAY))) from dual' INTO l_response USING l_ret_code,
  
  l_que_request_id;
  l_response := REPLACE (l_response, '<VARCHAR2>', '<ROW>');
  l_response := REPLACE (l_response, '</VARCHAR2>', '</ROW>');
  
  update ms_apps_event_param_logs
  SET clob_value                        = xmltype (l_response).getclobval ()
  WHERE event_log_id                    = i_event_log_id;
  
  l_integration_log (1).que_request_id := l_que_request_id;
  l_integration_log (1).metric_name    := ms_qsm_utilities.g_tbl_metric_maintenance ('INIQSM');
  l_integration_log (1).status         := 'P';
  l_integration_log (1).source_type    := l_source_type;
  l_integration_log (1).source_ref     := l_survey_source_ref;
  l_integration_log (1).response       := xmltype (l_response);
  
   INSERT INTO ms_qsm_integration_log VALUES l_integration_log(1);
    --         ELSE
    --            l_ret_code := 'ERROR';
    --            l_integration_log (1).que_request_id := l_que_request_id;
    --            l_integration_log (1).metric_name := ms_qsm_utilities.g_tbl_metric_maintenance ('INIQSM');
    --            l_integration_log (1).status := 'E';
    --            l_integration_log (1).source_type := l_source_type;
    --            l_integration_log (1).source_ref := l_survey_source_ref;
    --            RAISE issue_exception;
    --         END IF;
    BEGIN
      
        EXECUTE IMMEDIATE 'Drop table QSM_API_RESPONSE_' || DBMS_SESSION.unique_session_id || ' PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        ms_qsm_log_activity('', 'API XML EXCEPTION','');
    END;
    
    
  EXCEPTION WHEN issue_exception THEN
    BEGIN
      --                      ms_qsm_log_activity ('', 'API XML EXCEPTION','');
      IF l_tab_response.COUNT > 0 THEN
        FOR x                IN l_tab_response.FIRST .. l_tab_response.LAST
        LOOP
          --                         ms_qsm_log_activity ('', 'API XML EXCEPTION VAL'||x,(l_tab_response (x)));
          pr_populate_response
          (
            l_tab_response (x)
          )
          ;
        END LOOP;
      END IF;
    --                  ms_qsm_log_activity ('', 'API XML PARAMS'||l_ret_code||','||l_que_request_id,'');
    
    EXECUTE IMMEDIATE 'SELECT XMLElement("SURVEY",                      
    ms_Qsm_response(:1,:2,                             
    CAST(MULTISET(SELECT resp from ' || l_response_table || ')                                  
    AS VARCHAR2_ARRAY))) from dual' INTO l_response USING l_ret_code,
    l_que_request_id;
    --                    ms_qsm_log_activity ('', 'API XML EXCEPTION VAL'||'2','');
    l_response := replace (l_response, '<VARCHAR2>', '<ROW>');
    l_response := REPLACE(l_response, '</VARCHAR2>', '</ROW>');
  
    update ms_apps_event_param_logs
    SET clob_value                  = xmltype (l_response).getclobval ()
    WHERE event_log_id              = i_event_log_id;
    
    l_integration_log (1).response := xmltype (l_response);
  
    insert into ms_qsm_integration_log values l_integration_log (1);
    
    BEGIN
      EXECUTE IMMEDIATE 'Drop table QSM_API_RESPONSE_' || DBMS_SESSION.unique_session_id || ' PURGE';
    EXCEPTION
    WHEN OTHERS THEN
      NULL;
    END;
  EXCEPTION
  WHEN OTHERS THEN
    --                                    ms_qsm_log_activity ('', 'API XML EXCEPTION VAL'||SQLERRM,'');
    BEGIN
      EXECUTE IMMEDIATE 'Drop table QSM_API_RESPONSE_' || DBMS_SESSION.unique_session_id || ' PURGE';
    EXCEPTION
    WHEN OTHERS THEN
      NULL;
    END;
  end;
  WHEN OTHERS THEN
  ms_apps_mdf_errors_pkg.insert_log
  (
    pn_error_handle_id => xn_error_handle_id, pn_error_sequence => xn_error_seq, pc_error_type => 'E', pc_error_text => 'Fatal Error in the MS_QSM_ENGINE Package ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM
  )
  ;
  FOR x IN l_tab_response.FIRST .. l_tab_response.LAST
  LOOP
    pr_populate_response
    (
      l_tab_response (x)
    )
    ;
  END LOOP;
  EXECUTE IMMEDIATE 'SELECT XMLElement("SURVEY",                  
    ms_qsm_response(:1,:2,                         
    CAST(MULTISET(SELECT resp from ' || l_response_table || ')                              
    AS VARCHAR2_ARRAY))) from dual' INTO l_response USING l_ret_code,
  l_que_request_id;
   
  l_response := REPLACE(l_response, '<VARCHAR2>', '<ROW>');
  l_response := REPLACE(l_response, '</VARCHAR2>', '</ROW>');
  l_integration_log(1).response := xmltype(l_response);
 
  insert into ms_qsm_integration_log values l_integration_log(1);
  
  update ms_apps_event_param_logs
  SET clob_value     = xmltype (l_response).getclobval()
  where event_log_id = i_event_log_id;
  
  BEGIN
    EXECUTE IMMEDIATE 'Drop table QSM_API_RESPONSE_' || DBMS_SESSION.unique_session_id || ' PURGE';
  EXCEPTION
  WHEN OTHERS THEN
    NULL;
  end;
end; --End Trigger Survey 
END ms_qsm_engine;
 
/
  CREATE OR REPLACE FUNCTION "NOVT_DEV"."MS_QSM_EXECUTE_DDL" (
   p_str         VARCHAR2,
   param1        VARCHAR2 DEFAULT NULL,
   param2        VARCHAR2 DEFAULT NULL,
   param3        varchar2 default null,
   p_drop_flag   VARCHAR2 DEFAULT NULL
)
   RETURN VARCHAR2
AS
   PRAGMA AUTONOMOUS_TRANSACTION;
   l_str     VARCHAR2 (4000);
   l_table   VARCHAR2 (100)  := NULL;
   l_count   NUMBER          := 0;
   l_sql     VARCHAR2 (1000);
BEGIN
   l_str := p_str;

   IF INSTR (l_str, '$$', 1) = 0 AND p_drop_flag = 'N'
   THEN
      DBMS_OUTPUT.PUT_LINE('HERE 1');
      EXECUTE IMMEDIATE l_str
                  USING param1, param2,param3;
   ELSIF INSTR (l_str, '$$', 1) = 0 AND p_drop_flag = 'Y'
   THEN
      DBMS_OUTPUT.PUT_LINE('HERE 2');
      EXECUTE IMMEDIATE l_str;
   ELSE
      DBMS_OUTPUT.PUT_LINE('CREATING tABLE '||'T_ISM_' || DBMS_SESSION.unique_session_id);
      l_table := 'T_ISM_' || DBMS_SESSION.unique_session_id;
      l_sql :=
            'select count(1) from user_objects where object_name = '
         || ''''
         || l_table
         || '''';

      EXECUTE IMMEDIATE l_sql
                   INTO l_count;

      /*BEGIN
         EXECUTE IMMEDIATE 'drop table ' || l_table;
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;*/
      DBMS_OUTPUT.put_line (l_count);

      IF l_count = 0
      THEN
         EXECUTE IMMEDIATE    'create table '
                           || l_table
                           || '(instance_id number,stage varchar2(10),action number)';
--        EXECUTE IMMEDIATE 'alter table '||l_table||' add constraint UK_'||dbms_session.unique_session_id||' unique  (stage,action)';
      END IF;

      l_str := REPLACE (l_str, '$$', l_table);
      DBMS_OUTPUT.put_line ('ACTUAL STR IS '||l_str);

      EXECUTE IMMEDIATE l_str
                  USING param1, param2,param3;
   END IF;

   COMMIT;
   RETURN l_table;
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line (SQLERRM);
      DBMS_OUTPUT.put_line (DBMS_UTILITY.format_error_backtrace);
      ROLLBACK;
      RETURN NULL;
END; 
 
  
 
/
  CREATE OR REPLACE FUNCTION "NOVT_DEV"."MS_QSM_FETCH_OVERDUE_SURVEYS" 
    RETURN MS_QSM_OVERDUE_Table PIPELINED
  AS
    V_NO_OF_DAYS_AFTER_DUE_DATE PLS_INTEGER := MS_APPS_UTILITIES.GET_PARAMETER_VALUE (1,'MS_QSM_Configuration','Number_of_Days_after_due');
    V_AUTO_CREATION_FLAG PLS_INTEGER        := MS_APPS_UTILITIES.GET_PARAMETER_VALUE (1,'MS_QSM_Configuration','Enable_Auto_Creation_of_Issues');
    V_ISSUE_LANDING_STAGE VARCHAR2(4000)    := MS_APPS_UTILITIES.GET_PARAMETER_VALUE (1,'MS_QSM_Configuration','Issue_Landing_Stage');
    
    V_OWNED_BY                    VARCHAR2(4000);
    V_ISSUE_APPROVER_ORGANIZATION VARCHAR2(4000);
    V_ISSUE_APPROVER              VARCHAR2(4000);
    V_USER_LIST                   VARCHAR2(4000);
    V_ISSUE_DUE_DATE_DAYS         NUMBER;
    V_ACTION_DUE_DATE_DAYS        NUMBER;
    V_ISSUE_TITLE                 VARCHAR2(4000);
    V_ISSUE_DESCRIPTION           VARCHAR2(4000);
    V_SOURCE                      VARCHAR2(4000);
    V_ACTION_TITLE                VARCHAR2(4000);
    V_ACTION_DESCRIPTION          VARCHAR2(4000);
    V_FINDING_TYPE                VARCHAR2(4000);
    V_SOURCE_TYPE                 VARCHAR2(4000);
    V_ISSUE_RATING                VARCHAR2(4000);
    V_PRIORITY                    VARCHAR2(4000);
    
    V_ISSUE_OWNER_LIST  MS_VARCHAR2_ARRAY;
    V_COLLABORATION_STATUS NUMBER; --1: YES --2:NO
    
    
    
    CURSOR C_FETCH_OVERDUE_RECORDS(CP_ISSUE_TITLE IN VARCHAR2, 
                                  CP_ISSUE_DESCRIPTION IN VARCHAR2, 
                                  CP_SOURCE IN VARCHAR2, 
                                  CP_SOURCE_TYPE IN VARCHAR2, 
                                  CP_ACTION_TITLE IN VARCHAR2, 
                                  CP_FINDING_TYPE IN VARCHAR2, 
                                  CP_ACTION_DESCRIPTION IN VARCHAR2)
    IS
      SELECT a.*
      FROM
        (SELECT A.RESPONDENT                              AS OWNED_BY,
          --TO_CHAR(a.ISSUE_DUE_DATE,'DD/MM/YYYY HH:MM:SS') AS Issue_Due_Date,
          --ACTION_PRIORITY                                 AS Priority,
          PROCESS_INSTANCE_ID,
          PROCESS_FLOW_STATUS,
          INSTANCE_REC_NUM,
          RESP_STATUS,
          DUE_DATE,
          SUBMIT_ACTION,
          INSTANCE_ID,
          QUE_REQUEST_ID,
          QUE_RESPONSE_ID,
          A.RESPONDENT                                                                                                    AS ISSUE_OWNER,
          --A.ISSUE_RATING                                                                                                  AS ISSUE_RATING,
         -- TO_CHAR(a.ACTION_DUE_DATE,'DD/MM/YYYY HH:MM:SS')                                                                AS Action_Due_Date,
          A.RESPONDENT                                                                                                    AS ACTION_OWNER,
          REPLACE(REPLACE(CP_ISSUE_TITLE,'<Supplier Name>',A.APPLIES_TO_OBJECT),'<Survey Name>',A.QUE_REQUEST_NAME)       AS ISSUE_TITLE,
          REPLACE(REPLACE(CP_ISSUE_DESCRIPTION,'<Supplier Name>',a.APPLIES_TO_OBJECT),'<Survey Name>',A.QUE_REQUEST_NAME) AS Issue_Description,
          CP_FINDING_TYPE                                                                                                 AS FINDING_TYPE,
         -- CP_SOURCE_TYPE                                                                                                  AS SOURCE_TYPE, 
          '11'                                                                                                             AS SOURCE_TYPE,--changed as per inputs    
          --REPLACE(REPLACE(CP_SOURCE,'<Supplier Name>',a.APPLIES_TO_OBJECT),'<Survey Name>',A.QUE_REQUEST_NAME)            AS SOURCE,
          A.QUE_REQUEST_ID                                                                                                AS SOURCE,--changed as per inputs
          a.que_response_id                                                                                               AS Source_Reference,
          'yes'                                                                                                           AS SAME_APPROVER_FLAG,
          NULL                                                                                                            AS APPROVER_ORG,
          NULL                                                                                                            AS APPROVER,
          'Y'                                                                                                             AS FINAL_ACTION_APPROVAL,
          TO_CHAR(SYSDATE,'MM/DD/YYYY HH:MM:SS')                                                                          AS ACTION_START_DATE,
          (SELECT b.object_type
          FROM ms_qsm_applies_to b
          WHERE b.object_name = a.APPLIES_TO
          )                                                                                                              AS TARGET_OBJECT_TYPE,
        A.APPLIES_TO_OBJECT                                                                                                AS TARGET_OBJECT_NAME,
        a.applies_to_object_code                                                                                           AS Target_object_id,
        REPLACE(REPLACE(CP_ACTION_TITLE,'<Supplier Name>',A.APPLIES_TO_OBJECT),'<Survey Name>',A.QUE_REQUEST_NAME)       AS ACTION_TITLE,
        REPLACE(REPLACE(CP_ACTION_DESCRIPTION,'<Supplier Name>',a.APPLIES_TO_OBJECT),'<Survey Name>',A.QUE_REQUEST_NAME) AS Action_Description,
        MAX(instance_id) over (partition BY process_instance_id) max_iid
      FROM MS_QSM_QUESTNR_RESP_DUP_V A
       ) A
      WHERE INSTANCE_ID=MAX_IID
      AND INSTANCE_REC_NUM  = 1
      AND ((RESP_STATUS = '4') OR ((RESP_STATUS = '1') AND (SUBMIT_ACTION = 'REQ_CLR'))) --TO HANDLE 'In-Progress' and 'Request for clarification'
      AND V_AUTO_CREATION_FLAG = 1 --INSTANCE LEVEL CHECK
      AND (TRUNC(DUE_DATE) + V_NO_OF_DAYS_AFTER_DUE_DATE) < TRUNC(SYSDATE)
      AND EXISTS (SELECT 1 FROM MS_QSM_INIT_QUESTNR T WHERE  T.AUTO_CREATE_ISSUE = 'yes' AND A.QUE_REQUEST_ID = T.QUE_REQUEST_ID) --FORM LEVEL CHECK
      AND NOT EXISTS (SELECT 1 FROM MS_QSM_OVERDUE_ISSUE_LOG Q WHERE A.QUE_RESPONSE_ID = Q.SOURCE_REFERENCE); --TO AVOID REPEAT FETCH
      --and A.PROCESS_FLOW_STATUS = 4;--ADDED TO FETCH RECORDS WHERE THE SURVEY HAS NOT BEEN RESPONDED TO (SURVEYS IN-PROCESS)
      
      
    BEGIN
 
      IF V_NO_OF_DAYS_AFTER_DUE_DATE >= 0 THEN
      
        BEGIN
              /*SELECT FIELD_VALUE
              INTO V_ISSUE_APPROVER_ORGANIZATION
              FROM MS_QSM_AUTO_ISSUE_CONFIG
              WHERE FIELD_KEY = 'Issue_Approver_Organization';*/
              
              /*conversion to stored value*/
              SELECT ORG_ENTITY_ID  INTO V_ISSUE_APPROVER_ORGANIZATION
              FROM SI_ORG_ENTITIES_T A 
              where A.ORG_ENTITY_NAME = (SELECT FIELD_VALUE
              FROM MS_QSM_AUTO_ISSUE_CONFIG
              WHERE FIELD_KEY = 'Issue_Approver_Organization');
              
              
              
              SELECT field_value
              INTO V_ISSUE_APPROVER
              FROM MS_QSM_AUTO_ISSUE_CONFIG
              WHERE FIELD_KEY = 'Issue_Approver';
              
              
             /*  SELECT  DISTINCT USER_NAME INTO V_USER_LIST
               FROM MS_QSM_ORG_FLOW_V
              -- WHERE ORG_ENTITY_NAME = v_issue_approver_organization
               WHERE ORG_ENTITY_ID = v_issue_approver_organization
               AND ROLE_NAME         = V_ISSUE_APPROVER
               AND ROWNUM<=1;--USER_LIST*/
               
               SELECT DISTINCT USER_NAME INTO V_USER_LIST
               FROM MS_QSM_ORG_FLOW_V
               WHERE ORG_ENTITY_ID = V_ISSUE_APPROVER_ORGANIZATION
               AND USER_NAME = upper(V_ISSUE_APPROVER)
               AND ACTIVITY_NAME = 'ISM - Approve Issue';
                
              SELECT FIELD_VALUE
              INTO V_ISSUE_DUE_DATE_DAYS
              FROM MS_QSM_AUTO_ISSUE_CONFIG
              WHERE FIELD_KEY = 'Issue_Due_Date';
              
              SELECT FIELD_VALUE
              INTO V_ACTION_DUE_DATE_DAYS
              FROM MS_QSM_AUTO_ISSUE_CONFIG
              WHERE FIELD_KEY = 'Action_Due_Date';
              
             /* SELECT FIELD_VALUE INTO V_ISSUE_RATING 
              FROM MS_QSM_AUTO_ISSUE_CONFIG 
              WHERE FIELD_KEY = 'Issue_Rating';*/
              
      
              
              SELECT STORED_VALUE INTO V_ISSUE_RATING FROM MS_QS_LOV_ORG_VALUES_V WHERE LOV_NAME =  'MS ISM Risk Rating' 
              and displayed_value = (SELECT FIELD_VALUE
              FROM MS_QSM_AUTO_ISSUE_CONFIG 
              WHERE FIELD_KEY = 'Issue_Rating') AND LOCALE_ID = (SELECT b.LOCALE_ID
              FROM MS_QSM_AUTO_ISSUE_CONFIG A,SI_LOCALES B 
              WHERE FIELD_KEY = 'Issue_Rating' and b.LOCALE_STRING = a.LOCAL_STRING);
              
        
              
              SELECT STORED_VALUE INTO V_PRIORITY FROM MS_QS_LOV_ORG_VALUES_V WHERE LOV_NAME =  'MS ISM Priority' 
              and displayed_value = (SELECT FIELD_VALUE
              FROM MS_QSM_AUTO_ISSUE_CONFIG 
              WHERE FIELD_KEY = 'Priority') AND LOCALE_ID = (SELECT b.LOCALE_ID
              FROM MS_QSM_AUTO_ISSUE_CONFIG A,SI_LOCALES B 
              WHERE FIELD_KEY = 'Priority' and b.LOCALE_STRING = a.LOCAL_STRING);
              
            
              
             
              SELECT FIELD_VALUE
              INTO V_ISSUE_TITLE
              FROM MS_QSM_AUTO_ISSUE_CONFIG
              WHERE FIELD_KEY = 'Issue_Title';
              
              SELECT field_value
              INTO V_ISSUE_DESCRIPTION
              FROM MS_QSM_AUTO_ISSUE_CONFIG
              WHERE FIELD_KEY = 'Issue_Description';
              
              SELECT field_value
              INTO V_SOURCE
              FROM MS_QSM_AUTO_ISSUE_CONFIG
              WHERE FIELD_KEY = 'Source';
              
              SELECT field_value
              INTO V_SOURCE_TYPE
              FROM MS_QSM_AUTO_ISSUE_CONFIG
              WHERE FIELD_KEY = 'Source_Type';
              
              SELECT field_value
              INTO V_ACTION_TITLE
              FROM MS_QSM_AUTO_ISSUE_CONFIG
              WHERE FIELD_KEY = 'Action_Title';
              
              SELECT field_value
              INTO V_FINDING_TYPE
              FROM MS_QSM_AUTO_ISSUE_CONFIG
              WHERE FIELD_KEY = 'Finding_Type';
              
              SELECT field_value
              INTO V_ACTION_DESCRIPTION
              FROM MS_QSM_AUTO_ISSUE_CONFIG
              WHERE FIELD_KEY = 'Action_Description';
              
              SELECT FIELD_VALUE 
              INTO V_OWNED_BY
              FROM MS_QSM_AUTO_ISSUE_CONFIG 
              WHERE FIELD_KEY = 'Owned_By';
              
       EXCEPTION
      WHEN OTHERS THEN
      RETURN;
      END;
      
      
      
      
      
        FOR I IN C_FETCH_OVERDUE_RECORDS(V_ISSUE_TITLE,
                                         V_ISSUE_DESCRIPTION,
                                         V_SOURCE,
                                         V_SOURCE_TYPE,
                                         V_ACTION_TITLE,
                                         V_FINDING_TYPE,
                                         V_ACTION_DESCRIPTION)
        LOOP
        
        
        --To manage single copy
        BEGIN
         SELECT MS_APPS_UTILITIES.SPLIT_STRING(I.ISSUE_OWNER,',') 
         INTO V_ISSUE_OWNER_LIST
         FROM DUAL;
        EXCEPTION
        WHEN OTHERS THEN
        RETURN;
        END;
        
        
        
        
        IF V_ISSUE_OWNER_LIST.COUNT > 0 THEN
        FOR J IN 1..V_ISSUE_OWNER_LIST.COUNT 
        LOOP
        
        
          PIPE ROW (MS_QSM_OVERDUE_ROW(
                                        --V_OWNED_BY,--Owned_By
                                        V_ISSUE_APPROVER_ORGANIZATION,
                                      --I.OWNED_BY,
                                      -- I.ISSUE_DUE_DATE,
                                       TO_CHAR((SYSDATE+V_ISSUE_DUE_DATE_DAYS),'MM/DD/YYYY HH:MM:SS'), --Issue_due_date
                                       I.ISSUE_TITLE, --Issue_Title
                                      -- I.ISSUE_OWNER, --Issue_Owner
                                       V_ISSUE_OWNER_LIST(J),--Issue_Owner
                                       I.ISSUE_DESCRIPTION, --Issue_Description
                                       V_ISSUE_RATING, --Issue_Rating
                                       I.FINDING_TYPE, --Finding_Type
                                       I.SOURCE_TYPE, --Source_Type
                                       I.SOURCE, --Source
                                       I.SOURCE_REFERENCE, --Source_Reference
                                       I.SAME_APPROVER_FLAG, --Same_Approver_Flag
                                       V_ISSUE_APPROVER_ORGANIZATION, --Approver_Org
                                       --Approver_Org
                                       V_USER_LIST, --Issue_Approver                                                                                                                                                                                               --Approver
                                       I.FINAL_ACTION_APPROVAL,--final_action_approval
                                      --  I.ACTION_DUE_DATE,
                                       TO_CHAR((SYSDATE+V_ACTION_DUE_DATE_DAYS),'MM/DD/YYYY HH:MM:SS'), --ACTION_DUE_DATE
                                       --I.ACTION_OWNER, --Action_Owner
                                        V_ISSUE_OWNER_LIST(J),--Action_Owner (Using the same issue owner list as issue/action owner is the respondent)
                                       I.ACTION_TITLE, --Action_Title
                                       I.ACTION_DESCRIPTION, --Action_Description
                                       V_PRIORITY, --Priority
                                       I.ACTION_START_DATE, --Action_Start_Date
                                       I.TARGET_OBJECT_TYPE, --Target_object_type
                                       I.TARGET_OBJECT_NAME, --Target_object_name
                                       I.TARGET_OBJECT_ID,--Target_object_id
                                       V_ISSUE_LANDING_STAGE) --issue_landing_stage_config_parameter
                   );
          END LOOP;
         
         END IF;
         
         
     
         
         
         
        END LOOP;
      END IF;
      RETURN;
EXCEPTION
WHEN OTHERS THEN
RETURN;
END; 
 
/
  CREATE OR REPLACE FUNCTION "NOVT_DEV"."MS_QSM_FETCH_RESPONDED_SURVEYS" 
    RETURN MS_QSM_RESPONDED_Table PIPELINED
  AS
BEGIN

FOR I IN ( SELECT '11' AS ISSUE_SOURCE_TYPE,
           b.ISSUE_ID AS ISSUE_ID,
          'Automatic Issue Closure' AS  COMMENTS,
           b.ACTION_IDS AS ACTION_ID,
          'Responded to the Survey' AS WORK_DONE,
          'Automatic Action Closure' AS RESULTS
           FROM
          (SELECT QUE_RESPONSE_ID,INSTANCE_ID,MAX(INSTANCE_ID) OVER (PARTITION BY PROCESS_INSTANCE_ID) MAX_IID
          FROM MS_QSM_QUESTNR_RESP_DUP_V WHERE INSTANCE_REC_NUM = 1 AND RESP_STATUS <> '4' ) A,
          MS_QSM_OVERDUE_ISSUE_LOG B 
          WHERE A.INSTANCE_ID = A.MAX_IID
          AND B.SOURCE_REFERENCE = A.QUE_RESPONSE_ID
          AND nvl(B.CLOSURE_MESSAGE,'#') <> 'CLOSED'
        )
        
LOOP

PIPE ROW(MS_QSM_RESPONDED_ROW(I.ISSUE_SOURCE_TYPE,
                              I.ISSUE_ID,
                              I.COMMENTS,
                              I.ACTION_ID,
                              I.WORK_DONE,
                              I.RESULTS
                             )
        );

END LOOP;



RETURN;

EXCEPTION
WHEN OTHERS THEN
RETURN;

END; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_FINDING_ISSUES_NEW_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name  : MS_QSM_FINDING_ISSUES_NEW_P
    Creation Time : Wed Jun 11 20:57:22 IST 2014
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_FINDING_ISSUES_NEW_P' ;
    GV_program_name VARCHAR2(100);
   
   
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id  IN                      NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id         IN                      VARCHAR2,
            iop_log_no              IN   OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY     CLOB,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2,
            iop_error_seq         IN     OUT                NUMBER,
            ip_pid                IN                        NUMBER
        );
   


END MS_QSM_FINDING_ISSUES_NEW_P ;
 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_FINDING_ISSUES_NEW_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Body.
    Author : Data Designer ETL Engine
   -------------------------------------------------------------------------- */
   
   
/* --------------------------------------------------------------------------------
    GENERATE_UPDATE_HIERARCHY : Procedure to get the update the xml data hierarchy
   ------------------------------------------------------------------------------ */

    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        );
        
    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        )
    AS
        LV_error_code               NUMBER;
        LV_error_message            VARCHAR2(1000);
        UPDATE_HIERARCHY_EXCEP      EXCEPTION;
        LV_xml                      XMLTYPE := iop_xml;
		LV_namespace                varchar2(100) := 'xmlns="http://www.metricstream.com/appstudio/msa"';
        lv_program_name             VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UPDATE_HIERARCHY';


/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
      
    	           	    SELECT DELETEXML(LV_XML,'datapacket/data/iss/row/finding_fk',LV_namespace) INTO LV_XML FROM DUAL;
	           
	FOR rec in (SELECT DISTINCT 
        	    	  	 que_response_id
        FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
      'msa:datapacket/msa:data/msa:nonmultirow'       PASSING LV_xml
    COLUMNS
            	 que_response_id  VARCHAR2(4000)    PATH  'msa:que_response_id'
       ))
   
   LOOP
               	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/iss/row','finding_fk',XMLTYPE('<finding_fk ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.que_response_id||'</finding_fk>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	    END LOOP;
           	    SELECT DELETEXML(LV_XML,'datapacket/data/act/row/action_fk',LV_namespace) INTO LV_XML FROM DUAL;
	           
	FOR rec in (SELECT DISTINCT 
        	    	  	 finding_id
        FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
     'msa:datapacket/msa:data/msa:iss/msa:row'      PASSING LV_xml
    COLUMNS
            	 finding_id  VARCHAR2(4000)    PATH  'msa:finding_id'
       ))
   
   LOOP
               	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/act/row','action_fk',XMLTYPE('<action_fk ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.finding_id||'</action_fk>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	    END LOOP;
	iop_xml := LV_xml;
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_pid);
    EXCEPTION
        WHEN UPDATE_HIERARCHY_EXCEP THEN

            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE_HIERARCHY_EXCEP Exception Raised ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO  MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
			MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UPDATE_HIERARCHY;
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
        LV_error_code NUMBER;
        LV_error_message VARCHAR2(1000);
        NEXT_ID_GEN_EXCEPTION EXCEPTION;
        lv_program_name VARCHAR2(100);
        ln_error_seq NUMBER:=1;

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'GET_NEXT_ID';

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;

    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_process_instance_id);
      
             
 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_process_instance_id);
    EXCEPTION
        WHEN NEXT_ID_GEN_EXCEPTION THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] NEXT_ID_GEN_EXCEPTION Exception Raised ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] WHEN OTHERS ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END GET_NEXT_ID;


 

  	    	 
  	    	 
  	    	              
/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY         CLOB,
            iop_log_no            IN     OUT                    NUMBER,
            op_error_code                OUT                    NUMBER,
            op_error_message             OUT                    VARCHAR2,
            iop_error_seq         IN     OUT                    NUMBER,
            ip_pid                IN                            NUMBER

        )
    AS

/* --------------------------------------------------------------------------
     ETL procedure created by the ETL Engine of APP BUILDER.
     The procedure takes care of loading the data that is sent
     by the FLOW BUILDER and store the same in MS TABLES.
     Data is already processed and stored accordingly in the iop_data
     object structure. The object can have one or more records.
     The ETL is designed to take care of one or more records.
     If the data has to be manipulated before populating the main
     MS TABLES, please use the HOOKS that are generated by the
     FLOW BUILDER.
   -------------------------------------------------------------------------- */
        LV_progress VARCHAR2(3) := NULL;
        LV_cntr_1   NUMBER      := NULL;
        LV_cntr_2   NUMBER      := NULL;
        LV_debug    BOOLEAN     := FALSE;
        LV_XML      XMLTYPE     := XMLTYPE(iop_xml_data);
        LV_err_code NUMBER      := NULL;
        LV_err_msg  VARCHAR2(4000);
        lV_program_name VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
              AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
      
    /************* Add the cursors for all the regions ******************/
      
            
   /************* End of cursors for all the regions ******************/
    
   /************ Add the cursors for all object relationships *****************************/
    	  		  			   CURSOR CU_QSM_RESP_ISSUE is (SELECT 
			   			   
		   	   			   	   				   	   		 ISSUE_OWNER
			   	   				   			   	   				   	   		,  ISSUE_DISPOSITION
			   	   				   			   	   				   	   		,  ISSUE_TITLE
			   	   				   			   	   				   	   		,  ISSUE_APPROVER_ORG
			   	   				   			   	   				   	   		,  ISSUE_OWNER_ORG
			   	   				   			   	   				   	   		,  TO_DATE(ISSUE_DUE_DATE ,'MM/dd/yyyy HH24:mi:ss') AS ISSUE_DUE_DATE
			   	   				   			   	   				   	   		,  ISSUE_DETAILS
			   	   				   			   	   				   	   		,  FINDING_ID
			   	   				   			   	   				   	   		,  ISSUE_RECOMENDATIONS
			   	   				   			   	   				   	   		,  ISSUE_TYPE
			   	   				   			   	   				   	   		,  FINDING_FK
			   	   				   			   	   				   	   		,  ISSUE_APPROVER
			   	   				   			   	   				   	   		,  ISSUE_RATING
			   	   				   			   FROM XMLTABLE(XMLNAMESPACES( 'http://www.metricstream.com/appstudio/msa'  as "msa"),'msa:datapacket/msa:data/msa:iss/msa:row'
			   PASSING LV_xml
	           COLUMNS
	           			   		       			 ISSUE_OWNER  VARCHAR2(4000)   PATH 'msa:issue_owner'		       		       			,  ISSUE_DISPOSITION  VARCHAR2(4000)   PATH 'msa:issue_disposition'		       		       			,  ISSUE_TITLE  VARCHAR2(4000)   PATH 'msa:issue_title'		       		       			,  ISSUE_APPROVER_ORG  VARCHAR2(4000)   PATH 'msa:issue_approver_org'		       		       			,  ISSUE_OWNER_ORG  VARCHAR2(4000)   PATH 'msa:issue_owner_org'		       		       			,  ISSUE_DUE_DATE  VARCHAR2(40)   PATH 'msa:issue_due_date'		       		       			,  ISSUE_DETAILS  VARCHAR2(4000)   PATH 'msa:issue_details'		       		       			,  FINDING_ID  VARCHAR2(4000)   PATH 'msa:finding_id'		       		       			,  ISSUE_RECOMENDATIONS  VARCHAR2(4000)   PATH 'msa:issue_recomendations'		       		       			,  ISSUE_TYPE  VARCHAR2(4000)   PATH 'msa:issue_type'		       		       			,  FINDING_FK  VARCHAR2(4000)   PATH 'msa:finding_fk'		       		       			,  ISSUE_APPROVER  VARCHAR2(4000)   PATH 'msa:issue_approver'		       		       			,  ISSUE_RATING  VARCHAR2(4000)   PATH 'msa:issue_rating'		       	       	   )); 
	    TYPE LT_QSM_RESP_ISSUE IS TABLE OF CU_QSM_RESP_ISSUE%ROWTYPE;
		TY_QSM_RESP_ISSUE  LT_QSM_RESP_ISSUE;
	       	     		  
   		  			   CURSOR CU_QSM_RESP_ACTION is (SELECT 
			   			   
		   	   			   	   				   	   		 AC_ISSUE_TITLE
			   	   				   			   	   				   	   		,  ACTION_PRIORITY
			   	   				   			   	   				   	   		,  ACTION_FK
			   	   				   			   	   				   	   		,  ACTION_DESCRIPTION
			   	   				   			   	   				   	   		,  TO_DATE(ACTION_DUE_DATE ,'MM/dd/yyyy HH24:mi:ss') AS ACTION_DUE_DATE
			   	   				   			   	   				   	   		,  ACTION_OWNER
			   	   				   			   	   				   	   		,  ACTION_TITLE
			   	   				   			   	   				   	   		,  ACTION_ID
			   	   				   			   FROM XMLTABLE(XMLNAMESPACES( 'http://www.metricstream.com/appstudio/msa'  as "msa"),'msa:datapacket/msa:data/msa:act/msa:row'
			   PASSING LV_xml
	           COLUMNS
	           			   		       			 AC_ISSUE_TITLE  VARCHAR2(4000)   PATH 'msa:ac_issue_title'		       		       			,  ACTION_PRIORITY  VARCHAR2(4000)   PATH 'msa:action_priority'		       		       			,  ACTION_FK  VARCHAR2(4000)   PATH 'msa:action_fk'		       		       			,  ACTION_DESCRIPTION  VARCHAR2(4000)   PATH 'msa:action_description'		       		       			,  ACTION_DUE_DATE  VARCHAR2(40)   PATH 'msa:action_due_date'		       		       			,  ACTION_OWNER  VARCHAR2(4000)   PATH 'msa:action_owner'		       		       			,  ACTION_TITLE  VARCHAR2(4000)   PATH 'msa:action_title'		       		       			,  ACTION_ID  VARCHAR2(4000)   PATH 'msa:action_id'		       	       	   )); 
	    TYPE LT_QSM_RESP_ACTION IS TABLE OF CU_QSM_RESP_ACTION%ROWTYPE;
		TY_QSM_RESP_ACTION  LT_QSM_RESP_ACTION;
	       	     		  
   		      BEGIN

/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------
    Note: Defining SAVEPOINT TO ROLLBACK transactions done by ETL.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        LV_progress := '001';
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'CALL_ETL';


/* --------------------------------------------------------------------------
    Note: Default DEBUG FLAG is set to FALSE to avoid unneccessary logging of data.
            If any issues found in ETL, to understand what goes into the ETL
            then set this variable to TRUE and run the ETL in the flow.
            It allows to log the entire relevant data set.
   -------------------------------------------------------------------------- */
        LV_debug := FALSE;

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);
        
        UPDATE_HIERARCHY
        (
           iop_log_no          => LV_log_no.APP_LOG_NO,
           iop_xml             => LV_XML,
           op_error_code       => LV_err_code,
           op_error_message    => LV_err_msg,
           iop_error_sequence  => iop_error_seq,
           ip_pid              => ip_pid
        );

        IF(LV_err_code !=0) THEN
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'W','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Failed while updating Hierarchy ', ip_pid);
        END IF;
        
        /* capture all cursors here */
		
				 OPEN CU_QSM_RESP_ISSUE;
	       FETCH CU_QSM_RESP_ISSUE BULK COLLECT INTO TY_QSM_RESP_ISSUE;
	       CLOSE CU_QSM_RESP_ISSUE; 		
				 OPEN CU_QSM_RESP_ACTION;
	       FETCH CU_QSM_RESP_ACTION BULK COLLECT INTO TY_QSM_RESP_ACTION;
	       CLOSE CU_QSM_RESP_ACTION; 		
		
        LV_cntr_1 := 0;
      
/* --------------------------------------------------------------------------
        Cursor to fetch non multirow details from XML
   -------------------------------------------------------------------------- */
		        FOR iop_data in ( SELECT  INSTANCE_ID
                                 ,METRIC_ID
                                 ,TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_RUN_DATE
                                 ,TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
                                 ,LATEST_FLAG
                                 ,CREATED_BY
                                 ,TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE
                                 ,PROCESS_FLOW_STATUS
                                 ,PROCESS_INSTANCE_ID
                                 ,ELECTRONICALLY_SIGNED
	                             ,INSTANCE_REC_NUM
											 					   	  , QUE_RESPONSE_ID
					    											 					   	  , RTF_ATTACH
					    											 					   	  , QUE_REQUEST_NAME
					    											 					   	  , FINDING_ISSUES_PK
					    											 					   	  , DD_EVENT_USER_NAME
					    											 					   	  , DD_CURRENT_USER_NAME
					    											 					   	  , DD_OBJECT_TYPE
					    											 					   	  , DD_PROCESS_CODE
					    										FROM XMLTABLE(XMLNAMESPACES(  'http://www.metricstream.com/appstudio/msa'  as "msa"),
                                'msa:datapacket/msa:data/msa:nonmultirow' 
                               PASSING LV_XML
                               COLUMNS
                                INSTANCE_ID                      NUMBER          PATH  'msa:instance_id'
                               ,METRIC_ID                        NUMBER          PATH  'msa:metric_id'
                               ,METRIC_RUN_DATE                  VARCHAR2(40)    PATH  'msa:metric_run_date'
                               ,METRIC_COMPLETED_DATE            VARCHAR2(40)    PATH  'msa:metric_completed_date'
                               ,LATEST_FLAG                      VARCHAR2(1)     PATH  'msa:latest_flag'
                               ,CREATED_BY                       NUMBER          PATH  'msa:created_by'
                               ,CREATION_DATE                    VARCHAR2(40)    PATH  'msa:creation_date'
                               ,PROCESS_FLOW_STATUS              NUMBER          PATH  'msa:process_flow_status'
                               ,PROCESS_INSTANCE_ID              NUMBER          PATH  'msa:process_instance_id'
                               ,ELECTRONICALLY_SIGNED            NUMBER          PATH  'msa:electronically_signed'
                               ,INSTANCE_REC_NUM                 NUMBER          PATH  'msa:instance_rec_num'    
														, QUE_RESPONSE_ID  VARCHAR2(4000)	 PATH   'msa:que_response_id' 
																						, RTF_ATTACH  VARCHAR2(4000)	 PATH   'msa:rtf_attach' 
																						, QUE_REQUEST_NAME  VARCHAR2(4000)	 PATH   'msa:que_request_name' 
																						, FINDING_ISSUES_PK  VARCHAR2(4000)	 PATH   'msa:finding_issues_pk' 
																						, DD_EVENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_event_user_name'
																						, DD_CURRENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_current_user_name'
																						, DD_OBJECT_TYPE  VARCHAR2(4000) PATH 'msa:dd_object_type'
																						, DD_PROCESS_CODE  VARCHAR2(4000) PATH 'msa:dd_process_code'
																			))      
					
				LOOP
			           LV_cntr_1 := LV_cntr_1 + 1;
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Data Found in iop_data. ', ip_pid);
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ')', ip_pid);
    

		 /* --------------------------------------------------------------------------
		       Loop through the data object to load the data into MS tables.
		        Header info is being loaded into the system.
		  -------------------------------------------------------------------------- */ 
 			  			 	
		/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
		  -------------------------------------------------------------------------- */ 	
		  		 		
  									    		IF LV_debug THEN
												

	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_RESPONSE_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RTF_ATTACH, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_REQUEST_NAME, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.FINDING_ISSUES_PK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    				             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
			             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
    			    	END IF;
    			    	
    			    							MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  
  MERGE 
    INTO MS_QSM_FINDING_ISSUES T 
  		USING (
  				SELECT     
          iop_data.QUE_RESPONSE_ID AS QUE_RESPONSE_ID
    	          , iop_data.RTF_ATTACH AS RTF_ATTACH
    	          , iop_data.QUE_REQUEST_NAME AS QUE_REQUEST_NAME
    	          , iop_data.FINDING_ISSUES_PK AS FINDING_ISSUES_PK
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.FINDING_ISSUES_PK = V.FINDING_ISSUES_PK
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.QUE_RESPONSE_ID=V.QUE_RESPONSE_ID
 ,T.RTF_ATTACH=V.RTF_ATTACH
 ,T.QUE_REQUEST_NAME=V.QUE_REQUEST_NAME
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.QUE_RESPONSE_ID
 ,T.RTF_ATTACH
 ,T.QUE_REQUEST_NAME
 ,T.FINDING_ISSUES_PK
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.QUE_RESPONSE_ID
        ,V.RTF_ATTACH
        ,V.QUE_REQUEST_NAME
        ,V.FINDING_ISSUES_PK
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
						
																		
		  		  	     	/* --------------------------------------------------------------------------
	      	Loading data for related Child object. Data has been loaded into parent table
	      	-------------------------------------------------------------------------- */
			   	   		  			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_QSM_RESP_ISSUE.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ISSUE(j).ISSUE_OWNER, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ISSUE(j).ISSUE_DISPOSITION, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ISSUE(j).ISSUE_TITLE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ISSUE(j).ISSUE_APPROVER_ORG, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ISSUE(j).ISSUE_OWNER_ORG, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ISSUE(j).ISSUE_DUE_DATE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ISSUE(j).ISSUE_DETAILS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ISSUE(j).FINDING_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ISSUE(j).ISSUE_RECOMENDATIONS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ISSUE(j).ISSUE_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ISSUE(j).FINDING_FK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ISSUE(j).ISSUE_APPROVER, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ISSUE(j).ISSUE_RATING, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    	 END LOOP;
 				END IF;
				
												MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  FORALL i IN TY_QSM_RESP_ISSUE.FIRST..TY_QSM_RESP_ISSUE.LAST 
  
  MERGE 
    INTO MS_QSM_RESP_ISSUE T 
  		USING (
  				SELECT     
          TY_QSM_RESP_ISSUE(i).ISSUE_OWNER AS ISSUE_OWNER
    	          , TY_QSM_RESP_ISSUE(i).ISSUE_DISPOSITION AS ISSUE_DISPOSITION
    	          , TY_QSM_RESP_ISSUE(i).ISSUE_TITLE AS ISSUE_TITLE
    	          , TY_QSM_RESP_ISSUE(i).ISSUE_APPROVER_ORG AS ISSUE_APPROVER_ORG
    	          , TY_QSM_RESP_ISSUE(i).ISSUE_OWNER_ORG AS ISSUE_OWNER_ORG
    	          , TY_QSM_RESP_ISSUE(i).ISSUE_DUE_DATE AS ISSUE_DUE_DATE
    	          , TY_QSM_RESP_ISSUE(i).ISSUE_DETAILS AS ISSUE_DETAILS
    	          , TY_QSM_RESP_ISSUE(i).FINDING_ID AS FINDING_ID
    	          , TY_QSM_RESP_ISSUE(i).ISSUE_RECOMENDATIONS AS ISSUE_RECOMENDATIONS
    	          , TY_QSM_RESP_ISSUE(i).ISSUE_TYPE AS ISSUE_TYPE
    	          , TY_QSM_RESP_ISSUE(i).FINDING_FK AS FINDING_FK
    	          , TY_QSM_RESP_ISSUE(i).ISSUE_APPROVER AS ISSUE_APPROVER
    	          , TY_QSM_RESP_ISSUE(i).ISSUE_RATING AS ISSUE_RATING
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.FINDING_ID = V.FINDING_ID
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.ISSUE_OWNER=V.ISSUE_OWNER
 ,T.ISSUE_DISPOSITION=V.ISSUE_DISPOSITION
 ,T.ISSUE_TITLE=V.ISSUE_TITLE
 ,T.ISSUE_APPROVER_ORG=V.ISSUE_APPROVER_ORG
 ,T.ISSUE_OWNER_ORG=V.ISSUE_OWNER_ORG
 ,T.ISSUE_DUE_DATE=V.ISSUE_DUE_DATE
 ,T.ISSUE_DETAILS=V.ISSUE_DETAILS
 ,T.ISSUE_RECOMENDATIONS=V.ISSUE_RECOMENDATIONS
 ,T.ISSUE_TYPE=V.ISSUE_TYPE
 ,T.FINDING_FK=V.FINDING_FK
 ,T.ISSUE_APPROVER=V.ISSUE_APPROVER
 ,T.ISSUE_RATING=V.ISSUE_RATING
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.ISSUE_OWNER
 ,T.ISSUE_DISPOSITION
 ,T.ISSUE_TITLE
 ,T.ISSUE_APPROVER_ORG
 ,T.ISSUE_OWNER_ORG
 ,T.ISSUE_DUE_DATE
 ,T.ISSUE_DETAILS
 ,T.FINDING_ID
 ,T.ISSUE_RECOMENDATIONS
 ,T.ISSUE_TYPE
 ,T.FINDING_FK
 ,T.ISSUE_APPROVER
 ,T.ISSUE_RATING
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.ISSUE_OWNER
        ,V.ISSUE_DISPOSITION
        ,V.ISSUE_TITLE
        ,V.ISSUE_APPROVER_ORG
        ,V.ISSUE_OWNER_ORG
        ,V.ISSUE_DUE_DATE
        ,V.ISSUE_DETAILS
        ,V.FINDING_ID
        ,V.ISSUE_RECOMENDATIONS
        ,V.ISSUE_TYPE
        ,V.FINDING_FK
        ,V.ISSUE_APPROVER
        ,V.ISSUE_RATING
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
											 	   		 	     	/* --------------------------------------------------------------------------
	      	Loading data for related Child object. Data has been loaded into parent table
	      	-------------------------------------------------------------------------- */
			   	   		  			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_QSM_RESP_ACTION.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ACTION(j).AC_ISSUE_TITLE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ACTION(j).ACTION_PRIORITY, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ACTION(j).ACTION_FK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ACTION(j).ACTION_DESCRIPTION, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ACTION(j).ACTION_DUE_DATE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ACTION(j).ACTION_OWNER, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ACTION(j).ACTION_TITLE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_ACTION(j).ACTION_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    	 END LOOP;
 				END IF;
				
												MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  FORALL i IN TY_QSM_RESP_ACTION.FIRST..TY_QSM_RESP_ACTION.LAST 
  
  MERGE 
    INTO MS_QSM_RESP_ACTION T 
  		USING (
  				SELECT     
          TY_QSM_RESP_ACTION(i).AC_ISSUE_TITLE AS AC_ISSUE_TITLE
    	          , TY_QSM_RESP_ACTION(i).ACTION_PRIORITY AS ACTION_PRIORITY
    	          , TY_QSM_RESP_ACTION(i).ACTION_FK AS ACTION_FK
    	          , TY_QSM_RESP_ACTION(i).ACTION_DESCRIPTION AS ACTION_DESCRIPTION
    	          , TY_QSM_RESP_ACTION(i).ACTION_DUE_DATE AS ACTION_DUE_DATE
    	          , TY_QSM_RESP_ACTION(i).ACTION_OWNER AS ACTION_OWNER
    	          , TY_QSM_RESP_ACTION(i).ACTION_TITLE AS ACTION_TITLE
    	          , TY_QSM_RESP_ACTION(i).ACTION_ID AS ACTION_ID
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.ACTION_ID = V.ACTION_ID
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.AC_ISSUE_TITLE=V.AC_ISSUE_TITLE
 ,T.ACTION_PRIORITY=V.ACTION_PRIORITY
 ,T.ACTION_FK=V.ACTION_FK
 ,T.ACTION_DESCRIPTION=V.ACTION_DESCRIPTION
 ,T.ACTION_DUE_DATE=V.ACTION_DUE_DATE
 ,T.ACTION_OWNER=V.ACTION_OWNER
 ,T.ACTION_TITLE=V.ACTION_TITLE
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.AC_ISSUE_TITLE
 ,T.ACTION_PRIORITY
 ,T.ACTION_FK
 ,T.ACTION_DESCRIPTION
 ,T.ACTION_DUE_DATE
 ,T.ACTION_OWNER
 ,T.ACTION_TITLE
 ,T.ACTION_ID
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.AC_ISSUE_TITLE
        ,V.ACTION_PRIORITY
        ,V.ACTION_FK
        ,V.ACTION_DESCRIPTION
        ,V.ACTION_DUE_DATE
        ,V.ACTION_OWNER
        ,V.ACTION_TITLE
        ,V.ACTION_ID
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
											 	   		 		  		            
          			                    
          									  
				   			   		
    END LOOP;	 
        EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in call ETL ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END CALL_ETL;        

END MS_QSM_FINDING_ISSUES_NEW_P ;   
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_FINDING_ISSUES_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_FINDING_ISSUES_O
    Creation Time : 2012-AUG-07 12:54:06.160540000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_FINDING_ISSUES_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_FINDING_ISSUES_PK                   IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_FINDING_ISSUES_PK                   IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_FINDING_ISSUES_O ; 
 
  
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_FINDING_ISSUES_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_FINDING_ISSUES_PK                   IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_FINDING_ISSUES', 'D');

        UPDATE MS_QSM_FINDING_ISSUES
           SET DD_EDIT_FLAG = 'N'
         WHERE FINDING_ISSUES_PK                        = iop_FINDING_ISSUES_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_FINDING_ISSUES_PK                   IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_FINDING_ISSUES', 'D');

        UPDATE MS_QSM_FINDING_ISSUES
           SET DD_EDIT_FLAG = 'Y'
         WHERE FINDING_ISSUES_PK                        = iop_FINDING_ISSUES_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_FINDING_ISSUES_O;  
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_FINDING_ISSUES_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_FINDING_ISSUES_P
    Creation Time : 2012-AUG-02 05:55:42.937204000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_FINDING_ISSUES_P';
    GV_program_name VARCHAR2(100);
    --GV_ETL_PLSQL_DATA_TYPE ;

/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        );
/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY     CLOB,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2,
            iop_error_seq         IN     OUT                NUMBER,
            ip_pid                IN                        NUMBER
        );

END MS_QSM_FINDING_ISSUES_P ; 
 
  
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_FINDING_ISSUES_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Body.
    Author : Data Designer ETL Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------------
    GENERATE_UPDATE_HIERARCHY : Procedure to get the update the xml data hierarchy
   ------------------------------------------------------------------------------ */

    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        );
    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER           
        )
    AS
        LV_error_code               NUMBER;
        LV_error_message            VARCHAR2(1000);
        UPDATE_HIERARCHY_EXCEP      EXCEPTION;
        LV_xml                      XMLTYPE := iop_xml;
        LV_namespace                varchar2(4000) := 'xmlns="http://www.metricstream.com/appstudio/msa"';
        lv_program_name             VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UPDATE_HIERARCHY';


/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);

        SELECT DELETEXML(LV_XML,'datapacket/data/iss/row/que_response_id',LV_namespace)
       INTO LV_XML
       FROM DUAL;



--
--        FOR rec in (SELECT  DISTINCT 
--                                      
--                    FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
--                                 'msa:datapacket/msa:data/msa:nonmultirow'
--                                 PASSING LV_xml
--                                 COLUMNS
--                                  VARCHAR2(4000)    PATH     'msa:'
--                   ))
--       LOOP
--             SELECT INSERTCHILDXML(LV_XML,'datapacket/data/iss/row','que_response_id',XMLTYPE('<que_response_id '||'xmlns="http://www.metricstream.com/appstudio/msa"'||'>'||rec.||'</que_response_id>'),LV_namespace)
--              INTO LV_XML
--              FROM DUAL;
--			  exit;
--       END LOOP;
--        SELECT DELETEXML(LV_XML,'datapacket/data/act/row/finding_id',LV_namespace)
--       INTO LV_XML
--       FROM DUAL;




--        FOR rec in (SELECT  DISTINCT 
--                                      action_fk
--                    FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
--                                 'msa:datapacket/msa:data/msa:nonmultirow'
--                                 PASSING LV_xml
--                                 COLUMNS
--                                 action_fk                           VARCHAR2(4000)    PATH     'msa:action_fk'
--                   ))
--       LOOP
--             SELECT INSERTCHILDXML(LV_XML,'datapacket/data/act/row','finding_id',XMLTYPE('<finding_id '||'xmlns="http://www.metricstream.com/appstudio/msa"'||'>'||rec.action_fk||'</finding_id>'),LV_namespace)
--              INTO LV_XML
--              FROM DUAL;
--			  exit;
--       END LOOP;
       
       iop_xml := LV_xml;
    
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_pid);
    EXCEPTION
        WHEN UPDATE_HIERARCHY_EXCEP THEN
            
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE_HIERARCHY_EXCEP Exception Raised ', ip_pid);       
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);         
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);          
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            ROLLBACK TO  MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            ROLLBACK TO MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
        LV_error_code NUMBER;
        LV_error_message VARCHAR2(1000);
        NEXT_ID_GEN_EXCEPTION EXCEPTION;
        lv_program_name VARCHAR2(100);
        ln_error_seq NUMBER:=1;

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'GET_NEXT_ID';

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_process_instance_id);


    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_process_instance_id);
    EXCEPTION
        WHEN NEXT_ID_GEN_EXCEPTION THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] NEXT_ID_GEN_EXCEPTION Exception Raised ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] WHEN OTHERS ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END GET_NEXT_ID;

/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY         CLOB,
            iop_log_no            IN     OUT                    NUMBER,
            op_error_code                OUT                    NUMBER,
            op_error_message             OUT                    VARCHAR2,
            iop_error_seq         IN     OUT                    NUMBER,
            ip_pid                IN                            NUMBER
            
        )
    AS

/* --------------------------------------------------------------------------
     ETL procedure created by the ETL Engine of APP BUILDER.
     The procedure takes care of loading the data that is sent
     by the FLOW BUILDER and store the same in MS TABLES.
     Data is already processed and stored accordingly in the iop_data
     object structure. The object can have one or more records.
     The ETL is designed to take care of one or more records.
     If the data has to be manipulated before populating the main
     MS TABLES, please use the HOOKS that are generated by the
     FLOW BUILDER.
   -------------------------------------------------------------------------- */
        LV_progress VARCHAR2(3) := NULL;
        LV_cntr_1   NUMBER      := NULL;
        LV_cntr_2   NUMBER      := NULL;
        LV_debug    BOOLEAN     := FALSE;
        LV_XML      XMLTYPE     := XMLTYPE(iop_xml_data);
        LV_err_code NUMBER      := NULL;
        LV_err_msg  VARCHAR2(4000);
        lV_program_name VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
              AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;

    BEGIN

/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------
    Note: Defining SAVEPOINT TO ROLLBACK transactions done by ETL.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        LV_progress := '001';
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'CALL_ETL';


/* --------------------------------------------------------------------------
    Note: Default DEBUG FLAG is set to FALSE to avoid unneccessary logging of data.
            If any issues found in ETL, to understand what goes into the ETL
            then set this variable to TRUE and run the ETL in the flow.
            It allows to log the entire relevant data set.
   -------------------------------------------------------------------------- */
        LV_debug := FALSE;

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);
--        UPDATE_HIERARCHY
--        (
--           iop_log_no          => LV_log_no.APP_LOG_NO,
--           iop_xml             => LV_XML,
--           op_error_code       => LV_err_code,
--           op_error_message    => LV_err_msg,
--           iop_error_sequence  => iop_error_seq,
--           ip_pid              => ip_pid
--        );
--
--        IF(LV_err_code !=0) THEN
--          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'W','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Failed while updating Hierarchy ', ip_pid);
--        END IF;

        LV_cntr_1 := 0;

/* --------------------------------------------------------------------------
        Cursor to fetch non multirow details from XML
   -------------------------------------------------------------------------- */
        FOR iop_data in ( SELECT  INSTANCE_ID
                                 ,METRIC_ID
                                 ,TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_RUN_DATE
                                 ,TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
                                 ,LATEST_FLAG
                                 ,CREATED_BY
                                 ,TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE
                                 ,PROCESS_FLOW_STATUS
                                 ,PROCESS_INSTANCE_ID
                                 ,ELECTRONICALLY_SIGNED
                                 ,INSTANCE_REC_NUM
                                 ,DD_EVENT_USER_NAME
                                 ,DD_CURRENT_USER_NAME
                                 ,DD_OBJECT_TYPE
                                 ,DD_PROCESS_CODE
                                 ,FINDING_ISSUES_PK
                                 ,QUE_REQUEST_NAME
                                 ,QUE_RESPONSE_ID
                          FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
                                       'msa:datapacket/msa:data/msa:nonmultirow'
                                       PASSING LV_XML
                                       COLUMNS
                                        INSTANCE_ID                      NUMBER          PATH  'msa:instance_id'
                                       ,METRIC_ID                        NUMBER          PATH  'msa:metric_id'
                                       ,METRIC_RUN_DATE                  VARCHAR2(40)    PATH  'msa:metric_run_date'
                                       ,METRIC_COMPLETED_DATE            VARCHAR2(40)    PATH  'msa:metric_completed_date'
                                       ,LATEST_FLAG                      VARCHAR2(1)     PATH  'msa:latest_flag'
                                       ,CREATED_BY                       NUMBER          PATH  'msa:created_by'
                                       ,CREATION_DATE                    VARCHAR2(40)    PATH  'msa:creation_date'
                                       ,PROCESS_FLOW_STATUS              NUMBER          PATH  'msa:process_flow_status'
                                       ,PROCESS_INSTANCE_ID              NUMBER          PATH  'msa:process_instance_id'
                                       ,ELECTRONICALLY_SIGNED            NUMBER          PATH  'msa:electronically_signed'
                                       ,INSTANCE_REC_NUM                 NUMBER          PATH  'msa:instance_rec_num'
                                       ,DD_EVENT_USER_NAME               VARCHAR2(4000)  PATH  'msa:dd_event_user_name'
                                       ,DD_CURRENT_USER_NAME             VARCHAR2(4000)  PATH  'msa:dd_current_user_name'
                                       ,DD_OBJECT_TYPE                   VARCHAR2(4000)  PATH  'msa:dd_object_type'
                                       ,DD_PROCESS_CODE                  VARCHAR2(4000)  PATH  'msa:dd_process_code'
                                       ,FINDING_ISSUES_PK                VARCHAR2(4000)  PATH  'msa:finding_issues_pk'
                                       ,QUE_REQUEST_NAME                 VARCHAR2(4000)  PATH  'msa:que_request_name'
                                       ,QUE_RESPONSE_ID                  VARCHAR2(4000)  PATH  'msa:que_response_id'
                        ))
        LOOP
           LV_cntr_1 := LV_cntr_1 + 1;
           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Data Found in iop_data. ', ip_pid);
           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ')', ip_pid);

     /* --------------------------------------------------------------------------
           Loop through the data object to load the data into MS tables.
            Header info is being loaded into the system.
      -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
   -------------------------------------------------------------------------- */
           IF LV_debug THEN
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.FINDING_ISSUES_PK, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_REQUEST_NAME, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_RESPONSE_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_OBJECT_TYPE, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_PROCESS_CODE, ip_pid);

           END IF;

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);

           MERGE
            INTO MS_QSM_FINDING_ISSUES T 
           USING 
               (
                   SELECT 
                          iop_data.FINDING_ISSUES_PK                                  AS FINDING_ISSUES_PK
                        , iop_data.QUE_REQUEST_NAME                                   AS QUE_REQUEST_NAME
                        , iop_data.QUE_RESPONSE_ID                                    AS QUE_RESPONSE_ID
                        , iop_data.DD_OBJECT_TYPE                                     AS DD_OBJECT_TYPE
                        , iop_data.DD_EVENT_USER_NAME                                 AS DD_CREATED_BY
                        , iop_data.DD_CURRENT_USER_NAME                               AS DD_MODIFIED_BY
                        , iop_data.PROCESS_INSTANCE_ID                                AS DD_PROCESS_INSTANCE_ID
                        , iop_data.INSTANCE_ID                                        AS DD_INSTANCE_ID
                        , iop_data.DD_PROCESS_CODE                                    AS DD_PROCESS_CODE
                     FROM DUAL
               ) V
              ON
               (
                            T.FINDING_ISSUES_PK                      = V.FINDING_ISSUES_PK
               )
            WHEN
               MATCHED THEN
                   UPDATE SET  DD_STATUS_FLAG                         = 'Y'
                           , T.QUE_REQUEST_NAME                       = V.QUE_REQUEST_NAME
                           , T.QUE_RESPONSE_ID                        = V.QUE_RESPONSE_ID
                           , T.DD_OBJECT_TYPE                         = V.DD_OBJECT_TYPE
                           , T.DD_MODIFIED_BY                         = V.DD_MODIFIED_BY
                           , T.DD_MODIFIED_ON                         = SYSDATE
                           , T.DD_PROCESS_INSTANCE_ID                 = V.DD_PROCESS_INSTANCE_ID
                           , T.DD_INSTANCE_ID                         = V.DD_INSTANCE_ID
                           , T.DD_PROCESS_CODE                        = V.DD_PROCESS_CODE
            WHEN
               NOT MATCHED THEN
                   INSERT
                       (DD_STATUS_FLAG
                      , T.FINDING_ISSUES_PK
                      , T.QUE_REQUEST_NAME
                      , T.QUE_RESPONSE_ID
                      , T.DD_OBJECT_TYPE
                      , T.DD_CREATED_BY
                      , T.DD_CREATED_ON
                      , T.DD_PROCESS_INSTANCE_ID
                      , T.DD_INSTANCE_ID
                      , T.DD_PROCESS_CODE
                       )
                   VALUES 
                       ('Y'
                      , V.FINDING_ISSUES_PK
                      , V.QUE_REQUEST_NAME
                      , V.QUE_RESPONSE_ID
                      , V.DD_OBJECT_TYPE
                      , V.DD_CREATED_BY
                            , SYSDATE
                      , V.DD_PROCESS_INSTANCE_ID
                      , V.DD_INSTANCE_ID
                      , V.DD_PROCESS_CODE
                       );

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);

           MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING UPDATE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

--           UPDATE MS_QSM_RESP_ACTION
--           SET DD_STATUS_FLAG = 'N'
--            WHERE ACTION_FK     = iop_data.FINDING_ID;

           MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in UPDATE : ' || SQL%ROWCOUNT, 'D');

           MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

           MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING UPDATE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

--           UPDATE MS_QSM_RESP_ISSUE
--           SET DD_STATUS_FLAG = 'N'
--            WHERE  FINDING_FK = iop_data.QUE_RESPONSE_ID; -- Added By Jamsheed

           MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in UPDATE : ' || SQL%ROWCOUNT, 'D');

           MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

     /* --------------------------------------------------------------------------
          Loading data for related Child object. Data has been loaded into parent table
      -------------------------------------------------------------------------- */
            LV_cntr_2 := 0;

            FOR iop_data_ACT_table IN (SELECT 
                                         ACTION_DESCRIPTION
                                        ,TO_DATE(ACTION_DUE_DATE,'MM/dd/yyyy HH24:mi:ss') AS ACTION_DUE_DATE
                                        ,ACTION_FK
                                        ,ACTION_ID
                                        ,ACTION_OWNER
                                        ,ACTION_PRIORITY
                                        ,ACTION_TITLE
                                        ,AC_ISSUE_TITLE
                                       FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
                                                     'msa:datapacket/msa:data/msa:act/msa::row'
                                                     PASSING LV_xml
                                                     COLUMNS
                                                     ACTION_DESCRIPTION               VARCHAR2(4000)  PATH  'msa:action_description'
                                                    ,ACTION_DUE_DATE                  VARCHAR2(40)    PATH  'msa:action_due_date'
                                                    ,ACTION_FK                        VARCHAR2(4000)  PATH  'msa:action_fk'
                                                    ,ACTION_ID                        VARCHAR2(4000)  PATH  'msa:action_id'
                                                    ,ACTION_OWNER                     VARCHAR2(4000)  PATH  'msa:action_owner'
                                                    ,ACTION_PRIORITY                  VARCHAR2(4000)  PATH  'msa:action_priority'
                                                    ,ACTION_TITLE                     VARCHAR2(4000)  PATH  'msa:action_title'
                                                    ,AC_ISSUE_TITLE                   VARCHAR2(4000)  PATH  'msa:ac_issue_title'
                        ))
             LOOP
                    LV_cntr_2 := LV_cntr_2 + 1;

/* --------------------------------------------------------------------------
    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
   -------------------------------------------------------------------------- */

                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ').ACT_TABLE(' || LV_cntr_2 || ')', ip_pid);
                    IF LV_debug THEN
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ACT_TABLE.ACTION_ID, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ACT_TABLE.ACTION_FK, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ACT_TABLE.AC_ISSUE_TITLE, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ACT_TABLE.ACTION_TITLE, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ACT_TABLE.ACTION_DESCRIPTION, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ACT_TABLE.ACTION_OWNER, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ACT_TABLE.ACTION_PRIORITY, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ACT_TABLE.ACTION_DUE_DATE, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_OBJECT_TYPE, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_PROCESS_CODE, ip_pid);
                    END IF;

                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);

                    MERGE
                     INTO MS_QSM_RESP_ACTION T 
                    USING 
                        (
                            SELECT 
                                   iop_data_ACT_TABLE.ACTION_ID                                          AS ACTION_ID
                                 , iop_data_ACT_TABLE.ACTION_FK                                          AS ACTION_FK
                                 , iop_data_ACT_TABLE.AC_ISSUE_TITLE                                     AS AC_ISSUE_TITLE
                                 , iop_data_ACT_TABLE.ACTION_TITLE                                       AS ACTION_TITLE
                                 , iop_data_ACT_TABLE.ACTION_DESCRIPTION                                 AS ACTION_DESCRIPTION
                                 , iop_data_ACT_TABLE.ACTION_OWNER                                       AS ACTION_OWNER
                                 , iop_data_ACT_TABLE.ACTION_PRIORITY                                    AS ACTION_PRIORITY
                                 , iop_data_ACT_TABLE.ACTION_DUE_DATE                                    AS ACTION_DUE_DATE
                                 , iop_data.DD_OBJECT_TYPE                                     AS DD_OBJECT_TYPE
                                 , iop_data.DD_EVENT_USER_NAME                                 AS DD_CREATED_BY
                                 , iop_data.DD_CURRENT_USER_NAME                               AS DD_MODIFIED_BY
                                 , iop_data.PROCESS_INSTANCE_ID                                AS DD_PROCESS_INSTANCE_ID
                                 , iop_data.INSTANCE_ID                                        AS DD_INSTANCE_ID
                                 , iop_data.DD_PROCESS_CODE                                    AS DD_PROCESS_CODE
                              FROM DUAL
                        ) V
                       ON
                        (
                                     T.ACTION_ID                              = V.ACTION_ID
                        )
                     WHEN
                        MATCHED THEN
                            UPDATE SET  DD_STATUS_FLAG                         = 'Y'
                                    , T.ACTION_FK                              = V.ACTION_FK
                                    , T.AC_ISSUE_TITLE                         = V.AC_ISSUE_TITLE
                                    , T.ACTION_TITLE                           = V.ACTION_TITLE
                                    , T.ACTION_DESCRIPTION                     = V.ACTION_DESCRIPTION
                                    , T.ACTION_OWNER                           = V.ACTION_OWNER
                                    , T.ACTION_PRIORITY                        = V.ACTION_PRIORITY
                                    , T.ACTION_DUE_DATE                        = V.ACTION_DUE_DATE
                                    , T.DD_OBJECT_TYPE                         = V.DD_OBJECT_TYPE
                                    , T.DD_MODIFIED_BY                         = V.DD_MODIFIED_BY
                                    , T.DD_MODIFIED_ON                         = SYSDATE
                                    , T.DD_PROCESS_INSTANCE_ID                 = V.DD_PROCESS_INSTANCE_ID
                                    , T.DD_INSTANCE_ID                         = V.DD_INSTANCE_ID
                                    , T.DD_PROCESS_CODE                        = V.DD_PROCESS_CODE
                     WHEN
                        NOT MATCHED THEN
                            INSERT
                                (DD_STATUS_FLAG
                               , T.ACTION_ID
                               , T.ACTION_FK
                               , T.AC_ISSUE_TITLE
                               , T.ACTION_TITLE
                               , T.ACTION_DESCRIPTION
                               , T.ACTION_OWNER
                               , T.ACTION_PRIORITY
                               , T.ACTION_DUE_DATE
                               , T.DD_OBJECT_TYPE
                               , T.DD_CREATED_BY
                               , T.DD_CREATED_ON
                               , T.DD_PROCESS_INSTANCE_ID
                               , T.DD_INSTANCE_ID
                               , T.DD_PROCESS_CODE
                                )
                            VALUES 
                                ('Y'
                               , V.ACTION_ID
                               , V.ACTION_FK
                               , V.AC_ISSUE_TITLE
                               , V.ACTION_TITLE
                               , V.ACTION_DESCRIPTION
                               , V.ACTION_OWNER
                               , V.ACTION_PRIORITY
                               , V.ACTION_DUE_DATE
                               , V.DD_OBJECT_TYPE
                               , V.DD_CREATED_BY
                                     , SYSDATE
                               , V.DD_PROCESS_INSTANCE_ID
                               , V.DD_INSTANCE_ID
                               , V.DD_PROCESS_CODE
                                );

                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);

                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
              END LOOP;

     /* --------------------------------------------------------------------------
          Loading data for related Child object. Data has been loaded into parent table
      -------------------------------------------------------------------------- */
            LV_cntr_2 := 0;

            FOR iop_data_ISS_table IN (SELECT 
                                         FINDING_FK
                                        ,FINDING_ID
                                        ,ISSUE_APPROVER
                                        ,ISSUE_APPROVER_ORG
                                        ,ISSUE_DETAILS
                                        ,ISSUE_DISPOSITION
                                        ,TO_DATE(ISSUE_DUE_DATE,'MM/dd/yyyy HH24:mi:ss') AS ISSUE_DUE_DATE
                                        ,ISSUE_OWNER
                                        ,ISSUE_OWNER_ORG
                                        ,ISSUE_RATING
                                        ,ISSUE_RECOMENDATIONS
                                        ,ISSUE_TITLE
                                        ,ISSUE_TYPE
                                       FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
                                                     'msa:datapacket/msa:data/msa:iss/msa::row'
                                                     PASSING LV_xml
                                                     COLUMNS
                                                     FINDING_FK                       VARCHAR2(4000)  PATH  'msa:finding_fk'
                                                    ,FINDING_ID                       VARCHAR2(4000)  PATH  'msa:finding_id'
                                                    ,ISSUE_APPROVER                   VARCHAR2(4000)  PATH  'msa:issue_approver'
                                                    ,ISSUE_APPROVER_ORG               VARCHAR2(4000)  PATH  'msa:issue_approver_org'
                                                    ,ISSUE_DETAILS                    VARCHAR2(4000)  PATH  'msa:issue_details'
                                                    ,ISSUE_DISPOSITION                VARCHAR2(4000)  PATH  'msa:issue_disposition'
                                                    ,ISSUE_DUE_DATE                   VARCHAR2(40)    PATH  'msa:issue_due_date'
                                                    ,ISSUE_OWNER                      VARCHAR2(4000)  PATH  'msa:issue_owner'
                                                    ,ISSUE_OWNER_ORG                  VARCHAR2(4000)  PATH  'msa:issue_owner_org'
                                                    ,ISSUE_RATING                     VARCHAR2(4000)  PATH  'msa:issue_rating'
                                                    ,ISSUE_RECOMENDATIONS             VARCHAR2(4000)  PATH  'msa:issue_recomendations'
                                                    ,ISSUE_TITLE                      VARCHAR2(4000)  PATH  'msa:issue_title'
                                                    ,ISSUE_TYPE                       VARCHAR2(4000)  PATH  'msa:issue_type'
                        ))
             LOOP
                    LV_cntr_2 := LV_cntr_2 + 1;

/* --------------------------------------------------------------------------
    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
   -------------------------------------------------------------------------- */

                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ').ISS_TABLE(' || LV_cntr_2 || ')', ip_pid);
                    IF LV_debug THEN
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ISS_TABLE.FINDING_ID, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ISS_TABLE.FINDING_FK, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ISS_TABLE.ISSUE_TITLE, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ISS_TABLE.ISSUE_DETAILS, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ISS_TABLE.ISSUE_RATING, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ISS_TABLE.ISSUE_TYPE, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ISS_TABLE.ISSUE_DISPOSITION, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ISS_TABLE.ISSUE_RECOMENDATIONS, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ISS_TABLE.ISSUE_OWNER_ORG, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ISS_TABLE.ISSUE_OWNER, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ISS_TABLE.ISSUE_DUE_DATE, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ISS_TABLE.ISSUE_APPROVER_ORG, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_ISS_TABLE.ISSUE_APPROVER, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_OBJECT_TYPE, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_PROCESS_CODE, ip_pid);
                    END IF;

                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);

                    MERGE
                     INTO MS_QSM_RESP_ISSUE T 
                    USING 
                        (
                            SELECT 
                                   iop_data_ISS_TABLE.FINDING_ID                                         AS FINDING_ID
                                 , iop_data_ISS_TABLE.FINDING_FK                                         AS FINDING_FK
                                 , iop_data_ISS_TABLE.ISSUE_TITLE                                        AS ISSUE_TITLE
                                 , iop_data_ISS_TABLE.ISSUE_DETAILS                                      AS ISSUE_DETAILS
                                 , iop_data_ISS_TABLE.ISSUE_RATING                                       AS ISSUE_RATING
                                 , iop_data_ISS_TABLE.ISSUE_TYPE                                         AS ISSUE_TYPE
                                 , iop_data_ISS_TABLE.ISSUE_DISPOSITION                                  AS ISSUE_DISPOSITION
                                 , iop_data_ISS_TABLE.ISSUE_RECOMENDATIONS                               AS ISSUE_RECOMENDATIONS
                                 , iop_data_ISS_TABLE.ISSUE_OWNER_ORG                                    AS ISSUE_OWNER_ORG
                                 , iop_data_ISS_TABLE.ISSUE_OWNER                                        AS ISSUE_OWNER
                                 , iop_data_ISS_TABLE.ISSUE_DUE_DATE                                     AS ISSUE_DUE_DATE
                                 , iop_data_ISS_TABLE.ISSUE_APPROVER_ORG                                 AS ISSUE_APPROVER_ORG
                                 , iop_data_ISS_TABLE.ISSUE_APPROVER                                     AS ISSUE_APPROVER
                                 , iop_data.DD_OBJECT_TYPE                                     AS DD_OBJECT_TYPE
                                 , iop_data.DD_EVENT_USER_NAME                                 AS DD_CREATED_BY
                                 , iop_data.DD_CURRENT_USER_NAME                               AS DD_MODIFIED_BY
                                 , iop_data.PROCESS_INSTANCE_ID                                AS DD_PROCESS_INSTANCE_ID
                                 , iop_data.INSTANCE_ID                                        AS DD_INSTANCE_ID
                                 , iop_data.DD_PROCESS_CODE                                    AS DD_PROCESS_CODE
                              FROM DUAL
                        ) V
                       ON
                        (
                                     T.FINDING_ID                             = V.FINDING_ID
                        )
                     WHEN
                        MATCHED THEN
                            UPDATE SET  DD_STATUS_FLAG                         = 'Y'
                                    , T.FINDING_FK                             = V.FINDING_FK
                                    , T.ISSUE_TITLE                            = V.ISSUE_TITLE
                                    , T.ISSUE_DETAILS                          = V.ISSUE_DETAILS
                                    , T.ISSUE_RATING                           = V.ISSUE_RATING
                                    , T.ISSUE_TYPE                             = V.ISSUE_TYPE
                                    , T.ISSUE_DISPOSITION                      = V.ISSUE_DISPOSITION
                                    , T.ISSUE_RECOMENDATIONS                   = V.ISSUE_RECOMENDATIONS
                                    , T.ISSUE_OWNER_ORG                        = V.ISSUE_OWNER_ORG
                                    , T.ISSUE_OWNER                            = V.ISSUE_OWNER
                                    , T.ISSUE_DUE_DATE                         = V.ISSUE_DUE_DATE
                                    , T.ISSUE_APPROVER_ORG                     = V.ISSUE_APPROVER_ORG
                                    , T.ISSUE_APPROVER                         = V.ISSUE_APPROVER
                                    , T.DD_OBJECT_TYPE                         = V.DD_OBJECT_TYPE
                                    , T.DD_MODIFIED_BY                         = V.DD_MODIFIED_BY
                                    , T.DD_MODIFIED_ON                         = SYSDATE
                                    , T.DD_PROCESS_INSTANCE_ID                 = V.DD_PROCESS_INSTANCE_ID
                                    , T.DD_INSTANCE_ID                         = V.DD_INSTANCE_ID
                                    , T.DD_PROCESS_CODE                        = V.DD_PROCESS_CODE
                     WHEN
                        NOT MATCHED THEN
                            INSERT
                                (DD_STATUS_FLAG
                               , T.FINDING_ID
                               , T.FINDING_FK
                               , T.ISSUE_TITLE
                               , T.ISSUE_DETAILS
                               , T.ISSUE_RATING
                               , T.ISSUE_TYPE
                               , T.ISSUE_DISPOSITION
                               , T.ISSUE_RECOMENDATIONS
                               , T.ISSUE_OWNER_ORG
                               , T.ISSUE_OWNER
                               , T.ISSUE_DUE_DATE
                               , T.ISSUE_APPROVER_ORG
                               , T.ISSUE_APPROVER
                               , T.DD_OBJECT_TYPE
                               , T.DD_CREATED_BY
                               , T.DD_CREATED_ON
                               , T.DD_PROCESS_INSTANCE_ID
                               , T.DD_INSTANCE_ID
                               , T.DD_PROCESS_CODE
                                )
                            VALUES 
                                ('Y'
                               , V.FINDING_ID
                               , V.FINDING_FK
                               , V.ISSUE_TITLE
                               , V.ISSUE_DETAILS
                               , V.ISSUE_RATING
                               , V.ISSUE_TYPE
                               , V.ISSUE_DISPOSITION
                               , V.ISSUE_RECOMENDATIONS
                               , V.ISSUE_OWNER_ORG
                               , V.ISSUE_OWNER
                               , V.ISSUE_DUE_DATE
                               , V.ISSUE_APPROVER_ORG
                               , V.ISSUE_APPROVER
                               , V.DD_OBJECT_TYPE
                               , V.DD_CREATED_BY
                                     , SYSDATE
                               , V.DD_PROCESS_INSTANCE_ID
                               , V.DD_INSTANCE_ID
                               , V.DD_PROCESS_CODE
                                );

                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);

                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
              END LOOP;

              MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

--              DELETE MS_QSM_RESP_ACTION
--               WHERE DD_STATUS_FLAG                  = 'N'
--                  AND ACTION_FK                       = iop_data.FINDING_ID;

              MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in DELETE : ' || SQL%ROWCOUNT, 'D');

              MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

              MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
--
--              DELETE MS_QSM_RESP_ISSUE
--               WHERE DD_STATUS_FLAG                  = 'N'
--                  AND  FINDING_FK= iop_data.QUE_RESPONSE_ID; -- Added by Jamsheed

              MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in DELETE : ' || SQL%ROWCOUNT, 'D');

              MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

        END LOOP;

        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ETL END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] END ', ip_pid);
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END CALL_ETL;

END MS_QSM_FINDING_ISSUES_P;  
 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_FND_ISS_DATA" AS OBJECT
            ( ISSUE_TITLE VARCHAR2 (4000),
            ACTION_TITLE VARCHAR2 (4000),
            ACTION_OWNER VARCHAR2 (4000),
            ACTION_DESCRIPTION VARCHAR2 (4000)
            )  

 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_FND_ISS_DATA_TABLE" as table of  MS_QSM_FND_ISS_DATA;  

 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_GEN" (p_flow_code VARCHAR2)
AS

   TYPE ty_rec IS RECORD (
      form_from     VARCHAR2 (100),
      form_to       VARCHAR2 (100),
      from_guid     ms_QSM_metric_maint.guid%TYPE,
      to_guid       ms_QSM_metric_maint.guid%TYPE,
      from_source   ms_QSM_metric_maint.source%TYPE,
      to_source     ms_QSM_metric_maint.source%TYPE );

   TYPE ty_tbl IS TABLE OF ty_rec
                     INDEX BY VARCHAR2 (1000);

   l_tbl              ty_tbl;
   l_valid            ty_tbl;
   i                  VARCHAR2 (225);
   l_clob             CLOB := '$';
   l_varchar          VARCHAR2 (32767);
   l_blueprint_code   VARCHAR2 (1000);
   l_router_suffix    VARCHAR2 (30);
   l_source           ms_QSM_metric_maint.source%TYPE;
   l_exists           PLS_INTEGER;

   PROCEDURE gen_comp (p_comp_name VARCHAR2, p_drop VARCHAR2 DEFAULT 'N')
   AS
      l_count                   PLS_INTEGER := 0;
      l_destination_guid        ms_QSM_metric_maint.guid%TYPE;
      l_destination_metric_id   NUMBER;
   BEGIN
      l_destination_guid := l_tbl (i).to_guid;
      DBMS_OUTPUT.put_line (l_destination_guid);

      l_destination_metric_id := ms_apps_utilities.get_infolet_id (ms_QSM_utilities.g_tbl_metric_maintenance (l_destination_guid));



      DBMS_OUTPUT.put_line ('INSIDE  GEN COMP ' || p_comp_name);

      IF p_drop = 'N'
      THEN
         SELECT COUNT (1)
           INTO l_count
           FROM user_objects
          WHERE object_name = UPPER (p_comp_name);

         IF l_count = 0
         THEN
            IF (l_tbl (i).from_guid <> l_tbl (i).to_guid)
            THEN
               EXECUTE IMMEDIATE   q'#CREATE OR REPLACE PROCEDURE #'
                                || p_comp_name
                                || q'# (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN OUT CLOB,
                                                                       lt_out_data          IN OUT CLOB,
                                                                       pc_process_code      IN     VARCHAR2,
                                                                       lc_from_stage        IN     VARCHAR2,
                                                                       lc_to_stage          IN     VARCHAR2,
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
                        AS
                                l_out_xml XMLTYPE;
                                l_dest_metric_id pls_integer;       
                        BEGIN
                                 #'||q'#
                                  IF (NOT (ms_QSM_utilities.g_tbl_metric_maintenance.COUNT > 0))
                                  THEN
                                     ms_QSM_utilities.initialize_metric_maint ('QSM');
                                  END IF;                                 
                                 l_dest_metric_id :=#'
                                ||q'#ms_apps_utilities.get_infolet_id (ms_QSM_utilities.g_tbl_metric_maintenance ('#'||l_destination_guid||q'#'))#'
                                || q'#;
                                           ms_QSM_utilities.get_multirow_template (p_multirow         => l_out_xml,
                                                                p_metric_id        => l_dest_metric_id,
                                                                p_full_blown       => 'Y',
                                                                p_with_multirows   => 'Y');
                        END;                              
                        #';
            ELSE
               EXECUTE IMMEDIATE   q'#CREATE OR REPLACE PROCEDURE #'
                                || p_comp_name
                                || q'# (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN OUT CLOB,
                                                                       lt_out_data          IN OUT CLOB,
                                                                       pc_process_code      IN     VARCHAR2,
                                                                       lc_from_stage        IN     VARCHAR2,
                                                                       lc_to_stage          IN     VARCHAR2,
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
                        AS
                                
                        BEGIN
                                NULL;
                        END;                              
                        #';
            END IF;
         END IF;
      ELSE
         BEGIN
            DBMS_OUTPUT.put_line ('droppig ' || p_comp_name);

            EXECUTE IMMEDIATE 'Drop Procedure ' || p_comp_name;
         EXCEPTION
            WHEN OTHERS
            THEN
               NULL;
         END;
      END IF;
   END;
BEGIN
   BEGIN
      SELECT 1
        INTO l_exists
        FROM ms_apps_mdf_flow_xml
       WHERE flow_code = p_flow_code;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         RETURN;
   END;

   SELECT blueprint_code
     INTO l_blueprint_code
     FROM ms_apps_mdf_flow_xml
    WHERE flow_code = p_flow_code;
    
      IF (NOT (ms_QSM_utilities.g_tbl_metric_maintenance.COUNT > 0))
      THEN
         ms_QSM_utilities.initialize_metric_maint ('QSM');
      END IF;    

   l_router_suffix := ms_QSM_utilities.get_router_suffix (p_flow_code);


   l_varchar :=
         q'#CREATE OR REPLACE PROCEDURE ms_#'||MS_QSM_UTILITIES.G_MODULE_CODE||q'#_router_#'
      || l_router_suffix
      || q'#  (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN OUT CLOB,
                                                                       lt_out_data          IN OUT CLOB,
                                                                       pc_process_code      IN     VARCHAR2,
                                                                       lc_from_stage        IN     VARCHAR2,
                                                                       lc_to_stage          IN     VARCHAR2,
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
                        AS
                        l_out_xml              XMLTYPE := NULL;
                        l_to_dd_object_type    VARCHAR2 (100);
                        l_frm_dd_object_type   VARCHAR2 (100);
                        l_dd_process_code      VARCHAR2 (1000);
                        l_blueprint_code         VARCHAR2(1000);
                        BEGIN
                                NULL;
                               l_out_xml :=xmltype(lt_in_data);
                               l_dd_process_code := ms_QSM_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/dd_process_code');   
                        #';
   DBMS_LOB.write (l_clob,
                   LENGTH (l_varchar),
                   1,
                   l_varchar);
   l_varchar := q'#      SELECT object_name
        INTO l_to_dd_object_type
        FROM (       SELECT to_code, object_name, view_name
                       FROM XMLTABLE (
                               xmlnamespaces ('http://www.metricstream.com/appstudio/mdf' AS "mdf"), 'mdf:process/mdf:stages/mdf:stage'
                               PASSING (SELECT xmltype (flow_xml)
                                          FROM ms_apps_mdf_flow_xml
                                         WHERE flow_code = l_dd_process_code)
                               COLUMNS to_code       VARCHAR2 (100) PATH 'mdf:code',
                                       object_name   VARCHAR2 (100) PATH 'mdf:object',
                                       view_name     VARCHAR2 (100) PATH 'mdf:view'))
       WHERE UPPER (to_code) = UPPER (lc_to_stage);

      SELECT object_name
        INTO l_frm_dd_object_type
        FROM (       SELECT to_code, object_name, view_name
                       FROM XMLTABLE (
                               xmlnamespaces ('http://www.metricstream.com/appstudio/mdf' AS "mdf"), 'mdf:process/mdf:stages/mdf:stage'
                               PASSING (SELECT xmltype (flow_xml)
                                          FROM ms_apps_mdf_flow_xml
                                         WHERE flow_code = l_dd_process_code)
                               COLUMNS to_code       VARCHAR2 (100) PATH 'mdf:code',
                                       object_name   VARCHAR2 (100) PATH 'mdf:object',
                                       view_name     VARCHAR2 (100) PATH 'mdf:view'))
       WHERE UPPER (to_code) = UPPER (lc_from_stage);
       #';
   DBMS_LOB.writeappend (l_clob, LENGTH (l_varchar), l_varchar);

   FOR x
      IN (SELECT b.guid || c.guid,
                 b.metric_name form_from,
                 c.metric_name form_to,
                 b.guid from_guid,
                 c.guid to_guid,
                 b.source from_source,
                 c.source to_source
            FROM (WITH source AS ( SELECT blu.from_stg, blu.to_stg
                                     FROM XMLTABLE (
                                             xmlnamespaces ('http://www.metricstream.com/appstudio/mdf' AS "mdf"), 'mdf:flow/mdf:transitions/mdf:transition'
                                             PASSING (SELECT xmltype (blueprint_xml)
                                                        FROM ms_apps_mdf_blueprint
                                                       WHERE blueprint_code = l_blueprint_code)
                                             COLUMNS from_stg VARCHAR2 (100) PATH 'mdf:from', to_stg VARCHAR2 (100) PATH 'mdf:to') blu)
                  SELECT DISTINCT flo1.object || '~' || flo2.object AS src
                    FROM XMLTABLE (xmlnamespaces ('http://www.metricstream.com/appstudio/mdf' AS "mdf"), 'mdf:process/mdf:stages/mdf:stage'
                                   PASSING (SELECT xmltype (flow_xml)
                                              FROM ms_apps_mdf_flow_xml
                                             WHERE flow_code = p_flow_code)
                                   COLUMNS object VARCHAR2 (100) PATH 'mdf:object', code VARCHAR2 (100) PATH 'mdf:code') flo1,
                         source,
                         XMLTABLE (xmlnamespaces ('http://www.metricstream.com/appstudio/mdf' AS "mdf"), 'mdf:process/mdf:stages/mdf:stage'
                                   PASSING (SELECT xmltype (flow_xml)
                                              FROM ms_apps_mdf_flow_xml
                                             WHERE flow_code = p_flow_code)
                                   COLUMNS object VARCHAR2 (100) PATH 'mdf:object', code VARCHAR2 (100) PATH 'mdf:code') flo2
                   WHERE source.from_stg = flo1.code AND source.to_stg = flo2.code) a,
                 ms_QSM_metric_maint b,
                 ms_QSM_metric_maint c
           WHERE     SUBSTR (a.src, 1, INSTR (a.src, '~') - 1) = b.metric_name
                 AND SUBSTR (a.src, INSTR (a.src, '~') + 1) = c.metric_name
                 AND b.module = c.module
                 AND b.is_active = c.is_active
                 AND b.module = 'QSM'
                 AND b.is_active = 'Y')
   LOOP
      l_tbl (x.from_guid || x.to_guid).form_from := x.form_from;
      l_tbl (x.from_guid || x.to_guid).form_to := x.form_to;
      l_tbl (x.from_guid || x.to_guid).from_guid := x.from_guid;
      l_tbl (x.from_guid || x.to_guid).to_guid := x.to_guid;
      l_tbl (x.from_guid || x.to_guid).from_source := x.from_source;
      l_tbl (x.from_guid || x.to_guid).to_source := x.to_source;
   END LOOP;

   i := l_tbl.FIRST;
   DBMS_OUTPUT.put_line ('hERE ' || l_tbl.COUNT);


   WHILE i IS NOT NULL
   LOOP
      SELECT CASE
                WHEN (l_tbl (i).from_source = 'PROD' AND l_tbl (i).to_source = 'PROD') THEN 'PROD'
                WHEN (l_tbl (i).from_source = 'PROD' AND l_tbl (i).to_source <> 'PROD') THEN l_tbl (i).to_source
                WHEN (l_tbl (i).from_source <> 'PROD' AND l_tbl (i).to_source = 'PROD') THEN l_tbl (i).from_source
                WHEN (l_tbl (i).from_source <> 'PROD' AND l_tbl (i).to_source <> 'PROD') THEN l_tbl (i).from_source
             END
        INTO l_source
        FROM DUAL;

      IF i = l_tbl.FIRST
      THEN
         l_varchar :=
               q'#       IF upper(l_frm_dd_object_type) ='#'
            || l_tbl (i).form_from
            || q'#' AND upper(l_to_dd_object_type) = '#'
            || l_tbl (i).form_to
            || q'#' THEN 
                                #'
            || q'#execute immediate#'
            || q'#'BEGIN ms_#'||MS_QSM_UTILITIES.G_MODULE_CODE||'_'
            || l_tbl (i).from_guid
            || '_'
            || l_tbl (i).to_guid
            || '_'
            || l_source
            || q'#(:1,:2,:3,:4,:5,:6,:7,:8,:9) ; END;'
                               #'
            || q'#Using lt_in_data_orig, IN OUT lt_in_data ,IN OUT lt_out_data ,pc_process_code,lc_from_stage,lc_to_stage,IN OUT xn_error_handle_id ,IN OUT xn_error_seq ,OUT xn_error_code;
                                 #';
      ELSE
         l_varchar :=
               q'#ELSIF upper(l_frm_dd_object_type) ='#'
            || l_tbl (i).form_from
            || q'#' AND upper(l_to_dd_object_type) = '#'
            || l_tbl (i).form_to
            || q'#' THEN 
                                #'
            || q'#execute immediate #'
            || q'#' BEGIN ms_#'||MS_QSM_UTILITIES.G_MODULE_CODE||'_'
            || l_tbl (i).from_guid
            || '_'
            || l_tbl (i).to_guid
            || '_'
            || l_source
            || q'#(:1,:2,:3,:4,:5,:6,:7,:8,:9); END;'
                                 #'
            || q'#Using lt_in_data_orig, IN OUT lt_in_data ,IN OUT lt_out_data ,pc_process_code,lc_from_stage,lc_to_stage,IN OUT xn_error_handle_id ,IN OUT xn_error_seq ,OUT xn_error_code;
                                 #';
      END IF;

      DBMS_LOB.writeappend (l_clob, LENGTH (l_varchar), l_varchar);
      gen_comp ('ms_'||MS_QSM_UTILITIES.G_MODULE_CODE||'_' || l_tbl (i).from_guid || '_' || l_tbl (i).to_guid || '_' || l_source);


      i := l_tbl.NEXT (i);
   END LOOP;

   DBMS_LOB.writeappend (l_clob, LENGTH ('END IF;' || CHR (10)), 'END IF;' || CHR (10));
   DBMS_LOB.writeappend (l_clob, LENGTH ('END;'), 'END;');

   EXECUTE IMMEDIATE l_clob;
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line ('NOW HERE ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
END;
  
 
/
  CREATE OR REPLACE FUNCTION "NOVT_DEV"."MS_QSM_GET_DISP_VALUE" (v_user_name varchar2)
return varchar2 
as
v_disp_value varchar2(32000);

begin
for i in (select column_value from table(ms_apps_utilities.split_string(v_user_name,',')))
loop
if v_disp_value is null then
v_disp_value:=MS_APPS_UTILITIES.GET_USER_FULL_NAME(i.column_value);
else
v_disp_value:=v_disp_value||','||MS_APPS_UTILITIES.GET_USER_FULL_NAME(i.column_value);
end if;
end loop;
return v_disp_value;
exception
when others then
return null;
end; 
 
/
  CREATE OR REPLACE FUNCTION "NOVT_DEV"."MS_QSM_GET_IA_QUE_AVG" (
   x_BU_ID   IN   number,
   x_QUESTIONNAIRE_ID         IN   VARCHAR2,
   x_QUE_REQUEST_ID in varchar2,
   x_BA_ID in varchar2
)
 RETURN NUMBER IS

 ia_survey_score number;
 
begin

SELECT (SELECT MS_QSM_NOVT_RPT_UTILS.GET_MEAN_RESPONSE   (T4.QST_ID_PK, T1.QUE_REQUEST_ID, T2.INDV_ITEM_FIELD_1) FROM DUAL) AVG_SURVEY_SCORE into ia_survey_score
FROM  MS_QSM_INIT_QUESTNR T1
     ,MS_QSM_INIT_QUESTNR_IND T2
     ,MS_QSM_SECTION T3
     ,MS_QSM_QUESTION T4
     ,MS_GRC_RELATIONSHIP_DETAILS T5
     ,MS_GRC_QUESTION_PROC_CAT T6
     --,MS_GRC_QUESTION_PROC_CAT
WHERE T1.QUE_REQUEST_ID = T2.QUE_REQUEST_ID
  AND T1.QUESTIONNAIRE_ID = T3.SECTION_QUESTNR_FK
  AND T3.SECTION_ID_PK = T4.QST_SECTION_ID
  AND T4.QST_ID = T5.SRC_OBJ_ID
  AND T6.OBJECT_ID=T4.QST_ID
  AND T6.CATEGORY_QUEST=2
  AND T2.INDV_ITEM_FIELD_1=x_BU_ID
  AND T1.QUESTIONNAIRE_ID=x_QUESTIONNAIRE_ID
  AND T1.QUE_REQUEST_ID=x_QUE_REQUEST_ID
  AND T5.TGT_OBJ_ID=x_BA_ID
  AND EXISTS (SELECT 1 FROM SI_ORG_ENTITIES_T WHERE T2.INDV_ITEM_FIELD_1 =  TO_CHAR(ORG_ENTITY_ID));
  
  return ia_survey_score;
  
  exception
  when others then
  return null;

end MS_QSM_GET_IA_QUE_AVG;
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_GRADE_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_GRADE_O
    Creation Time : 2012-DEC-31 17:00:43.083795000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_GRADE_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_GRD_SCORING_PK                      IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_GRD_SCORING_PK                      IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_GRADE_O ;
  
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_GRADE_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_GRD_SCORING_PK                      IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_GRADE', 'D');

        UPDATE MS_QSM_GRADE
           SET DD_EDIT_FLAG = 'N'
         WHERE GRD_SCORING_PK                           = iop_GRD_SCORING_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_GRD_SCORING_PK                      IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_GRADE', 'D');

        UPDATE MS_QSM_GRADE
           SET DD_EDIT_FLAG = 'Y'
         WHERE GRD_SCORING_PK                           = iop_GRD_SCORING_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_GRADE_O; 
 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_INFOLET_RESULT" AS OBJECT
            ( STORED_VALUE VARCHAR2(4000),
              DISPLAY_VALUE VARCHAR2(4000),
              LOCALE_ID NUMBER
                         ); 

 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_INFOLET_RESULT_TABLE" AS TABLE OF MS_QSM_INFOLET_RESULT;  

 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_INIQSM_INIQSM_PROD" (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN OUT CLOB,
                                                                       lt_out_data          IN OUT CLOB,
                                                                       pc_process_code      IN     VARCHAR2,
                                                                       lc_from_stage        IN     VARCHAR2,
                                                                       lc_to_stage          IN     VARCHAR2,
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
    AS
    
    l_out_xml                                                     XMLTYPE:=NULL;   
    lc_send_user_role                                          CLOB;
    lc_org                                                           CLOB;
    ln_response_metric_id                                    NUMBER;                                    
    ln_response_pid                                             NUMBER;
    ln_response_iid                                              NUMBER;
    lx_response_xml                                            XMLTYPE:=NULL;         
    lx_response_xml_template                              XMLTYPE:=NULL;           
    lv_applies_to_object                                       VARCHAR2(4000);
    ln_enterprise_id                                             NUMBER;
    ld_due_date                                                DATE;
    lv_assignment_text                                        VARCHAR2(4000);
    ln_priority                                                     NUMBER;
    l_que_request_id                                           VARCHAR2(255);
    
    lc_respondents                                              CLOB;
    
    lv_path                                                        VARCHAR2(100):='datapacket/data/nonmultirow/$/text()';
    lv_path_clob                                                 VARCHAR2(100):='datapacket/data/nonmultirow/$';                                                           
    l_error_code                                                NUMBER;
    l_error_message                                          VARCHAR2 (4000);
    lv_user_locale_id                                          NUMBER;
    l_sch_det_status                                           VARCHAR2(1);
    lc_all_questions_id                                        CLOB;
    lv_applies_to_name                                      VARCHAR2(500);
    
    lc_child_xml_clob                                          CLOB:='<msa:sec xmlns:msa="http://www.metricstream.com/appstudio/msa">';
    
    lx_child_xml_template                                    XMLTYPE:=NULL;  
    lx_child_xml                                                  XMLTYPE:=NULL;
    ln_instance_rec_num                                     NUMBER:=0;
    lc_all_section_ids                                          CLOB;
    lv_param_flag                                             VARCHAR2(255);
    l_next_schedule_date                                    DATE;
    l_sch_frequency                                            VARCHAR2(255);
    
    lv_child_path                                                 VARCHAR2(100):='row/$/text()';
    
    l_sequence_no                                              NUMBER(10) := 1;


    lv_org_desc                                                  CLOB;
    l_has_sub_qst                                               CLOB;
    l_check_resp                                                VARCHAR2(4000);
    l_certification_text                                        VARCHAR2(4000); 
    l_RTF_metric_id                                             NUMBER;
    l_finding_metric_id                                         NUMBER;
    l_reference_metric_ids                                      VARCHAR2(1000);
    l_finding_param_val                                         VARCHAR2(10);
    l_period_id                                                 NUMBER;
    l_resp_sprd                                                 VARCHAR2(4000);
    l_resp_req_approval                                         VARCHAR2(4000);
    l_resp_req_action                                           VARCHAR2(4000);
    l_qst_json_value                                            VARCHAR2(4000);
    l_resp_sprd_metric_id                                       NUMBER;
    l_stored_val                                                VARCHAR2(100);
    l_delimeter                                                 VARCHAR2(255);
    l_due_date                                                  DATE;
    l_reminder_next_send_date                                  DATE;  
    l_init_metric_id                                            NUMBER;
    l_init_pid                                                      NUMBER;
    l_init_iid                                                      NUMBER;
    l_published_count                                         NUMBER;
    l_triggered_flag                                            BOOLEAN;
    l_new_due_after                                          NUMBER;
    l_old_due_after                                          NUMBER;
    l_response_metric_id                                    NUMBER;
    LV_DELIMETER                                            VARCHAR2(255);
    LV_LIST_OF_VALUES                                       VARCHAR2(4000);
    L_REINT_XML                                             XMLTYPE:=NULL;
    L_EXCEL_RESPONSE_VAL                                    clob;
    L_CONTACT_USER_AVAILABLE                                VARCHAR2(10);
    L_OBJECT_NAME                                           VARCHAR2(4000);
    L_OBJECT_ID                                             VARCHAR2(4000);

    l_response_approver                                     CLOB;
    l_enable_backend_scoring                                varchar2(10);
    l_progressive_submit                                    varchar2(10);
    L_REPORTING_PERIOD_DISP                                 varchar2(4000);
    l_check_resp_disp                                       varchar2(4000);
    l_survey_source_type                                    VARCHAR2(255);
    
    l_exist                                                 NUMBER;
    l_qst_order                                             NUMBER:=0;
    
    PROCEDURE check_response_triggerd (ip_respondent IN VARCHAR2,
                                                             ip_que_request_id IN  VARCHAR2,
                                                             ip_indv_item_pk  IN VARCHAR2,
                                                             ip_send_option IN VARCHAR2 DEFAULT '2',
                                                             op_triggered_flag OUT BOOLEAN)
    IS
    l_count NUMBER;
    
    BEGIN
    
--           ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
--           pn_error_sequence    => xn_error_seq,
--           pc_error_type        => 'E',
--           pc_error_text        => 'TRIGGER' || ip_que_request_id||':'||ip_indv_item_pk||':'||ip_respondent||':'||ip_send_option);                                         
--        
        IF ip_send_option = '2' THEN   -- Seperate Copy
            
            SELECT COUNT(1)
            INTO l_count
            FROM MS_QSM_SCHEDULER_DETAILS a,MS_QSM_SCHEDULER_MASTER b
            WHERE A.SCH_REQ_ID =B.SCH_REQ_ID
            AND A.SEQUENCE_NO= B.SEQUENCE_NO
            AND A.SCH_REQ_ID = ip_que_request_id
            AND NVL(B.INDV_ITEM_PK,'X') = NVL(ip_indv_item_pk,'X')
            AND INDIVIUDAL_RESPONDENET = ip_respondent;
        ELSE    -- Same Copy

            SELECT COUNT(1)
            INTO l_count
            FROM MS_QSM_SCHEDULER_DETAILS a,MS_QSM_SCHEDULER_MASTER b
            WHERE A.SCH_REQ_ID =B.SCH_REQ_ID
            AND A.SEQUENCE_NO= B.SEQUENCE_NO
            AND A.SCH_REQ_ID = ip_que_request_id
            AND NVL(B.INDV_ITEM_PK,'X') = NVL(ip_indv_item_pk,'X');
                       
        END IF;            
            
        IF l_count > 0 THEN            
            op_triggered_flag := True;
        ELSE          
            op_triggered_flag := False;                     
        END IF;
         
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;                                                             
                                        
    BEGIN
                        
        l_out_xml := xmltype (lt_in_data);
        
        IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0)  THEN
            ms_qsm_utilities.initialize_metric_maint ('QSM');
        END IF;
        
        IF NOT (MS_QSM_UTILITIES.G_TBL_CONFIG_PARAMS.COUNT > 0)  THEN 
          MS_QSM_UTILITIES.INITIALIZE_PERF_CONFIG_PARAMS;
        END IF;
        
        BEGIN               
               
            SELECT VALUE
            INTO l_delimeter
            FROM MS_QSM_PARAMS
            WHERE PARAM_GROUP='QSM_PARAMS'
            AND PARAMETER = 'QUESTION_LOV_DELIMETER'
            AND ENABLED='Y';

        EXCEPTION
            WHEN OTHERS THEN
                l_delimeter :=',';
        END; 
        

          ms_qsm_log_activity ('', 'INPUT XML',  l_out_xml.getclobval());      
				
         l_init_metric_id := ms_apps_utilities.get_infolet_id (ms_qsm_utilities.g_tbl_metric_maintenance ('INIQSM'));  
         l_response_metric_id := ms_apps_utilities.get_infolet_id (ms_qsm_utilities.g_tbl_metric_maintenance ('RESQSM'));      
        
         FOR non_multirow_rec IN (SELECT previous_stage,
                                                            instructions,
                                                            DBMS_XMLGEN.CONVERT(instructions_htm) instructions_htm,
                                                            sub_certification_for,
                                                            consdr_no_of_past_months,
                                                            level_1_approver,
                                                            level_2_approver,
                                                            restrict_access_to,
                                                            sch_req_id,
                                                            sch_frequency,
                                                            sch_start_date,
                                                            sch_due_after,
                                                            sch_end_by,
                                                            sch_next_date,
                                                            que_request_id,
                                                            que_request_name,
                                                            que_request_type,
                                                            dd_object_type,
                                                            dd_current_user_name,
                                                            dd_event_user_name,
                                                            dd_enterprise_info,
                                                            dd_current_stage,
                                                            dd_process_code,
                                                            questionnaire_id,
                                                            que_applies_to,
                                                            survey_scope_selection,
                                                            fltr_owner_org,
                                                            fltr_org_level,
                                                            init_comments,
                                                            status,
                                                            sections,
                                                            que_action,
                                                            que_send_to,
                                                            send_option,
                                                            send_user_role,
                                                            send_to_assessor_org,
                                                            send_to_assessor,
                                                            response_approver,
                                                            collaborative_response,
                                                            instance_rec_num,
                                                            instance_id,
                                                            metric_id,
                                                            metric_run_date,
                                                            metric_completed_date,
                                                            latest_flag,
                                                            created_by,
                                                            creation_date,
                                                            process_flow_status,
                                                            process_instance_id,
                                                            display_scoring,
                                                            findings_can_add_by,
                                                            reporting_period,
                                                            APPROVAL_BASED_ON_RESPONSE,
                                                            published,
                                                            EXCEL_BASED,
                                                            FIILTER_LEVEL,
                                                            APPLIES_TO_ITEMS,
                                                            SEND_TO_APPROVAL,
                                                            all_user_approval,
                                                            REPORTING_PERIOD_TYPE,
                                                            OVERALL_APPROVER,

                                                            survey_source_type,
                                                            approver_organization
                                    FROM XMLTABLE (
                                    xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:nonmultirow'
                                    PASSING xmltype (lt_in_data_orig)
                                    COLUMNS          previous_stage VARCHAR2(100) PATH 'msa:previous_stage',
                                                            instructions CLOB   PATH 'msa:instructions',
                                                            instructions_htm CLOB PATH 'msa:instructions_htm',
                                                            sub_certification_for VARCHAR2(255)  PATH 'msa:sub_certification_for',
                                                            consdr_no_of_past_months NUMBER(10)  PATH 'msa:consdr_no_of_past_months',
                                                            level_1_approver VARCHAR2(100)  PATH 'msa:level_1_approver',
                                                            level_2_approver VARCHAR2(100)  PATH 'msa:level_2_approver',
                                                            restrict_access_to VARCHAR2(100)  PATH 'msa:restrict_access_to',
                                                            sch_req_id VARCHAR2(100)  PATH 'msa:sch_req_id',
                                                            sch_frequency VARCHAR2(255)  PATH 'msa:sch_frequency',
                                                            sch_start_date VARCHAR2(100)  PATH 'msa:sch_start_date',
                                                            sch_due_after NUMBER(10)  PATH 'msa:sch_due_after',
                                                            sch_end_by VARCHAR2(100)  PATH 'msa:sch_end_by',
                                                            sch_next_date VARCHAR2(100)  PATH 'msa:sch_next_date',
                                                            que_request_id VARCHAR2(100)  PATH 'msa:que_request_id',
                                                            que_request_name VARCHAR2(255)  PATH 'msa:que_request_name',
                                                            que_request_type VARCHAR2(100)  PATH 'msa:que_request_type',
                                                            dd_object_type VARCHAR2(100)  PATH 'msa:dd_object_type',
                                                            dd_current_user_name VARCHAR2(100)  PATH 'msa:dd_current_user_name',
                                                            dd_event_user_name VARCHAR2(100)  PATH 'msa:dd_event_user_name',
                                                            dd_enterprise_info  VARCHAR2(100) PATH 'msa:dd_enterprise_info',
                                                            dd_current_stage VARCHAR2(100)  PATH 'msa:dd_current_stage',
                                                            dd_process_code VARCHAR2(255)  PATH 'msa:dd_process_code',
                                                            questionnaire_id VARCHAR2(255)  PATH 'msa:questionnaire_id',
                                                            que_applies_to VARCHAR2(255)  PATH 'msa:que_applies_to',
                                                            survey_scope_selection VARCHAR2(255)  PATH 'msa:survey_scope_selection',
                                                            fltr_owner_org  CLOB    PATH 'msa:fltr_owner_org',
                                                            fltr_org_level  CLOB    PATH    'msa:fltr_org_level',
                                                            init_comments   VARCHAR2(4000) PATH 'msa:init_comments',
                                                            sections            CLOB   PATH 'msa:sections',
                                                            status  VARCHAR2(255) PATH 'msa:status',
                                                            que_action  VARCHAR2(100) PATH 'msa:que_action',
                                                            que_send_to VARCHAR2(255)  PATH 'msa:que_send_to',
                                                            send_option VARCHAR2(10)  PATH 'msa:send_option',
                                                            send_user_role  CLOB    PATH 'msa:send_user_role',
                                                            send_to_assessor_org    CLOB    PATH 'msa:send_to_assessor_org',
                                                            send_to_assessor    CLOB PATH 'msa:send_to_assessor',
                                                            response_approver VARCHAR2(255)  PATH 'msa:response_approver',
                                                            collaborative_response VARCHAR2(10)  PATH 'msa:collaborative_response',
                                                            instance_rec_num NUMBER(10)  PATH 'msa:instance_rec_num',
                                                            instance_id NUMBER(10)  PATH 'msa:instance_id',
                                                            metric_id NUMBER(10)  PATH 'msa:metric_id',
                                                            metric_run_date VARCHAR2(100)  PATH 'msa:metric_run_date',
                                                            metric_completed_date VARCHAR2(100)  PATH 'msa:metric_completed_date',
                                                            latest_flag VARCHAR2(255)  PATH 'msa:latest_flag',
                                                            created_by VARCHAR2(255)  PATH 'msa:created_by',
                                                            creation_date VARCHAR2(100)  PATH 'msa:creation_date',
                                                            process_flow_status VARCHAR2(255)  PATH 'msa:process_flow_status',
                                                            process_instance_id NUMBER(10)  PATH 'msa:process_instance_id',
                                                            display_scoring        VARCHAR2(100) PATH 'msa:display_scoring',
                                                            findings_can_add_by VARCHAR2(1000) PATH 'msa:findings_can_add_by',
                                                            reporting_period  varchar2(255) path 'msa:reporting_period',
                                                            APPROVAL_BASED_ON_RESPONSE  VARCHAR2(4000) PATH 'msa:approval_based_on_response',
                                                            PUBLISHED VARCHAR2(10) PATH 'msa:published',
                                                            EXCEL_BASED VARCHAR2(10) PATH 'msa:excel_based',
                                                            FIILTER_LEVEL VARCHAR(10) PATH 'msa:fiilter_level',
                                                            APPLIES_TO_ITEMS VARCHAR2(4000) PATH 'msa:applies_to_items',
                                                            SEND_TO_APPROVAL VARCHAR2(10) PATH 'msa:send_to_approval',
                                                            all_user_approval varchar2(10) path 'msa:all_user_approval',
                                                            REPORTING_PERIOD_TYPE VARCHAR2(4000)  PATH 'msa:reporting_period_type',
                                                            OVERALL_APPROVER VARCHAR2(4000) PATH 'msa:overall_approver',
                                                            survey_source_type VARCHAR2(255) PATH 'msa:survey_source_type',
                                                            approver_organization VARCHAR2(255) PATH 'msa:approver_organization'))
                                                            
                                                            
        LOOP

            --raghu
            ms_qsm_log_activity ('', 'START XML INIT~',  l_out_xml.getclobval());
            
            ms_qsm_utilities.process_multirow(l_out_xml,'rmd','reminder_type');
                            
            SELECT NVL(parameter_value,'N')
            INTO l_finding_param_val
            FROM ms_qs_parameter_names a, ms_qs_parameter_values b, ms_qs_parameter_types c
            WHERE     a.parameter_id = b.parameter_id
             AND a.parameter_type_id = b.parameter_type_id
             AND a.parameter_type_id = c.parameter_type_id
             AND b.parameter_type_id = c.parameter_type_id
             AND c.parameter_type = 'MS_QSM_Configuration'
             AND a.parameter_name = 'Enable Findings or Issues for Questionnaires';
             
            select nvl(parameter_value,'N')
            INTO l_progressive_submit
            FROM ms_qs_parameter_names a, ms_qs_parameter_values b, ms_qs_parameter_types c
            WHERE     a.parameter_id = b.parameter_id
             AND a.parameter_type_id = b.parameter_type_id
             AND a.parameter_type_id = c.parameter_type_id
             AND b.parameter_type_id = c.parameter_type_id
             AND c.parameter_type = 'MS_QSM_Performance_Configuration'
             AND a.parameter_name = 'Enable_Progressive_Submission';
             
            select nvl(parameter_value,'N')
            INTO l_enable_backend_scoring
            FROM ms_qs_parameter_names a, ms_qs_parameter_values b, ms_qs_parameter_types c
            WHERE     a.parameter_id = b.parameter_id
             AND a.parameter_type_id = b.parameter_type_id
             AND a.parameter_type_id = c.parameter_type_id
             AND b.parameter_type_id = c.parameter_type_id
             and c.parameter_type = 'MS_QSM_Performance_Configuration'
             AND a.parameter_name = 'Score_Calculation_From_Backend';

            SELECT B.LOCALE_ID
            INTO lv_user_locale_id
            FROM SI_USERS_T a,SI_LOCALES b
            WHERE a.USER_NAME = non_multirow_rec.dd_current_user_name
            AND A.LOCALE = B.LOCALE_STRING;

            l_que_request_id := non_multirow_rec.que_request_id;            
           
            IF TRIM (non_multirow_rec.que_request_id) = 'INIT'  OR non_multirow_rec.que_request_id IS NULL THEN
                
                l_que_request_id := MS_APPS_UTILITIES.GET_DISPLAY_VALUE(i_lov_name=>'MS_QSM_Init_Questionnaire_Type',i_stored_value=>non_multirow_rec.que_request_type,i_locale_id=>lv_user_locale_id,i_enterprise_name=>non_multirow_rec.dd_enterprise_info)  
                ||'-'||ms_qsm_que_request_id_s.NEXTVAL;
                
                ms_qsm_utilities.update_xml(l_out_xml, REPLACE(lv_path,'$','que_request_id'),l_que_request_id);
                ms_qsm_utilities.update_xml(l_out_xml, REPLACE(lv_path,'$','sch_req_id'),l_que_request_id);
                ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/ind/row/ind_que_request_id/text()',l_que_request_id);
                ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/rmd/row/reminder_fk/text()',l_que_request_id);
                ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/rmd/row/is_active/text()','Y');
            
            else
            
                SELECT COUNT(1)
                INTO l_published_count
                FROM MS_QSM_INIT_QUESTNR
                WHERE QUE_REQUEST_ID = l_que_request_id
                AND PUBLISHED ='Y';
    
            END IF;

            FOR indiv_item_rec IN (SELECT indv_item_pk,
                                              instance_rec_num
                                   FROM XMLTABLE(xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:ind/msa:row'
                                        PASSING  l_out_xml
                                        COLUMNS  indv_item_pk  VARCHAR2 (255) PATH 'msa:indv_item_pk',
                                                        instance_rec_num    NUMBER  PATH 'msa:instance_rec_num')
                                         WHERE indv_item_pk IS NULL)
            LOOP
                        
--                        IF TRIM(indiv_item_rec.indv_item_pk) IS NULL THEN
                    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/ind/row[instance_rec_num ='||indiv_item_rec.instance_rec_num||']/indv_item_pk/text()','INDV-'||ms_qsm_indv_item_id_s.NEXTVAL);
                    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/ind/row[instance_rec_num ='||indiv_item_rec.instance_rec_num||']/ind_que_request_id/text()',l_que_request_id);
--                            END IF;
                            
            END LOOP;
                    
            ms_qsm_log_activity ('', 'AFTER UPDATION XML INIT~', l_out_xml.getclobval());
                    
            l_due_date := TO_DATE(non_multirow_rec.sch_start_date,'MM/DD/YYYY HH24:MI:SS')+non_multirow_rec.sch_due_after;                                         
                    
            FOR reminder_rec IN (SELECT reminder_id_pk,
                                                      instance_rec_num,
                                                      reminder_send_to,
                                                      reminder_no_of_days,
                                                      reminder_type                                                            
                                           FROM XMLTABLE(xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:rmd/msa:row'
                                                PASSING  l_out_xml
                                                COLUMNS  reminder_id_pk  VARCHAR2 (255) PATH 'msa:reminder_id_pk',
                                                                instance_rec_num    NUMBER  PATH 'msa:instance_rec_num',
                                                                reminder_send_to VARCHAR2(255) PATH 'msa:reminder_send_to',
                                                                reminder_no_of_days NUMBER PATH 'msa:reminder_no_of_days',
                                                                reminder_type   VARCHAR2(255) PATH 'msa:reminder_type')
                                                 WHERE reminder_id_pk IS NULL)
            LOOP
                        
                        
                    SELECT  DECODE(reminder_rec.reminder_type,'1',l_due_date-reminder_rec.reminder_no_of_days,'2',l_due_date+reminder_rec.reminder_no_of_days,'3',l_due_date,SYSDATE)
                    into l_reminder_next_send_date
                    FROM DUAL;
                            
--                        IF TRIM(indiv_item_rec.indv_item_pk) IS NULL THEN
                    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/rmd/row[instance_rec_num ='||reminder_rec.instance_rec_num||']/reminder_id_pk/text()','RMDR-'||ms_qsm_reminder_id_s.NEXTVAL);
                            
                    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/rmd/row[instance_rec_num ='||reminder_rec.instance_rec_num||']/reminder_next_send_date/text()',TO_CHAR(l_reminder_next_send_date,'MM/DD/YYYY HH24:MI:SS'));
                    
                    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/rmd/row/reminder_fk/text()',l_que_request_id);
                    
                    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/rmd/row[instance_rec_num ='||reminder_rec.instance_rec_num||']/is_active/text()','Y');
                            
                                                        
--                        END IF;
                            
            END LOOP;                                                          
            
            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/status/text()',ms_qsm_utilities.get_status (non_multirow_rec.dd_current_stage, non_multirow_rec.previous_stage, non_multirow_rec.que_action));
            IF (non_multirow_rec.published) IS NULL THEN
            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/published/text()','N');
            END IF;
            IF lc_from_stage = 'CREATE_EDIT' AND lc_to_stage ='L1_APPROVE' THEN -- Transition INI_To_L1 Create/Edit Questionnaire --> Level 1 Approval
                
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'CR_ED_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'L1_APP');
                      
            ELSIF  lc_from_stage = 'CREATE_EDIT' AND lc_to_stage ='OBJECT_EDITORS' THEN -- Transition INI_To_OWN Create/Edit Questionnaire --> Owners

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'CR_ED_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'OWN_QST');
                                           
            ELSIF  lc_from_stage = 'CREATE_EDIT' AND lc_to_stage ='PUBLISH' THEN -- Transition INI_To_PUB Create/Edit Questionnaire --> Publish Questionnaire

--                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'CR_ED_QST');
--                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'PUB_QST');

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'PUB_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'CR_ED_QST');
                                            
            ELSIF  lc_from_stage = 'OBJECT_EDITORS' AND lc_to_stage ='CREATE_EDIT' THEN -- Transition OWN_To_INI Owners --> Create Questionnaire (Request for Clarification)

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'OWN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'CR_ED_QST');
                      
            ELSIF  lc_from_stage = 'OBJECT_EDITORS' AND lc_to_stage ='L1_APPROVE' THEN -- Transition OWN_To_L1 Owners --> Level 1 Approver (Request for Approval)

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'OWN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'L1_APP');
                      
            ELSIF  lc_from_stage = 'OBJECT_EDITORS' AND lc_to_stage ='PUBLISH' THEN -- Transition OWN_To_PUB Owners --> Publish 

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'OWN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'PUB_QST');                      
                     
            ELSIF  lc_from_stage = 'OBJECT_EDITORS' AND lc_to_stage ='REQUEST_CANCEL' THEN -- Transition OWN_To_CAN Owners --> Cancel 

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'OWN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'CAN_QST');                           
                                            
            ELSIF  lc_from_stage = 'L1_APPROVE' AND lc_to_stage ='L2_APPROVE' THEN -- Transition L1_To_L2 - Level 1 Approval --> Level 2 Approval 

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L1_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'L2_APP');                       
                      
            ELSIF  lc_from_stage = 'L1_APPROVE' AND lc_to_stage ='OBJECT_EDITORS' THEN -- Transition L1_To_OWN - Level 1 Approval --> Owners (Request for Clarification 

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L1_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'OWN_QST');                              
                      
            ELSIF  lc_from_stage = 'L1_APPROVE' AND lc_to_stage ='PUBLISH' THEN -- Transition L1_To_PUB - Level 1 Approval --> Publish

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L1_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'PUB_QST');       
                      
            ELSIF  lc_from_stage = 'L1_APPROVE' AND lc_to_stage ='REQUEST_CANCEL' THEN -- Transition L1_To_CAN - Level 1 Approval --> Cancel

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L1_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'CAN_QST');  
                                                                  
            ELSIF  lc_from_stage = 'L2_APPROVE' AND lc_to_stage ='OBJECT_EDITORS' THEN -- Transition L2_To_OWN - Level 2 Approval --> Owners (Request for Clarification 

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L2_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'OWN_QST');    
                      
            ELSIF  lc_from_stage = 'L2_APPROVE' AND lc_to_stage ='PUBLISH' THEN -- Transition L2_To_PUB - Level 2 Approval --> Publish

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L2_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'PUB_QST');       
                      
                      
            ELSIF  lc_from_stage = 'L2_APPROVE' AND lc_to_stage ='REQUEST_CANCEL' THEN -- Transition L2_To_CAN - Level 2 Approval --> Cancel

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L2_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'CAN_QST');  

            END IF;
            
            if non_multirow_rec.survey_source_type IS NULL THEN
                
                begin
                
                  select stored_value 
                  into l_survey_source_type
                  from ms_qs_list_of_values_t a,ms_qs_lov_names b
                  where a.lov_id = b.lov_id
                  and b.lov_name = 'MS_QSM_INTEGRATED_MODULES'
                  AND UPPER(DISPLAYED_VALUE)='SURVEYS';
                  
                exception 
                  when others then
                    l_survey_source_type:= null;
                end;    
                
                ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','survey_source_type'), l_survey_source_type);  
                ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','survey_source_ref'),l_que_request_id);  
                
            END IF;
            
            IF lc_to_stage = 'PUBLISH' THEN  -- This Block is written for Sending the Assignments
                
                ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/status/text()','3');
                
                ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/published/text()','Y');    
                
                l_sch_frequency := MS_QSM_UTILITIES.GET_TAG_VALUE(l_out_xml,'datapacket/data/nonmultirow/sch_frequency/text()');
                                               
                IF l_published_count <= 0 THEN                                
                  
                  l_next_schedule_date := TO_DATE(MS_QSM_UTILITIES.GET_TAG_VALUE(l_out_xml,'datapacket/data/nonmultirow/sch_start_date/text()'),'MM/DD/YYYY HH24:MI:SS');
                  
                  IF TRUNC(l_next_schedule_date)<TRUNC(SYSDATE) THEN
                      
                      l_next_schedule_date:= MS_QSM_UTILITIES.FN_DERIVE_SCHEDULE_DATE(l_sch_frequency,'MS_QSM_Frequency',l_next_schedule_date);
                        
                  END IF;
                  
                  ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/sch_next_date/text()',TO_CHAR(l_next_schedule_date,'MM/DD/YYYY HH24:MI:SS'));    
                  
                END IF;                                 
                  
                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                    pn_error_sequence    => xn_error_seq,
                                    pc_error_type        => 'I',
                                    pc_error_text        => 'INSIDE PUBLISH');   
                                    ms_qsm_log_activity ('', 'inside publish ~','' );
                                    
--                IF TRIM(non_multirow_rec.survey_scope_selection) = '1' THEN  -- Select from a Filtered List (Better for Large Surveys)
--                            
--                    lc_send_user_role := non_multirow_rec.send_user_role;
--                            
--                    IF non_multirow_rec.que_applies_to = '10' THEN -- Organizations
--                                
--
--                        lc_org := non_multirow_rec.fltr_org_level;
--                                
--                    ELSE   -- Other than Organizations
--                                
--                         lc_org := non_multirow_rec.fltr_owner_org;
--                                    
--                     END IF;   
--                             
--                   lv_applies_to_object := lc_org; -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown
--                                
--                ELSIF TRIM(non_multirow_rec.survey_scope_selection) = '2' THEN  -- Select One or More Individual Items       
--                            
--                    lc_send_user_role := non_multirow_rec.send_to_assessor;
--                    lc_org :=non_multirow_rec.send_to_assessor_org;
--                            
--                    SELECT MS_CONCAT(indv_item_field_1)
--                    INTO lv_applies_to_object
--                    FROM XMLTABLE(xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:ind/msa:row'
--                    PASSING  (XMLTYPE(lt_in_data_orig))
--                    COLUMNS indv_item_field_1 PATH 'msa:indv_item_field_1');
--                    
--                    IF TRIM(lv_applies_to_object) IS NOT NULL THEN
--                        lv_applies_to_object := ms_qsm_utilities.get_applies_to_object_desc(non_multirow_rec.que_applies_to,lv_applies_to_object);
--                    END IF;
--
--                END IF;     -- Select from a Filtered List 
                                   
                                               
--                MS_QSM_UTILITIES.insert_schedule_logs(i_request_id => l_que_request_id
--                                                                            ,i_respondents =>lc_send_user_role
--                                                                            ,i_log_level => 'H'
--                                                                            ,i_process_instance_id =>non_multirow_rec.process_instance_id
--                                                                            ,i_questionnaire_id =>non_multirow_rec.questionnaire_id
--                                                                            ,i_sch_frequency=>non_multirow_rec.sch_frequency
--                                                                            ,o_error_code=>l_error_code
--                                                                            ,o_error_message=>l_error_message);
                        
                IF TRIM(non_multirow_rec.sch_frequency) = '6' THEN                     -- Run Now -- Need to send Assignments if the System Parameter is configured
                    
--                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
--                    pn_error_sequence    => xn_error_seq,
--                    pc_error_type        => 'I',
--                    pc_error_text        => 'INSIDE RUN NOW');   
--                    ms_qsm_log_activity ('', 'inside run now ~','');

                
                                                            
                    SELECT metric_id 
                    INTO ln_response_metric_id
                    from SI_METRICS_T
                    WHERE METRIC_NAME = MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM');
                    
                                      
--                    SELECT NVL(SCOlv_scoring_flagRING_FLAG,'2')
--                    INTO lv_scoring_flag
--                    FROM MS_QSM_QUESTIONNAIRE
--                    WHERE QUE_ID = non_multirow_rec.questionnaire_id;


                    
--                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
--                    pn_error_sequence    => xn_error_seq,
--                    pc_error_type        => 'P',
--                    pc_error_text        => 'SECTION_VAL'||length(non_multirow_rec.sections));   
                    
                    IF LENGTH(non_multirow_rec.sections) <=0 THEN

                        --raghu
                        /*SELECT MS_CONCAT(SECTION_ID_PK)
                        INTO lc_all_section_ids
                        FROM MS_QSM_SECTION
                        WHERE SECTION_QUESTNR_FK = non_multirow_rec.questionnaire_id;*/

						
						SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('SECTION_QUESTNR_FK = '''||non_multirow_rec.questionnaire_id||'''','SECTION_ID_PK','MS_QSM_SECTION')
						INTO lc_all_section_ids
						FROM DUAl;
						
                    ELSE
                        
                        lc_all_section_ids := non_multirow_rec.sections;

                    END IF;
--                    
--                    SELECT MS_CONCAT(QST_ID_PK)
--                    INTO lc_all_questions_id
--                    FROM MS_QSM_QUESTION A,MS_QSM_SECTION B
--                    WHERE A.QST_SECTION_FK=B.SECTION_ID_PK
--                    AND B.SECTION_QUESTNR_FK = TRIM(non_multirow_rec.questionnaire_id)
--                    AND QST_SECTION_FK IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (lc_all_section_ids ,',')));
                                        
                    SELECT OBJECT_NAME,CONTACT_USER_AVAILABLE  
                    INTO lv_applies_to_name,l_CONTACT_USER_AVAILABLE
                    FROM MS_QSM_APPLIES_TO
                    WHERE OBJECT_ID = non_multirow_rec.que_applies_to
                    AND LOCALE_ID = lv_user_locale_id;
                    
--                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
--                    pn_error_sequence    => xn_error_seq,
--                    pc_error_type        => 'I',
--                    pc_error_text        => 'PARAMS'||lc_org||';'||lc_send_user_role||';'||ln_response_metric_id);   
                    
                    ms_qsm_log_activity ('', 'Final XML~', lt_out_data);
                       
                    ms_qsm_utilities.get_multirow_template (p_multirow => lx_response_xml_template, p_metric_id => ln_response_metric_id, p_full_blown => 'Y');
                    
                    lx_response_xml := lx_response_xml_template;
                                       
                    -- Updating XML withe Data to be displayed in Response from
                    
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','que_request_id'),l_que_request_id);
                    ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','instructions'),TO_CHAR(SUBSTR(MS_QSM_UTILITIES.fn_remove_html_tags(non_multirow_rec.instructions),1,3000)));    
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','initiated_by'),non_multirow_rec.dd_event_user_name);     
                         
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','reporting_period'),non_multirow_rec.reporting_period);   
                    
                    if non_multirow_rec.reporting_period IS NOT NULL THEN
                      
                        select period_name
                        into l_reporting_period_disp
                        from ms_qsm_reporting_period
                        where period_type = non_multirow_rec.reporting_period_type
                        AND PERIOD_ID = non_multirow_rec.reporting_period;
                        
                        lx_response_xml :=ms_qsm_utilities.insert_xml(lx_response_xml,'datapacket/data/nonmultirow/reporting_period',xmltype('<msa:reporting_period_display xmlns:msa="http://www.metricstream.com/appstudio/msa">'||l_reporting_period_disp||'</msa:reporting_period_display>'),'A');
                        

                    END IF; 
                    --raghu
                    ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','instructions'),non_multirow_rec.instructions);
                    ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','instructions_htm'),non_multirow_rec.instructions_htm);
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','questionnaire_id'),non_multirow_rec.questionnaire_id);
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','tmep_que_type'),non_multirow_rec.que_request_type);                    
--                    ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','resp_all_section_ids'),lc_all_section_ids);
--                    ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','resp_all_question_ids'),lc_all_questions_id);
--                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to_object'),lv_applies_to_object);
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','response_approver'),non_multirow_rec.response_approver);
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','due_date'),TO_CHAR(TRUNC(TO_DATE(non_multirow_rec.sch_start_date,'MM/DD/YYYY HH24:MI:SS') + non_multirow_rec.sch_due_after),'MM/DD/YYYY HH:MI:SS')) ;
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','que_request_name'),non_multirow_rec.que_request_name) ;
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','dd_object_type'),MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM'));  
    --                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','dd_current_user_name'),)  
--                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','dd_event_user_name'),non_multirow_rec.dd_event_user_name);
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','dd_enterprise_info'),non_multirow_rec.dd_enterprise_info);
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','previous_stage'), 'RESPONSE');
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'dd_current_stage'),'RESPONSE');
--                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'submit_action'),'');
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'dd_process_code'),ms_qsm_utilities.get_flow_code('QSM Respond questionnaire workflow'));
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'instance_rec_num'),'1');
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'metric_id'),ln_response_metric_id);
    --                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'metric_run_date'),)
    --                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'metric_completed_date'),)
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'latest_flag'),'Y');
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'created_by') ,non_multirow_rec.created_by);         
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'creation_date'),TO_CHAR(SYSDATE,'MM/DD/YYYY HH:MM:SS'));
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','resp_status'),'4');       
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','process_flow_status'),'4') ; 
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','overall_approver'),non_multirow_rec.overall_approver) ; 
                   -- ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','context_field_4'),non_multirow_rec.overall_approver); -- assigning overall approver value to context_field_4 field - GAPPLE
                    
                    IF l_finding_param_val = 'Y' THEN
                        ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','finding_can_be_added_by'),non_multirow_rec.findings_can_add_by);
                    END IF;
                    
                    SELECT METRIC_ID 
                    INTO l_RTF_metric_id
                    FROM SI_METRICS_T 
                    WHERE METRIC_NAME = (SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='QSMRTF' AND IS_ACTIVE='Y');
                    
                    SELECT METRIC_ID 
                    INTO l_finding_metric_id
                    FROM SI_METRICS_T 
                    WHERE METRIC_NAME = (SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='QSMFND' AND IS_ACTIVE='Y');
                    
                     l_reference_metric_ids := '{"RTF_METRIC":"'||l_RTF_metric_id||'","FINDING_METRIC":"'||l_finding_metric_id||'","PROGRESSIVE_SUBMISSION":"'||l_progressive_submit||'","ENABLE_BACKEND_SCORING":"'||l_enable_backend_scoring||'"}';   
                    
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','reference_metric_id'),l_reference_metric_ids);
                                        
                    
                     select TO_CHAR(SUBSTR(MS_QSM_UTILITIES.fn_remove_html_tags(CERTIFICATION_TEXT),1,3000))
                     INTO l_certification_text
                     from ms_qsm_questionnaire
                     where INTERNAL_QUESTNR_ID = non_multirow_rec.questionnaire_id;
                     
      
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','certification_text'),l_certification_text) ;    
                       
                    ms_qsm_utilities.get_multirow_template (p_multirow => lx_child_xml_template, p_metric_id => ln_response_metric_id,p_region_name=>'sec', p_full_blown => 'N');
                                       
--                    DBMS_LOB.APPEND (lc_child_xml_clob,'msa:sec>');
                                                            
                    for sec_multirow_rec in (select *  from ms_qsm_section where section_id_pk in (select column_value from table(ms_apps_utilities.parse_string (lc_all_section_ids ,',')))
                    )
                    LOOP
                        ln_instance_rec_num:=ln_instance_rec_num+1;                                    
                        lx_child_xml := lx_child_xml_template;
                        
--                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','sec_grade'),);
--                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','weighted_score'),);
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','section_weightage'),sec_multirow_rec.SECTION_WEIGHTAGE);                            
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','optional_section'),NVL(sec_multirow_rec.SECTION_OPTIONAL,'no'));
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','section_name'),sec_multirow_rec.SECTION_NAME);                        
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','section_fk'),sec_multirow_rec.SECTION_QUESTNR_FK);      
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','section_id'),sec_multirow_rec.SECTION_ID_PK);      
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','instance_rec_num'),ln_instance_rec_num);   
                        
                         DBMS_LOB.APPEND (lc_child_xml_clob,lx_child_xml.getclobval());
                                                                                                   
                    END LOOP;   
                    

                  
                    ms_qsm_utilities.get_multirow_template (p_multirow => lx_child_xml_template, p_metric_id => ln_response_metric_id,p_region_name=>'qst', p_full_blown => 'N');
                                       
                    DBMS_LOB.APPEND (lc_child_xml_clob,'</msa:sec>');
                    
                    lx_response_xml := MS_QSM_UTILITIES.INSERT_XML(lx_response_xml,'datapacket/data/nonmultirow',XMLTYPE(lc_child_xml_clob),'A');
                    
                    lc_child_xml_clob:='<msa:qst xmlns:msa="http://www.metricstream.com/appstudio/msa">';
                    
--                    FOR qst_multirow_rec IN (SELECT *  FROM MS_QSM_QUESTION WHERE QST_ID_PK IN (SELECT COLUMN_VALUE FROM TABLE(ms_apps_utilities.parse_string (lc_all_questions_id ,','))))
                    FOR qst_multirow_rec IN (SELECT  QST_SECTION_ID,QST_NAME,QST_ID_PK,QST_TYPE,QST_PARENT_TYPE,QST_SECTION_FK,QST_ID,QST_WEIGHTAGE,QST_RESPONSE_TYPE,QST_TARGET,
                                                            --TO_CHAR(SUBSTR(QST_DESCRIPTION,1,3000)) QST_DESCRIPTION,QST_OPTIONAL,PARENT_RESPONSE_TYPE,QST_BASED_ON_RESPONSE,
                                                            TO_CHAR(SUBSTR(ms_qsm_utilities.fn_remove_html_tags(QST_DESCRIPTION),1,3000)) QST_DESCRIPTION,QST_OPTIONAL,PARENT_RESPONSE_TYPE,QST_BASED_ON_RESPONSE,
                                                            QST_BASED_ON_NUMBER,QST_DEFAULT_SCORE,QST_INFOLET_SCORING,QST_SPRDSHEET_TEMPLATE, QST_ACTION_PLAN,RESP_REQ_APPROVAL,RESP_REQ_ACTION,QST_MLOV_SCORING
                                                          FROM MS_QSM_QUESTION WHERE QST_SECTION_ID IN (SELECT COLUMN_VALUE FROM TABLE(ms_apps_utilities.parse_string (lc_all_section_ids ,',')))
                                                          start with decode(qst_parent_type,'SEC',NULL,QST_SECTION_FK) is null
                                                          CONNECT BY PRIOR QST_ID_PK = QST_SECTION_FK
                    LOOP
                        ln_instance_rec_num:=ln_instance_rec_num+1;    
                        lx_child_xml := lx_child_xml_template; 
                        l_qst_order := l_qst_order+1;
                        
                        l_check_resp :=NULL;
                        L_HAS_SUB_QST :=null;
                        l_check_resp_disp :=NULL;
                        
                        -- Commented by Munesh and added below part to implement SP1 fucntionality
                       /* IF qst_multirow_rec.QST_PARENT_TYPE = 'SEC' THEN   
                            
                            SELECT MS_CONCAT(QST_ID_PK)-- DECODE(COUNT(1),0,'no','yes') 
                            INTO l_has_sub_qst
                            FROM MS_QSM_QUESTION 
                            WHERE QST_SECTION_FK =  qst_multirow_rec.QST_ID_PK;
                            
                        ELSIF qst_multirow_rec.QST_PARENT_TYPE = 'QST' THEN 
                            
                            IF qst_multirow_rec.PARENT_RESPONSE_TYPE IN ('1','3') THEN
                                
                                l_check_resp := qst_multirow_rec.QST_BASED_ON_RESPONSE||'~'||qst_multirow_rec.QST_BASED_ON_NUMBER;
                                
                            ELSIF qst_multirow_rec.PARENT_RESPONSE_TYPE IN ('4','6','7') THEN
                                
                                l_check_resp := '5'||'~'||qst_multirow_rec.QST_BASED_ON_RESPONSE;
                                    
                            END IF;
                            
                        END IF;   */
                        
                        l_resp_sprd :=NULL;
                        l_resp_req_approval :=NULL;
                        l_resp_req_action :=NULL;
                        L_QST_JSON_VALUE :=NULL;
                        l_excel_response_val :=NULL;
                        
                        -- GET METRIC ID FOR RESPONSE SPREADSHEET FORM
                        SELECT METRIC_ID 
                        INTO l_resp_sprd_metric_id
                        FROM SI_METRICS_T 
                        WHERE METRIC_NAME = (SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='RESSPR' AND IS_ACTIVE='Y');
                        
                        
                        -- GET RESPONSE REQUIRED APPROVAL VALUE FOR A QUESTION
                        /*
                        BEGIN
                           IF qst_multirow_rec.qst_response_type IN ('4', '7','6')
                           THEN                                                -- respType 4-lov 7--dd
                              SELECT ms_concat (A.STORED_VALUE)
                                INTO l_resp_req_approval
                                FROM MS_QSM_QST_LOV_DATA a, (SELECT COLUMN_VALUE FROM TABLE(ms_apps_utilities.parse_string (qst_multirow_rec.RESP_REQ_APPROVAL ,l_delimeter))) b --MS_QSM_QUESTION_RAP b
                               WHERE     A.QUESTION_ID = qst_multirow_rec.qst_id_pk
--                                     AND A.QUESTION_ID = B.QST_ID_PK
                                     AND A.DISPLAY_VALUE = B.COLUMN_VALUE;
--                           ELSIF qst_multirow_rec.qst_response_type IN ('6')
--                           THEN                                               --respType 6--radio, Y/N
--                              SELECT ms_concat (RESP_REQ_APPROVAL)
--                                INTO l_resp_req_approval
--                                FROM MS_QSM_QUESTION_RAP
--                               WHERE QST_ID_PK = qst_multirow_rec.qst_id_pk;
                           END IF;
                        EXCEPTION
                           WHEN NO_DATA_FOUND
                           THEN
                              L_RESP_REQ_APPROVAL := NULL;
                        END; */
    --                        ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
    --                                    pn_error_sequence    => xn_error_seq,
    --                                    pc_error_type        => 'M',
    --                                    pc_error_text        => 'Ngt Value: Questnr id: '||non_multirow_rec.questionnaire_id
    --                                    ||' <> resp type : '||qst_multirow_rec.qst_response_type
    --                                    ||' <> qst id pk : '||qst_multirow_rec.qst_id_pk
    --                                    ||' <> Negtive resp : '||l_resp_req_approval);
    
                        -- GET RESPONSE REQUIRED ACTION VALUE FOR A QUESTION
                        --BEGIN
                           IF qst_multirow_rec.qst_response_type IN ('4', '7','6','10','11') -- added additional response type 10 and 11
                           THEN        
                           
                              
                              SELECT MS_CONCAT((SELECT DISTINCT A.STORED_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING(QST_MULTIROW_REC.RESP_REQ_ACTION,L_DELIMETER)) B 
                                    where b.column_value=a.display_value)),
                                    MS_CONCAT((SELECT DISTINCT A.STORED_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING(QST_MULTIROW_REC.RESP_REQ_APPROVAL,L_DELIMETER)) B 
                                    WHERE B.COLUMN_VALUE=A.DISPLAY_VALUE))
      --                        MS_CONCAT(DECODE(INSTR(L_DELIMETER||QST_MULTIROW_REC.RESP_REQ_ACTION||L_DELIMETER,L_DELIMETER||A.DISPLAY_VALUE||L_DELIMETER,1),0,'',A.STORED_VALUE)),
      --                        MS_CONCAT(DECODE(INSTR(L_DELIMETER||QST_MULTIROW_REC.RESP_REQ_APPROVAL||L_DELIMETER,L_DELIMETER||a.DISPLAY_VALUE||L_DELIMETER,1),0,'',a.STORED_VALUE))
                              --MS_CONCAT(A.DISPLAY_VALUE)                            
      --                         REPLACE( REPLACE(MS_CONCAT(REPLACE(A.DISPLAY_VALUE,',','$_$')),',',L_DELIMETER),'$_$',',')
                              INTO L_RESP_REQ_ACTION,l_resp_req_approval--,l_excel_response_val
                              FROM MS_QSM_QST_LOV_DATA A
                              WHERE A.QUESTION_ID = QST_MULTIROW_REC.QST_ID_PK;
                              
                              SELECT REPLACE( REPLACE(MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('A.QUESTION_ID = '''||QST_MULTIROW_REC.QST_ID_PK||'''','REPLACE(A.DISPLAY_VALUE,'','',''$_$'')','MS_QSM_QST_LOV_DATA A'),',',L_DELIMETER),'$_$',',')
                              INTO l_excel_response_val
                              FROM DUAL;

                              
                           END IF;
                           /*
                           -- respType 4-lov 7--dd
                              SELECT ms_concat (A.STORED_VALUE)
                                INTO l_resp_req_action
                                FROM MS_QSM_QST_LOV_DATA a,  (SELECT COLUMN_VALUE FROM TABLE(ms_apps_utilities.parse_string (qst_multirow_rec.RESP_REQ_ACTION,l_delimeter))) b-- MS_QSM_QUESTION_RAC b
                               WHERE     A.QUESTION_ID = qst_multirow_rec.qst_id_pk
--                                     AND A.QUESTION_ID = B.QST_ID_PK
                                     AND A.DISPLAY_VALUE = B.COLUMN_VALUE;*/
--                           ELSIF qst_multirow_rec.qst_response_type IN ('6')
--                           THEN                                               --respType 6--radio, Y/N
--                              SELECT ms_concat (RESP_REQ_ACTION)
--                                INTO l_resp_req_action
--                                FROM MS_QSM_QUESTION_RAC
--                               WHERE QST_ID_PK = qst_multirow_rec.qst_id_pk;
                           
                   /*     EXCEPTION
                           WHEN NO_DATA_FOUND
                           THEN
                              l_resp_req_action := NULL;
                        END;*/
                        
                        
                        --Get Spreadsheet Teamplate dispaly label
                        BEGIN
                           IF qst_multirow_rec.qst_response_type IN ('9')
                           THEN
                              SELECT SPRD_SHEET_LINK
                                INTO l_resp_sprd
                                FROM MS_QSM_SPREADSHEET
                               WHERE SPRD_SHEET_INTERNAL_ID = qst_multirow_rec.qst_sprdsheet_template;
                           END IF;
                           
                           ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','resp_sprd'),l_resp_sprd);
                           
                        EXCEPTION
                           WHEN NO_DATA_FOUND
                           THEN
                              l_resp_sprd := NULL;
                        END;
                        

                        
 /*                       select REPLACE(REPLACE(MS_CONCAT(REPLACE(display_value,',','#_#')),',','|'),'#_#',',') list_of_values
                        into lv_list_of_values
                        from MS_QSM_QST_LOV_DATA 
                        where question_id=qst_multirow_rec.qst_id_pk
                        ORDER BY TO_NUMBER(SUBSTR(STORED_VALUE,4)); */
                        
--                        lv_list_of_values:= MS_QSM_UTILITIES.GET_CONCAT_LIST_OF_VALUES(qst_multirow_rec.qst_id_pk,NULL);
                                                    
                        --set the value in JSON format
                        /*l_qst_json_value := '{';
                        l_qst_json_value := l_qst_json_value || '"RESP_SPRD_METRIC_ID"' || ':' || '"' || l_resp_sprd_metric_id || '"';
                        l_qst_json_value := l_qst_json_value || ',' ||'"SPREADSHEET_ID"' || ':' || '"' || qst_multirow_rec.qst_sprdsheet_template || '"';
                        L_QST_JSON_VALUE := L_QST_JSON_VALUE || ',' ||'"DELIMETER"' || ':' || '"' || L_DELIMETER || '"';  
                        L_QST_JSON_VALUE := L_QST_JSON_VALUE || ',' ||'"SPRD_LINK"' || ':' || '"' || l_resp_sprd || '"';
                        l_qst_json_value := l_qst_json_value || '}';*/
                        
                        L_QST_JSON_VALUE := '{';
                        l_qst_json_value := l_qst_json_value || '"RESP_SPRD_METRIC_ID"' || ':' || '"' || l_resp_sprd_metric_id || '"';
                        l_qst_json_value := l_qst_json_value || ',' ||'"SPREADSHEET_ID"' || ':' || '"' || qst_multirow_rec.qst_sprdsheet_template || '"';
                        L_QST_JSON_VALUE := L_QST_JSON_VALUE || ',' ||'"DELIMETER"' || ':' || '"' || L_DELIMETER || '"';  
                        L_QST_JSON_VALUE := L_QST_JSON_VALUE || ',' ||'"SPRD_LINK"' || ':' || '"' || l_resp_sprd || '"';
                        l_qst_json_value := l_qst_json_value || '}';

                        
                        IF qst_multirow_rec.QST_PARENT_TYPE = 'SEC' THEN

                            --raghu
                            /*SELECT MS_CONCAT(QST_ID_PK)-- DECODE(COUNT(1),0,'no','yes') 
                            INTO l_has_sub_qst
                            FROM MS_QSM_QUESTION 
                            WHERE QST_SECTION_FK =  qst_multirow_rec.QST_ID_PK;*/
                                
							SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('QST_SECTION_FK = '''|| qst_multirow_rec.QST_ID_PK||'''','QST_ID_PK','MS_QSM_QUESTION')
                                INTO l_has_sub_qst
                                FROM DUAl;	
								
                        ELSIF qst_multirow_rec.QST_PARENT_TYPE = 'QST' THEN 

                            BEGIN
                                                                    
                                SELECT A.STORED_VALUE 
                                INTO l_stored_val 
                                FROM MS_QSM_QST_LOV_DATA a
                                WHERE 
--                                A.QUESTIONNAIRE_ID = non_multirow_rec.questionnaire_id AND
                                A.QUESTION_ID = qst_multirow_rec.QST_SECTION_FK  -- It should be PK for parent question
                                AND A.DISPLAY_VALUE = qst_multirow_rec.QST_BASED_ON_RESPONSE
                                AND ROWNUM <=1;
                                    
                            EXCEPTION
                                WHEN OTHERS THEN
                                      l_stored_val:=NULL;                                    
                            END;  
                                
                            IF qst_multirow_rec.PARENT_RESPONSE_TYPE IN ('1','3') THEN  --respType 1--Amount, 3--number
                                    
                                L_CHECK_RESP := QST_MULTIROW_REC.QST_BASED_ON_RESPONSE||'~'||QST_MULTIROW_REC.QST_BASED_ON_NUMBER;
                                l_check_resp_disp :=qst_multirow_rec.QST_BASED_ON_RESPONSE||'~'||qst_multirow_rec.QST_BASED_ON_NUMBER;
                                    
                            ELSIF qst_multirow_rec.PARENT_RESPONSE_TYPE IN ('4','7','6','10','11') THEN   -- respType 4-lov 7--dd added additional response type: 10, 11
                                    
                                L_CHECK_RESP := '5'||'~'||L_STORED_VAL;
                                  l_check_resp_disp := '5'||'~'||qst_multirow_rec.QST_BASED_ON_RESPONSE;
                                    
--                            ELSIF  qst_multirow_rec.PARENT_RESPONSE_TYPE IN ('6') THEN     --respType 6--radio, Y/N
--                                                  
--                                 l_check_resp := '5'||'~'||qst_multirow_rec.QST_BASED_ON_RESPONSE;         
                                    
                            END IF;
                            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                    pn_error_sequence    => xn_error_seq,
                                    pc_error_type        => 'M',
                                    pc_error_text        => 'Ngt Value: Questnr id: '||non_multirow_rec.questionnaire_id
                                    ||' <> qst id pk : '||qst_multirow_rec.qst_id_pk
                                    ||' <> qst based on resp : '||qst_multirow_rec.QST_BASED_ON_RESPONSE
                                    ||' <> check resp : '||l_check_resp);
                                
                        END IF; 
                            
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_name'),qst_multirow_rec.QST_NAME);   
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_type'),qst_multirow_rec.QST_TYPE);   
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','qst_parent_type'),qst_multirow_rec.QST_PARENT_TYPE);   
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_sec_id'),qst_multirow_rec.QST_SECTION_ID);   
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_fk'),qst_multirow_rec.QST_SECTION_FK);   
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_id'),qst_multirow_rec.QST_ID);   
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_pk'),qst_multirow_rec.QST_ID_PK);   
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','qst_weightage'),qst_multirow_rec.QST_WEIGHTAGE);   
                        MS_QSM_UTILITIES.UPDATE_XML(LX_CHILD_XML,REPLACE(LV_CHILD_PATH,'$','response_type'),QST_MULTIROW_REC.QST_RESPONSE_TYPE);     
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','resp_target'),qst_multirow_rec.QST_TARGET);        
                        MS_QSM_UTILITIES.UPDATE_XML(LX_CHILD_XML,REPLACE(LV_CHILD_PATH,'$','qst_optional'),NVL(QST_MULTIROW_REC.QST_OPTIONAL,'no'));   
						MS_QSM_UTILITIES.UPDATE_XML(LX_CHILD_XML,REPLACE(LV_CHILD_PATH,'$','cond_app_req_flag'),'2');   
                        
                        lx_child_xml :=ms_qsm_utilities.insert_xml(lx_child_xml,'row/qst_optional',xmltype('<msa:excel_resp_values xmlns:msa="http://www.metricstream.com/appstudio/msa">'||htf.escape_sc(l_excel_response_val)||'</msa:excel_resp_values>'),'A');
                       
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','qst_mlov_scoring'),NVL(qst_multirow_rec.QST_MLOV_SCORING,'1'));   
                       
                         
                         MS_QSM_UTILITIES.UPDATE_XML(LX_CHILD_XML,replace(LV_CHILD_PATH,'$','qst_infolet_scoring'),QST_MULTIROW_REC.QST_INFOLET_SCORING);
                         
                        --added by nagesh
                         LX_CHILD_XML :=MS_QSM_UTILITIES.INSERT_XML(LX_CHILD_XML,'row/check_response',xmltype('<msa:check_response_disp xmlns:msa="http://www.metricstream.com/appstudio/msa">'||HTF.ESCAPE_SC(L_CHECK_RESP_DISP)||'</msa:check_response_disp>'),'A');
                       --end by nagesh
                                                                                                                                                                                                                                                                    
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','check_response'),l_check_resp); 
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','has_sub_questions'),l_has_sub_qst); 

                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_description'), SUBSTR(qst_multirow_rec.QST_DESCRIPTION,1,300)); 
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','instance_rec_num'),ln_instance_rec_num); 
                        
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','resp_score'),qst_multirow_rec.QST_DEFAULT_SCORE); 
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','default_score'),qst_multirow_rec.QST_DEFAULT_SCORE); 
                        -- ADDED by munesh for SP1 changes
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','resp_req_approval'),l_resp_req_approval); 
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','resp_req_action'),l_resp_req_action); 
                        MS_QSM_UTILITIES.UPDATE_XML(LX_CHILD_XML,REPLACE(LV_CHILD_PATH,'$','qst_json_value'),L_QST_JSON_VALUE); 
                        MS_QSM_UTILITIES.UPDATE_XML(LX_CHILD_XML,replace(LV_CHILD_PATH,'$','qst_triger_scr_infolet'),TO_CHAR(l_qst_order)); 
                        
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','resp_action_plan'),qst_multirow_rec.qst_action_plan);  
--                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','list_of_values_hidden'),lv_list_of_values); 
                                                                       
                        
                         DBMS_LOB.APPEND (lc_child_xml_clob,lx_child_xml.getclobval());
                        
                    END LOOP;   
                    
                    ms_qsm_utilities.get_multirow_template (p_multirow => lx_child_xml_template, p_metric_id => ln_response_metric_id,p_region_name=>'grd', p_full_blown => 'N');
                    
                    DBMS_LOB.APPEND (lc_child_xml_clob,'</msa:qst>');
                                                          
                    lx_response_xml := MS_QSM_UTILITIES.INSERT_XML(lx_response_xml,'datapacket/data/nonmultirow',XMLTYPE(lc_child_xml_clob),'A');
                    
                    lc_child_xml_clob:='<msa:grd xmlns:msa="http://www.metricstream.com/appstudio/msa">';
                    
                    FOR grd_multirow_rec IN (SELECT *  FROM MS_QSM_GRADE WHERE GRD_QUESTNR_FK = non_multirow_rec.questionnaire_id )
                    LOOP
                        ln_instance_rec_num:=ln_instance_rec_num+1;    
                        lx_child_xml := lx_child_xml_template; 
                        
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','grd_questnr_fk'),grd_multirow_rec.GRD_QUESTNR_FK);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','grd_value_2'),grd_multirow_rec.GRD_VALUE_2);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','grd_value_1'),grd_multirow_rec.GRD_VALUE_1);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','grd_grade'),grd_multirow_rec.GRD_GRADE);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','grd_scoring_pk'),grd_multirow_rec.GRD_SCORING_PK);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','grd_scoring_rule'),grd_multirow_rec.GRD_SCORING_RULE);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','instance_rec_num'),ln_instance_rec_num);  
                        
                         DBMS_LOB.APPEND (lc_child_xml_clob,lx_child_xml.getclobval()); 
                                                                   
                    END LOOP;   
                    
                    ms_qsm_utilities.get_multirow_template (p_multirow => lx_child_xml_template, p_metric_id => ln_response_metric_id,p_region_name=>'scr', p_full_blown => 'N');
                    
                    DBMS_LOB.APPEND (lc_child_xml_clob,'</msa:grd>');
                    
                    lx_response_xml := MS_QSM_UTILITIES.INSERT_XML(lx_response_xml,'datapacket/data/nonmultirow',XMLTYPE(lc_child_xml_clob),'A');
                    
                    lc_child_xml_clob:='<msa:scr xmlns:msa="http://www.metricstream.com/appstudio/msa">';
                    
                    FOR scr_multirow_rec IN (SELECT *  FROM MS_QSM_SCORING WHERE SCR_QST_FK IN (SELECT QST_ID_PK  FROM MS_QSM_QUESTION WHERE QST_SECTION_ID IN  (SELECT COLUMN_VALUE FROM TABLE(ms_apps_utilities.parse_string (lc_all_section_ids ,','))) ))
                    LOOP
                        ln_instance_rec_num:=ln_instance_rec_num+1;    
                        lx_child_xml := lx_child_xml_template; 
                        
                        
                         BEGIN
                                                                    
                            SELECT A.STORED_VALUE 
                            INTO l_stored_val 
                            FROM MS_QSM_QST_LOV_DATA a
                            WHERE 
                        --                                A.QUESTIONNAIRE_ID = non_multirow_rec.questionnaire_id AND
                            A.QUESTION_ID = scr_multirow_rec.SCR_QST_FK  -- It should be PK for parent question
                            AND A.DISPLAY_VALUE = scr_multirow_rec.SCR_VALUE_1_1
                            AND ROWNUM <=1;
                                                            
                        EXCEPTION
                            WHEN OTHERS THEN
                                  l_stored_val:=NULL;                                    
                        END; 
                                                    
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_qst_fk'),scr_multirow_rec.SCR_QST_FK);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_id_pk'),scr_multirow_rec.SCR_ID_PK);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_score'),scr_multirow_rec.SCR_SCORE);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_grade'),scr_multirow_rec.SCR_GRADE);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_value_1_1'),l_stored_val);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_value_2'),scr_multirow_rec.SCR_VALUE_2);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_value_1'),scr_multirow_rec.SCR_VALUE_1);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_scoring_rule'),scr_multirow_rec.SCR_SCORING_RULE);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','instance_rec_num'),ln_instance_rec_num);                  
                                
                         DBMS_LOB.APPEND (lc_child_xml_clob,lx_child_xml.getclobval()); 
                                                 
                    END LOOP;   
                                       
                    DBMS_LOB.APPEND (lc_child_xml_clob,'</msa:scr>');    
                    
                    lx_response_xml := MS_QSM_UTILITIES.INSERT_XML(lx_response_xml,'datapacket/data/nonmultirow',XMLTYPE(lc_child_xml_clob),'A');
                                        
                    ms_qsm_log_activity ('', 'RESPONSE XML_1~',lc_child_xml_clob);
                    
--                    SELECT MS_QSM_UTILITIES.INSERT_XML(lx_response_xml,'datapacket/data',XMLTYPE(lc_child_xml_clob),'A')
--                    INTO lx_response_xml
--                    FROM DUAL;
                    
                    
--                    lx_response_xml := MS_QSM_UTILITIES.INSERT_XML(lx_response_xml,'datapacket/data/nonmultirow',XMLTYPE(lc_child_xml_clob),'A');
                    
                    ms_qsm_log_activity ('', 'RESPONSE XML_1.1~',lx_response_xml.getclobval());
                    
                    lc_child_xml_clob:=lx_response_xml.getclobval();
                    
                    ms_qsm_log_activity ('', 'RESPONSE XML_1.1.1~',lc_child_xml_clob);
                    
--                    MS_QSM_UTILITIES.LOB_REPLACE(lc_child_xml_clob,'</dummy>',' ');
--                    MS_QSM_UTILITIES.LOB_REPLACE(lc_child_xml_clob,'<dummy>',' ');
                    
                    ms_qsm_log_activity ('', 'RESPONSE XML_1.2~',lc_child_xml_clob);
                    
                    lx_response_xml :=XMLTYPE(lc_child_xml_clob);

                    
                    ms_qsm_log_activity ('', 'RESPONSE XML_2~',lx_response_xml.getclobval());            

                    ms_qsm_utilities.process_multirow(lx_response_xml,'sec,grd,qst,scr','section_id,grd_scoring_pk,question_pk,scr_id_pk');
                    
--                    SELECT ENTERPRISE_ID
--                    INTO ln_enterprise_id
--                    FROM SI_ENT     
--                    WHERE ENTERPRISE_NAME = non_multirow_rec.dd_enterprise_info;
                    
                    IF l_published_count >0 THEN
                        
                        SELECT B.SCH_DUE_AFTER
                        INTO l_old_due_after
                        FROM MS_QSM_INIT_QUESTNR a,MS_QSM_QUESTNR_SCH b
                        WHERE a.QUE_REQUEST_ID =  l_que_request_id
                        AND A.QUE_REQUEST_ID = B.SCH_REQ_ID;  
                        
                        l_new_due_after := TO_NUMBER(non_multirow_rec.sch_due_after);
                        
                       
                        IF l_old_due_after <> l_new_due_after THEN
                                               
                            FOR triggered_rec IN (SELECT * FROM MS_QSM_SCHEDULER_DETAILS
                            WHERE SCH_REQ_ID = l_que_request_id) LOOP

                                MS_QSM_UTILITIES.UPDATE_METRIC_TABLE(ip_metric_id =>l_response_metric_id,
                                                                  ip_metric_columns=>'DUE_DATE',
                                                                  ip_modified_value =>TO_CHAR(TRUNC(TO_DATE(non_multirow_rec.sch_start_date,'MM/DD/YYYY HH24:MI:SS')+l_new_due_after),'MM/DD/YYYY'),
                                                                  ip_column_type =>'D',
                                                                  ip_pid =>triggered_rec.PROCESS_INSTANCE_ID,
                                                                  xn_error_handle_id =>xn_error_handle_id ,
                                                                  xn_error_seq =>xn_error_seq,
                                                                  xn_error_code => xn_error_code, 
                                                                  xn_error_message =>l_error_message);
                                                                  
                                IF xn_error_code = 1 THEN   
                                    
                                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                    pn_error_sequence    => xn_error_seq,
                                    pc_error_type        => 'E',
                                    pc_error_text        => 'Fatal Error in the ms_QSM_INIQSM_INIQSM_PROD ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM); 
                                    
                                END IF;                                                                  
                                
                            END LOOP;
                        
                        END IF;
                    END IF;
                    IF TRIM(non_multirow_rec.survey_scope_selection) = '1' OR (TRIM(non_multirow_rec.survey_scope_selection)='2' AND non_multirow_rec.que_applies_to ='1')   THEN -- Select from a Filtered List (Better for Large Surveys) OR 
                --                                                                                                        If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys)  AND  Applies TO objects is Adhoc
                                                 
                         LV_PARAM_FLAG := '{"SCORING":"'||NON_MULTIROW_REC.DISPLAY_SCORING||'","COLLABORATION":"'||NON_MULTIROW_REC.COLLABORATIVE_RESPONSE||'","REQUIRE_ALL_USER_APPROVAL":"'||non_multirow_rec.ALL_USER_APPROVAL||'"}';
                         
                         ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','temp_config_flag'),lv_param_flag);   -- Contains the Scoring Flag Yes or No , Collaboration flag         
                         ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','app_based_on_resp'),non_multirow_rec.approval_based_on_response);        
                         --aman
                        --insert into testtable values('11111:non_multirow_rec.approval_based_on_response = ',non_multirow_rec.approval_based_on_response);
					 
					 
						 
                        lc_send_user_role := non_multirow_rec.send_user_role;                  
                                                          
                        IF non_multirow_rec.que_applies_to = '10' THEN -- Organizations

                            --raghu
                           /* select ms_concat(a.org_entity_id)
                            into lc_org
                            from si_org_entities a,si_org_hierarchy_levels b
                            where A.ORG_HIERARCHY_ID = B.ORG_HIERARCHY_ID
                            and INSTR(','||to_char(trim( non_multirow_rec.fltr_org_level))||',',','||TO_CHAR(B.ORG_HIERARCHY_ID)||',')>0; */
                            
                            SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('A.ORG_HIERARCHY_ID = B.ORG_HIERARCHY_ID and INSTR('',''||to_char(trim( '''||non_multirow_rec.fltr_org_level||'''))||'','','',''||TO_CHAR(B.ORG_HIERARCHY_ID)||'','')>0','a.org_entity_id','si_org_entities a,si_org_hierarchy_levels b')
                            INTO lc_org
                            FROM DUAl;	
							
                            /*SELECT MS_CONCAT(ORG_HIERARCHY_NAME)
                            INTO lv_org_desc 
                            FROM  si_org_hierarchy_levels b
                            WHERE  INSTR(','||to_char(trim( non_multirow_rec.fltr_org_level))||',',','||TO_CHAR(B.ORG_HIERARCHY_ID)||',')>0;  */
							
                            SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('INSTR('',''||to_char(trim( '''||non_multirow_rec.fltr_org_level||'''))||'','','',''||TO_CHAR(B.ORG_HIERARCHY_ID)||'','')>0','ORG_HIERARCHY_NAME','si_org_hierarchy_levels b')
                            INTO lv_org_desc
                            FROM DUAl;
                                                        
                        ELSIF non_multirow_rec.que_applies_to = '1' THEN -- Adhoc

                            --raghu
                            /*SELECT MS_CONCAT(ORG_ENTITY_ID)
                            INTO lc_org
                            FROM SI_ORG_ENTITIES;*/
							
                            SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('1=1','ORG_ENTITY_ID','SI_ORG_ENTITIES')
                                          INTO lc_org
                                          FROM DUAl;
                            
                            lv_org_desc := NULL;
                                                                                                       
                        ELSE   -- Other than Organizations
                            
                                                        
                            if NVL(non_multirow_rec.FIILTER_LEVEL,'1') = '1' THEN
                                                                               
                              lc_org := non_multirow_rec.fltr_owner_org;

                              --raghu
                              /*select ms_concat(ORG_ENTITY_NAME)
                              INTO LV_ORG_DESC
                              from si_org_entities
                              WHERE TO_CHAR(ORG_ENTITY_ID) IN  (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (LC_ORG ,',')));*/
							  
                            SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES(' TO_CHAR(ORG_ENTITY_ID) IN  (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string ('''||lc_org||''' ,'','')))','ORG_ENTITY_NAME','si_org_entities')
                            INTO lv_org_desc
                            FROM DUAl;
                              
                            END IF;               
                                                                                        
                        END IF;   
                        
                        
                        
                        MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object'),LV_ORG_DESC);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown       
                        ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to_object_code'),lc_org);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown                                                               
                        
--                        ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'collaborative_parameter'),non_multirow_rec.que_applies_to||'~'||lc_org); 
                        
                        MS_QSM_UTILITIES.insert_schedule_logs(i_request_id => l_que_request_id
                                                            ,i_respondents =>lc_send_user_role
                                                            ,i_log_level => 'H'
                                                            ,i_send_to => non_multirow_rec.que_send_to
                                                            ,i_process_instance_id =>non_multirow_rec.process_instance_id
                                                            ,i_questionnaire_id =>non_multirow_rec.questionnaire_id
                                                            ,i_sch_frequency=>non_multirow_rec.sch_frequency
                                                            ,o_error_code=>l_error_code
                                                            ,o_error_message=>l_error_message);
                        
                        
                        IF NVL(TRIM(non_multirow_rec.send_option),'2')='2' THEN -- Send Seperate Copy
                                        
                            IF non_multirow_rec.que_send_to = '4' THEN -- que_send_to => 1 - All Control Owners , 2- All Process Owners , 3- Roles , 4 - Users
                                
                                FOR user_rec IN (SELECT COLUMN_VALUE
                                                             FROM 
                                                             TABLE(MS_APPS_UTILITIES.SPLIT_STRING(lc_send_user_role,',')))
                                LOOP
                                    
                                  IF NVL(NON_MULTIROW_REC.FIILTER_LEVEL,'1')='2' THEN
                                  
                                    L_OBJECT_NAME:= SUBSTR(user_rec.COLUMN_VALUE,INSTR(user_rec.COLUMN_VALUE,' [',1)+2,((INSTR(user_rec.COLUMN_VALUE,']',1))-(INSTR(user_rec.COLUMN_VALUE,' [',1)+2)));
                                    
                                    L_OBJECT_ID:= ms_qsm_utilities.get_applies_to_object_code(i_object_id=>non_multirow_rec.QUE_APPLIES_TO,i_object_desc=>L_OBJECT_NAME);
                                                                      
                                    lc_respondents := SUBSTR(user_rec.COLUMN_VALUE,1,(INSTR(user_rec.COLUMN_VALUE,' [',1)-1));
                                    
                                    INSERT INTO MS_QSM_OBJECT_USER_MAPPING
                                    (QUE_REQUEST_ID,QUE_APPLIES_TO,OBJECT_ID,OBJECT_NAME,USER_TYPE,USER_NAME)
                                    VALUES(NON_MULTIROW_REC.QUE_REQUEST_ID,NON_MULTIROW_REC.QUE_APPLIES_TO,L_OBJECT_ID,L_OBJECT_NAME,'R',LC_RESPONDENTS);
                                    
                                    
                                    IF NON_MULTIROW_REC.RESPONSE_APPROVER IS NOT NULL THEN
                                       
                                       L_RESPONSE_APPROVER := '';
                                       
                                       IF NON_MULTIROW_REC.SEND_TO_APPROVAL = '4' THEN
                                       
                                        /*   FOR approver_rec IN (SELECT COLUMN_VALUE
                                                                 FROM 
                                                                 TABLE(MS_APPS_UTILITIES.SPLIT_STRING(NON_MULTIROW_REC.RESPONSE_APPROVER ,',')))LOOP
                                                                 
                                              IF INSTR(approver_rec.COLUMN_VALUE,'['||L_OBJECT_NAME||']',1)>0 THEN
                                              
                                                  
                                                 SELECT NVL2(L_RESPONSE_APPROVER,L_RESPONSE_APPROVER||',','')||SUBSTR(APPROVER_REC.COLUMN_VALUE,1,(INSTR(USER_REC.COLUMN_VALUE,' [',1)-1))
                                                 INTO L_RESPONSE_APPROVER
                                                 FROM DUAL;
                                                
                                              END IF;                   
                                           END LOOP;  */
                                           
                                           L_RESPONSE_APPROVER := NON_MULTIROW_REC.RESPONSE_APPROVER;
                                       
                                       ELSIF NON_MULTIROW_REC.SEND_TO_APPROVAL = '3' THEN

										--raghu
                                          /*SELECT MS_CONCAT(USER_NAME)
                                          INTO L_RESPONSE_APPROVER
                                          FROM
                                              (select distinct user_name                                          
                                              from ms_qsm_org_flow_v fdo
                                              where 
                                              --USER_NAME IN (SELECT USER_NAME FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(NON_MULTIROW_REC.QUE_APPLIES_TO||'~'||L_OBJECT_ID)))
                                              --AND 
                                              --raghu
                                              ORG_ENTITY_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR(NON_MULTIROW_REC.approver_organization) ,',')))
                                              AND ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (NON_MULTIROW_REC.RESPONSE_APPROVER ,',')))
                                              AND ACTIVITY_NAME='QSM - Approve Response') A;*/

										  
										  SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES(' 1=1','USER_NAME','(select distinct user_name                                          
																										  from ms_qsm_org_flow_v fdo where 
																										  ORG_ENTITY_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR('''||NON_MULTIROW_REC.approver_organization||''') ,'','')))
																										  AND ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||NON_MULTIROW_REC.RESPONSE_APPROVER||''' ,'','')))
																										  AND ACTIVITY_NAME=''QSM - Approve Response'') A')
										  INTO L_RESPONSE_APPROVER
										  FROM DUAl;

										
                                       END IF;
                                       
                                      INSERT INTO MS_QSM_OBJECT_USER_MAPPING
                                      (QUE_REQUEST_ID,QUE_APPLIES_TO,OBJECT_ID,OBJECT_NAME,USER_TYPE,USER_NAME)
                                      VALUES(NON_MULTIROW_REC.QUE_REQUEST_ID,NON_MULTIROW_REC.QUE_APPLIES_TO,L_OBJECT_ID,L_OBJECT_NAME,'A',L_RESPONSE_APPROVER);
                                      
                                    END IF;
                                    
                                   
                                    MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object'),L_OBJECT_NAME);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown       
                                    MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object_code'),L_OBJECT_ID);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown                                                               
                                    MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','response_approver'),L_RESPONSE_APPROVER);
                                    
                                  ELSE
                                      
                                      LC_RESPONDENTS   := USER_REC.COLUMN_VALUE;
                                      
                                      L_RESPONSE_APPROVER := '';
                                      
                                      IF NON_MULTIROW_REC.RESPONSE_APPROVER IS NOT NULL THEN
                                          
                                          IF NON_MULTIROW_REC.SEND_TO_APPROVAL = '4' THEN
                                          
                                              L_RESPONSE_APPROVER := NON_MULTIROW_REC.RESPONSE_APPROVER; 
                                              
                                          ELSIF  NON_MULTIROW_REC.SEND_TO_APPROVAL = '3' THEN

                                              --raghu
                                              /*SELECT MS_CONCAT(USER_NAME) 
                                              INTO L_RESPONSE_APPROVER
                                              FROM (
                                                    select distinct user_name
                                                    from ms_qsm_org_flow_v fdo
                                                    where 
                                                    --raghu
                                                    ORG_ENTITY_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR(NON_MULTIROW_REC.approver_organization) ,',')))

                                                    AND ROLE_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR(NON_MULTIROW_REC.RESPONSE_APPROVER) ,',')))
                                                    AND ACTIVITY_NAME='QSM - Approve Response') A;*/
                                              
											  SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES(' 1=1','USER_NAME','(select distinct user_name                                          
																										  from ms_qsm_org_flow_v fdo where 
																										  ORG_ENTITY_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR('''||NON_MULTIROW_REC.approver_organization||''') ,'','')))
																										  AND ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||NON_MULTIROW_REC.RESPONSE_APPROVER||''' ,'','')))
																										  AND ACTIVITY_NAME=''QSM - Approve Response'') A')
											  INTO L_RESPONSE_APPROVER
											  FROM DUAl;
											  
											  
                                         END IF;




                                        
										  MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object'),L_OBJECT_NAME);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown       
                                          MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object_code'),L_OBJECT_ID);



                                          MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','response_approver'),L_RESPONSE_APPROVER);
                                         
                                      END IF;         
                                                                           
                                  end if;
                                    
                                --    lc_respondents   := user_rec.COLUMN_VALUE;
                                    
                                    l_triggered_flag := False;
                                        
                                    IF l_published_count >0 THEN
                                        
                                        check_response_triggerd (ip_respondent => lc_respondents,
                                                             ip_que_request_id => l_que_request_id,
                                                             ip_indv_item_pk  =>NULL,
                                                             op_triggered_flag => l_triggered_flag);
                                    END IF;
                                                             
                                    IF NOT l_triggered_flag THEN                                                                
                                    
                                        ms_qsm_is_user_subscribed(p_recepient => lc_respondents,
                                                                                 p_type =>non_multirow_rec.send_option);
                                        
                                        IF LENGTH(TRIM(lc_respondents))>0 THEN
                                        
                                            BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = non_multirow_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                            
                                            
                                                                             
                                            MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                             ip_response_xml => lx_response_xml  ,
                                                                             ip_que_request_id => l_que_request_id,
                                                                             ip_excel_based=>non_multirow_rec.excel_based,
                                                                             xn_error_handle_id =>xn_error_handle_id ,
                                                                             xn_error_seq =>xn_error_seq ,
                                                                             xn_error_code =>xn_error_code  ,
                                                                             xn_error_message =>l_error_message );        

                                        END IF; 
                                    END IF;    
                                END LOOP;         
                                
                            ELSIF non_multirow_rec.que_send_to = '3' THEN
                                
                              IF NVL(NON_MULTIROW_REC.FIILTER_LEVEL,'1')='1' THEN    
                              
                                FOR USER_REC IN (SELECT DISTINCT USER_NAME,ORG_ENTITY_ID
                                                                FROM MS_QSM_ORG_FLOW_V FDO
                                                                WHERE  ORG_ENTITY_ID IN (SELECT COLUMN_VALUE 
                                                                                        FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (LC_ORG ,',')))
                                                                AND role_id IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (lc_send_user_role ,',')))
                                                                AND ACTIVITY_NAME='QSM - Respond to Surveys')
                               
                                LOOP
                                    
                                    IF NON_MULTIROW_REC.RESPONSE_APPROVER IS NOT NULL THEN
                                       
                                      L_RESPONSE_APPROVER := '';
                                        
                                        IF NON_MULTIROW_REC.SEND_TO_APPROVAL = '4' THEN
                                          
                                              L_RESPONSE_APPROVER := NON_MULTIROW_REC.RESPONSE_APPROVER; 
                                              
                                        ELSIF  NON_MULTIROW_REC.SEND_TO_APPROVAL = '3' THEN
                                              --raghu
											  /*SELECT MS_CONCAT(USER_NAME)
                                              INTO L_RESPONSE_APPROVER
                                              FROM 
                                                (SELECT DISTINCT USER_NAME
                                                FROM MS_QSM_ORG_FLOW_V FDO
                                                WHERE 
                                                --ORG_ENTITY_ID = USER_REC.ORG_ENTITY_ID 
                                                --AND 
                                                --raghu
                                                ORG_ENTITY_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR(NON_MULTIROW_REC.approver_organization) ,',')))
                                                AND ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (NON_MULTIROW_REC.RESPONSE_APPROVER ,',')))
                                                AND ACTIVITY_NAME='QSM - Approve Response')A;*/
												
											SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES(' 1=1','USER_NAME','(select distinct user_name                                          
																									  from ms_qsm_org_flow_v fdo where 
																									  ORG_ENTITY_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR('''||NON_MULTIROW_REC.approver_organization||''') ,'','')))
																									  AND ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||NON_MULTIROW_REC.RESPONSE_APPROVER||''' ,'','')))
																									  AND ACTIVITY_NAME=''QSM - Approve Response'') A')
											INTO L_RESPONSE_APPROVER
											FROM DUAl;
                                         
                                        END IF;                                           
                                    
                                    END IF;
                                    
                                    
                                    
                                    lc_respondents   := user_rec.USER_NAME;

                                    l_triggered_flag := False;
                                        
                                    IF l_published_count >0 THEN
                                        
                                        check_response_triggerd (ip_respondent => lc_respondents,
                                                             ip_que_request_id => l_que_request_id,
                                                             ip_indv_item_pk  =>NULL,
                                                             op_triggered_flag => l_triggered_flag);
                                    END IF;
                                                             
                                    IF NOT l_triggered_flag THEN    
                                                                        
                                        ms_qsm_is_user_subscribed(p_recepient => lc_respondents,
                                                                                  p_type =>non_multirow_rec.send_option);
                                                                                  
                                        IF non_multirow_rec.que_applies_to = '10' THEN -- Organizations
   
                                          SELECT ORG_HIERARCHY_NAME,B.ORG_HIERARCHY_ID
                                          INTO L_object_name,l_object_id 
                                          FROM  SI_ORG_HIERARCHY_LEVELS B,SI_ORG_ENTITIES A
                                          WHERE A.ORG_HIERARCHY_ID = B.ORG_HIERARCHY_ID
                                          AND A.ORG_ENTITY_ID = USER_REC.ORG_ENTITY_ID;
                                       
                                       ELSIF non_multirow_rec.que_applies_to <> '1' THEN
                                          
                                          select ORG_ENTITY_NAME,ORG_ENTITY_ID
                                          INTO L_object_name,l_object_id
                                          FROM SI_ORG_ENTITIES
                                          WHERE TO_CHAR(ORG_ENTITY_ID) = USER_REC.ORG_ENTITY_ID;
                                       
                                       END IF;
                       
                                       
                                        MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object'),L_OBJECT_NAME);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown       
                                        MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object_code'),L_OBJECT_ID);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown                                                               
                                        MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','response_approver'),L_RESPONSE_APPROVER);
                                                                                                                      
                                                                                  
                                        IF LENGTH(TRIM(lc_respondents))>0 THEN
                                        
                                           BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = non_multirow_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                        
                                            
                                            MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                             ip_response_xml => lx_response_xml  ,
                                                                             ip_que_request_id => l_que_request_id,
                                                                             ip_excel_based=>non_multirow_rec.excel_based,
                                                                             xn_error_handle_id =>xn_error_handle_id ,
                                                                             xn_error_seq =>xn_error_seq ,
                                                                             xn_error_code =>xn_error_code  ,
                                                                             xn_error_message =>l_error_message );            
                                                                               
                                        END IF;
                                        
                                    END IF;
                                    
                                END LOOP;    
                              
                              ELSE 
                              
                                 FOR USER_REC IN (SELECT DISTINCT B.USER_NAME,B.OBJECT_ID
                                                                FROM (SELECT DISTINCT USER_NAME
                                                                      FROM MS_QSM_ORG_FLOW_V FDO
                                                                      WHERE ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (LC_SEND_USER_ROLE ,',')))
                                                                      AND ACTIVITY_NAME='QSM - Respond to Surveys') A, 
                                                                      (SELECT USER_NAME,OBJECT_ID
                                                                      FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(NON_MULTIROW_REC.QUE_APPLIES_TO||'~'||NON_MULTIROW_REC.APPLIES_TO_ITEMS))) B
                                                                WHERE A.USER_NAME = B.USER_NAME)
                               
                                 LOOP
                              
                                      IF NON_MULTIROW_REC.RESPONSE_APPROVER IS NOT NULL THEN
                                       
                                          L_RESPONSE_APPROVER := '';
                                          
                                          IF NON_MULTIROW_REC.SEND_TO_APPROVAL = '4' THEN
                                            
                                                L_RESPONSE_APPROVER := NON_MULTIROW_REC.RESPONSE_APPROVER; 
                                                
                                          ELSIF  NON_MULTIROW_REC.SEND_TO_APPROVAL = '3' THEN

                                              --raghu
                                              /*SELECT MS_CONCAT(USER_NAME)
                                              INTO L_RESPONSE_APPROVER
                                              FROM
                                                (SELECT DISTINCT USER_NAME
                                                FROM MS_QSM_ORG_FLOW_V FDO
                                                WHERE 
                                                --USER_NAME IN (SELECT USER_NAME FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(NON_MULTIROW_REC.QUE_APPLIES_TO||'~'||USER_REC.OBJECT_ID)))
                                                --AND 
                                                --raghu
                                                ORG_ENTITY_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR(NON_MULTIROW_REC.approver_organization) ,',')))
                                                AND ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (NON_MULTIROW_REC.RESPONSE_APPROVER ,',')))
                                                AND ACTIVITY_NAME='QSM - Approve Response')A;*/

											  
											  SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES(' 1=1','USER_NAME','(select distinct user_name                                          
																										  from ms_qsm_org_flow_v fdo where 
																										  ORG_ENTITY_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR('''||NON_MULTIROW_REC.approver_organization||''') ,'','')))
																										  AND ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||NON_MULTIROW_REC.RESPONSE_APPROVER||''' ,'','')))
																										  AND ACTIVITY_NAME=''QSM - Approve Response'') A')
											  INTO L_RESPONSE_APPROVER
											  FROM DUAl;
											  
                                          END IF; 
                                                                              
                                      END IF;
                                    
                                      lc_respondents   := user_rec.USER_NAME;

                                      l_triggered_flag := False;
                                        
                                      IF l_published_count >0 THEN
                                          
                                          check_response_triggerd (ip_respondent => lc_respondents,
                                                               ip_que_request_id => l_que_request_id,
                                                               ip_indv_item_pk  =>NULL,
                                                               op_triggered_flag => l_triggered_flag);
                                      END IF;
                                                             
                                      IF NOT l_triggered_flag THEN    
                                      
                                      
                                        L_OBJECT_NAME := ms_qsm_utilities.get_applies_to_object_desc(non_multirow_rec.que_applies_to,USER_REC.OBJECT_ID,non_multirow_rec.dd_current_user_name);
                                      
                                       
                                        MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object'),L_OBJECT_NAME);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown       
                                        MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object_code'),USER_REC.OBJECT_ID);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown                                                               
                                        MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','response_approver'),L_RESPONSE_APPROVER);
                                                                     
                                                                          
                                          ms_qsm_is_user_subscribed(p_recepient => lc_respondents,
                                                                                    p_type =>non_multirow_rec.send_option);
                                                                                    
                                          IF LENGTH(TRIM(lc_respondents))>0 THEN
                                          
                                             BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = non_multirow_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                              
                                              MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                               ip_response_xml => lx_response_xml  ,
                                                                               ip_que_request_id => l_que_request_id,
                                                                               ip_excel_based=>non_multirow_rec.excel_based,
                                                                               xn_error_handle_id =>xn_error_handle_id ,
                                                                               xn_error_seq =>xn_error_seq ,
                                                                               xn_error_code =>xn_error_code  ,
                                                                               xn_error_message =>l_error_message );            
                                                                                 
                                          END IF;
                                          
                                      END IF;
                                                            
                                 END LOOP;
                              
                              END IF;
                                  
                            ELSIF non_multirow_rec.que_send_to = '1' OR non_multirow_rec.que_send_to = '2'   THEN      -- '1' - All Control Owners , '2' - All Process Owners
                                                                 
                                
                                FOR user_rec IN (SELECT USER_NAME,ORG_ENTITY_ID 
                                                        FROM MS_QSM_ORG_FLOW_V fdo
                                                        WHERE 
                                                        ((NVL(NON_MULTIROW_REC.FIILTER_LEVEL,'1')='1' AND ORG_ENTITY_ID IN (SELECT COLUMN_VALUE 
                                                                                                                        FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (LC_ORG ,',')))) 
                                                                      OR (NVL(NON_MULTIROW_REC.FIILTER_LEVEL,'1')='2' AND L_CONTACT_USER_AVAILABLE='Y' AND USER_NAME IN (SELECT USER_NAME
                                                                                                                                        FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(NON_MULTIROW_REC.QUE_APPLIES_TO||'~'||NON_MULTIROW_REC.APPLIES_TO_ITEMS)))))                                                        
                                                        AND ACTIVITY_NAME =  'QSM - Respond to Surveys'
                                                        INTERSECT
                                                        SELECT USER_NAME,ORG_ENTITY_ID 
                                                        FROM MS_QSM_ORG_FLOW_V fdo
                                                        WHERE ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (lc_org ,',')))
                                                        AND ACTIVITY_NAME = DECODE(non_multirow_rec.que_send_to ,'1','QSM-Control Owner','2','QSM-Process Owner')
                                                        )
                                                                                        
                                LOOP
                                    
                                    IF NON_MULTIROW_REC.RESPONSE_APPROVER IS NOT NULL THEN
                                       
                                        L_RESPONSE_APPROVER := '';
                                          
                                        IF NON_MULTIROW_REC.SEND_TO_APPROVAL = '4' THEN
                                            
                                           L_RESPONSE_APPROVER := NON_MULTIROW_REC.RESPONSE_APPROVER; 
                                                
                                         ELSIF  NON_MULTIROW_REC.SEND_TO_APPROVAL = '3' THEN

											--raghu
                                              /*SELECT MS_CONCAT(USER_NAME)
                                              INTO L_RESPONSE_APPROVER
                                              FROM
                                                (select distinct user_name
                                                from ms_qsm_org_flow_v fdo
                                                where 
                                                --ORG_ENTITY_ID = USER_REC.ORG_ENTITY_ID 
                                                --AND 
                                                --raghu
                                                ORG_ENTITY_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR(NON_MULTIROW_REC.approver_organization) ,',')))
                                                AND ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (NON_MULTIROW_REC.RESPONSE_APPROVER ,',')))
                                                AND ACTIVITY_NAME='QSM - Approve Response')A;*/
												
												SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES(' 1=1','USER_NAME','(select distinct user_name                                          
																										  from ms_qsm_org_flow_v fdo where 
																										  ORG_ENTITY_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR('''||NON_MULTIROW_REC.approver_organization||''') ,'','')))
																										  AND ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||NON_MULTIROW_REC.RESPONSE_APPROVER||''' ,'','')))
																										  AND ACTIVITY_NAME=''QSM - Approve Response'') A')
												INTO L_RESPONSE_APPROVER
												FROM DUAl;
                                         
                                         END IF;




										
										SELECT ORG_ENTITY_NAME
                                          INTO L_OBJECT_NAME
                                          FROM SI_ORG_ENTITIES
                                          WHERE ORG_ENTITY_ID=user_rec.ORG_ENTITY_ID;
                                          




                                         
                                         MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object'),L_OBJECT_NAME);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown       
                                         MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object_code'),user_rec.ORG_ENTITY_ID);
                                         MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','response_approver'),L_RESPONSE_APPROVER);
                                         
                                    END IF;     
                                    
                                    lc_respondents   := user_rec.USER_NAME;
                                   
                                    l_triggered_flag := False;
                                                                            
                                    IF l_published_count >0 THEN
                                                                            
                                        check_response_triggerd (ip_respondent => lc_respondents,
                                                             ip_que_request_id => l_que_request_id,
                                                             ip_indv_item_pk  =>NULL,
                                                             op_triggered_flag => l_triggered_flag);
                                    END IF;
                                                             
                                    IF NOT l_triggered_flag THEN                                       
                                                                    
                                        ms_qsm_is_user_subscribed(p_recepient => lc_respondents,
                                                                                  p_type =>non_multirow_rec.send_option);
                                                                                  
                                        IF LENGTH(TRIM(lc_respondents))>0 THEN
                                        
                                             BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = non_multirow_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                            
                                            MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                             ip_response_xml => lx_response_xml  ,
                                                                             ip_que_request_id => l_que_request_id,
                                                                             ip_excel_based=>non_multirow_rec.excel_based,
                                                                             xn_error_handle_id =>xn_error_handle_id ,
                                                                             xn_error_seq =>xn_error_seq ,
                                                                             xn_error_code =>xn_error_code  ,
                                                                             xn_error_message =>l_error_message );            
                                                                               
                                        END IF;
                                                                 
                                    END IF;               
                                                                                        
                                END LOOP;                                                        
                                           
                            END IF;

                        ELSIF TRIM(non_multirow_rec.send_option)='1' AND non_multirow_rec.que_send_to = '3' THEN -- Send Same Copy to user Roles
                            
               /*           ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                           pn_error_sequence    => xn_error_seq,
                           pc_error_type        => 'E',
                           pc_error_text        => 'Fatal Error in the ms_QSM_INIQSM_INIQSM_PROD ' ||non_multirow_rec.fiilter_level||':'||lc_org||':'||l_contact_user_available||':'||non_multirow_rec.que_applies_to||':
                           '||NON_MULTIROW_REC.APPLIES_TO_ITEMS||':'||lc_send_user_role);    */                                                    
                          
                          
                              IF NON_MULTIROW_REC.RESPONSE_APPROVER IS NOT NULL THEN
                                           
                                   L_RESPONSE_APPROVER := '';
                                              
                                   IF NON_MULTIROW_REC.SEND_TO_APPROVAL = '4' THEN
                                                
                                      L_RESPONSE_APPROVER := NON_MULTIROW_REC.RESPONSE_APPROVER; 
                                                    
                                   ELSIF  NON_MULTIROW_REC.SEND_TO_APPROVAL = '3' THEN

                                        --raghu                         
                                        /*SELECT MS_CONCAT(USER_NAME)
                                        INTO L_RESPONSE_APPROVER
                                        FROM 
                                          (SELECT DISTINCT USER_NAME
                                          FROM MS_QSM_ORG_FLOW_V FDO
                                          where  
                                          --((NVL(NON_MULTIROW_REC.FIILTER_LEVEL,'1')='1' AND ORG_ENTITY_ID IN (SELECT COLUMN_VALUE 

                                          --                                                                          FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (LC_ORG ,',')))) 
                                          --                        OR (NVL(NON_MULTIROW_REC.FIILTER_LEVEL,'1')='2' AND L_CONTACT_USER_AVAILABLE='Y' AND USER_NAME IN (SELECT USER_NAME


                                          --                                                                                          FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(NON_MULTIROW_REC.QUE_APPLIES_TO||'~'||NON_MULTIROW_REC.APPLIES_TO_ITEMS)))))                                                                                                                                                                        
                                          --AND 
                                          --raghu
                                          ORG_ENTITY_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR(NON_MULTIROW_REC.approver_organization) ,',')))
                                          AND ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (NON_MULTIROW_REC.RESPONSE_APPROVER ,',')))
                                          AND ACTIVITY_NAME='QSM - Approve Response')A;*/
										  
										  SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES(' 1=1','USER_NAME','(select distinct user_name                                          
																										  from ms_qsm_org_flow_v fdo where 
																										  ORG_ENTITY_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR('''||NON_MULTIROW_REC.approver_organization||''') ,'','')))
																										  AND ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||NON_MULTIROW_REC.RESPONSE_APPROVER||''' ,'','')))
																										  AND ACTIVITY_NAME=''QSM - Approve Response'') A')
										  INTO L_RESPONSE_APPROVER
										  FROM DUAl;
                                             
                                   END IF;
                                             
                                   MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','response_approver'),L_RESPONSE_APPROVER);
                                             
                            END IF;    
                          
                            IF NVL(NON_MULTIROW_REC.FIILTER_LEVEL,'1')='1' THEN

                                --raghu  
                                /*select ms_concat (user_name) 
                                into lc_respondents
                                from
                                (SELECT DISTINCT USER_NAME USER_NAME
                                from ms_qsm_org_flow_v fdo
                                WHERE  ORG_ENTITY_ID IN (SELECT COLUMN_VALUE 
                                                        from table (ms_apps_utilities.parse_string (lc_org ,',')))
                                AND role_id IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (lc_send_user_role ,',')))
                                and activity_name='QSM - Respond to Surveys') a; */
								
								SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES(' 1=1','USER_NAME','(select distinct user_name                                          
																										  from ms_qsm_org_flow_v fdo where 
																										  ORG_ENTITY_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR('''||lc_org||''') ,'','')))
																										  AND ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||lc_send_user_role||''' ,'','')))
																										  AND ACTIVITY_NAME=''QSM - Respond to Surveys'') A')
								INTO lc_respondents
								FROM DUAl;

                                l_triggered_flag := False;
                                    
                                IF l_published_count >0 THEN
                                            
                                            check_response_triggerd (ip_respondent => lc_respondents,
                                                                 ip_que_request_id => l_que_request_id,
                                                                 ip_indv_item_pk  =>NULL,
                                                                 ip_send_option => non_multirow_rec.send_option,
                                                                 op_triggered_flag => l_triggered_flag);
                                END IF;
                                                                 
                                IF NOT l_triggered_flag THEN                               
                                                                        
                                    ms_qsm_is_user_subscribed(p_recepient => lc_respondents,
                                                                              p_type =>non_multirow_rec.send_option);
                                                                                      
                                    IF LENGTH(TRIM(lc_respondents))>0 THEN
                                    
                                         BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = non_multirow_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                        
                                        MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                         ip_response_xml => lx_response_xml  ,
                                                                         ip_que_request_id => l_que_request_id,
                                                                         ip_excel_based=>non_multirow_rec.excel_based,
                                                                         xn_error_handle_id =>xn_error_handle_id ,
                                                                         xn_error_seq =>xn_error_seq ,
                                                                         xn_error_code =>xn_error_code  ,
                                                                         xn_error_message =>l_error_message );          
    
                                    END IF;
                            
                                                          
                             end if; 
                             
                          else
                          
                              for user_rec in (select ms_concat(c.user_name) user_name,c.object_id
                                FROM (select distinct a.user_name user_name,b.object_id object_id
                                FROM MS_QSM_ORG_FLOW_V A,(SELECT USER_NAME,OBJECT_ID from table(ms_qsm_utilities.module_object_contact_list(non_multirow_rec.que_applies_to||'~'||non_multirow_rec.applies_to_items))) b
                                where a.user_name = b.user_name
                                and a.role_id in (select column_value from table (ms_apps_utilities.parse_string (lc_send_user_role ,',')))
                                and a.activity_name='QSM - Respond to Surveys')c
                                group by c.object_id )loop
                                
                                lc_respondents :=  user_rec.user_name;                               
                                
                                L_OBJECT_NAME := ms_qsm_utilities.get_applies_to_object_desc(non_multirow_rec.que_applies_to,USER_REC.OBJECT_ID,non_multirow_rec.dd_current_user_name);
                                
                                
                                ms_qsm_utilities.update_xml(lx_response_xml, replace(lv_path,'$','applies_to_object'),l_object_name);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown       
                                MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object_code'),USER_REC.OBJECT_ID);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown                                                                                                                                                                          
    
                         
                                  l_triggered_flag := False;
                                      
                                  IF l_published_count >0 THEN
                                              
                                              check_response_triggerd (ip_respondent => lc_respondents,
                                                                   ip_que_request_id => l_que_request_id,
                                                                   ip_indv_item_pk  =>NULL,
                                                                   ip_send_option => non_multirow_rec.send_option,
                                                                   op_triggered_flag => l_triggered_flag);
                                  END IF;
                                                                   
                                  IF NOT l_triggered_flag THEN                               
                                                                          
                                      ms_qsm_is_user_subscribed(p_recepient => lc_respondents,
                                                                                p_type =>non_multirow_rec.send_option);
                                                                                        
                                      IF LENGTH(TRIM(lc_respondents))>0 THEN
                                      
                                           BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = non_multirow_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                          
                                          MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                           ip_response_xml => lx_response_xml  ,
                                                                           ip_que_request_id => l_que_request_id,
                                                                           ip_excel_based=>non_multirow_rec.excel_based,
                                                                           xn_error_handle_id =>xn_error_handle_id ,
                                                                           xn_error_seq =>xn_error_seq ,
                                                                           xn_error_code =>xn_error_code  ,
                                                                           xn_error_message =>l_error_message );          
      
                                      END IF;
                              
                                                            
                               end if;             
                            
                            END LOOP;
                            
                          END IF;                            
                             
                        END IF ;
                        
                    ELSIF  TRIM(non_multirow_rec.survey_scope_selection) = '2' AND non_multirow_rec.que_applies_to <>'1'  THEN  -- Select One or More Individual Items  and applies to is not adhoc                

                        
                        FOR indv_item_rec IN (SELECT indv_item_field_1,
                                                                      indv_item_pk,
                                                                      indv_item_field_2,
                                                                      indv_item_field_3,
                                                                      indv_send_option,
                                                                      indv_collbortiv_resp,
                                                                      indv_resp_approver,
                                                                      indv_que_send_to,
                                                                      ind_que_request_id,
                                                                      send_to_assessor_org,
                                                                      send_to_assessor,
                                                                      INDV_APPR_BASED_ON_RESPONSE,
                                                                      ITEM_RELTD_COLLABORATOR,
                                                                      ITEM_RELTD_RESPONDENT,
                                                                      INDV_SEND_TO_APPROVAL,
                                                                      INDV_ALL_USER_APPROVAL,
                                                                      indv_approver_organization
                                                        FROM XMLTABLE(xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:ind/msa:row'
                                                        PASSING  (l_out_xml)
                                                        COLUMNS  indv_item_field_1 VARCHAR2 (255) PATH 'msa:indv_item_field_1'
                                                                        ,indv_item_pk  varchar2 (255) path 'msa:indv_item_pk'
                                                                        ,indv_item_field_2 varchar2 (255) path 'msa:indv_item_field_2'
                                                                        ,indv_item_field_3 VARCHAR2 (255) PATH 'msa:indv_item_field_3'
                                                                        ,indv_send_option VARCHAR2 (100) PATH 'msa:indv_send_option'
                                                                        ,indv_collbortiv_resp VARCHAR2 (100) PATH 'msa:indv_collbortiv_resp'
                                                                        ,indv_resp_approver VARCHAR2 (255) PATH 'msa:indv_resp_approver'
                                                                        ,indv_que_send_to VARCHAR2 (255)   PATH 'msa:indv_que_send_to'
                                                                        ,ind_que_request_id VARCHAR2 (100) PATH 'msa:ind_que_request_id'
                                                                        ,send_to_assessor_org CLOB PATH 'msa:send_to_assessor_org'
                                                                        ,send_to_assessor CLOB PATH 'msa:send_to_assessor'
                                                                        ,indv_appr_based_on_response VARCHAR2 (4000) PATH 'msa:indv_appr_based_on_response'
                                                                        ,ITEM_RELTD_COLLABORATOR VARCHAR2(200) PATH 'msa:item_reltd_collaborator'
                                                                        ,ITEM_RELTD_RESPONDENT VARCHAR2(10) PATH 'msa:item_reltd_respondent'
                                                                        ,INDV_SEND_TO_APPROVAL VARCHAR2(10) PATH 'msa:indv_send_to_approval'
                                                                        ,INDV_ALL_USER_APPROVAL VARCHAR2(10) PATH 'msa:indv_all_user_approval'
                                                                        ,indv_approver_organization VARCHAR2 (255) PATH 'msa:indv_approver_organization'
                                                                        ))
                        LOOP
                          --raghu
                          ms_qsm_log_activity ('', 'START XML INIT INDV~',  l_out_xml.getclobval());
                            --==========================================
                            --getting delimeter value  - added by Gaurav
                            select value
                            into lv_delimeter
                            from MS_QSM_PARAMS
                            where parameter='QUESTION_LOV_DELIMETER'
                            and ENABLED ='Y';
                            
                            LV_PARAM_FLAG :=  '{"SCORING":"'||NON_MULTIROW_REC.DISPLAY_SCORING||'","COLLABORATION":"'||INDV_ITEM_REC.INDV_COLLBORTIV_RESP||'","DELIMETER":"'||LV_DELIMETER||'","REQUIRE_ALL_USER_APPROVAL":"'||INDV_ITEM_REC.INDV_ALL_USER_APPROVAL||'"}';   
                                                                           
                            ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','temp_config_flag'),lv_param_flag);   -- Contains the Scoring Flag Yes or No , Collaboration flag         

                            
                             MS_QSM_UTILITIES.insert_schedule_logs(i_request_id => l_que_request_id
                                                                                        ,i_respondents =>indv_item_rec.send_to_assessor
                                                                                        ,i_log_level => 'H'
                                                                                        , i_indv_item_pk =>indv_item_rec.indv_item_pk
                                                                                        ,i_sequence_no => l_sequence_no
                                                                                        ,i_send_to => indv_item_rec.indv_que_send_to
                                                                                        ,i_process_instance_id =>non_multirow_rec.process_instance_id
                                                                                        ,i_questionnaire_id =>non_multirow_rec.questionnaire_id
                                                                                        ,i_sch_frequency=>non_multirow_rec.sch_frequency
                                                                                        ,o_error_code=>l_error_code
                                                                                        ,o_error_message=>l_error_message);
                            
                                                      
                             lv_applies_to_object := ms_qsm_utilities.get_applies_to_object_desc(non_multirow_rec.que_applies_to,indv_item_rec.indv_item_field_1,non_multirow_rec.dd_current_user_name);
                             
                             MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object'),LV_APPLIES_TO_OBJECT);
                             ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to_object_code'),indv_item_rec.indv_item_field_1);  
                             IF UPPER(indv_item_rec.item_reltd_collaborator) = 'YES' THEN
                                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'del_config_flag'),non_multirow_rec.que_applies_to||'~'||indv_item_rec.indv_item_field_1); 
                             END IF;
                             
                             MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, replace(LV_PATH,'$','app_based_on_resp'),INDV_ITEM_REC.INDV_APPR_BASED_ON_RESPONSE);
                             --aman
                             -- insert into testtable values('22222:INDV_ITEM_REC.INDV_APPR_BASED_ON_RESPONSE = ',INDV_ITEM_REC.INDV_APPR_BASED_ON_RESPONSE);
                             --by nagesh start CMS
                              MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, replace(LV_PATH,'$','response_approver'),INDV_ITEM_REC.INDV_RESP_APPROVER);
                               --by nagesh end CMS
                             IF indv_item_rec.INDV_RESP_APPROVER IS NOT NULL THEN
                                       
                                    L_RESPONSE_APPROVER := '';
                                          
                                    IF indv_item_rec.INDV_SEND_TO_APPROVAL = '4' THEN
                                      
                                          L_RESPONSE_APPROVER := indv_item_rec.INDV_RESP_APPROVER; 
                                          
                                    ELSIF  indv_item_rec.INDV_SEND_TO_APPROVAL = '3' THEN
                                        --raghu
                                        /*SELECT MS_CONCAT(USER_NAME)
                                        INTO L_RESPONSE_APPROVER
                                        FROM 
                                          (SELECT DISTINCT USER_NAME
                                          FROM MS_QSM_ORG_FLOW_V FDO
                                          where 
                                          --raghu
                                          ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (nvl(indv_item_rec.indv_approver_organization,ORG_ENTITY_ID),',')))
                                          --AND (indv_item_rec.item_reltd_respondent='no' OR 
                                          --                              (INDV_ITEM_REC.ITEM_RELTD_RESPONDENT='yes' AND USER_NAME IN (SELECT USER_NAME 
                                          --                                                                                            FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(non_multirow_rec.que_applies_to||'~'||indv_item_rec.indv_item_field_1)))))
                                          --AND 
                                          AND ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (INDV_ITEM_REC.INDV_RESP_APPROVER ,',')))
                                          AND ACTIVITY_NAME='QSM - Approve Response')A;*/
										
										SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES(' 1=1','USER_NAME','(select distinct user_name                                          
																										  from ms_qsm_org_flow_v fdo where 
																										  ORG_ENTITY_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (nvl('''||indv_item_rec.indv_approver_organization||''',ORG_ENTITY_ID),'','')))
																										  AND ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||INDV_ITEM_REC.INDV_RESP_APPROVER||''' ,'','')))
																										  AND ACTIVITY_NAME=''QSM - Approve Response'') A')
										INTO L_RESPONSE_APPROVER
										FROM DUAl;
										
										
                                    END IF; 
                              
                                  ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','response_approver'),L_RESPONSE_APPROVER);
                                                                              
                            END IF;
                            
                            IF NVL(TRIM(indv_item_rec.indv_send_option),'2')='2' THEN -- Send Seperate Copy
                                
                                IF indv_item_rec.indv_que_send_to = '4' THEN -- que_send_to => 1 - All Control Owners , 2- All Process Owners , 3- Roles , 4 - Users
                                    
                                                      
                                    FOR user_rec IN (SELECT COLUMN_VALUE
                                                                 FROM 
                                                                 TABLE(MS_APPS_UTILITIES.SPLIT_STRING(indv_item_rec.send_to_assessor,',')))
                                    LOOP
                                        
                                                                            
                                        lc_respondents   := user_rec.COLUMN_VALUE;
                                        
                                        l_triggered_flag := False;
                                        
                                        IF l_published_count >0 THEN
                                        
                                            check_response_triggerd (ip_respondent => lc_respondents,
                                                                 ip_que_request_id => l_que_request_id,
                                                                 ip_indv_item_pk  =>indv_item_rec.indv_item_pk,
                                                                 op_triggered_flag => l_triggered_flag);
                                        END IF;
                                                             
                                        IF NOT l_triggered_flag THEN                                                                
                                            
                                            ms_qsm_is_user_subscribed(p_recepient => lc_respondents,
                                                                                     p_type =>indv_item_rec.indv_send_option);
                                            
                                            IF LENGTH(TRIM(lc_respondents))>0 THEN
                                            
                                            BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = non_multirow_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                                
                                                MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                             ip_response_xml => lx_response_xml  ,
                                                                             ip_que_request_id => l_que_request_id,
                                                                             ip_sequence_no => l_sequence_no,
                                                                             ip_excel_based=>non_multirow_rec.excel_based,
                                                                             xn_error_handle_id =>xn_error_handle_id ,
                                                                             xn_error_seq =>xn_error_seq ,
                                                                             xn_error_code =>xn_error_code  ,
                                                                             xn_error_message =>l_error_message );     
                                            END IF;
                                        END IF;    
                                    END LOOP;         
                                    
                                ELSIF indv_item_rec.indv_que_send_to = '3' THEN
                                    
                                    FOR user_rec IN (SELECT DISTINCT USER_NAME
                                                                    FROM MS_QSM_ORG_FLOW_V FDO
                                                                    WHERE ((ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (indv_item_rec.send_to_assessor_org ,','))) AND INDV_ITEM_REC.ITEM_RELTD_RESPONDENT='no') OR (INDV_ITEM_REC.ITEM_RELTD_RESPONDENT='yes'))
                                                                    AND ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (INDV_ITEM_REC.SEND_TO_ASSESSOR ,',')))
                                                                    AND (indv_item_rec.item_reltd_respondent='no' OR 
                                                                        (INDV_ITEM_REC.ITEM_RELTD_RESPONDENT='yes' AND USER_NAME IN (SELECT USER_NAME 
                                                                                                                                      FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(non_multirow_rec.que_applies_to||'~'||indv_item_rec.indv_item_field_1)))))
                                                                    AND ACTIVITY_NAME='QSM - Respond to Surveys')
                                   
                                    LOOP
                                        
                                        lc_respondents   := user_rec.USER_NAME;
                                        
                                        l_triggered_flag := False;
                                        
                                        IF l_published_count >0 THEN
                                        
                                            check_response_triggerd (ip_respondent => lc_respondents,
                                                                 ip_que_request_id => l_que_request_id,
                                                                 ip_indv_item_pk  =>indv_item_rec.indv_item_pk,
                                                                 op_triggered_flag => l_triggered_flag);
                                        END IF;
                                                             
                                        IF NOT l_triggered_flag THEN   
                                                                        
                                            ms_qsm_is_user_subscribed(p_recepient => lc_respondents,
                                                                                      p_type =>indv_item_rec.indv_send_option);
                                                                                      
                                            IF LENGTH(TRIM(lc_respondents))>0 THEN
                                            
                                            BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = non_multirow_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                                
                                                MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                                 ip_response_xml => lx_response_xml  ,
                                                                                 ip_que_request_id => l_que_request_id,
                                                                                 ip_sequence_no => l_sequence_no,
                                                                                 ip_excel_based=>non_multirow_rec.excel_based,
                                                                                 xn_error_handle_id =>xn_error_handle_id ,
                                                                                 xn_error_seq =>xn_error_seq ,
                                                                                 xn_error_code =>xn_error_code  ,
                                                                                 xn_error_message =>l_error_message );     
                                                                                   
                                            END IF;
                                        
                                        END IF;
                                        
                                    END LOOP;                                                                        
                                      
                                END IF;

                            ELSIF TRIM(indv_item_rec.indv_send_option)='1' AND indv_item_rec.indv_que_send_to = '3' THEN -- Send Same Copy to user Roles
                                
								--raghu				
                               /* SELECT MS_CONCAT(USER_NAME)                                
                                INTO lc_respondents
                                FROM 
                                (SELECT DISTINCT USER_NAME USER_NAME
                                from ms_qsm_org_flow_v fdo
                                WHERE ((ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (indv_item_rec.send_to_assessor_org ,','))) AND INDV_ITEM_REC.ITEM_RELTD_RESPONDENT='no') OR (INDV_ITEM_REC.ITEM_RELTD_RESPONDENT='yes'))
                                AND ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (INDV_ITEM_REC.SEND_TO_ASSESSOR ,',')))
                                AND (indv_item_rec.item_reltd_respondent='no' OR 
                                                                        (INDV_ITEM_REC.ITEM_RELTD_RESPONDENT='yes' AND USER_NAME IN (SELECT USER_NAME 
                                                                                                                                      FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(non_multirow_rec.que_applies_to||'~'||indv_item_rec.indv_item_field_1)))))
                                AND ACTIVITY_NAME='QSM - Respond to Surveys') A;*/

								SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('1=1','USER_NAME','(SELECT DISTINCT USER_NAME USER_NAME
                                from ms_qsm_org_flow_v fdo
                                WHERE ((ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string ('''||indv_item_rec.send_to_assessor_org||''' ,'',''))) AND '''||INDV_ITEM_REC.ITEM_RELTD_RESPONDENT||'''=''no'') OR ('''||INDV_ITEM_REC.ITEM_RELTD_RESPONDENT||'''=''yes''))
                                AND ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||INDV_ITEM_REC.SEND_TO_ASSESSOR||''' ,'','')))
                                AND ('''||indv_item_rec.item_reltd_respondent||'''=''no'' OR 
                                                                        ('''||INDV_ITEM_REC.ITEM_RELTD_RESPONDENT||'''=''yes'' AND USER_NAME IN (SELECT USER_NAME 
                                                                                                                                      FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST('''||non_multirow_rec.que_applies_to||'''||''~''||'''||indv_item_rec.indv_item_field_1||''')))))
                                AND ACTIVITY_NAME=''QSM - Respond to Surveys'') A')
                                INTO LC_RESPONDENTS
                                FROM DUAl;
                                
                                l_triggered_flag := False;
                                
                                IF l_published_count >0 THEN
                                        
                                            check_response_triggerd (ip_respondent => lc_respondents,
                                                                 ip_que_request_id => l_que_request_id,
                                                                 ip_indv_item_pk  =>indv_item_rec.indv_item_pk,
                                                                 ip_send_option => indv_item_rec.indv_send_option,
                                                                 op_triggered_flag => l_triggered_flag);
                                END IF;
                                                             
                                IF NOT l_triggered_flag THEN   
                                                  
                                    ms_qsm_is_user_subscribed(p_recepient => lc_respondents,
                                                                              p_type =>indv_item_rec.indv_send_option);
                                                                                  
                                    IF LENGTH(TRIM(lc_respondents))>0 THEN
                                    
                                           BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = non_multirow_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                                                
                                            MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                             ip_response_xml => lx_response_xml  ,
                                                                             ip_que_request_id => l_que_request_id,
                                                                             ip_sequence_no => l_sequence_no,
                                                                             ip_excel_based=>non_multirow_rec.excel_based,
                                                                             xn_error_handle_id =>xn_error_handle_id ,
                                                                             xn_error_seq =>xn_error_seq ,
                                                                             xn_error_code =>xn_error_code  ,
                                                                             xn_error_message =>l_error_message );                              

                                    END IF;
                               END IF; 
                            END IF ;
                                                        
                            --=========================================
                            
                             l_sequence_no := l_sequence_no+1;

                        END LOOP;
                                                                                
                    end if;                      
                    
                   select count(1)
                   into l_exist
                   from ms_qsm_survey_scheduler_log
                   where que_request_id = l_que_request_id;
                   
                   if l_exist <=0 THEN
                    
                       insert into ms_qsm_survey_scheduler_log
                          (que_request_id ,sch_frequency ,triggered_date,sch_due_date,sch_iteration)
                       values
                          (l_que_request_id,non_multirow_rec.SCH_FREQUENCY,SYSDATE,l_due_date,'ITR-1');  
                   else
                    
                      UPdate ms_qsm_survey_scheduler_log
                      set sch_due_date = l_due_date
                      where que_request_id=l_que_request_id;
                     
                   end if;
                    
                ELSE   -- Not RUN NOW Schedule

                    
                    IF TRIM(non_multirow_rec.survey_scope_selection) = '1' OR (TRIM(non_multirow_rec.survey_scope_selection)='2' AND non_multirow_rec.que_applies_to ='1')   THEN -- Select from a Filtered List (Better for Large Surveys) OR 
                                                                                                                                                    --                  If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys)  AND  Applies TO objects is Adhoc
                        MS_QSM_UTILITIES.insert_schedule_logs(i_request_id => l_que_request_id
                                                                                    ,i_respondents =>non_multirow_rec.send_user_role
                                                                                    ,i_log_level => 'H'
                                                                                    ,i_send_to => non_multirow_rec.que_send_to
                                                                                    ,i_process_instance_id =>non_multirow_rec.process_instance_id
                                                                                    ,i_questionnaire_id =>non_multirow_rec.questionnaire_id
                                                                                    ,i_sch_frequency=>non_multirow_rec.sch_frequency
                                                                                    ,o_error_code=>l_error_code
                                                                                    ,o_error_message=>l_error_message);                                                                                                                                                                                                              
                            
                    ELSIF  TRIM(non_multirow_rec.survey_scope_selection) = '2' AND non_multirow_rec.que_applies_to <>'1'  THEN  -- Select One or More Individual Items  and applies to is not adhoc
                            
                       FOR indv_item_rec IN (SELECT indv_item_field_1,
                                                                      indv_item_pk,
                                                                      indv_item_field_2,
                                                                      indv_item_field_3,
                                                                      indv_send_option,
                                                                      indv_collbortiv_resp,
                                                                      indv_resp_approver,
                                                                      indv_que_send_to,
                                                                      ind_que_request_id,
                                                                      send_to_assessor_org,
                                                                      send_to_assessor                                    
                                                        FROM XMLTABLE(xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:ind/msa:row'
                                                        PASSING  (l_out_xml)
                                                        COLUMNS  indv_item_field_1 VARCHAR2 (255) PATH 'msa:indv_item_field_1'
                                                                        ,indv_item_pk  VARCHAR2 (255) PATH 'msa:indv_item_pk'
                                                                        ,indv_item_field_2 VARCHAR2 (255) PATH 'msa:indv_item_field_2'
                                                                        ,indv_item_field_3 VARCHAR2 (255) PATH 'msa:indv_item_field_3'
                                                                        ,indv_send_option VARCHAR2 (100) PATH 'msa:indv_send_option'
                                                                        ,indv_collbortiv_resp VARCHAR2 (100) PATH 'msa:indv_collbortiv_resp'
                                                                        ,indv_resp_approver VARCHAR2 (255) PATH 'msa:indv_resp_approver'
                                                                        ,indv_que_send_to VARCHAR2 (255)   PATH 'msa:indv_que_send_to'
                                                                        ,ind_que_request_id VARCHAR2 (100) PATH 'msa:ind_que_request_id'
                                                                        ,send_to_assessor_org CLOB PATH 'msa:send_to_assessor_org'
                                                                        ,send_to_assessor CLOB PATH 'msa:send_to_assessor'))
                        LOOP

                            --==========================================
                            
                             MS_QSM_UTILITIES.insert_schedule_logs(i_request_id => l_que_request_id
                                                                                        ,i_respondents =>indv_item_rec.send_to_assessor
                                                                                        ,i_log_level => 'H'
                                                                                        , i_indv_item_pk =>indv_item_rec.indv_item_pk
                                                                                        ,i_sequence_no => l_sequence_no
                                                                                        ,i_send_to => indv_item_rec.indv_que_send_to
                                                                                        ,i_process_instance_id =>non_multirow_rec.process_instance_id
                                                                                        ,i_questionnaire_id =>non_multirow_rec.questionnaire_id
                                                                                        ,i_sch_frequency=>non_multirow_rec.sch_frequency
                                                                                        ,o_error_code=>l_error_code
                                                                                        ,o_error_message=>l_error_message);         
                                                                                        
                            l_sequence_no := l_sequence_no+1;                                                                                        
                                                                                        
                        END LOOP;
                                                                                                                                   
                    END IF;   
                                  
                END IF;
                
                l_init_pid := si_process_instance_id_s.NEXTVAL;
                l_init_iid := si_metric_results_s.NEXTVAL;
                
                l_reint_xml := l_out_xml;
                
                ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/nonmultirow/reinit_pid/text()',l_init_pid);
                                        
                ms_qsm_utilities.update_xml(l_reint_xml, 'datapacket/data/nonmultirow/instance_id/text()',l_init_iid);

                ms_qsm_utilities.update_xml(l_reint_xml, 'datapacket/data/nonmultirow/process_instance_id/text()',l_init_pid);  
                               
                ms_qsm_utilities.update_xml (l_reint_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'PUB_QST');
                ms_qsm_utilities.update_xml (l_reint_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'CR_ED_QST');
                
               l_error_message :=ms_apps_mdf_infoletoutput_pkg.insert_xml (ms_qsm_utilities.g_tbl_metric_maintenance ('INIQSM') || '_V',
                                           l_init_metric_id,
                                           l_init_pid,
                                           l_init_iid,
                                           l_reint_xml.getclobval ());
                                           
                 IF l_error_message != 'SUCCESS' OR l_error_message IS NULL THEN
                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'E',
                    pc_error_text        => 'Error While Inserting XML into Response View in the ms_QSM_INIQSM_INIQSM_PROD '||l_error_message || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);   
                END IF;    
                 
            END IF;
            
            MS_QSM_UTILITIES.UPDATE_INOUT_DATA(l_out_xml,lt_in_data,lt_out_data);
            
            ms_qsm_log_activity ('', 'Final XML INIT~', lt_out_data);
            
            ms_qsm_utilities.insert_comments (non_multirow_rec.process_instance_id,
                                                                non_multirow_rec.instance_id,
                                                                non_multirow_rec.metric_id,
                                                                non_multirow_rec.dd_current_user_name,
                                                                ms_apps_utilities.get_user_full_name (non_multirow_rec.dd_current_user_name),
                                                                'INITIATION_COMMENTS',
                                                                non_multirow_rec.init_comments,
                                                                l_error_code,
                                                                l_error_message);
            IF lc_to_stage = 'PUBLISH' THEN                                                    
                INSERT INTO MS_QSM_COMMENTS_LOG
                SELECT COMMENTS_COLUMN_NAME,l_init_pid,l_init_iid,INFOLET_ID,COMMENTS,USER_NAME,USER_FULL_NAME,ENTERED_DATE 
                FROM MS_QSM_COMMENTS_LOG WHERE PROCESS_INSTANCE_ID = TO_NUMBER(non_multirow_rec.process_instance_id);                                                                
            END IF;
        END LOOP;
        
    EXCEPTION
        WHEN OTHERS THEN
            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                     pn_error_sequence    => xn_error_seq,
                     pc_error_type        => 'E',
                     pc_error_text        => 'Fatal Error in the ms_QSM_INIQSM_INIQSM_PROD ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);                                                        
         
    END; 
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_INIQSM_INIQSM_PROD_B" (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN OUT CLOB,
                                                                       lt_out_data          IN OUT CLOB,
                                                                       pc_process_code      IN     VARCHAR2,
                                                                       lc_from_stage        IN     VARCHAR2,
                                                                       lc_to_stage          IN     VARCHAR2,
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
    AS
    
    l_out_xml                                                     XMLTYPE:=NULL;   
    lc_send_user_role                                          CLOB;
    lc_org                                                           CLOB;
    ln_response_metric_id                                    NUMBER;                                    
    ln_response_pid                                             NUMBER;
    ln_response_iid                                              NUMBER;
    lx_response_xml                                            XMLTYPE:=NULL;         
    lx_response_xml_template                              XMLTYPE:=NULL;           
    lv_applies_to_object                                       VARCHAR2(4000);
    ln_enterprise_id                                             NUMBER;
    ld_due_date                                                DATE;
    lv_assignment_text                                        VARCHAR2(4000);
    ln_priority                                                     NUMBER;
    l_que_request_id                                           VARCHAR2(255);
    
    lc_respondents                                              CLOB;
    
    lv_path                                                        VARCHAR2(100):='datapacket/data/nonmultirow/$/text()';
    lv_path_clob                                                 VARCHAR2(100):='datapacket/data/nonmultirow/$';                                                                          
    l_error_code                                                NUMBER;
    l_error_message                                          VARCHAR2 (4000);
    lv_user_locale_id                                          NUMBER;
    l_sch_det_status                                           VARCHAR2(1);
    lc_all_questions_id                                         CLOB;
    lv_applies_to_name                                      VARCHAR2(500);
    
    TYPE sch_log_details_tl   IS TABLE OF  MS_QSM_SCHEDULER_DETAILS%ROWTYPE INDEX BY BINARY_INTEGER;
    
    sch_log_details             sch_log_details_tl;
                                
    BEGIN
                        
        l_out_xml := xmltype (lt_in_data);
        
        IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0)  THEN
            ms_qsm_utilities.initialize_metric_maint ('QSM');
        END IF;
               
         FOR non_multirow_rec IN (SELECT previous_stage,
                                                            instructions,
                                                            DBMS_XMLGEN.CONVERT(instructions_htm) instructions_htm,
                                                            sub_certification_for,
                                                            consdr_no_of_past_months,
                                                            level_1_approver,
                                                            level_2_approver,
                                                            restrict_access_to,
                                                            sch_req_id,
                                                            sch_frequency,
                                                            sch_start_date,
                                                            sch_due_after,
                                                            sch_end_by,
                                                            sch_next_date,
                                                            que_request_id,
                                                            que_request_name,
                                                            que_request_type,
                                                            dd_object_type,
                                                            dd_current_user_name,
                                                            dd_event_user_name,
                                                            dd_enterprise_info,
                                                            dd_current_stage,
                                                            dd_process_code,
                                                            questionnaire_id,
                                                            que_applies_to,
                                                            survey_scope_selection,
                                                            fltr_owner_org,
                                                            fltr_org_level,
                                                            init_comments,
                                                            status,
                                                            sections,
                                                            que_action,
                                                            que_send_to,
                                                            send_option,
                                                            send_user_role,
                                                            send_to_assessor_org,
                                                            send_to_assessor,
                                                            response_approver,
                                                            collaborative_response,
                                                            instance_rec_num,
                                                            instance_id,
                                                            metric_id,
                                                            metric_run_date,
                                                            metric_completed_date,
                                                            latest_flag,
                                                            created_by,
                                                            creation_date,
                                                            process_flow_status,
                                                            process_instance_id
                                    FROM XMLTABLE (
                                    xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:nonmultirow'
                                    PASSING xmltype (lt_in_data_orig)
                                    COLUMNS          previous_stage VARCHAR2(10) PATH 'msa:previous_stage',
                                                            instructions CLOB   PATH 'msa:instructions',
                                                            instructions_htm CLOB PATH 'msa:instructions_htm',
                                                            sub_certification_for VARCHAR2(255)  PATH 'msa:sub_certification_for',
                                                            consdr_no_of_past_months NUMBER(10)  PATH 'msa:consdr_no_of_past_months',
                                                            level_1_approver VARCHAR2(100)  PATH 'msa:level_1_approver',
                                                            level_2_approver VARCHAR2(100)  PATH 'msa:level_2_approver',
                                                            restrict_access_to VARCHAR2(100)  PATH 'msa:restrict_access_to',
                                                            sch_req_id VARCHAR2(100)  PATH 'msa:sch_req_id',
                                                            sch_frequency VARCHAR2(255)  PATH 'msa:sch_frequency',
                                                            sch_start_date VARCHAR2(100)  PATH 'msa:sch_start_date',
                                                            sch_due_after NUMBER(10)  PATH 'msa:sch_due_after',
                                                            sch_end_by VARCHAR2(100)  PATH 'msa:sch_end_by',
                                                            sch_next_date VARCHAR2(100)  PATH 'msa:sch_next_date',
                                                            que_request_id VARCHAR2(100)  PATH 'msa:que_request_id',
                                                            que_request_name VARCHAR2(255)  PATH 'msa:que_request_name',
                                                            que_request_type VARCHAR2(100)  PATH 'msa:que_request_type',
                                                            dd_object_type VARCHAR2(100)  PATH 'msa:dd_object_type',
                                                            dd_current_user_name VARCHAR2(100)  PATH 'msa:dd_current_user_name',
                                                            dd_event_user_name VARCHAR2(100)  PATH 'msa:dd_event_user_name',
                                                            dd_enterprise_info  VARCHAR2(100) PATH 'msa:dd_enterprise_info',
                                                            dd_current_stage VARCHAR2(10)  PATH 'msa:dd_current_stage',
                                                            dd_process_code VARCHAR2(255)  PATH 'msa:dd_process_code',
                                                            questionnaire_id VARCHAR2(255)  PATH 'msa:questionnaire_id',
                                                            que_applies_to VARCHAR2(255)  PATH 'msa:que_applies_to',
                                                            survey_scope_selection VARCHAR2(255)  PATH 'msa:survey_scope_selection',
                                                            fltr_owner_org  CLOB    PATH 'msa:fltr_owner_org',
                                                            fltr_org_level  CLOB    PATH    'msa:fltr_org_level',
                                                            init_comments   VARCHAR2(4000) PATH 'msa:init_comments',
                                                            sections            CLOB   PATH 'msa:sections',
                                                            status  VARCHAR2(255) PATH 'msa:status',
                                                            que_action  VARCHAR2(100) PATH 'msa:que_action',
                                                            que_send_to VARCHAR2(255)  PATH 'msa:que_send_to',
                                                            send_option VARCHAR2(10)  PATH 'msa:send_option',
                                                            send_user_role  CLOB    PATH 'msa:send_user_role',
                                                            send_to_assessor_org    CLOB    PATH 'msa:send_to_assessor_org',
                                                            send_to_assessor    CLOB PATH 'msa:send_to_assessor',
                                                            response_approver VARCHAR2(255)  PATH 'msa:response_approver',
                                                            collaborative_response VARCHAR2(10)  PATH 'msa:collaborative_response',
                                                            instance_rec_num NUMBER(10)  PATH 'msa:instance_rec_num',
                                                            instance_id NUMBER(10)  PATH 'msa:instance_id',
                                                            metric_id NUMBER(10)  PATH 'msa:metric_id',
                                                            metric_run_date VARCHAR2(100)  PATH 'msa:metric_run_date',
                                                            metric_completed_date VARCHAR2(100)  PATH 'msa:metric_completed_date',
                                                            latest_flag VARCHAR2(255)  PATH 'msa:latest_flag',
                                                            created_by VARCHAR2(255)  PATH 'msa:created_by',
                                                            creation_date VARCHAR2(100)  PATH 'msa:creation_date',
                                                            process_flow_status VARCHAR2(255)  PATH 'msa:process_flow_status',
                                                            process_instance_id NUMBER(10)  PATH 'msa:process_instance_id' ))
        LOOP
                
            SELECT B.LOCALE_ID
            INTO lv_user_locale_id
            FROM SI_USERS_T a,SI_LOCALES b
            WHERE a.USER_NAME = non_multirow_rec.dd_current_user_name
            AND A.LOCALE = B.LOCALE_STRING;

            l_que_request_id := non_multirow_rec.que_request_id;            
           
            IF TRIM (non_multirow_rec.que_request_id) = 'INIT'  OR non_multirow_rec.que_request_id IS NULL THEN
                
                l_que_request_id := MS_APPS_UTILITIES.GET_DISPLAY_VALUE(i_lov_name=>'MS_QSM_Init_Questionnaire_Type',i_stored_value=>non_multirow_rec.que_request_type,i_locale_id=>lv_user_locale_id,i_enterprise_name=>non_multirow_rec.dd_enterprise_info)  
                ||'-'||ms_qsm_que_request_id_s.NEXTVAL;
                
                ms_qsm_utilities.update_xml(l_out_xml, REPLACE(lv_path,'$','que_request_id'),l_que_request_id);
                ms_qsm_utilities.update_xml(l_out_xml, REPLACE(lv_path,'$','sch_req_id'),l_que_request_id);
                
            END IF;
            
            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/status/text()',ms_qsm_utilities.get_status (non_multirow_rec.dd_current_stage, non_multirow_rec.previous_stage, non_multirow_rec.que_action));
            
            IF lc_from_stage = 'CREATE_EDIT' AND lc_to_stage ='L1_APPROVE' THEN -- Transition INI_To_L1 Create/Edit Questionnaire --> Level 1 Approval
                
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'CR_ED_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'L1_APP');
                      
            ELSIF  lc_from_stage = 'CREATE_EDIT' AND lc_to_stage ='OBJECT_EDITORS' THEN -- Transition INI_To_OWN Create/Edit Questionnaire --> Owners

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'CR_ED_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'OWN_QST');
                                           
            ELSIF  lc_from_stage = 'CREATE_EDIT' AND lc_to_stage ='PUBLISH' THEN -- Transition INI_To_PUB Create/Edit Questionnaire --> Publish Questionnaire

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'CR_ED_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'PUB_QST');
                                            
            ELSIF  lc_from_stage = 'OBJECT_EDITORS' AND lc_to_stage ='CREATE_EDIT' THEN -- Transition OWN_To_INI Owners --> Create Questionnaire (Request for Clarification)

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'OWN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'CR_ED_QST');
                      
            ELSIF  lc_from_stage = 'OBJECT_EDITORS' AND lc_to_stage ='L1_APPROVE' THEN -- Transition OWN_To_L1 Owners --> Level 1 Approver (Request for Approval)

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'OWN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'L1_APP');
                      
            ELSIF  lc_from_stage = 'OBJECT_EDITORS' AND lc_to_stage ='PUBLISH' THEN -- Transition OWN_To_PUB Owners --> Publish 

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'OWN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'PUB_QST');                      
                     
            ELSIF  lc_from_stage = 'OBJECT_EDITORS' AND lc_to_stage ='REQUEST_CANCEL' THEN -- Transition OWN_To_CAN Owners --> Cancel 

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'OWN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'CAN_QST');                           
                                            
            ELSIF  lc_from_stage = 'L1_APPROVE' AND lc_to_stage ='L2_APPROVE' THEN -- Transition L1_To_L2 - Level 1 Approval --> Level 2 Approval 

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L1_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'L2_APP');                       
                      
            ELSIF  lc_from_stage = 'L1_APPROVE' AND lc_to_stage ='OBJECT_EDITORS' THEN -- Transition L1_To_OWN - Level 1 Approval --> Owners (Request for Clarification 

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L1_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'OWN_QST');                              
                      
            ELSIF  lc_from_stage = 'L1_APPROVE' AND lc_to_stage ='PUBLISH' THEN -- Transition L1_To_PUB - Level 1 Approval --> Publish

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L1_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'PUB_QST');       
                      
            ELSIF  lc_from_stage = 'L1_APPROVE' AND lc_to_stage ='REQUEST_CANCEL' THEN -- Transition L1_To_CAN - Level 1 Approval --> Cancel

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L1_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'CAN_QST');  
                                                                  
            ELSIF  lc_from_stage = 'L2_APPROVE' AND lc_to_stage ='OBJECT_EDITORS' THEN -- Transition L2_To_OWN - Level 2 Approval --> Owners (Request for Clarification 

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L2_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'OWN_QST');    
                      
            ELSIF  lc_from_stage = 'L2_APPROVE' AND lc_to_stage ='PUBLISH' THEN -- Transition L2_To_PUB - Level 2 Approval --> Publish

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L2_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'PUB_QST');       
                      
            ELSIF  lc_from_stage = 'L2_APPROVE' AND lc_to_stage ='REQUEST_CANCEL' THEN -- Transition L2_To_CAN - Level 2 Approval --> Cancel

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L2_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'CAN_QST');  

            END IF;
                                  
            IF lc_to_stage = 'PUBLISH' THEN  -- This Block is written for Sending the Assignments
                
                ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/status/text()','3');    
                
                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                    pn_error_sequence    => xn_error_seq,
                                    pc_error_type        => 'I',
                                    pc_error_text        => 'INSIDE PUBLISH');   
                                    ms_qsm_log_activity ('', 'inside publish ~','' );
                                    
                IF TRIM(non_multirow_rec.survey_scope_selection) = '1' THEN  -- Select from a Filtered List (Better for Large Surveys)
                            
                    lc_send_user_role := non_multirow_rec.send_user_role;
                            
                    IF non_multirow_rec.que_applies_to = '10' THEN -- Organizations
                                

                        lc_org := non_multirow_rec.fltr_org_level;
                                
                    ELSE   -- Other than Organizations
                                
                         lc_org := non_multirow_rec.fltr_owner_org;
                                    
                     END IF;   
                             
                   lv_applies_to_object := lc_org; -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown
                                
                ELSIF TRIM(non_multirow_rec.survey_scope_selection) = '2' THEN  -- Select One or More Individual Items       
                            
                    lc_send_user_role := non_multirow_rec.send_to_assessor;
                    lc_org :=non_multirow_rec.send_to_assessor_org;
                            
                    SELECT WM_CONCAT(indv_item_field_1)
                    INTO lv_applies_to_object
                    FROM XMLTABLE(xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:ind/msa:row'
                    PASSING  (XMLTYPE(lt_in_data_orig))
                    COLUMNS indv_item_field_1 PATH 'msa:indv_item_field_1');
                            
                END IF;     -- Select from a Filtered List 
                                   
                                               
                MS_QSM_UTILITIES.insert_schedule_logs(i_request_id => l_que_request_id
                                                                            ,i_respondents =>lc_send_user_role
                                                                            ,i_log_level => 'H'
                                                                            ,i_process_instance_id =>non_multirow_rec.process_instance_id
                                                                            ,i_questionnaire_id =>non_multirow_rec.questionnaire_id
                                                                            ,i_sch_frequency=>non_multirow_rec.sch_frequency
                                                                            ,o_error_code=>l_error_code
                                                                            ,o_error_message=>l_error_message);
                        
                IF TRIM(non_multirow_rec.sch_frequency) = '6' THEN                     -- Run Now -- Need to send Assignments if the System Parameter is configured
                    
                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'I',
                    pc_error_text        => 'INSIDE RUN NOW');   
                    ms_qsm_log_activity ('', 'inside run now ~','');
                                                            
                    SELECT metric_id 
                    INTO ln_response_metric_id
                    from SI_METRICS_T
                    WHERE METRIC_NAME = MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM');
                    
                    SELECT WM_CONCAT(QST_ID_PK)
                    INTO lc_all_questions_id
                    FROM MS_QSM_QUESTION A,MS_QSM_SECTION B
                    WHERE A.QST_SECTION_FK=B.SECTION_ID_PK
                    AND B.SECTION_QUESTNR_FK = TRIM(non_multirow_rec.questionnaire_id)
                    AND QST_SECTION_FK IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (non_multirow_rec.sections ,',')));
                                        
                    SELECT OBJECT_NAME  
                    INTO lv_applies_to_name
                    FROM MS_QSM_APPLIES_TO
                    WHERE OBJECT_ID = non_multirow_rec.que_applies_to;
                    
                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'I',
                    pc_error_text        => 'PARAMS'||lc_org||';'||lc_send_user_role||';'||ln_response_metric_id);   
                    
                    ms_qsm_log_activity ('', 'Final XML~', lt_out_data);
                       
                    ms_qsm_utilities.get_multirow_template (p_multirow => lx_response_xml_template, p_metric_id => ln_response_metric_id, p_full_blown => 'Y');
                    
                    lx_response_xml := lx_response_xml_template;
                                       
                    -- Updating XML withe Data to be displayed in Response from
                    
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','que_request_id'),l_que_request_id);
                    ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','instructions'),non_multirow_rec.instructions);
                    ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','instructions_htm'),non_multirow_rec.instructions_htm);
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','questionnaire_id'),non_multirow_rec.questionnaire_id);
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','tmep_que_type'),non_multirow_rec.que_request_type);                    
                    ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','resp_all_section_ids'),non_multirow_rec.sections);
                    ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','resp_all_question_ids'),lc_all_questions_id);
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to_object'),lv_applies_to_object);
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','response_approver'),non_multirow_rec.response_approver);
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','due_date'),TO_CHAR(TRUNC(TO_DATE(non_multirow_rec.sch_start_date,'MM/DD/YYYY HH24:MI:SS') + non_multirow_rec.sch_due_after),'MM/DD/YYYY HH:MI:SS')) ;
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','que_request_name'),non_multirow_rec.que_request_name) ;
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','dd_object_type'),MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM'));  
    --                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','dd_current_user_name'),)  
    --                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','dd_event_user_name'),)
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','dd_enterprise_info'),non_multirow_rec.dd_enterprise_info);
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','previous_stage'), 'RESPONSE');
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'dd_current_stage'),'RESPONSE');
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'submit_action'),'SELF');
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'dd_process_code'),'MS_QSM_RESPONSE_WORKFLOW');
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'instance_rec_num'),'1');
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'metric_id'),ln_response_metric_id);
    --                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'metric_run_date'),)
    --                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'metric_completed_date'),)
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'latest_flag'),'Y');
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'created_by') ,non_multirow_rec.created_by);         
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'creation_date'),TO_CHAR(SYSDATE,'MM/DD/YYYY HH:MM:SS'));
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','resp_status'),'4');       
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','process_flow_status'),'4') ;           
    
                    SELECT ENTERPRISE_ID
                    INTO ln_enterprise_id
                    FROM SI_ENT     
                    WHERE ENTERPRISE_NAME = non_multirow_rec.dd_enterprise_info;
                    
                    IF NVL(TRIM(non_multirow_rec.send_option),'2')='2' THEN -- Send Seperate Copy
                                    
                        IF non_multirow_rec.que_send_to = '4' THEN -- que_send_to => 1 - All Control Owners , 2- All Process Owners , 3- Roles , 4 - Users
                            
                            FOR user_rec IN (SELECT COLUMN_VALUE
                                                         FROM 
                                                         TABLE(MS_APPS_UTILITIES.SPLIT_STRING(lc_send_user_role,',')))
                            LOOP
                                
                                l_sch_det_status :='S';
                                
                                ln_response_pid := si_process_instance_id_s.NEXTVAL;
                                ln_response_iid := si_metric_results_s.NEXTVAL;
                                
                                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','que_response_id'),ms_qsm_que_response_id_s.NEXTVAL);
                                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','respondent'),user_rec.COLUMN_VALUE);    
                                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'instance_id'),ln_response_iid);
                                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'process_instance_id'),ln_response_pid);       
                                
                                ms_qsm_log_activity ('', 'RESPONSE XML~', lx_response_xml.getclobval());
                            
                                l_error_message:=ms_apps_mdf_infoletoutput_pkg.insert_xml(MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM')||'_V',
                                                                                                    ln_response_metric_id,
                                                                                                    ln_response_pid,
                                                                                                    ln_response_iid,
                                                                                                    lx_response_xml.getclobval());
                                                                                                                            
                                IF l_error_message != 'SUCCESS' OR l_error_message IS NULL THEN
                                    
                                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                    pn_error_sequence    => xn_error_seq,
                                    pc_error_type        => 'E',
                                    pc_error_text        => 'Error While Inserting XML into Response View in the ms_QSM_INIQSM_INIQSM_PROD ' || DBMS_UTILITY.format_error_backtrace || '~' || l_error_message); 

                                END IF;
                                                        
                                ms_apps_mdf_engine_pkg.start_flow(pn_pid => ln_response_pid
                                                                                      ,pc_flow_code=>'MS_QSM_RESPONSE_WORKFLOW'
                                                                                      ,pc_metric_name=>MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM')
                                                                                      ,xn_error_handle_id =>xn_error_handle_id
                                                                                      ,xn_error_code=>xn_error_code);
                                                                                      
                                IF xn_error_code = '-1'  THEN
                                    l_sch_det_status := 'E';
                                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                    pn_error_sequence    => xn_error_seq,
                                    pc_error_type        => 'E',
                                    pc_error_text        => 'Error While Starting the Response Flow' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);   
                                END IF;                                                                                      
                                
                                MS_QSM_UTILITIES.insert_schedule_logs(i_request_id => l_que_request_id
                                                                                            ,i_respondents =>user_rec.COLUMN_VALUE
                                                                                            ,i_log_level => 'D'
                                                                                            ,i_status=> l_sch_det_status
                                                                                            ,o_error_code=>l_error_code
                                                                                            ,o_error_message=>l_error_message);

                                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                pn_error_sequence    => xn_error_seq,
                                pc_error_type        => 'E',
                                pc_error_text        => 'EVENT ASSIGNEMENT in the ms_QSM_INIQSM_INIQSM_PROD ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);   
                                
                            END LOOP;         
                            
                        ELSIF non_multirow_rec.que_send_to = '3' THEN
                            
                            FOR user_rec IN (SELECT DISTINCT USER_NAME
                                                            FROM MS_QSM_ORG_FLOW_V fdo
                                                            WHERE ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (lc_org ,',')))
                                                            AND role_id IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (lc_send_user_role ,',')))
                                                            AND ACTIVITY_NAME='QSM - Respond to Questionnaires')
                           
                            LOOP
                                l_sch_det_status:='S';
                                ln_response_pid := si_process_instance_id_s.NEXTVAL;
                                ln_response_iid := si_metric_results_s.NEXTVAL;
                                
                                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','que_response_id'),ms_qsm_que_response_id_s.NEXTVAL);
                                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','respondent'),user_rec.USER_NAME);    
                                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'instance_id'),ln_response_iid);
                                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'process_instance_id'),ln_response_pid);       
                                
                                ms_qsm_log_activity ('', 'RESPONSE XML~', lx_response_xml.getclobval());
                                
                                l_error_message:=ms_apps_mdf_infoletoutput_pkg.insert_xml(MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM')||'_V',
                                                                                                                            ln_response_metric_id,
                                                                                                                            ln_response_pid,
                                                                                                                            ln_response_iid,
                                                                                                                            lx_response_xml.getclobval());
                                                                                                                            
                                IF l_error_message != 'SUCCESS' OR l_error_message IS NULL THEN
                                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                    pn_error_sequence    => xn_error_seq,
                                    pc_error_type        => 'E',
                                    pc_error_text        => 'Error While Inserting XML into Response View in the ms_QSM_INIQSM_INIQSM_PROD ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);   
                                END IF;
                                
                                ms_apps_mdf_engine_pkg.start_flow(pn_pid => ln_response_pid
                                                      ,pc_flow_code=>'MS_QSM_RESPONSE_WORKFLOW'
                                                      ,pc_metric_name=>MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM')
                                                      ,xn_error_handle_id =>xn_error_handle_id
                                                      ,xn_error_code=>xn_error_code);
                                                                                      
                                IF xn_error_code = '-1'  THEN
                                    l_sch_det_status :='E';
                                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                    pn_error_sequence    => xn_error_seq,
                                    pc_error_type        => 'E',
                                    pc_error_text        => 'Error While Starting the Response Flow' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);   
                                END IF;    
                                
                                MS_QSM_UTILITIES.insert_schedule_logs(i_request_id => l_que_request_id
                                                            ,i_respondents =>user_rec.USER_NAME
                                                            ,i_log_level => 'D'
                                                            ,i_status=> l_sch_det_status
                                                            ,o_error_code=>l_error_code
                                                            ,o_error_message=>l_error_message);
                                
                                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                pn_error_sequence    => xn_error_seq,
                                pc_error_type        => 'I',
                                pc_error_text        => 'ASSIGNMENT SEND TO'||user_rec.USER_NAME);   
                                
                            END LOOP;                                                                        
                                       
                        END IF;

                    ELSIF TRIM(non_multirow_rec.send_option)='1' AND non_multirow_rec.que_send_to = '3' THEN -- Send Same Copy to user Roles
                        
                        ln_response_pid := si_process_instance_id_s.NEXTVAL;
                        ln_response_iid := si_metric_results_s.NEXTVAL;
                        
                        l_sch_det_status :='S';
                            
                        SELECT WM_CONCAT(USER_NAME)
                        INTO lc_respondents
                        FROM MS_QSM_ORG_FLOW_V fdo
                        WHERE ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (lc_org ,',')))
                        AND role_id IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (lc_send_user_role ,',')))
                        AND ACTIVITY_NAME='QSM - Respond to Questionnaires';      
                                                                        
                        ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','que_response_id'),ms_qsm_que_response_id_s.NEXTVAL);
                        ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','respondent'),lc_respondents);    
                        ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'instance_id'),ln_response_iid);
                        ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'process_instance_id'),ln_response_pid);       
                                                        
                        l_error_message:=ms_apps_mdf_infoletoutput_pkg.insert_xml(MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM')||'_V',
                                                                            ln_response_metric_id,
                                                                            ln_response_pid,
                                                                            ln_response_iid,
                                                                            lx_response_xml.getclobval());
                                                                                                                                                    
                        IF l_error_message != 'SUCCESS' OR l_error_message IS NULL THEN
                        ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                        pn_error_sequence    => xn_error_seq,
                        pc_error_type        => 'E',
                        pc_error_text        => 'Error While Inserting XML into Response View in the ms_QSM_INIQSM_INIQSM_PROD ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);   
                        END IF;
                       
                        ms_apps_mdf_engine_pkg.start_flow(pn_pid => ln_response_pid
                                                          ,pc_flow_code=>'MS_QSM_RESPONSE_WORKFLOW'
                                                          ,pc_metric_name=>MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM')
                                                          ,xn_error_handle_id =>xn_error_handle_id
                                                          ,xn_error_code=>xn_error_code);
                                                                                      
                        IF xn_error_code = '-1'  THEN
                            l_sch_det_status:='E';
                            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                            pn_error_sequence    => xn_error_seq,
                            pc_error_type        => 'E',
                            pc_error_text        => 'Error While Starting the Response Flow' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);   
                        END IF;                               

                        MS_QSM_UTILITIES.insert_schedule_logs(i_request_id => l_que_request_id
                                                                                    ,i_respondents =>lc_respondents
                                                                                    ,i_log_level => 'D'
                                                                                    ,i_status=> l_sch_det_status
                                                                                    ,o_error_code=>l_error_code
                                                                                    ,o_error_message=>l_error_message);

                    END IF ;
                                                                   
                END IF;
                
            END IF;
            
            MS_QSM_UTILITIES.UPDATE_INOUT_DATA(l_out_xml,lt_in_data,lt_out_data);
            
            ms_qsm_log_activity ('', 'Final XML~', lt_out_data);
            
            ms_qsm_utilities.insert_comments (non_multirow_rec.process_instance_id,
                                                                non_multirow_rec.instance_id,
                                                                non_multirow_rec.metric_id,
                                                                non_multirow_rec.dd_current_user_name,
                                                                ms_apps_utilities.get_user_full_name (non_multirow_rec.dd_current_user_name),
                                                                'INITIATION_COMMENTS',
                                                                non_multirow_rec.init_comments,
                                                                l_error_code,
                                                                l_error_message);
            
        END LOOP;
        
    EXCEPTION
        WHEN OTHERS THEN
            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                     pn_error_sequence    => xn_error_seq,
                     pc_error_type        => 'E',
                     pc_error_text        => 'Fatal Error in the ms_QSM_INIQSM_INIQSM_PROD ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);                                                        
         
    END; 
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_INIQSM_INIQSM_PROD_BKP" (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN OUT CLOB,
                                                                       lt_out_data          IN OUT CLOB,
                                                                       pc_process_code      IN     VARCHAR2,
                                                                       lc_from_stage        IN     VARCHAR2,
                                                                       lc_to_stage          IN     VARCHAR2,
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
    AS
    
    l_out_xml                                                     XMLTYPE:=NULL;   
    lc_send_user_role                                          CLOB;
    lc_org                                                           CLOB;
    ln_response_metric_id                                    NUMBER;                                    
    ln_response_pid                                             NUMBER;
    ln_response_iid                                              NUMBER;
    lx_response_xml                                            XMLTYPE:=NULL;         
    lx_response_xml_template                              XMLTYPE:=NULL;           
    lv_applies_to_object                                       VARCHAR2(4000);
    ln_enterprise_id                                             NUMBER;
    ld_due_date                                                DATE;
    lv_assignment_text                                        VARCHAR2(4000);
    ln_priority                                                     NUMBER;
    l_que_request_id                                           VARCHAR2(255);
    
    lc_respondents                                              CLOB;
    
    lv_path                                                        VARCHAR2(100):='datapacket/data/nonmultirow/$/text()';
    lv_path_clob                                                 VARCHAR2(100):='datapacket/data/nonmultirow/$';                                                           
    l_error_code                                                NUMBER;
    l_error_message                                          VARCHAR2 (4000);
    lv_user_locale_id                                          NUMBER;
    l_sch_det_status                                           VARCHAR2(1);
    lc_all_questions_id                                        CLOB;
    lv_applies_to_name                                      VARCHAR2(500);
    
    lc_child_xml_clob                                          CLOB;
    
    lx_child_xml_template                                    XMLTYPE:=NULL;  
    lx_child_xml                                                  XMLTYPE:=NULL;
    ln_instance_rec_num                                     NUMBER:=0;
    
    lv_child_path                                                 VARCHAR2(100):='row/$/text()';
    
                                
    BEGIN
                        
        l_out_xml := xmltype (lt_in_data);
        
        IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0)  THEN
            ms_qsm_utilities.initialize_metric_maint ('QSM');
        END IF;
               
         FOR non_multirow_rec IN (SELECT previous_stage,
                                                            instructions,
                                                            DBMS_XMLGEN.CONVERT(instructions_htm) instructions_htm,
                                                            sub_certification_for,
                                                            consdr_no_of_past_months,
                                                            level_1_approver,
                                                            level_2_approver,
                                                            restrict_access_to,
                                                            sch_req_id,
                                                            sch_frequency,
                                                            sch_start_date,
                                                            sch_due_after,
                                                            sch_end_by,
                                                            sch_next_date,
                                                            que_request_id,
                                                            que_request_name,
                                                            que_request_type,
                                                            dd_object_type,
                                                            dd_current_user_name,
                                                            dd_event_user_name,
                                                            dd_enterprise_info,
                                                            dd_current_stage,
                                                            dd_process_code,
                                                            questionnaire_id,
                                                            que_applies_to,
                                                            survey_scope_selection,
                                                            fltr_owner_org,
                                                            fltr_org_level,
                                                            init_comments,
                                                            status,
                                                            sections,
                                                            que_action,
                                                            que_send_to,
                                                            send_option,
                                                            send_user_role,
                                                            send_to_assessor_org,
                                                            send_to_assessor,
                                                            response_approver,
                                                            collaborative_response,
                                                            instance_rec_num,
                                                            instance_id,
                                                            metric_id,
                                                            metric_run_date,
                                                            metric_completed_date,
                                                            latest_flag,
                                                            created_by,
                                                            creation_date,
                                                            process_flow_status,
                                                            process_instance_id
                                    FROM XMLTABLE (
                                    xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:nonmultirow'
                                    PASSING xmltype (lt_in_data_orig)
                                    COLUMNS          previous_stage VARCHAR2(10) PATH 'msa:previous_stage',
                                                            instructions CLOB   PATH 'msa:instructions',
                                                            instructions_htm CLOB PATH 'msa:instructions_htm',
                                                            sub_certification_for VARCHAR2(255)  PATH 'msa:sub_certification_for',
                                                            consdr_no_of_past_months NUMBER(10)  PATH 'msa:consdr_no_of_past_months',
                                                            level_1_approver VARCHAR2(100)  PATH 'msa:level_1_approver',
                                                            level_2_approver VARCHAR2(100)  PATH 'msa:level_2_approver',
                                                            restrict_access_to VARCHAR2(100)  PATH 'msa:restrict_access_to',
                                                            sch_req_id VARCHAR2(100)  PATH 'msa:sch_req_id',
                                                            sch_frequency VARCHAR2(255)  PATH 'msa:sch_frequency',
                                                            sch_start_date VARCHAR2(100)  PATH 'msa:sch_start_date',
                                                            sch_due_after NUMBER(10)  PATH 'msa:sch_due_after',
                                                            sch_end_by VARCHAR2(100)  PATH 'msa:sch_end_by',
                                                            sch_next_date VARCHAR2(100)  PATH 'msa:sch_next_date',
                                                            que_request_id VARCHAR2(100)  PATH 'msa:que_request_id',
                                                            que_request_name VARCHAR2(255)  PATH 'msa:que_request_name',
                                                            que_request_type VARCHAR2(100)  PATH 'msa:que_request_type',
                                                            dd_object_type VARCHAR2(100)  PATH 'msa:dd_object_type',
                                                            dd_current_user_name VARCHAR2(100)  PATH 'msa:dd_current_user_name',
                                                            dd_event_user_name VARCHAR2(100)  PATH 'msa:dd_event_user_name',
                                                            dd_enterprise_info  VARCHAR2(100) PATH 'msa:dd_enterprise_info',
                                                            dd_current_stage VARCHAR2(10)  PATH 'msa:dd_current_stage',
                                                            dd_process_code VARCHAR2(255)  PATH 'msa:dd_process_code',
                                                            questionnaire_id VARCHAR2(255)  PATH 'msa:questionnaire_id',
                                                            que_applies_to VARCHAR2(255)  PATH 'msa:que_applies_to',
                                                            survey_scope_selection VARCHAR2(255)  PATH 'msa:survey_scope_selection',
                                                            fltr_owner_org  CLOB    PATH 'msa:fltr_owner_org',
                                                            fltr_org_level  CLOB    PATH    'msa:fltr_org_level',
                                                            init_comments   VARCHAR2(4000) PATH 'msa:init_comments',
                                                            sections            CLOB   PATH 'msa:sections',
                                                            status  VARCHAR2(255) PATH 'msa:status',
                                                            que_action  VARCHAR2(100) PATH 'msa:que_action',
                                                            que_send_to VARCHAR2(255)  PATH 'msa:que_send_to',
                                                            send_option VARCHAR2(10)  PATH 'msa:send_option',
                                                            send_user_role  CLOB    PATH 'msa:send_user_role',
                                                            send_to_assessor_org    CLOB    PATH 'msa:send_to_assessor_org',
                                                            send_to_assessor    CLOB PATH 'msa:send_to_assessor',
                                                            response_approver VARCHAR2(255)  PATH 'msa:response_approver',
                                                            collaborative_response VARCHAR2(10)  PATH 'msa:collaborative_response',
                                                            instance_rec_num NUMBER(10)  PATH 'msa:instance_rec_num',
                                                            instance_id NUMBER(10)  PATH 'msa:instance_id',
                                                            metric_id NUMBER(10)  PATH 'msa:metric_id',
                                                            metric_run_date VARCHAR2(100)  PATH 'msa:metric_run_date',
                                                            metric_completed_date VARCHAR2(100)  PATH 'msa:metric_completed_date',
                                                            latest_flag VARCHAR2(255)  PATH 'msa:latest_flag',
                                                            created_by VARCHAR2(255)  PATH 'msa:created_by',
                                                            creation_date VARCHAR2(100)  PATH 'msa:creation_date',
                                                            process_flow_status VARCHAR2(255)  PATH 'msa:process_flow_status',
                                                            process_instance_id NUMBER(10)  PATH 'msa:process_instance_id' ))
        LOOP
                
            SELECT B.LOCALE_ID
            INTO lv_user_locale_id
            FROM SI_USERS_T a,SI_LOCALES b
            WHERE a.USER_NAME = non_multirow_rec.dd_current_user_name
            AND A.LOCALE = B.LOCALE_STRING;

            l_que_request_id := non_multirow_rec.que_request_id;            
           
            IF TRIM (non_multirow_rec.que_request_id) = 'INIT'  OR non_multirow_rec.que_request_id IS NULL THEN
                
                l_que_request_id := MS_APPS_UTILITIES.GET_DISPLAY_VALUE(i_lov_name=>'MS_QSM_Init_Questionnaire_Type',i_stored_value=>non_multirow_rec.que_request_type,i_locale_id=>lv_user_locale_id,i_enterprise_name=>non_multirow_rec.dd_enterprise_info)  
                ||'-'||ms_qsm_que_request_id_s.NEXTVAL;
                
                ms_qsm_utilities.update_xml(l_out_xml, REPLACE(lv_path,'$','que_request_id'),l_que_request_id);
                ms_qsm_utilities.update_xml(l_out_xml, REPLACE(lv_path,'$','sch_req_id'),l_que_request_id);
                
            END IF;
            
            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/status/text()',ms_qsm_utilities.get_status (non_multirow_rec.dd_current_stage, non_multirow_rec.previous_stage, non_multirow_rec.que_action));
            
            IF lc_from_stage = 'CREATE_EDIT' AND lc_to_stage ='L1_APPROVE' THEN -- Transition INI_To_L1 Create/Edit Questionnaire --> Level 1 Approval
                
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'CR_ED_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'L1_APP');
                      
            ELSIF  lc_from_stage = 'CREATE_EDIT' AND lc_to_stage ='OBJECT_EDITORS' THEN -- Transition INI_To_OWN Create/Edit Questionnaire --> Owners

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'CR_ED_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'OWN_QST');
                                           
            ELSIF  lc_from_stage = 'CREATE_EDIT' AND lc_to_stage ='PUBLISH' THEN -- Transition INI_To_PUB Create/Edit Questionnaire --> Publish Questionnaire

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'CR_ED_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'PUB_QST');
                                            
            ELSIF  lc_from_stage = 'OBJECT_EDITORS' AND lc_to_stage ='CREATE_EDIT' THEN -- Transition OWN_To_INI Owners --> Create Questionnaire (Request for Clarification)

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'OWN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'CR_ED_QST');
                      
            ELSIF  lc_from_stage = 'OBJECT_EDITORS' AND lc_to_stage ='L1_APPROVE' THEN -- Transition OWN_To_L1 Owners --> Level 1 Approver (Request for Approval)

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'OWN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'L1_APP');
                      
            ELSIF  lc_from_stage = 'OBJECT_EDITORS' AND lc_to_stage ='PUBLISH' THEN -- Transition OWN_To_PUB Owners --> Publish 

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'OWN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'PUB_QST');                      
                     
            ELSIF  lc_from_stage = 'OBJECT_EDITORS' AND lc_to_stage ='REQUEST_CANCEL' THEN -- Transition OWN_To_CAN Owners --> Cancel 

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'OWN_QST');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'CAN_QST');                           
                                            
            ELSIF  lc_from_stage = 'L1_APPROVE' AND lc_to_stage ='L2_APPROVE' THEN -- Transition L1_To_L2 - Level 1 Approval --> Level 2 Approval 

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L1_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'L2_APP');                       
                      
            ELSIF  lc_from_stage = 'L1_APPROVE' AND lc_to_stage ='OBJECT_EDITORS' THEN -- Transition L1_To_OWN - Level 1 Approval --> Owners (Request for Clarification 

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L1_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'OWN_QST');                              
                      
            ELSIF  lc_from_stage = 'L1_APPROVE' AND lc_to_stage ='PUBLISH' THEN -- Transition L1_To_PUB - Level 1 Approval --> Publish

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L1_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'PUB_QST');       
                      
            ELSIF  lc_from_stage = 'L1_APPROVE' AND lc_to_stage ='REQUEST_CANCEL' THEN -- Transition L1_To_CAN - Level 1 Approval --> Cancel

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L1_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'CAN_QST');  
                                                                  
            ELSIF  lc_from_stage = 'L2_APPROVE' AND lc_to_stage ='OBJECT_EDITORS' THEN -- Transition L2_To_OWN - Level 2 Approval --> Owners (Request for Clarification 

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L2_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'OWN_QST');    
                      
            ELSIF  lc_from_stage = 'L2_APPROVE' AND lc_to_stage ='PUBLISH' THEN -- Transition L2_To_PUB - Level 2 Approval --> Publish

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L2_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'PUB_QST');       
                      
            ELSIF  lc_from_stage = 'L2_APPROVE' AND lc_to_stage ='REQUEST_CANCEL' THEN -- Transition L2_To_CAN - Level 2 Approval --> Cancel

                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','previous_stage'), 'L2_APP');
                      ms_qsm_utilities.update_xml (l_out_xml,REPLACE(lv_path,'$','dd_current_stage'), 'CAN_QST');  

            END IF;
                                  
            IF lc_to_stage = 'PUBLISH' THEN  -- This Block is written for Sending the Assignments
                
                ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/status/text()','3');    
                
                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                    pn_error_sequence    => xn_error_seq,
                                    pc_error_type        => 'I',
                                    pc_error_text        => 'INSIDE PUBLISH');   
                                    ms_qsm_log_activity ('', 'inside publish ~','' );
                                    
                IF TRIM(non_multirow_rec.survey_scope_selection) = '1' THEN  -- Select from a Filtered List (Better for Large Surveys)
                            
                    lc_send_user_role := non_multirow_rec.send_user_role;
                            
                    IF non_multirow_rec.que_applies_to = '10' THEN -- Organizations
                                

                        lc_org := non_multirow_rec.fltr_org_level;
                                
                    ELSE   -- Other than Organizations
                                
                         lc_org := non_multirow_rec.fltr_owner_org;
                                    
                     END IF;   
                             
                   lv_applies_to_object := lc_org; -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown
                                
                ELSIF TRIM(non_multirow_rec.survey_scope_selection) = '2' THEN  -- Select One or More Individual Items       
                            
                    lc_send_user_role := non_multirow_rec.send_to_assessor;
                    lc_org :=non_multirow_rec.send_to_assessor_org;
                            
                    SELECT WM_CONCAT(indv_item_field_1)
                    INTO lv_applies_to_object
                    FROM XMLTABLE(xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:ind/msa:row'
                    PASSING  (XMLTYPE(lt_in_data_orig))
                    COLUMNS indv_item_field_1 PATH 'msa:indv_item_field_1');
                            
                END IF;     -- Select from a Filtered List 
                                   
                                               
                MS_QSM_UTILITIES.insert_schedule_logs(i_request_id => l_que_request_id
                                                                            ,i_respondents =>lc_send_user_role
                                                                            ,i_log_level => 'H'
                                                                            ,i_process_instance_id =>non_multirow_rec.process_instance_id
                                                                            ,i_questionnaire_id =>non_multirow_rec.questionnaire_id
                                                                            ,i_sch_frequency=>non_multirow_rec.sch_frequency
                                                                            ,o_error_code=>l_error_code
                                                                            ,o_error_message=>l_error_message);
                        
                IF TRIM(non_multirow_rec.sch_frequency) = '6' THEN                     -- Run Now -- Need to send Assignments if the System Parameter is configured
                    
                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'I',
                    pc_error_text        => 'INSIDE RUN NOW');   
                    ms_qsm_log_activity ('', 'inside run now ~','');
                                                            
                    SELECT metric_id 
                    INTO ln_response_metric_id
                    from SI_METRICS_T
                    WHERE METRIC_NAME = MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM');
                    
                    SELECT WM_CONCAT(QST_ID_PK)
                    INTO lc_all_questions_id
                    FROM MS_QSM_QUESTION A,MS_QSM_SECTION B
                    WHERE A.QST_SECTION_FK=B.SECTION_ID_PK
                    AND B.SECTION_QUESTNR_FK = TRIM(non_multirow_rec.questionnaire_id)
                    AND QST_SECTION_FK IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (non_multirow_rec.sections ,',')));
                                        
                    SELECT OBJECT_NAME  
                    INTO lv_applies_to_name
                    FROM MS_QSM_APPLIES_TO
                    WHERE OBJECT_ID = non_multirow_rec.que_applies_to;
                    
                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'I',
                    pc_error_text        => 'PARAMS'||lc_org||';'||lc_send_user_role||';'||ln_response_metric_id);   
                    
                    ms_qsm_log_activity ('', 'Final XML~', lt_out_data);
                       
                    ms_qsm_utilities.get_multirow_template (p_multirow => lx_response_xml_template, p_metric_id => ln_response_metric_id, p_full_blown => 'Y');
                    
                    lx_response_xml := lx_response_xml_template;
                                       
                    -- Updating XML withe Data to be displayed in Response from
                    
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','que_request_id'),l_que_request_id);
                    ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','instructions'),non_multirow_rec.instructions);
                    ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','instructions_htm'),non_multirow_rec.instructions_htm);
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','questionnaire_id'),non_multirow_rec.questionnaire_id);
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','tmep_que_type'),non_multirow_rec.que_request_type);                    
                    ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','resp_all_section_ids'),non_multirow_rec.sections);
                    ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','resp_all_question_ids'),lc_all_questions_id);
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to_object'),lv_applies_to_object);
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','response_approver'),non_multirow_rec.response_approver);
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','due_date'),TO_CHAR(TRUNC(TO_DATE(non_multirow_rec.sch_start_date,'MM/DD/YYYY HH24:MI:SS') + non_multirow_rec.sch_due_after),'MM/DD/YYYY HH:MI:SS')) ;
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','que_request_name'),non_multirow_rec.que_request_name) ;
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','dd_object_type'),MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM'));  
    --                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','dd_current_user_name'),)  
    --                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','dd_event_user_name'),)
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','dd_enterprise_info'),non_multirow_rec.dd_enterprise_info);
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','previous_stage'), 'RESPONSE');
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'dd_current_stage'),'RESPONSE');
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'submit_action'),'SELF');
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'dd_process_code'),'MS_QSM_RESPONSE_WORKFLOW');
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'instance_rec_num'),'1');
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'metric_id'),ln_response_metric_id);
    --                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'metric_run_date'),)
    --                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'metric_completed_date'),)
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'latest_flag'),'Y');
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'created_by') ,non_multirow_rec.created_by);         
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'creation_date'),TO_CHAR(SYSDATE,'MM/DD/YYYY HH:MM:SS'));
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','resp_status'),'4');       
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','process_flow_status'),'4') ;        
                       
                    ms_qsm_utilities.get_multirow_template (p_multirow => lx_child_xml_template, p_metric_id => ln_response_metric_id,p_region_name=>'sec', p_full_blown => 'N');
                                       
                    DBMS_LOB.APPEND (lc_child_xml_clob,'<msa:sec>');
                                                            
                    FOR sec_multirow_rec IN (SELECT *  FROM MS_QSM_SECTION WHERE SECTION_ID_PK IN (SELECT COLUMN_VALUE FROM TABLE(ms_apps_utilities.parse_string (non_multirow_rec.sections ,','))))
                    LOOP
                                                            
                        lx_child_xml := lx_child_xml_template;
--                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','sec_grade'),);
--                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','weighted_score'),);
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','section_weightage'),sec_multirow_rec.SECTION_WEIGHTAGE);                            
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','optional_section'),sec_multirow_rec.SECTION_OPTIONAL);
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','section_name'),sec_multirow_rec.SECTION_NAME);                        
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','section_fk'),sec_multirow_rec.SECTION_QUESTNR_FK);      
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','section_id'),sec_multirow_rec.SECTION_ID_PK);      
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','instance_rec_num'),ln_instance_rec_num+1);   
                        
                         DBMS_LOB.APPEND (lc_child_xml_clob,lx_child_xml.getclobval());
                                                                                                   
                    END LOOP;   
                    
                    ms_qsm_utilities.get_multirow_template (p_multirow => lx_child_xml_template, p_metric_id => ln_response_metric_id,p_region_name=>'qst', p_full_blown => 'N');
                                       
                    DBMS_LOB.APPEND (lc_child_xml_clob,'</msa:sec><msa:qst>');
                    
                    FOR qst_multirow_rec IN (SELECT *  FROM MS_QSM_QUESTION WHERE QST_ID_PK IN (SELECT COLUMN_VALUE FROM TABLE(ms_apps_utilities.parse_string (lc_all_questions_id ,','))))
                    LOOP
                        
                        lx_child_xml := lx_child_xml_template; 
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_name'),qst_multirow_rec.QST_NAME);   
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_type'),qst_multirow_rec.QST_TYPE);   
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','qst_parent_type'),qst_multirow_rec.QST_PARENT_TYPE);   
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_sec_id'),qst_multirow_rec.QST_SECTION_FK);   
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_fk'),qst_multirow_rec.QST_SECTION_FK);   
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_id'),qst_multirow_rec.QST_ID);   
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_pk'),qst_multirow_rec.QST_ID_PK);   
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','qst_weightage'),qst_multirow_rec.QST_WEIGHTAGE);   
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','response_type'),qst_multirow_rec.QST_RESPONSE_TYPE);     
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','resp_target'),qst_multirow_rec.QST_TARGET);                                                                                                                                                                                                                           
--                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','check_response'),); 
--                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','has_sub_questions'),); 
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_description'),qst_multirow_rec.QST_DESCRIPTION); 
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','instance_rec_num'),ln_instance_rec_num+1); 
                        
                         DBMS_LOB.APPEND (lc_child_xml_clob,lx_child_xml.getclobval());
                        
                    END LOOP;   
                    
                    ms_qsm_utilities.get_multirow_template (p_multirow => lx_child_xml_template, p_metric_id => ln_response_metric_id,p_region_name=>'grd', p_full_blown => 'N');
                    
                    DBMS_LOB.APPEND (lc_child_xml_clob,'</msa:qst><msa:grd>');
                    
                    FOR grd_multirow_rec IN (SELECT *  FROM MS_QSM_GRADE WHERE GRD_QUESTNR_FK = non_multirow_rec.questionnaire_id )
                    LOOP
                        
                        lx_child_xml := lx_child_xml_template; 
                        
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','grd_questnr_fk'),grd_multirow_rec.GRD_QUESTNR_FK);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','grd_value_2'),grd_multirow_rec.GRD_VALUE_2);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','grd_value_1'),grd_multirow_rec.GRD_VALUE_1);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','grd_grade'),grd_multirow_rec.GRD_GRADE);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','grd_scoring_pk'),grd_multirow_rec.GRD_SCORING_PK);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','grd_scoring_rule'),grd_multirow_rec.GRD_SCORING_RULE);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','instance_rec_num'),ln_instance_rec_num+1);  
                        
                         DBMS_LOB.APPEND (lc_child_xml_clob,lx_child_xml.getclobval()); 
                                                                   
                    END LOOP;   
                    
                    ms_qsm_utilities.get_multirow_template (p_multirow => lx_child_xml_template, p_metric_id => ln_response_metric_id,p_region_name=>'scr', p_full_blown => 'N');
                    
                    DBMS_LOB.APPEND (lc_child_xml_clob,'</msa:grd><msa:scr>');
                    
                    FOR scr_multirow_rec IN (SELECT *  FROM MS_QSM_SCORING WHERE SCR_QST_FK IN (SELECT COLUMN_VALUE FROM TABLE(ms_apps_utilities.parse_string (lc_all_questions_id ,','))))
                    LOOP
                        
                        lx_child_xml := lx_child_xml_template; 
                        
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_qst_fk'),scr_multirow_rec.SCR_QST_FK);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_id_pk'),scr_multirow_rec.SCR_ID_PK);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_score'),scr_multirow_rec.SCR_SCORE);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_grade'),scr_multirow_rec.SCR_GRADE);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_value_1_1'),scr_multirow_rec.SCR_VALUE_1_1);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_value_2'),scr_multirow_rec.SCR_VALUE_2);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_value_1'),scr_multirow_rec.SCR_VALUE_1);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_scoring_rule'),scr_multirow_rec.SCR_SCORING_RULE);  
                        ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','instance_rec_num'),ln_instance_rec_num+1);                  
                                
                         DBMS_LOB.APPEND (lc_child_xml_clob,lx_child_xml.getclobval()); 
                                                 
                    END LOOP;   
                    
                    DBMS_LOB.APPEND (lc_child_xml_clob,'</msa:scr>');    
                    
                    SELECT MS_QSM_UTILITIES.INSERT_XML(lx_response_xml,'datapacket/data',XMLTYPE(lc_child_xml_clob),'A')
                    INTO lx_response_xml
                    FROM DUAL;
                    
                    SELECT ENTERPRISE_ID
                    INTO ln_enterprise_id
                    FROM SI_ENT     
                    WHERE ENTERPRISE_NAME = non_multirow_rec.dd_enterprise_info;
                    
                    IF NVL(TRIM(non_multirow_rec.send_option),'2')='2' THEN -- Send Seperate Copy
                                    
                        IF non_multirow_rec.que_send_to = '4' THEN -- que_send_to => 1 - All Control Owners , 2- All Process Owners , 3- Roles , 4 - Users
                            
                            FOR user_rec IN (SELECT COLUMN_VALUE
                                                         FROM 
                                                         TABLE(MS_APPS_UTILITIES.SPLIT_STRING(lc_send_user_role,',')))
                            LOOP
                                
                                l_sch_det_status :='S';
                                
                                ln_response_pid := si_process_instance_id_s.NEXTVAL;
                                ln_response_iid := si_metric_results_s.NEXTVAL;
                                
                                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','que_response_id'),ms_qsm_que_response_id_s.NEXTVAL);
                                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','respondent'),user_rec.COLUMN_VALUE);    
                                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'instance_id'),ln_response_iid);
                                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'process_instance_id'),ln_response_pid);       
                                
                                ms_qsm_log_activity ('', 'RESPONSE XML~', lx_response_xml.getclobval());
                            
                                l_error_message:=ms_apps_mdf_infoletoutput_pkg.insert_xml(MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM')||'_V',
                                                                                                    ln_response_metric_id,
                                                                                                    ln_response_pid,
                                                                                                    ln_response_iid,
                                                                                                    lx_response_xml.getclobval());
                                                                                                                            
                                IF l_error_message != 'SUCCESS' OR l_error_message IS NULL THEN
                                    
                                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                    pn_error_sequence    => xn_error_seq,
                                    pc_error_type        => 'E',
                                    pc_error_text        => 'Error While Inserting XML into Response View in the ms_QSM_INIQSM_INIQSM_PROD ' || DBMS_UTILITY.format_error_backtrace || '~' || l_error_message); 

                                END IF;
                                                        
                                ms_apps_mdf_engine_pkg.start_flow(pn_pid => ln_response_pid
                                                                                      ,pc_flow_code=>'MS_QSM_RESPONSE_WORKFLOW'
                                                                                      ,pc_metric_name=>MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM')
                                                                                      ,xn_error_handle_id =>xn_error_handle_id
                                                                                      ,xn_error_code=>xn_error_code);
                                                                                      
                                IF xn_error_code = '-1'  THEN
                                    l_sch_det_status := 'E';
                                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                    pn_error_sequence    => xn_error_seq,
                                    pc_error_type        => 'E',
                                    pc_error_text        => 'Error While Starting the Response Flow' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);   
                                END IF;                                                                                      
                                
                                MS_QSM_UTILITIES.insert_schedule_logs(i_request_id => l_que_request_id
                                                                                            ,i_respondents =>user_rec.COLUMN_VALUE
                                                                                            ,i_log_level => 'D'
                                                                                            ,i_status=> l_sch_det_status
                                                                                            ,o_error_code=>l_error_code
                                                                                            ,o_error_message=>l_error_message);

                                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                pn_error_sequence    => xn_error_seq,
                                pc_error_type        => 'E',
                                pc_error_text        => 'EVENT ASSIGNEMENT in the ms_QSM_INIQSM_INIQSM_PROD ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);   
                                
                            END LOOP;         
                            
                        ELSIF non_multirow_rec.que_send_to = '3' THEN
                            
                            FOR user_rec IN (SELECT DISTINCT USER_NAME
                                                            FROM MS_QSM_ORG_FLOW_V fdo
                                                            WHERE ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (lc_org ,',')))
                                                            AND role_id IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (lc_send_user_role ,',')))
                                                            AND ACTIVITY_NAME='QSM - Respond to Questionnaires')
                           
                            LOOP
                                l_sch_det_status:='S';
                                ln_response_pid := si_process_instance_id_s.NEXTVAL;
                                ln_response_iid := si_metric_results_s.NEXTVAL;
                                
                                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','que_response_id'),ms_qsm_que_response_id_s.NEXTVAL);
                                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','respondent'),user_rec.USER_NAME);    
                                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'instance_id'),ln_response_iid);
                                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'process_instance_id'),ln_response_pid);       
                                
                                ms_qsm_log_activity ('', 'RESPONSE XML~', lx_response_xml.getclobval());
                                
                                l_error_message:=ms_apps_mdf_infoletoutput_pkg.insert_xml(MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM')||'_V',
                                                                                                                            ln_response_metric_id,
                                                                                                                            ln_response_pid,
                                                                                                                            ln_response_iid,
                                                                                                                            lx_response_xml.getclobval());
                                                                                                                            
                                IF l_error_message != 'SUCCESS' OR l_error_message IS NULL THEN
                                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                    pn_error_sequence    => xn_error_seq,
                                    pc_error_type        => 'E',
                                    pc_error_text        => 'Error While Inserting XML into Response View in the ms_QSM_INIQSM_INIQSM_PROD ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);   
                                END IF;
                                
                                ms_apps_mdf_engine_pkg.start_flow(pn_pid => ln_response_pid
                                                      ,pc_flow_code=>'MS_QSM_RESPONSE_WORKFLOW'
                                                      ,pc_metric_name=>MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM')
                                                      ,xn_error_handle_id =>xn_error_handle_id
                                                      ,xn_error_code=>xn_error_code);
                                                                                      
                                IF xn_error_code = '-1'  THEN
                                    l_sch_det_status :='E';
                                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                    pn_error_sequence    => xn_error_seq,
                                    pc_error_type        => 'E',
                                    pc_error_text        => 'Error While Starting the Response Flow' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);   
                                END IF;    
                                
                                MS_QSM_UTILITIES.insert_schedule_logs(i_request_id => l_que_request_id
                                                            ,i_respondents =>user_rec.USER_NAME
                                                            ,i_log_level => 'D'
                                                            ,i_status=> l_sch_det_status
                                                            ,o_error_code=>l_error_code
                                                            ,o_error_message=>l_error_message);
                                
                                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                pn_error_sequence    => xn_error_seq,
                                pc_error_type        => 'I',
                                pc_error_text        => 'ASSIGNMENT SEND TO'||user_rec.USER_NAME);   
                                
                            END LOOP;                                                                        
                                       
                        END IF;

                    ELSIF TRIM(non_multirow_rec.send_option)='1' AND non_multirow_rec.que_send_to = '3' THEN -- Send Same Copy to user Roles
                        
                        ln_response_pid := si_process_instance_id_s.NEXTVAL;
                        ln_response_iid := si_metric_results_s.NEXTVAL;
                        
                        l_sch_det_status :='S';
                            
                        SELECT WM_CONCAT(USER_NAME)
                        INTO lc_respondents
                        FROM MS_QSM_ORG_FLOW_V fdo
                        WHERE ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (lc_org ,',')))
                        AND role_id IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (lc_send_user_role ,',')))
                        AND ACTIVITY_NAME='QSM - Respond to Questionnaires';      
                                                                        
                        ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','que_response_id'),ms_qsm_que_response_id_s.NEXTVAL);
                        ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','respondent'),lc_respondents);    
                        ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'instance_id'),ln_response_iid);
                        ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'process_instance_id'),ln_response_pid);       
                                                        
                        l_error_message:=ms_apps_mdf_infoletoutput_pkg.insert_xml(MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM')||'_V',
                                                                            ln_response_metric_id,
                                                                            ln_response_pid,
                                                                            ln_response_iid,
                                                                            lx_response_xml.getclobval());
                                                                                                                                                    
                        IF l_error_message != 'SUCCESS' OR l_error_message IS NULL THEN
                        ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                        pn_error_sequence    => xn_error_seq,
                        pc_error_type        => 'E',
                        pc_error_text        => 'Error While Inserting XML into Response View in the ms_QSM_INIQSM_INIQSM_PROD ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);   
                        END IF;
                       
                        ms_apps_mdf_engine_pkg.start_flow(pn_pid => ln_response_pid
                                                          ,pc_flow_code=>'MS_QSM_RESPONSE_WORKFLOW'
                                                          ,pc_metric_name=>MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM')
                                                          ,xn_error_handle_id =>xn_error_handle_id
                                                          ,xn_error_code=>xn_error_code);
                                                                                      
                        IF xn_error_code = '-1'  THEN
                            l_sch_det_status:='E';
                            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                            pn_error_sequence    => xn_error_seq,
                            pc_error_type        => 'E',
                            pc_error_text        => 'Error While Starting the Response Flow' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);   
                        END IF;                               

                        MS_QSM_UTILITIES.insert_schedule_logs(i_request_id => l_que_request_id
                                                                                    ,i_respondents =>lc_respondents
                                                                                    ,i_log_level => 'D'
                                                                                    ,i_status=> l_sch_det_status
                                                                                    ,o_error_code=>l_error_code
                                                                                    ,o_error_message=>l_error_message);

                    END IF ;
                                                                   
                END IF;
                
            END IF;
            
            MS_QSM_UTILITIES.UPDATE_INOUT_DATA(l_out_xml,lt_in_data,lt_out_data);
            
            ms_qsm_log_activity ('', 'Final XML~', lt_out_data);
            
            ms_qsm_utilities.insert_comments (non_multirow_rec.process_instance_id,
                                                                non_multirow_rec.instance_id,
                                                                non_multirow_rec.metric_id,
                                                                non_multirow_rec.dd_current_user_name,
                                                                ms_apps_utilities.get_user_full_name (non_multirow_rec.dd_current_user_name),
                                                                'INITIATION_COMMENTS',
                                                                non_multirow_rec.init_comments,
                                                                l_error_code,
                                                                l_error_message);
            
        END LOOP;
        
    EXCEPTION
        WHEN OTHERS THEN
            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                     pn_error_sequence    => xn_error_seq,
                     pc_error_type        => 'E',
                     pc_error_text        => 'Fatal Error in the ms_QSM_INIQSM_INIQSM_PROD ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);                                                        
         
    END; 
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_INIQSM_POST_HOOK" (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN  CLOB,
                                                                       pc_process_code      IN     VARCHAR2,
                                                                       ln_orig_process_instance_id IN NUMBER,
                                                                       ln_process_instance_id  IN OUT NUMBER,                        
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
AS
 l_out_xml                                                     XMLTYPE:=NULL;
 l_error_code                                                NUMBER;
 l_error_message                                          VARCHAR2 (4000);
       
 BEGIN
--    l_out_xml:= XMLTYPE(lt_in_data);
    
--    IF lc_to_stage = 'PUBLISH' THEN

        
                   MS_QSM_REMINDER_EMAIL_PROC(
                                                                    O_ERROR_CODE => l_error_code,
                                                                    O_ERROR_MESSAGE => l_error_message
                                                                   );
 
    
--    END IF;
    
EXCEPTION
WHEN OTHERS THEN
           ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                     pn_error_sequence    => xn_error_seq,
                     pc_error_type        => 'E',
                     pc_error_text        => 'Fatal Error in the ms_QSM_INIQSM_POST_HOOK ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);                                                        
 END;
  
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_INITIATE_QUESTNR_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name  : MS_QSM_INITIATE_QUESTNR_P
    Creation Time : Wed Apr 22 07:03:36 PDT 2015
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_INITIATE_QUESTNR_P' ;
    GV_program_name VARCHAR2(100);
   
   
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id  IN                      NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id         IN                      VARCHAR2,
            iop_log_no              IN   OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY     CLOB,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2,
            iop_error_seq         IN     OUT                NUMBER,
            ip_pid                IN                        NUMBER
        );
   


END MS_QSM_INITIATE_QUESTNR_P ;

CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_INITIATE_QUESTNR_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Body.
    Author : Data Designer ETL Engine
   -------------------------------------------------------------------------- */
   
   
/* --------------------------------------------------------------------------------
    GENERATE_UPDATE_HIERARCHY : Procedure to get the update the xml data hierarchy
   ------------------------------------------------------------------------------ */

    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        );
        
    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        )
    AS
        LV_error_code               NUMBER;
        LV_error_message            VARCHAR2(1000);
        UPDATE_HIERARCHY_EXCEP      EXCEPTION;
        LV_xml                      XMLTYPE := iop_xml;
		LV_namespace                varchar2(100) := 'xmlns="http://www.metricstream.com/appstudio/msa"';
        lv_program_name             VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UPDATE_HIERARCHY';


/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
      
    	           	    SELECT DELETEXML(LV_XML,'datapacket/data/rmd/row/reminder_fk',LV_namespace) INTO LV_XML FROM DUAL;
	           
	FOR rec in (SELECT DISTINCT 
        	    	  	 que_request_id
        FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
      'msa:datapacket/msa:data/msa:nonmultirow'       PASSING LV_xml
    COLUMNS
            	 que_request_id  VARCHAR2(4000)    PATH  'msa:que_request_id'
       ))
   
   LOOP
               	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/rmd/row','reminder_fk',XMLTYPE('<reminder_fk ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.que_request_id||'</reminder_fk>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	    END LOOP;
           	    SELECT DELETEXML(LV_XML,'datapacket/data/ind/row/ind_fltr_owner_org',LV_namespace) INTO LV_XML FROM DUAL;
	              	    SELECT DELETEXML(LV_XML,'datapacket/data/ind/row/ind_applies_to_items',LV_namespace) INTO LV_XML FROM DUAL;
	              	    SELECT DELETEXML(LV_XML,'datapacket/data/ind/row/ind_fltr_org_level',LV_namespace) INTO LV_XML FROM DUAL;
	              	    SELECT DELETEXML(LV_XML,'datapacket/data/ind/row/ind_sections',LV_namespace) INTO LV_XML FROM DUAL;
	              	    SELECT DELETEXML(LV_XML,'datapacket/data/ind/row/ind_approver_organization',LV_namespace) INTO LV_XML FROM DUAL;
	              	    SELECT DELETEXML(LV_XML,'datapacket/data/ind/row/ind_overall_approver_org',LV_namespace) INTO LV_XML FROM DUAL;
	              	    SELECT DELETEXML(LV_XML,'datapacket/data/ind/row/ind_findings_can_add_by',LV_namespace) INTO LV_XML FROM DUAL;
	              	    SELECT DELETEXML(LV_XML,'datapacket/data/ind/row/ind_display_scoring',LV_namespace) INTO LV_XML FROM DUAL;
	              	    SELECT DELETEXML(LV_XML,'datapacket/data/ind/row/ind_owner_organizations',LV_namespace) INTO LV_XML FROM DUAL;
	              	    SELECT DELETEXML(LV_XML,'datapacket/data/ind/row/ind_owners',LV_namespace) INTO LV_XML FROM DUAL;
	              	    SELECT DELETEXML(LV_XML,'datapacket/data/ind/row/ind_que_request_id',LV_namespace) INTO LV_XML FROM DUAL;
	              	    SELECT DELETEXML(LV_XML,'datapacket/data/ind/row/ind_send_user_role',LV_namespace) INTO LV_XML FROM DUAL;
	           
	FOR rec in (SELECT DISTINCT 
        	    	  	 fltr_owner_org
        	    	  	 ,  applies_to_items
        	    	  	 ,  fltr_org_level
        	    	  	 ,  sections
        	    	  	 ,  approver_organization
        	    	  	 ,  overall_approver_org
        	    	  	 ,  findings_can_add_by
        	    	  	 ,  display_scoring
        	    	  	 ,  owner_organizations
        	    	  	 ,  owners
        	    	  	 ,  que_request_id
        	    	  	 ,  send_user_role
        FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
      'msa:datapacket/msa:data/msa:nonmultirow'       PASSING LV_xml
    COLUMNS
            	 fltr_owner_org  VARCHAR2(4000)    PATH  'msa:fltr_owner_org'
        	, applies_to_items  VARCHAR2(4000)    PATH  'msa:applies_to_items'
        	, fltr_org_level  VARCHAR2(4000)    PATH  'msa:fltr_org_level'
        	, sections  VARCHAR2(4000)    PATH  'msa:sections'
        	, approver_organization  VARCHAR2(4000)    PATH  'msa:approver_organization'
        	, overall_approver_org  VARCHAR2(4000)    PATH  'msa:overall_approver_org'
        	, findings_can_add_by  VARCHAR2(4000)    PATH  'msa:findings_can_add_by'
        	, display_scoring  VARCHAR2(4000)    PATH  'msa:display_scoring'
        	, owner_organizations  VARCHAR2(4000)    PATH  'msa:owner_organizations'
        	, owners  VARCHAR2(4000)    PATH  'msa:owners'
        	, que_request_id  VARCHAR2(4000)    PATH  'msa:que_request_id'
        	, send_user_role  VARCHAR2(4000)    PATH  'msa:send_user_role'
       ))
   
   LOOP
               	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/ind/row','ind_fltr_owner_org',XMLTYPE('<ind_fltr_owner_org ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.fltr_owner_org||'</ind_fltr_owner_org>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	           	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/ind/row','ind_applies_to_items',XMLTYPE('<ind_applies_to_items ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.applies_to_items||'</ind_applies_to_items>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	           	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/ind/row','ind_fltr_org_level',XMLTYPE('<ind_fltr_org_level ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.fltr_org_level||'</ind_fltr_org_level>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	           	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/ind/row','ind_sections',XMLTYPE('<ind_sections ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.sections||'</ind_sections>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	           	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/ind/row','ind_approver_organization',XMLTYPE('<ind_approver_organization ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.approver_organization||'</ind_approver_organization>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	           	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/ind/row','ind_overall_approver_org',XMLTYPE('<ind_overall_approver_org ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.overall_approver_org||'</ind_overall_approver_org>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	           	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/ind/row','ind_findings_can_add_by',XMLTYPE('<ind_findings_can_add_by ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.findings_can_add_by||'</ind_findings_can_add_by>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	           	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/ind/row','ind_display_scoring',XMLTYPE('<ind_display_scoring ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.display_scoring||'</ind_display_scoring>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	           	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/ind/row','ind_owner_organizations',XMLTYPE('<ind_owner_organizations ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.owner_organizations||'</ind_owner_organizations>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	           	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/ind/row','ind_owners',XMLTYPE('<ind_owners ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.owners||'</ind_owners>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	           	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/ind/row','ind_que_request_id',XMLTYPE('<ind_que_request_id ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.que_request_id||'</ind_que_request_id>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	           	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/ind/row','ind_send_user_role',XMLTYPE('<ind_send_user_role ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.send_user_role||'</ind_send_user_role>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	    END LOOP;
	iop_xml := LV_xml;
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_pid);
    EXCEPTION
        WHEN UPDATE_HIERARCHY_EXCEP THEN

            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE_HIERARCHY_EXCEP Exception Raised ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO  MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
			MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UPDATE_HIERARCHY;
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
        LV_error_code NUMBER;
        LV_error_message VARCHAR2(1000);
        NEXT_ID_GEN_EXCEPTION EXCEPTION;
        lv_program_name VARCHAR2(100);
        ln_error_seq NUMBER:=1;

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'GET_NEXT_ID';

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;

    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_process_instance_id);
      
             
 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_process_instance_id);
    EXCEPTION
        WHEN NEXT_ID_GEN_EXCEPTION THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] NEXT_ID_GEN_EXCEPTION Exception Raised ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] WHEN OTHERS ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END GET_NEXT_ID;
	 

  	    	   	    	 
  	    	 
  	    	              
/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY         CLOB,
            iop_log_no            IN     OUT                    NUMBER,
            op_error_code                OUT                    NUMBER,
            op_error_message             OUT                    VARCHAR2,
            iop_error_seq         IN     OUT                    NUMBER,
            ip_pid                IN                            NUMBER

        )
    AS

/* --------------------------------------------------------------------------
     ETL procedure created by the ETL Engine of APP BUILDER.
     The procedure takes care of loading the data that is sent
     by the FLOW BUILDER and store the same in MS TABLES.
     Data is already processed and stored accordingly in the iop_data
     object structure. The object can have one or more records.
     The ETL is designed to take care of one or more records.
     If the data has to be manipulated before populating the main
     MS TABLES, please use the HOOKS that are generated by the
     FLOW BUILDER.
   -------------------------------------------------------------------------- */
        LV_progress VARCHAR2(3) := NULL;
        LV_cntr_1   NUMBER      := NULL;
        LV_cntr_2   NUMBER      := NULL;
        LV_debug    BOOLEAN     := FALSE;
        LV_XML      XMLTYPE     := XMLTYPE(iop_xml_data);
        LV_err_code NUMBER      := NULL;
        LV_err_msg  VARCHAR2(4000);
        lV_program_name VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
              AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
      
    /************* Add the cursors for all the regions ******************/
      
        				
		CURSOR CU_QSM_INIT_QUESTNR_IND is (SELECT 
				   	   			   	    	  IND_QUE_REQUEST_ID
		   	   		   			   	   			   	    	,  INDV_COLLBORTIV_RESP
		   	   		   			   	   			   	    	,  INDV_ITEM_FIELD_3
		   	   		   			   	   			   	    	,  ITEM_RELTD_COLLABORATOR
		   	   		   			   	   			   	    	,  INDV_ITEM_FIELD_2
		   	   		   			   	   			   	    	,  INDV_ALL_USER_APPROVAL
		   	   		   			   	   			   	    	,  INDV_RESP_APPROVER_DISP
		   	   		   			   	   			   	    	,  ITEM_RELTD_RESPONDENT
		   	   		   			   	   			   	    	,  INDV_SEND_TO_APPROVAL
		   	   		   			   	   			   	    	,  INDV_QUE_SEND_TO
		   	   		   			   	   			   	    	,  INDV_RESP_APPROVER
		   	   		   			   	   			   	    	,  INDV_ITEM_FIELD_1
		   	   		   			   	   			   	    	,  SEND_TO_ASSESSOR_DISP
		   	   		   			   	   			   	    	,  INDV_SEND_OPTION
		   	   		   			   	   			   	    	,  INDV_ITEM_PK
		   	   		   			   	   			   	    	,  INDV_APPR_BASED_ON_RESPONSE
		   	   		   			   	   			   	    	,  SEND_TO_ASSESSOR
		   	   		   			   	   			   	    	,  SEND_TO_ASSESSOR_ORG
		   	   		   			   	   			   	    	,  INDV_APPROVER_ORGANIZATION
		   	   		   	 		FROM XMLTABLE(XMLNAMESPACES( 'http://www.metricstream.com/appstudio/msa'  as "msa"),'msa:datapacket/msa:data/msa:ind/msa:row'
		PASSING LV_xml
		COLUMNS
	    	    	   			  IND_QUE_REQUEST_ID  VARCHAR2(4000)   PATH 'msa:ind_que_request_id' 	    	   			,  INDV_COLLBORTIV_RESP  VARCHAR2(4000)   PATH 'msa:indv_collbortiv_resp' 	    	   			,  INDV_ITEM_FIELD_3  VARCHAR2(4000)   PATH 'msa:indv_item_field_3' 	    	   			,  ITEM_RELTD_COLLABORATOR  VARCHAR2(4000)   PATH 'msa:item_reltd_collaborator' 	    	   			,  INDV_ITEM_FIELD_2  VARCHAR2(4000)   PATH 'msa:indv_item_field_2' 	    	   			,  INDV_ALL_USER_APPROVAL  VARCHAR2(4000)   PATH 'msa:indv_all_user_approval' 	    	   			,  INDV_RESP_APPROVER_DISP  VARCHAR2(4000)   PATH 'msa:indv_resp_approver_disp' 	    	   			,  ITEM_RELTD_RESPONDENT  VARCHAR2(4000)   PATH 'msa:item_reltd_respondent' 	    	   			,  INDV_SEND_TO_APPROVAL  VARCHAR2(4000)   PATH 'msa:indv_send_to_approval' 	    	   			,  INDV_QUE_SEND_TO  VARCHAR2(4000)   PATH 'msa:indv_que_send_to' 	    	   			,  INDV_RESP_APPROVER  VARCHAR2(4000)   PATH 'msa:indv_resp_approver' 	    	   			,  INDV_ITEM_FIELD_1  VARCHAR2(4000)   PATH 'msa:indv_item_field_1' 	    	   			,  SEND_TO_ASSESSOR_DISP  VARCHAR2(4000)   PATH 'msa:send_to_assessor_disp' 	    	   			,  INDV_SEND_OPTION  VARCHAR2(4000)   PATH 'msa:indv_send_option' 	    	   			,  INDV_ITEM_PK  VARCHAR2(4000)   PATH 'msa:indv_item_pk' 	    	   			,  INDV_APPR_BASED_ON_RESPONSE  VARCHAR2(4000)   PATH 'msa:indv_appr_based_on_response' 	    	   			,  SEND_TO_ASSESSOR  VARCHAR2(4000)   PATH 'msa:send_to_assessor' 	    	   			,  SEND_TO_ASSESSOR_ORG  VARCHAR2(4000)   PATH 'msa:send_to_assessor_org' 	    	   			,  INDV_APPROVER_ORGANIZATION  VARCHAR2(4000)   PATH 'msa:indv_approver_organization' 	    			));	  
		TYPE LT_QSM_INIT_QUESTNR_IND IS TABLE OF CU_QSM_INIT_QUESTNR_IND%ROWTYPE;
		TY_QSM_INIT_QUESTNR_IND  LT_QSM_INIT_QUESTNR_IND; 
		
		        
   /************* End of cursors for all the regions ******************/
    
   /************ Add the cursors for all object relationships *****************************/
    	  		  			   CURSOR CU_QSM_REMINDER_EMAIL is (SELECT 
			   			   
		   	   			   	   				   	   		 REMINDER_NO_OF_DAYS
			   	   				   			   	   				   	   		,  IS_ACTIVE
			   	   				   			   	   				   	   		,  REMINDER_TEXT
			   	   				   			   	   				   	   		,  REMINDER_SUBJECT
			   	   				   			   	   				   	   		,  ADD_USER_RELATED_TO_ITEM
			   	   				   			   	   				   	   		,  REMINDER_TYPE
			   	   				   			   	   				   	   		,  EMAIL_SEND_TO_USERS
			   	   				   			   	   				   	   		,  CC_FOR_EMAIL
			   	   				   			   	   				   	   		,  REMINDER_FK
			   	   				   			   	   				   	   		,  REMINDER_SENT
			   	   				   			   	   				   	   		,  REMINDER_SEND_TO
			   	   				   			   	   				   	   		,  EMAIL_SEND_TO_USERS_STORED
			   	   				   			   	   				   	   		,  REMINDER_ID_PK
			   	   				   			   	   				   	   		,  TO_DATE(REMINDER_LAST_SEND_DATE ,'MM/dd/yyyy HH24:mi:ss') AS REMINDER_LAST_SEND_DATE
			   	   				   			   	   				   	   		,  TO_DATE(REMINDER_NEXT_SEND_DATE ,'MM/dd/yyyy HH24:mi:ss') AS REMINDER_NEXT_SEND_DATE
			   	   				   			   FROM XMLTABLE(XMLNAMESPACES( 'http://www.metricstream.com/appstudio/msa'  as "msa"),'msa:datapacket/msa:data/msa:rmd/msa:row'
			   PASSING LV_xml
	           COLUMNS
	           			   		       			 REMINDER_NO_OF_DAYS  NUMBER   PATH 'msa:reminder_no_of_days'		       		       			,  IS_ACTIVE  VARCHAR2(4000)   PATH 'msa:is_active'		       		       			,  REMINDER_TEXT  VARCHAR2(4000)   PATH 'msa:reminder_text'		       		       			,  REMINDER_SUBJECT  VARCHAR2(4000)   PATH 'msa:reminder_subject'		       		       			,  ADD_USER_RELATED_TO_ITEM  VARCHAR2(4000)   PATH 'msa:add_user_related_to_item'		       		       			,  REMINDER_TYPE  VARCHAR2(4000)   PATH 'msa:reminder_type'		       		       			,  EMAIL_SEND_TO_USERS  VARCHAR2(4000)   PATH 'msa:email_send_to_users'		       		       			,  CC_FOR_EMAIL  VARCHAR2(4000)   PATH 'msa:cc_for_email'		       		       			,  REMINDER_FK  VARCHAR2(4000)   PATH 'msa:reminder_fk'		       		       			,  REMINDER_SENT  VARCHAR2(4000)   PATH 'msa:reminder_sent'		       		       			,  REMINDER_SEND_TO  VARCHAR2(4000)   PATH 'msa:reminder_send_to'		       		       			,  EMAIL_SEND_TO_USERS_STORED  VARCHAR2(4000)   PATH 'msa:email_send_to_users_stored'		       		       			,  REMINDER_ID_PK  VARCHAR2(4000)   PATH 'msa:reminder_id_pk'		       		       			,  REMINDER_LAST_SEND_DATE  VARCHAR2(40)   PATH 'msa:reminder_last_send_date'		       		       			,  REMINDER_NEXT_SEND_DATE  VARCHAR2(40)   PATH 'msa:reminder_next_send_date'		       	       	   )); 
	    TYPE LT_QSM_REMINDER_EMAIL IS TABLE OF CU_QSM_REMINDER_EMAIL%ROWTYPE;
		TY_QSM_REMINDER_EMAIL  LT_QSM_REMINDER_EMAIL;
	       	     		  
   		      BEGIN

/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------
    Note: Defining SAVEPOINT TO ROLLBACK transactions done by ETL.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        LV_progress := '001';
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'CALL_ETL';


/* --------------------------------------------------------------------------
    Note: Default DEBUG FLAG is set to FALSE to avoid unneccessary logging of data.
            If any issues found in ETL, to understand what goes into the ETL
            then set this variable to TRUE and run the ETL in the flow.
            It allows to log the entire relevant data set.
   -------------------------------------------------------------------------- */
        LV_debug := FALSE;

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);
        
        UPDATE_HIERARCHY
        (
           iop_log_no          => LV_log_no.APP_LOG_NO,
           iop_xml             => LV_XML,
           op_error_code       => LV_err_code,
           op_error_message    => LV_err_msg,
           iop_error_sequence  => iop_error_seq,
           ip_pid              => ip_pid
        );

        IF(LV_err_code !=0) THEN
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'W','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Failed while updating Hierarchy ', ip_pid);
        END IF;
        
        /* capture all cursors here */
					       OPEN CU_QSM_INIT_QUESTNR_IND;
	       FETCH CU_QSM_INIT_QUESTNR_IND BULK COLLECT INTO TY_QSM_INIT_QUESTNR_IND;
	       CLOSE CU_QSM_INIT_QUESTNR_IND; 
	    		
				 OPEN CU_QSM_REMINDER_EMAIL;
	       FETCH CU_QSM_REMINDER_EMAIL BULK COLLECT INTO TY_QSM_REMINDER_EMAIL;
	       CLOSE CU_QSM_REMINDER_EMAIL; 		
		
        LV_cntr_1 := 0;
      
/* --------------------------------------------------------------------------
        Cursor to fetch non multirow details from XML
   -------------------------------------------------------------------------- */
		        FOR iop_data in ( SELECT  INSTANCE_ID
                                 ,METRIC_ID
                                 ,TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_RUN_DATE
                                 ,TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
                                 ,LATEST_FLAG
                                 ,CREATED_BY
                                 ,TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE
                                 ,PROCESS_FLOW_STATUS
                                 ,PROCESS_INSTANCE_ID
                                 ,ELECTRONICALLY_SIGNED
	                             ,INSTANCE_REC_NUM
											 					   	  , INSTRUCTIONS
					    											 					   	  , SEND_USER_ROLE
					    											 					   	  , QUE_APPLIES_TO
					    											 					   	  , CONCAT_INDV_ITEMS
					    											 					   	  , OWNERS
					    											 					   	  , QUE_SEND_TO
					    											 					   	  , SUB_CERTIFICATION_FOR
					    											 					   	  , QUESTIONNAIRE_ID
					    											 					   	  , REPORTING_PERIOD_TYPE
					    											 					   	  , RTF_ATTACH
					    											 					   	  , FINDINGS_CAN_ADD_BY
					    											 					   	  , PUBLISHED
					    											 					   	  , SEND_OPTION
					    											 					   	  , FLTR_ORG_LEVEL
					    											 					   	  , FLTR_OWNER_ORG
					    											 					   	  , QUE_ACTION
					    											 					   	  , REPORTING_PERIOD
					    											 					   	  , SEND_TO_APPROVAL
					    											 					   	  , RESPONSE_APPROVER
					    											 					   	  , APPLIES_TO_ITEMS
					    											 					   	  , EXCEL_BASED
					    											 					   	  , DISPLAY_SCORING
					    											 					   	  , SURVEY_SOURCE_TYPE
					    											 					   	  , OVERALL_APPROVER_ORG
					    											 					   	  , RESTRICT_ACCESS_TO
					    											 					   	  , LEVEL_2_APPROVER
					    											 					   	  , QUE_REQUEST_NAME
					    											 					   	  , MANAGE_SURVEY
					    											 					   	  , APPROVER_ORGANIZATION
					    											 					   	  , SURVEY_SCOPE_SELECTION
					    											 					   	  , OVERALL_APPROVER
					    											 					   	  , RESPONSE_APPROVER_DISP
					    											 					   	  , SURVEY_SOURCE_REF
					    											 					   	  , QUE_REQUEST_ID
					    											 					   	  , COLLABORATIVE_RESPONSE
					    											 					   	  , AUTO_CREATE_ISSUE
					    											 					   	  , CHECK_AUTO_CREATE_ISSUE_FLAG
					    											 					   	  , INIT_COMMENTS
					    											 					   	  , APPROVAL_BASED_ON_RESPONSE
					    											 					   	  , ALL_USER_APPROVAL
					    											 					   	  , STATUS
					    											 					   	  , FIILTER_LEVEL
					    											 					   	  , OWNER_ORGANIZATIONS
					    											 					   	  , SECTIONS
					    											 					   	  , QUE_REQUEST_TYPE
					    											 					   	  , LEVEL_1_APPROVER
					    											 					   	  , REINIT_PID
					    											 					   	  , CONSDR_NO_OF_PAST_MONTHS
					    											 					   	  , SCH_DUE_AFTER
					    											 					   	  , RESP_PREPOPULATE
					    											 					   	  , SCH_REQ_ID
					    											 					   	  , SCH_FREQUENCY
					    											 						  	, TO_DATE( SCH_NEXT_DATE,'MM/dd/yyyy HH24:mi:ss') AS SCH_NEXT_DATE
						   											 						  	, TO_DATE( SCH_END_BY,'MM/dd/yyyy HH24:mi:ss') AS SCH_END_BY
						   											 						  	, TO_DATE( SCH_CLOSE_DATE,'MM/dd/yyyy HH24:mi:ss') AS SCH_CLOSE_DATE
						   											 						  	, TO_DATE( SCH_START_DATE,'MM/dd/yyyy HH24:mi:ss') AS SCH_START_DATE
						   											 					   	  , DD_EVENT_USER_NAME
					    											 					   	  , DD_CURRENT_USER_NAME
					    											 					   	  , DD_OBJECT_TYPE
					    											 					   	  , DD_PROCESS_CODE
					    										FROM XMLTABLE(XMLNAMESPACES(  'http://www.metricstream.com/appstudio/msa'  as "msa"),
                                'msa:datapacket/msa:data/msa:nonmultirow' 
                               PASSING LV_XML
                               COLUMNS
                                INSTANCE_ID                      NUMBER          PATH  'msa:instance_id'
                               ,METRIC_ID                        NUMBER          PATH  'msa:metric_id'
                               ,METRIC_RUN_DATE                  VARCHAR2(40)    PATH  'msa:metric_run_date'
                               ,METRIC_COMPLETED_DATE            VARCHAR2(40)    PATH  'msa:metric_completed_date'
                               ,LATEST_FLAG                      VARCHAR2(1)     PATH  'msa:latest_flag'
                               ,CREATED_BY                       NUMBER          PATH  'msa:created_by'
                               ,CREATION_DATE                    VARCHAR2(40)    PATH  'msa:creation_date'
                               ,PROCESS_FLOW_STATUS              NUMBER          PATH  'msa:process_flow_status'
                               ,PROCESS_INSTANCE_ID              NUMBER          PATH  'msa:process_instance_id'
                               ,ELECTRONICALLY_SIGNED            NUMBER          PATH  'msa:electronically_signed'
                               ,INSTANCE_REC_NUM                 NUMBER          PATH  'msa:instance_rec_num'    
														, INSTRUCTIONS  CLOB			 	 PATH   'msa:instructions_htm' 
																						, SEND_USER_ROLE  VARCHAR2(4000)	 PATH   'msa:send_user_role' 
																						, QUE_APPLIES_TO  VARCHAR2(4000)	 PATH   'msa:que_applies_to' 
																						, CONCAT_INDV_ITEMS  VARCHAR2(4000)	 PATH   'msa:concat_indv_items' 
																						, OWNERS  VARCHAR2(4000)	 PATH   'msa:owners' 
																						, QUE_SEND_TO  VARCHAR2(4000)	 PATH   'msa:que_send_to' 
																						, SUB_CERTIFICATION_FOR  VARCHAR2(4000)	 PATH   'msa:sub_certification_for' 
																						, QUESTIONNAIRE_ID  VARCHAR2(4000)	 PATH   'msa:questionnaire_id' 
																						, REPORTING_PERIOD_TYPE  VARCHAR2(4000)	 PATH   'msa:reporting_period_type' 
																						, RTF_ATTACH  VARCHAR2(4000)	 PATH   'msa:rtf_attach' 
																						, FINDINGS_CAN_ADD_BY  VARCHAR2(4000)	 PATH   'msa:findings_can_add_by' 
																						, PUBLISHED  VARCHAR2(4000)	 PATH   'msa:published' 
																						, SEND_OPTION  VARCHAR2(4000)	 PATH   'msa:send_option' 
																						, FLTR_ORG_LEVEL  VARCHAR2(4000)	 PATH   'msa:fltr_org_level' 
																						, FLTR_OWNER_ORG  VARCHAR2(4000)	 PATH   'msa:fltr_owner_org' 
																						, QUE_ACTION  VARCHAR2(4000)	 PATH   'msa:que_action' 
																						, REPORTING_PERIOD  VARCHAR2(4000)	 PATH   'msa:reporting_period' 
																						, SEND_TO_APPROVAL  VARCHAR2(4000)	 PATH   'msa:send_to_approval' 
																						, RESPONSE_APPROVER  VARCHAR2(4000)	 PATH   'msa:response_approver' 
																						, APPLIES_TO_ITEMS  VARCHAR2(4000)	 PATH   'msa:applies_to_items' 
																						, EXCEL_BASED  VARCHAR2(4000)	 PATH   'msa:excel_based' 
																						, DISPLAY_SCORING  VARCHAR2(4000)	 PATH   'msa:display_scoring' 
																						, SURVEY_SOURCE_TYPE  VARCHAR2(4000)	 PATH   'msa:survey_source_type' 
																						, OVERALL_APPROVER_ORG  VARCHAR2(4000)	 PATH   'msa:overall_approver_org' 
																						, RESTRICT_ACCESS_TO  VARCHAR2(4000)	 PATH   'msa:restrict_access_to' 
																						, LEVEL_2_APPROVER  VARCHAR2(4000)	 PATH   'msa:level_2_approver' 
																						, QUE_REQUEST_NAME  VARCHAR2(4000)	 PATH   'msa:que_request_name' 
																						, MANAGE_SURVEY  VARCHAR2(4000)	 PATH   'msa:manage_survey' 
																						, APPROVER_ORGANIZATION  VARCHAR2(4000)	 PATH   'msa:approver_organization' 
																						, SURVEY_SCOPE_SELECTION  VARCHAR2(4000)	 PATH   'msa:survey_scope_selection' 
																						, OVERALL_APPROVER  VARCHAR2(4000)	 PATH   'msa:overall_approver' 
																						, RESPONSE_APPROVER_DISP  VARCHAR2(4000)	 PATH   'msa:response_approver_disp' 
																						, SURVEY_SOURCE_REF  VARCHAR2(4000)	 PATH   'msa:survey_source_ref' 
																						, QUE_REQUEST_ID  VARCHAR2(4000)	 PATH   'msa:que_request_id' 
																						, COLLABORATIVE_RESPONSE  VARCHAR2(4000)	 PATH   'msa:collaborative_response' 
																						, AUTO_CREATE_ISSUE  VARCHAR2(4000)	 PATH   'msa:auto_create_issue' 
																						, CHECK_AUTO_CREATE_ISSUE_FLAG  VARCHAR2(4000)	 PATH   'msa:check_auto_create_issue_flag' 
																						, INIT_COMMENTS  VARCHAR2(4000)	 PATH   'msa:init_comments' 
																						, APPROVAL_BASED_ON_RESPONSE  VARCHAR2(4000)	 PATH   'msa:approval_based_on_response' 
																						, ALL_USER_APPROVAL  VARCHAR2(4000)	 PATH   'msa:all_user_approval' 
																						, STATUS  VARCHAR2(4000)	 PATH   'msa:status' 
																						, FIILTER_LEVEL  VARCHAR2(4000)	 PATH   'msa:fiilter_level' 
																						, OWNER_ORGANIZATIONS  VARCHAR2(4000)	 PATH   'msa:owner_organizations' 
																						, SECTIONS  VARCHAR2(4000)	 PATH   'msa:sections' 
																						, QUE_REQUEST_TYPE  VARCHAR2(4000)	 PATH   'msa:que_request_type' 
																						, LEVEL_1_APPROVER  VARCHAR2(4000)	 PATH   'msa:level_1_approver' 
																						, REINIT_PID  NUMBER 	PATH   'msa:reinit_pid' 
																						, CONSDR_NO_OF_PAST_MONTHS  NUMBER 	PATH   'msa:consdr_no_of_past_months' 
																						, SCH_DUE_AFTER  NUMBER 	PATH   'msa:sch_due_after' 
																						, RESP_PREPOPULATE  VARCHAR2(4000)	 PATH   'msa:resp_prepopulate' 
																						, SCH_REQ_ID  VARCHAR2(4000)	 PATH   'msa:sch_req_id' 
																						, SCH_FREQUENCY  VARCHAR2(4000)	 PATH   'msa:sch_frequency' 
																						, SCH_NEXT_DATE  VARCHAR2(40) 	 PATH	'msa:sch_next_date'
																						, SCH_END_BY  VARCHAR2(40) 	 PATH	'msa:sch_end_by'
																						, SCH_CLOSE_DATE  VARCHAR2(40) 	 PATH	'msa:sch_close_date'
																						, SCH_START_DATE  VARCHAR2(40) 	 PATH	'msa:sch_start_date'
																						, DD_EVENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_event_user_name'
																						, DD_CURRENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_current_user_name'
																						, DD_OBJECT_TYPE  VARCHAR2(4000) PATH 'msa:dd_object_type'
																						, DD_PROCESS_CODE  VARCHAR2(4000) PATH 'msa:dd_process_code'
																			))      
					
				LOOP
			           LV_cntr_1 := LV_cntr_1 + 1;
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Data Found in iop_data. ', ip_pid);
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ')', ip_pid);
    

		 /* --------------------------------------------------------------------------
		       Loop through the data object to load the data into MS tables.
		        Header info is being loaded into the system.
		  -------------------------------------------------------------------------- */ 
 			  			 	
		/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
		  -------------------------------------------------------------------------- */ 	
		  		 		
  									    		IF LV_debug THEN
												

	  
 	 	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_APPLIES_TO, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CONCAT_INDV_ITEMS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_SEND_TO, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SUB_CERTIFICATION_FOR, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUESTIONNAIRE_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.REPORTING_PERIOD_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RTF_ATTACH, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PUBLISHED, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SEND_OPTION, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_ACTION, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.REPORTING_PERIOD, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SEND_TO_APPROVAL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RESPONSE_APPROVER, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.EXCEL_BASED, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SURVEY_SOURCE_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RESTRICT_ACCESS_TO, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.LEVEL_2_APPROVER, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_REQUEST_NAME, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.MANAGE_SURVEY, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SURVEY_SCOPE_SELECTION, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.OVERALL_APPROVER, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RESPONSE_APPROVER_DISP, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SURVEY_SOURCE_REF, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_REQUEST_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.COLLABORATIVE_RESPONSE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.AUTO_CREATE_ISSUE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CHECK_AUTO_CREATE_ISSUE_FLAG, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.INIT_COMMENTS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.APPROVAL_BASED_ON_RESPONSE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.ALL_USER_APPROVAL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.STATUS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.FIILTER_LEVEL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_REQUEST_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.LEVEL_1_APPROVER, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.REINIT_PID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CONSDR_NO_OF_PAST_MONTHS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    				             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
			             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
    			    	END IF;
    			    	
    			    							MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
  
  MERGE 
    INTO MS_QSM_INIT_QUESTNR T 
  		USING (
  				SELECT     
      	 	(SELECT INSTRUCTIONS_HTM FROM MS_QSM_INITIATE_QUESTNR_V WHERE ROWID = nvl(dbms_lob.substr(iop_data.INSTRUCTIONS,18,1),'A')) AS INSTRUCTIONS	      	, iop_data.QUE_APPLIES_TO AS QUE_APPLIES_TO	      	, iop_data.CONCAT_INDV_ITEMS AS CONCAT_INDV_ITEMS	      	, iop_data.QUE_SEND_TO AS QUE_SEND_TO	      	, iop_data.SUB_CERTIFICATION_FOR AS SUB_CERTIFICATION_FOR	      	, iop_data.QUESTIONNAIRE_ID AS QUESTIONNAIRE_ID	      	, iop_data.REPORTING_PERIOD_TYPE AS REPORTING_PERIOD_TYPE	      	, iop_data.RTF_ATTACH AS RTF_ATTACH	      	, iop_data.PUBLISHED AS PUBLISHED	      	, iop_data.SEND_OPTION AS SEND_OPTION	      	, iop_data.QUE_ACTION AS QUE_ACTION	      	, iop_data.REPORTING_PERIOD AS REPORTING_PERIOD	      	, iop_data.SEND_TO_APPROVAL AS SEND_TO_APPROVAL	      	, iop_data.RESPONSE_APPROVER AS RESPONSE_APPROVER	      	, iop_data.EXCEL_BASED AS EXCEL_BASED	      	, iop_data.SURVEY_SOURCE_TYPE AS SURVEY_SOURCE_TYPE	      	, iop_data.RESTRICT_ACCESS_TO AS RESTRICT_ACCESS_TO	      	, iop_data.LEVEL_2_APPROVER AS LEVEL_2_APPROVER	      	, iop_data.QUE_REQUEST_NAME AS QUE_REQUEST_NAME	      	, iop_data.MANAGE_SURVEY AS MANAGE_SURVEY	      	, iop_data.SURVEY_SCOPE_SELECTION AS SURVEY_SCOPE_SELECTION	      	, iop_data.OVERALL_APPROVER AS OVERALL_APPROVER	      	, iop_data.RESPONSE_APPROVER_DISP AS RESPONSE_APPROVER_DISP	      	, iop_data.SURVEY_SOURCE_REF AS SURVEY_SOURCE_REF	      	, iop_data.QUE_REQUEST_ID AS QUE_REQUEST_ID	      	, iop_data.COLLABORATIVE_RESPONSE AS COLLABORATIVE_RESPONSE	      	, iop_data.AUTO_CREATE_ISSUE AS AUTO_CREATE_ISSUE	      	, iop_data.CHECK_AUTO_CREATE_ISSUE_FLAG AS CHECK_AUTO_CREATE_ISSUE_FLAG	      	, iop_data.INIT_COMMENTS AS INIT_COMMENTS	      	, iop_data.APPROVAL_BASED_ON_RESPONSE AS APPROVAL_BASED_ON_RESPONSE	      	, iop_data.ALL_USER_APPROVAL AS ALL_USER_APPROVAL	      	, iop_data.STATUS AS STATUS	      	, iop_data.FIILTER_LEVEL AS FIILTER_LEVEL	      	, iop_data.QUE_REQUEST_TYPE AS QUE_REQUEST_TYPE	      	, iop_data.LEVEL_1_APPROVER AS LEVEL_1_APPROVER	      	, iop_data.REINIT_PID AS REINIT_PID	      	, iop_data.CONSDR_NO_OF_PAST_MONTHS AS CONSDR_NO_OF_PAST_MONTHS	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.QUE_REQUEST_ID = V.QUE_REQUEST_ID
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.INSTRUCTIONS=V.INSTRUCTIONS
 ,T.QUE_APPLIES_TO=V.QUE_APPLIES_TO
 ,T.CONCAT_INDV_ITEMS=V.CONCAT_INDV_ITEMS
 ,T.QUE_SEND_TO=V.QUE_SEND_TO
 ,T.SUB_CERTIFICATION_FOR=V.SUB_CERTIFICATION_FOR
 ,T.QUESTIONNAIRE_ID=V.QUESTIONNAIRE_ID
 ,T.REPORTING_PERIOD_TYPE=V.REPORTING_PERIOD_TYPE
 ,T.RTF_ATTACH=V.RTF_ATTACH
 ,T.PUBLISHED=V.PUBLISHED
 ,T.SEND_OPTION=V.SEND_OPTION
 ,T.QUE_ACTION=V.QUE_ACTION
 ,T.REPORTING_PERIOD=V.REPORTING_PERIOD
 ,T.SEND_TO_APPROVAL=V.SEND_TO_APPROVAL
 ,T.RESPONSE_APPROVER=V.RESPONSE_APPROVER
 ,T.EXCEL_BASED=V.EXCEL_BASED
 ,T.SURVEY_SOURCE_TYPE=V.SURVEY_SOURCE_TYPE
 ,T.RESTRICT_ACCESS_TO=V.RESTRICT_ACCESS_TO
 ,T.LEVEL_2_APPROVER=V.LEVEL_2_APPROVER
 ,T.QUE_REQUEST_NAME=V.QUE_REQUEST_NAME
 ,T.MANAGE_SURVEY=V.MANAGE_SURVEY
 ,T.SURVEY_SCOPE_SELECTION=V.SURVEY_SCOPE_SELECTION
 ,T.OVERALL_APPROVER=V.OVERALL_APPROVER
 ,T.RESPONSE_APPROVER_DISP=V.RESPONSE_APPROVER_DISP
 ,T.SURVEY_SOURCE_REF=V.SURVEY_SOURCE_REF
 ,T.COLLABORATIVE_RESPONSE=V.COLLABORATIVE_RESPONSE
 ,T.AUTO_CREATE_ISSUE=V.AUTO_CREATE_ISSUE
 ,T.CHECK_AUTO_CREATE_ISSUE_FLAG=V.CHECK_AUTO_CREATE_ISSUE_FLAG
 ,T.INIT_COMMENTS=V.INIT_COMMENTS
 ,T.APPROVAL_BASED_ON_RESPONSE=V.APPROVAL_BASED_ON_RESPONSE
 ,T.ALL_USER_APPROVAL=V.ALL_USER_APPROVAL
 ,T.STATUS=V.STATUS
 ,T.FIILTER_LEVEL=V.FIILTER_LEVEL
 ,T.QUE_REQUEST_TYPE=V.QUE_REQUEST_TYPE
 ,T.LEVEL_1_APPROVER=V.LEVEL_1_APPROVER
 ,T.REINIT_PID=V.REINIT_PID
 ,T.CONSDR_NO_OF_PAST_MONTHS=V.CONSDR_NO_OF_PAST_MONTHS
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.INSTRUCTIONS
 ,T.QUE_APPLIES_TO
 ,T.CONCAT_INDV_ITEMS
 ,T.QUE_SEND_TO
 ,T.SUB_CERTIFICATION_FOR
 ,T.QUESTIONNAIRE_ID
 ,T.REPORTING_PERIOD_TYPE
 ,T.RTF_ATTACH
 ,T.PUBLISHED
 ,T.SEND_OPTION
 ,T.QUE_ACTION
 ,T.REPORTING_PERIOD
 ,T.SEND_TO_APPROVAL
 ,T.RESPONSE_APPROVER
 ,T.EXCEL_BASED
 ,T.SURVEY_SOURCE_TYPE
 ,T.RESTRICT_ACCESS_TO
 ,T.LEVEL_2_APPROVER
 ,T.QUE_REQUEST_NAME
 ,T.MANAGE_SURVEY
 ,T.SURVEY_SCOPE_SELECTION
 ,T.OVERALL_APPROVER
 ,T.RESPONSE_APPROVER_DISP
 ,T.SURVEY_SOURCE_REF
 ,T.QUE_REQUEST_ID
 ,T.COLLABORATIVE_RESPONSE
 ,T.AUTO_CREATE_ISSUE
 ,T.CHECK_AUTO_CREATE_ISSUE_FLAG
 ,T.INIT_COMMENTS
 ,T.APPROVAL_BASED_ON_RESPONSE
 ,T.ALL_USER_APPROVAL
 ,T.STATUS
 ,T.FIILTER_LEVEL
 ,T.QUE_REQUEST_TYPE
 ,T.LEVEL_1_APPROVER
 ,T.REINIT_PID
 ,T.CONSDR_NO_OF_PAST_MONTHS
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.INSTRUCTIONS
        ,V.QUE_APPLIES_TO
        ,V.CONCAT_INDV_ITEMS
        ,V.QUE_SEND_TO
        ,V.SUB_CERTIFICATION_FOR
        ,V.QUESTIONNAIRE_ID
        ,V.REPORTING_PERIOD_TYPE
        ,V.RTF_ATTACH
        ,V.PUBLISHED
        ,V.SEND_OPTION
        ,V.QUE_ACTION
        ,V.REPORTING_PERIOD
        ,V.SEND_TO_APPROVAL
        ,V.RESPONSE_APPROVER
        ,V.EXCEL_BASED
        ,V.SURVEY_SOURCE_TYPE
        ,V.RESTRICT_ACCESS_TO
        ,V.LEVEL_2_APPROVER
        ,V.QUE_REQUEST_NAME
        ,V.MANAGE_SURVEY
        ,V.SURVEY_SCOPE_SELECTION
        ,V.OVERALL_APPROVER
        ,V.RESPONSE_APPROVER_DISP
        ,V.SURVEY_SOURCE_REF
        ,V.QUE_REQUEST_ID
        ,V.COLLABORATIVE_RESPONSE
        ,V.AUTO_CREATE_ISSUE
        ,V.CHECK_AUTO_CREATE_ISSUE_FLAG
        ,V.INIT_COMMENTS
        ,V.APPROVAL_BASED_ON_RESPONSE
        ,V.ALL_USER_APPROVAL
        ,V.STATUS
        ,V.FIILTER_LEVEL
        ,V.QUE_REQUEST_TYPE
        ,V.LEVEL_1_APPROVER
        ,V.REINIT_PID
        ,V.CONSDR_NO_OF_PAST_MONTHS
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
						
																		

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	   
 	   DELETE MS_QSM_INIT_QUESTNR_USR WHERE 
 	   	   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  										AND DD_STATUS_FLAG = 'N'
	  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.SEND_USER_ROLE) > 0 THEN
 		
 		INSERT INTO MS_QSM_INIT_QUESTNR_USR (
 		 		DD_STATUS_FLAG,
 		 		 QUE_REQUEST_ID
 		 		,  SEND_USER_ROLE
 		 		) SELECT 
 		'Y',
 		 		 		  iop_data.QUE_REQUEST_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.SEND_USER_ROLE,','));

 	   END IF;
	   
     UPDATE   MS_QSM_INIT_QUESTNR_USR
	    SET DD_STATUS_FLAG   = 'N'
	    WHERE
			   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  									  	;
	
 	  													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	   
 	   DELETE MS_QSM_INIT_QUESTNR_OWS WHERE 
 	   	   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  										AND DD_STATUS_FLAG = 'N'
	  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.OWNERS) > 0 THEN
 		
 		INSERT INTO MS_QSM_INIT_QUESTNR_OWS (
 		 		DD_STATUS_FLAG,
 		 		 QUE_REQUEST_ID
 		 		,  OWNERS
 		 		) SELECT 
 		'Y',
 		 		 		  iop_data.QUE_REQUEST_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.OWNERS,','));

 	   END IF;
	   
     UPDATE   MS_QSM_INIT_QUESTNR_OWS
	    SET DD_STATUS_FLAG   = 'N'
	    WHERE
			   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  									  	;
	
 	  													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	   
 	   DELETE MS_QSM_INIT_QUESTNR_FCA WHERE 
 	   	   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  										AND DD_STATUS_FLAG = 'N'
	  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.FINDINGS_CAN_ADD_BY) > 0 THEN
 		
 		INSERT INTO MS_QSM_INIT_QUESTNR_FCA (
 		 		DD_STATUS_FLAG,
 		 		 QUE_REQUEST_ID
 		 		,  FINDINGS_CAN_ADD_BY
 		 		) SELECT 
 		'Y',
 		 		 		  iop_data.QUE_REQUEST_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.FINDINGS_CAN_ADD_BY,','));

 	   END IF;
	   
     UPDATE   MS_QSM_INIT_QUESTNR_FCA
	    SET DD_STATUS_FLAG   = 'N'
	    WHERE
			   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  									  	;
	
 	  													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	   
 	   DELETE MS_QSM_INIT_QUESTNR_FOL WHERE 
 	   	   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  										AND DD_STATUS_FLAG = 'N'
	  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.FLTR_ORG_LEVEL) > 0 THEN
 		
 		INSERT INTO MS_QSM_INIT_QUESTNR_FOL (
 		 		DD_STATUS_FLAG,
 		 		 QUE_REQUEST_ID
 		 		,  FLTR_ORG_LEVEL
 		 		) SELECT 
 		'Y',
 		 		 		  iop_data.QUE_REQUEST_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.FLTR_ORG_LEVEL,','));

 	   END IF;
	   
     UPDATE   MS_QSM_INIT_QUESTNR_FOL
	    SET DD_STATUS_FLAG   = 'N'
	    WHERE
			   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  									  	;
	
 	  													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	   
 	   DELETE MS_QSM_INIT_QUESTNR_FOO WHERE 
 	   	   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  										AND DD_STATUS_FLAG = 'N'
	  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.FLTR_OWNER_ORG) > 0 THEN
 		
 		INSERT INTO MS_QSM_INIT_QUESTNR_FOO (
 		 		DD_STATUS_FLAG,
 		 		 QUE_REQUEST_ID
 		 		,  FLTR_OWNER_ORG
 		 		) SELECT 
 		'Y',
 		 		 		  iop_data.QUE_REQUEST_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.FLTR_OWNER_ORG,','));

 	   END IF;
	   
     UPDATE   MS_QSM_INIT_QUESTNR_FOO
	    SET DD_STATUS_FLAG   = 'N'
	    WHERE
			   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  									  	;
	
 	  													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	   
 	   DELETE MS_QSM_INIT_QUESTNR_ATI WHERE 
 	   	   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  										AND DD_STATUS_FLAG = 'N'
	  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.APPLIES_TO_ITEMS) > 0 THEN
 		
 		INSERT INTO MS_QSM_INIT_QUESTNR_ATI (
 		 		DD_STATUS_FLAG,
 		 		 QUE_REQUEST_ID
 		 		,  APPLIES_TO_ITEMS
 		 		) SELECT 
 		'Y',
 		 		 		  iop_data.QUE_REQUEST_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.APPLIES_TO_ITEMS,','));

 	   END IF;
	   
     UPDATE   MS_QSM_INIT_QUESTNR_ATI
	    SET DD_STATUS_FLAG   = 'N'
	    WHERE
			   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  									  	;
	
 	  													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	   
 	   DELETE MS_QSM_INIT_QUESTNR_DSR WHERE 
 	   	   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  										AND DD_STATUS_FLAG = 'N'
	  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.DISPLAY_SCORING) > 0 THEN
 		
 		INSERT INTO MS_QSM_INIT_QUESTNR_DSR (
 		 		DD_STATUS_FLAG,
 		 		 QUE_REQUEST_ID
 		 		,  DISPLAY_SCORING
 		 		) SELECT 
 		'Y',
 		 		 		  iop_data.QUE_REQUEST_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.DISPLAY_SCORING,','));

 	   END IF;
	   
     UPDATE   MS_QSM_INIT_QUESTNR_DSR
	    SET DD_STATUS_FLAG   = 'N'
	    WHERE
			   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  									  	;
	
 	  													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	   
 	   DELETE MS_QSM_INIT_QUESTNR_OAO WHERE 
 	   	   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  										AND DD_STATUS_FLAG = 'N'
	  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.OVERALL_APPROVER_ORG) > 0 THEN
 		
 		INSERT INTO MS_QSM_INIT_QUESTNR_OAO (
 		 		DD_STATUS_FLAG,
 		 		 QUE_REQUEST_ID
 		 		,  OVERALL_APPROVER_ORG
 		 		) SELECT 
 		'Y',
 		 		 		  iop_data.QUE_REQUEST_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.OVERALL_APPROVER_ORG,','));

 	   END IF;
	   
     UPDATE   MS_QSM_INIT_QUESTNR_OAO
	    SET DD_STATUS_FLAG   = 'N'
	    WHERE
			   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  									  	;
	
 	  													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	   
 	   DELETE MS_QSM_INIT_QUESTNR_APO WHERE 
 	   	   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  										AND DD_STATUS_FLAG = 'N'
	  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.APPROVER_ORGANIZATION) > 0 THEN
 		
 		INSERT INTO MS_QSM_INIT_QUESTNR_APO (
 		 		DD_STATUS_FLAG,
 		 		 QUE_REQUEST_ID
 		 		,  APPROVER_ORGANIZATION
 		 		) SELECT 
 		'Y',
 		 		 		  iop_data.QUE_REQUEST_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.APPROVER_ORGANIZATION,','));

 	   END IF;
	   
     UPDATE   MS_QSM_INIT_QUESTNR_APO
	    SET DD_STATUS_FLAG   = 'N'
	    WHERE
			   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  									  	;
	
 	  													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	   
 	   DELETE MS_QSM_INIT_QUESTNR_OWO WHERE 
 	   	   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  										AND DD_STATUS_FLAG = 'N'
	  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.OWNER_ORGANIZATIONS) > 0 THEN
 		
 		INSERT INTO MS_QSM_INIT_QUESTNR_OWO (
 		 		DD_STATUS_FLAG,
 		 		 QUE_REQUEST_ID
 		 		,  OWNER_ORGANIZATIONS
 		 		) SELECT 
 		'Y',
 		 		 		  iop_data.QUE_REQUEST_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.OWNER_ORGANIZATIONS,','));

 	   END IF;
	   
     UPDATE   MS_QSM_INIT_QUESTNR_OWO
	    SET DD_STATUS_FLAG   = 'N'
	    WHERE
			   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  									  	;
	
 	  													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	   
 	   DELETE MS_QSM_INIT_QUESTNR_SCS WHERE 
 	   	   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  										AND DD_STATUS_FLAG = 'N'
	  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.SECTIONS) > 0 THEN
 		
 		INSERT INTO MS_QSM_INIT_QUESTNR_SCS (
 		 		DD_STATUS_FLAG,
 		 		 QUE_REQUEST_ID
 		 		,  SECTIONS
 		 		) SELECT 
 		'Y',
 		 		 		  iop_data.QUE_REQUEST_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.SECTIONS,','));

 	   END IF;
	   
     UPDATE   MS_QSM_INIT_QUESTNR_SCS
	    SET DD_STATUS_FLAG   = 'N'
	    WHERE
			   				   		 QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
	  									  	;
	
 	  													
		  		  	     	/* --------------------------------------------------------------------------
	      	Loading data for related Child object. Data has been loaded into parent table
	      	-------------------------------------------------------------------------- */
			   	   		  			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_QSM_REMINDER_EMAIL.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_NO_OF_DAYS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).IS_ACTIVE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_TEXT, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_SUBJECT, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).ADD_USER_RELATED_TO_ITEM, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).EMAIL_SEND_TO_USERS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).CC_FOR_EMAIL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_FK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_SENT, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_SEND_TO, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).EMAIL_SEND_TO_USERS_STORED, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_ID_PK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_LAST_SEND_DATE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_NEXT_SEND_DATE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    	 END LOOP;
 				END IF;
				
												MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
  FORALL i IN TY_QSM_REMINDER_EMAIL.FIRST..TY_QSM_REMINDER_EMAIL.LAST 
  
  MERGE 
    INTO MS_QSM_REMINDER_EMAIL T 
  		USING (
  				SELECT     
      	 TY_QSM_REMINDER_EMAIL(i).REMINDER_NO_OF_DAYS AS REMINDER_NO_OF_DAYS	      	, TY_QSM_REMINDER_EMAIL(i).IS_ACTIVE AS IS_ACTIVE	      	, TY_QSM_REMINDER_EMAIL(i).REMINDER_TEXT AS REMINDER_TEXT	      	, TY_QSM_REMINDER_EMAIL(i).REMINDER_SUBJECT AS REMINDER_SUBJECT	      	, TY_QSM_REMINDER_EMAIL(i).ADD_USER_RELATED_TO_ITEM AS ADD_USER_RELATED_TO_ITEM	      	, TY_QSM_REMINDER_EMAIL(i).REMINDER_TYPE AS REMINDER_TYPE	      	, TY_QSM_REMINDER_EMAIL(i).EMAIL_SEND_TO_USERS AS EMAIL_SEND_TO_USERS	      	, TY_QSM_REMINDER_EMAIL(i).CC_FOR_EMAIL AS CC_FOR_EMAIL	      	, TY_QSM_REMINDER_EMAIL(i).REMINDER_FK AS REMINDER_FK	      	, TY_QSM_REMINDER_EMAIL(i).REMINDER_SENT AS REMINDER_SENT	      	, TY_QSM_REMINDER_EMAIL(i).REMINDER_SEND_TO AS REMINDER_SEND_TO	      	, TY_QSM_REMINDER_EMAIL(i).EMAIL_SEND_TO_USERS_STORED AS EMAIL_SEND_TO_USERS_STORED	      	, TY_QSM_REMINDER_EMAIL(i).REMINDER_ID_PK AS REMINDER_ID_PK	      	, TY_QSM_REMINDER_EMAIL(i).REMINDER_LAST_SEND_DATE AS REMINDER_LAST_SEND_DATE	      	, TY_QSM_REMINDER_EMAIL(i).REMINDER_NEXT_SEND_DATE AS REMINDER_NEXT_SEND_DATE	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.REMINDER_ID_PK = V.REMINDER_ID_PK
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.REMINDER_NO_OF_DAYS=V.REMINDER_NO_OF_DAYS
 ,T.IS_ACTIVE=V.IS_ACTIVE
 ,T.REMINDER_TEXT=V.REMINDER_TEXT
 ,T.REMINDER_SUBJECT=V.REMINDER_SUBJECT
 ,T.ADD_USER_RELATED_TO_ITEM=V.ADD_USER_RELATED_TO_ITEM
 ,T.REMINDER_TYPE=V.REMINDER_TYPE
 ,T.EMAIL_SEND_TO_USERS=V.EMAIL_SEND_TO_USERS
 ,T.CC_FOR_EMAIL=V.CC_FOR_EMAIL
 ,T.REMINDER_FK=V.REMINDER_FK
 ,T.REMINDER_SENT=V.REMINDER_SENT
 ,T.REMINDER_SEND_TO=V.REMINDER_SEND_TO
 ,T.EMAIL_SEND_TO_USERS_STORED=V.EMAIL_SEND_TO_USERS_STORED
 ,T.REMINDER_LAST_SEND_DATE=V.REMINDER_LAST_SEND_DATE
 ,T.REMINDER_NEXT_SEND_DATE=V.REMINDER_NEXT_SEND_DATE
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.REMINDER_NO_OF_DAYS
 ,T.IS_ACTIVE
 ,T.REMINDER_TEXT
 ,T.REMINDER_SUBJECT
 ,T.ADD_USER_RELATED_TO_ITEM
 ,T.REMINDER_TYPE
 ,T.EMAIL_SEND_TO_USERS
 ,T.CC_FOR_EMAIL
 ,T.REMINDER_FK
 ,T.REMINDER_SENT
 ,T.REMINDER_SEND_TO
 ,T.EMAIL_SEND_TO_USERS_STORED
 ,T.REMINDER_ID_PK
 ,T.REMINDER_LAST_SEND_DATE
 ,T.REMINDER_NEXT_SEND_DATE
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.REMINDER_NO_OF_DAYS
        ,V.IS_ACTIVE
        ,V.REMINDER_TEXT
        ,V.REMINDER_SUBJECT
        ,V.ADD_USER_RELATED_TO_ITEM
        ,V.REMINDER_TYPE
        ,V.EMAIL_SEND_TO_USERS
        ,V.CC_FOR_EMAIL
        ,V.REMINDER_FK
        ,V.REMINDER_SENT
        ,V.REMINDER_SEND_TO
        ,V.EMAIL_SEND_TO_USERS_STORED
        ,V.REMINDER_ID_PK
        ,V.REMINDER_LAST_SEND_DATE
        ,V.REMINDER_NEXT_SEND_DATE
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
											 	   		 		  		   			 	
		/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
		  -------------------------------------------------------------------------- */ 	
		  		 		
  									    		IF LV_debug THEN
												

	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SCH_DUE_AFTER, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RESP_PREPOPULATE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SCH_REQ_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SCH_FREQUENCY, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SCH_NEXT_DATE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SCH_END_BY, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SCH_CLOSE_DATE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SCH_START_DATE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    				             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
			             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
    			    	END IF;
    			    	
    			    							MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
  
  MERGE 
    INTO MS_QSM_QUESTNR_SCH T 
  		USING (
  				SELECT     
      	 iop_data.SCH_DUE_AFTER AS SCH_DUE_AFTER	      	, iop_data.RESP_PREPOPULATE AS RESP_PREPOPULATE	      	, iop_data.SCH_REQ_ID AS SCH_REQ_ID	      	, iop_data.SCH_FREQUENCY AS SCH_FREQUENCY	      	, iop_data.SCH_NEXT_DATE AS SCH_NEXT_DATE	      	, iop_data.SCH_END_BY AS SCH_END_BY	      	, iop_data.SCH_CLOSE_DATE AS SCH_CLOSE_DATE	      	, iop_data.SCH_START_DATE AS SCH_START_DATE	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.SCH_REQ_ID = V.SCH_REQ_ID
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.SCH_DUE_AFTER=V.SCH_DUE_AFTER
 ,T.RESP_PREPOPULATE=V.RESP_PREPOPULATE
 ,T.SCH_FREQUENCY=V.SCH_FREQUENCY
 ,T.SCH_NEXT_DATE=V.SCH_NEXT_DATE
 ,T.SCH_END_BY=V.SCH_END_BY
 ,T.SCH_CLOSE_DATE=V.SCH_CLOSE_DATE
 ,T.SCH_START_DATE=V.SCH_START_DATE
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.SCH_DUE_AFTER
 ,T.RESP_PREPOPULATE
 ,T.SCH_REQ_ID
 ,T.SCH_FREQUENCY
 ,T.SCH_NEXT_DATE
 ,T.SCH_END_BY
 ,T.SCH_CLOSE_DATE
 ,T.SCH_START_DATE
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.SCH_DUE_AFTER
        ,V.RESP_PREPOPULATE
        ,V.SCH_REQ_ID
        ,V.SCH_FREQUENCY
        ,V.SCH_NEXT_DATE
        ,V.SCH_END_BY
        ,V.SCH_CLOSE_DATE
        ,V.SCH_START_DATE
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
						
																		
		  		  	     	/* --------------------------------------------------------------------------
	      	Loading data for related Child object. Data has been loaded into parent table
	      	-------------------------------------------------------------------------- */
			   	   		  			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_QSM_REMINDER_EMAIL.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_NO_OF_DAYS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).IS_ACTIVE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_TEXT, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_SUBJECT, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).ADD_USER_RELATED_TO_ITEM, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).EMAIL_SEND_TO_USERS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).CC_FOR_EMAIL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_FK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_SENT, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_SEND_TO, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).EMAIL_SEND_TO_USERS_STORED, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_ID_PK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_LAST_SEND_DATE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_REMINDER_EMAIL(j).REMINDER_NEXT_SEND_DATE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    	 END LOOP;
 				END IF;
				
												MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
  FORALL i IN TY_QSM_REMINDER_EMAIL.FIRST..TY_QSM_REMINDER_EMAIL.LAST 
  
  MERGE 
    INTO MS_QSM_REMINDER_EMAIL T 
  		USING (
  				SELECT     
      	 TY_QSM_REMINDER_EMAIL(i).REMINDER_NO_OF_DAYS AS REMINDER_NO_OF_DAYS	      	, TY_QSM_REMINDER_EMAIL(i).IS_ACTIVE AS IS_ACTIVE	      	, TY_QSM_REMINDER_EMAIL(i).REMINDER_TEXT AS REMINDER_TEXT	      	, TY_QSM_REMINDER_EMAIL(i).REMINDER_SUBJECT AS REMINDER_SUBJECT	      	, TY_QSM_REMINDER_EMAIL(i).ADD_USER_RELATED_TO_ITEM AS ADD_USER_RELATED_TO_ITEM	      	, TY_QSM_REMINDER_EMAIL(i).REMINDER_TYPE AS REMINDER_TYPE	      	, TY_QSM_REMINDER_EMAIL(i).EMAIL_SEND_TO_USERS AS EMAIL_SEND_TO_USERS	      	, TY_QSM_REMINDER_EMAIL(i).CC_FOR_EMAIL AS CC_FOR_EMAIL	      	, TY_QSM_REMINDER_EMAIL(i).REMINDER_FK AS REMINDER_FK	      	, TY_QSM_REMINDER_EMAIL(i).REMINDER_SENT AS REMINDER_SENT	      	, TY_QSM_REMINDER_EMAIL(i).REMINDER_SEND_TO AS REMINDER_SEND_TO	      	, TY_QSM_REMINDER_EMAIL(i).EMAIL_SEND_TO_USERS_STORED AS EMAIL_SEND_TO_USERS_STORED	      	, TY_QSM_REMINDER_EMAIL(i).REMINDER_ID_PK AS REMINDER_ID_PK	      	, TY_QSM_REMINDER_EMAIL(i).REMINDER_LAST_SEND_DATE AS REMINDER_LAST_SEND_DATE	      	, TY_QSM_REMINDER_EMAIL(i).REMINDER_NEXT_SEND_DATE AS REMINDER_NEXT_SEND_DATE	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.REMINDER_ID_PK = V.REMINDER_ID_PK
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.REMINDER_NO_OF_DAYS=V.REMINDER_NO_OF_DAYS
 ,T.IS_ACTIVE=V.IS_ACTIVE
 ,T.REMINDER_TEXT=V.REMINDER_TEXT
 ,T.REMINDER_SUBJECT=V.REMINDER_SUBJECT
 ,T.ADD_USER_RELATED_TO_ITEM=V.ADD_USER_RELATED_TO_ITEM
 ,T.REMINDER_TYPE=V.REMINDER_TYPE
 ,T.EMAIL_SEND_TO_USERS=V.EMAIL_SEND_TO_USERS
 ,T.CC_FOR_EMAIL=V.CC_FOR_EMAIL
 ,T.REMINDER_FK=V.REMINDER_FK
 ,T.REMINDER_SENT=V.REMINDER_SENT
 ,T.REMINDER_SEND_TO=V.REMINDER_SEND_TO
 ,T.EMAIL_SEND_TO_USERS_STORED=V.EMAIL_SEND_TO_USERS_STORED
 ,T.REMINDER_LAST_SEND_DATE=V.REMINDER_LAST_SEND_DATE
 ,T.REMINDER_NEXT_SEND_DATE=V.REMINDER_NEXT_SEND_DATE
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.REMINDER_NO_OF_DAYS
 ,T.IS_ACTIVE
 ,T.REMINDER_TEXT
 ,T.REMINDER_SUBJECT
 ,T.ADD_USER_RELATED_TO_ITEM
 ,T.REMINDER_TYPE
 ,T.EMAIL_SEND_TO_USERS
 ,T.CC_FOR_EMAIL
 ,T.REMINDER_FK
 ,T.REMINDER_SENT
 ,T.REMINDER_SEND_TO
 ,T.EMAIL_SEND_TO_USERS_STORED
 ,T.REMINDER_ID_PK
 ,T.REMINDER_LAST_SEND_DATE
 ,T.REMINDER_NEXT_SEND_DATE
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.REMINDER_NO_OF_DAYS
        ,V.IS_ACTIVE
        ,V.REMINDER_TEXT
        ,V.REMINDER_SUBJECT
        ,V.ADD_USER_RELATED_TO_ITEM
        ,V.REMINDER_TYPE
        ,V.EMAIL_SEND_TO_USERS
        ,V.CC_FOR_EMAIL
        ,V.REMINDER_FK
        ,V.REMINDER_SENT
        ,V.REMINDER_SEND_TO
        ,V.EMAIL_SEND_TO_USERS_STORED
        ,V.REMINDER_ID_PK
        ,V.REMINDER_LAST_SEND_DATE
        ,V.REMINDER_NEXT_SEND_DATE
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
											 	   		 		  		            
          							 	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING UPDATE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	UPDATE MS_QSM_INIT_QUESTNR_IND 
 	SET DD_STATUS_FLAG   = 'N'
 	WHERE			
			QUE_REQUEST_ID= iop_data.QUE_REQUEST_ID	
	 	 ;
	 
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in UPDATE : ' || SQL%ROWCOUNT, 'D');
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

	                            
          						   	
               			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_QSM_INIT_QUESTNR_IND.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_INIT_QUESTNR_IND(j).IND_QUE_REQUEST_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_INIT_QUESTNR_IND(j).INDV_COLLBORTIV_RESP, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_INIT_QUESTNR_IND(j).INDV_ITEM_FIELD_3, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_INIT_QUESTNR_IND(j).ITEM_RELTD_COLLABORATOR, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_INIT_QUESTNR_IND(j).INDV_ITEM_FIELD_2, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_INIT_QUESTNR_IND(j).INDV_ALL_USER_APPROVAL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_INIT_QUESTNR_IND(j).INDV_RESP_APPROVER_DISP, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_INIT_QUESTNR_IND(j).ITEM_RELTD_RESPONDENT, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_INIT_QUESTNR_IND(j).INDV_SEND_TO_APPROVAL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_INIT_QUESTNR_IND(j).INDV_QUE_SEND_TO, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_INIT_QUESTNR_IND(j).INDV_RESP_APPROVER, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_INIT_QUESTNR_IND(j).INDV_ITEM_FIELD_1, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_INIT_QUESTNR_IND(j).SEND_TO_ASSESSOR_DISP, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_INIT_QUESTNR_IND(j).INDV_SEND_OPTION, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_INIT_QUESTNR_IND(j).INDV_ITEM_PK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_INIT_QUESTNR_IND(j).INDV_APPR_BASED_ON_RESPONSE, ip_pid);
			 END LOOP;
 				END IF;
				
								MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
  FORALL i IN TY_QSM_INIT_QUESTNR_IND.FIRST..TY_QSM_INIT_QUESTNR_IND.LAST 
  
  MERGE 
    INTO MS_QSM_INIT_QUESTNR_IND T 
  		USING (
  				SELECT     
      	 TY_QSM_INIT_QUESTNR_IND(i).IND_QUE_REQUEST_ID AS QUE_REQUEST_ID	      	, TY_QSM_INIT_QUESTNR_IND(i).INDV_COLLBORTIV_RESP AS INDV_COLLBORTIV_RESP	      	, TY_QSM_INIT_QUESTNR_IND(i).INDV_ITEM_FIELD_3 AS INDV_ITEM_FIELD_3	      	, TY_QSM_INIT_QUESTNR_IND(i).ITEM_RELTD_COLLABORATOR AS ITEM_RELTD_COLLABORATOR	      	, TY_QSM_INIT_QUESTNR_IND(i).INDV_ITEM_FIELD_2 AS INDV_ITEM_FIELD_2	      	, TY_QSM_INIT_QUESTNR_IND(i).INDV_ALL_USER_APPROVAL AS INDV_ALL_USER_APPROVAL	      	, TY_QSM_INIT_QUESTNR_IND(i).INDV_RESP_APPROVER_DISP AS INDV_RESP_APPROVER_DISP	      	, TY_QSM_INIT_QUESTNR_IND(i).ITEM_RELTD_RESPONDENT AS ITEM_RELTD_RESPONDENT	      	, TY_QSM_INIT_QUESTNR_IND(i).INDV_SEND_TO_APPROVAL AS INDV_SEND_TO_APPROVAL	      	, TY_QSM_INIT_QUESTNR_IND(i).INDV_QUE_SEND_TO AS INDV_QUE_SEND_TO	      	, TY_QSM_INIT_QUESTNR_IND(i).INDV_RESP_APPROVER AS INDV_RESP_APPROVER	      	, TY_QSM_INIT_QUESTNR_IND(i).INDV_ITEM_FIELD_1 AS INDV_ITEM_FIELD_1	      	, TY_QSM_INIT_QUESTNR_IND(i).SEND_TO_ASSESSOR_DISP AS SEND_TO_ASSESSOR_DISP	      	, TY_QSM_INIT_QUESTNR_IND(i).INDV_SEND_OPTION AS INDV_SEND_OPTION	      	, TY_QSM_INIT_QUESTNR_IND(i).INDV_ITEM_PK AS INDV_ITEM_PK	      	, TY_QSM_INIT_QUESTNR_IND(i).INDV_APPR_BASED_ON_RESPONSE AS INDV_APPR_BASED_ON_RESPONSE	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.QUE_REQUEST_ID = V.QUE_REQUEST_ID
 AND  T.INDV_ITEM_PK = V.INDV_ITEM_PK
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.INDV_COLLBORTIV_RESP=V.INDV_COLLBORTIV_RESP
 ,T.INDV_ITEM_FIELD_3=V.INDV_ITEM_FIELD_3
 ,T.ITEM_RELTD_COLLABORATOR=V.ITEM_RELTD_COLLABORATOR
 ,T.INDV_ITEM_FIELD_2=V.INDV_ITEM_FIELD_2
 ,T.INDV_ALL_USER_APPROVAL=V.INDV_ALL_USER_APPROVAL
 ,T.INDV_RESP_APPROVER_DISP=V.INDV_RESP_APPROVER_DISP
 ,T.ITEM_RELTD_RESPONDENT=V.ITEM_RELTD_RESPONDENT
 ,T.INDV_SEND_TO_APPROVAL=V.INDV_SEND_TO_APPROVAL
 ,T.INDV_QUE_SEND_TO=V.INDV_QUE_SEND_TO
 ,T.INDV_RESP_APPROVER=V.INDV_RESP_APPROVER
 ,T.INDV_ITEM_FIELD_1=V.INDV_ITEM_FIELD_1
 ,T.SEND_TO_ASSESSOR_DISP=V.SEND_TO_ASSESSOR_DISP
 ,T.INDV_SEND_OPTION=V.INDV_SEND_OPTION
 ,T.INDV_APPR_BASED_ON_RESPONSE=V.INDV_APPR_BASED_ON_RESPONSE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.QUE_REQUEST_ID
 ,T.INDV_COLLBORTIV_RESP
 ,T.INDV_ITEM_FIELD_3
 ,T.ITEM_RELTD_COLLABORATOR
 ,T.INDV_ITEM_FIELD_2
 ,T.INDV_ALL_USER_APPROVAL
 ,T.INDV_RESP_APPROVER_DISP
 ,T.ITEM_RELTD_RESPONDENT
 ,T.INDV_SEND_TO_APPROVAL
 ,T.INDV_QUE_SEND_TO
 ,T.INDV_RESP_APPROVER
 ,T.INDV_ITEM_FIELD_1
 ,T.SEND_TO_ASSESSOR_DISP
 ,T.INDV_SEND_OPTION
 ,T.INDV_ITEM_PK
 ,T.INDV_APPR_BASED_ON_RESPONSE
)
VALUES 
  ('Y'         
     ,V.QUE_REQUEST_ID
        ,V.INDV_COLLBORTIV_RESP
        ,V.INDV_ITEM_FIELD_3
        ,V.ITEM_RELTD_COLLABORATOR
        ,V.INDV_ITEM_FIELD_2
        ,V.INDV_ALL_USER_APPROVAL
        ,V.INDV_RESP_APPROVER_DISP
        ,V.ITEM_RELTD_RESPONDENT
        ,V.INDV_SEND_TO_APPROVAL
        ,V.INDV_QUE_SEND_TO
        ,V.INDV_RESP_APPROVER
        ,V.INDV_ITEM_FIELD_1
        ,V.SEND_TO_ASSESSOR_DISP
        ,V.INDV_SEND_OPTION
        ,V.INDV_ITEM_PK
        ,V.INDV_APPR_BASED_ON_RESPONSE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_QSM_INIT_QUESTNR_IND.COUNT LOOP 
	   	  
 	   
 	   DELETE MS_QSM_INIT_QUESTNR_STA WHERE 
 	   	   				   		 QUE_REQUEST_ID =  TY_QSM_INIT_QUESTNR_IND(j).IND_QUE_REQUEST_ID
	  							   		 AND  INDV_ITEM_PK =  TY_QSM_INIT_QUESTNR_IND(j).INDV_ITEM_PK
	  					AND DD_STATUS_FLAG = 'N'
	  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_QSM_INIT_QUESTNR_IND(j).SEND_TO_ASSESSOR) > 0 THEN
 		
 		INSERT INTO MS_QSM_INIT_QUESTNR_STA (
 		 		DD_STATUS_FLAG,
 		 		 QUE_REQUEST_ID
 		 		,  INDV_ITEM_PK
 		 		,  SEND_TO_ASSESSOR
 		 		) SELECT 
 		'Y',
 		 		 		  TY_QSM_INIT_QUESTNR_IND(j).IND_QUE_REQUEST_ID  		 		,  TY_QSM_INIT_QUESTNR_IND(j).INDV_ITEM_PK  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_QSM_INIT_QUESTNR_IND(j).SEND_TO_ASSESSOR,','));

 	   END IF;
	   
     UPDATE   MS_QSM_INIT_QUESTNR_STA
	    SET DD_STATUS_FLAG   = 'N'
	    WHERE
			   				   		 QUE_REQUEST_ID =  TY_QSM_INIT_QUESTNR_IND(j).IND_QUE_REQUEST_ID
	  							   		 AND  INDV_ITEM_PK =  TY_QSM_INIT_QUESTNR_IND(j).INDV_ITEM_PK
	  				  	;
	
 		  END LOOP; 	   
	  										

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_QSM_INIT_QUESTNR_IND.COUNT LOOP 
	   	  
 	   
 	   DELETE MS_QSM_INIT_QUESTNR_SAO WHERE 
 	   	   				   		 QUE_REQUEST_ID =  TY_QSM_INIT_QUESTNR_IND(j).IND_QUE_REQUEST_ID
	  							   		 AND  INDV_ITEM_PK =  TY_QSM_INIT_QUESTNR_IND(j).INDV_ITEM_PK
	  					AND DD_STATUS_FLAG = 'N'
	  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_QSM_INIT_QUESTNR_IND(j).SEND_TO_ASSESSOR_ORG) > 0 THEN
 		
 		INSERT INTO MS_QSM_INIT_QUESTNR_SAO (
 		 		DD_STATUS_FLAG,
 		 		 QUE_REQUEST_ID
 		 		,  INDV_ITEM_PK
 		 		,  SEND_TO_ASSESSOR_ORG
 		 		) SELECT 
 		'Y',
 		 		 		  TY_QSM_INIT_QUESTNR_IND(j).IND_QUE_REQUEST_ID  		 		,  TY_QSM_INIT_QUESTNR_IND(j).INDV_ITEM_PK  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_QSM_INIT_QUESTNR_IND(j).SEND_TO_ASSESSOR_ORG,','));

 	   END IF;
	   
     UPDATE   MS_QSM_INIT_QUESTNR_SAO
	    SET DD_STATUS_FLAG   = 'N'
	    WHERE
			   				   		 QUE_REQUEST_ID =  TY_QSM_INIT_QUESTNR_IND(j).IND_QUE_REQUEST_ID
	  							   		 AND  INDV_ITEM_PK =  TY_QSM_INIT_QUESTNR_IND(j).INDV_ITEM_PK
	  				  	;
	
 		  END LOOP; 	   
	  										

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_QSM_INIT_QUESTNR_IND.COUNT LOOP 
	   	  
 	   
 	   DELETE MS_QSM_INIT_QUESTNR_IAO WHERE 
 	   	   				   		 QUE_REQUEST_ID =  TY_QSM_INIT_QUESTNR_IND(j).IND_QUE_REQUEST_ID
	  							   		 AND  INDV_ITEM_PK =  TY_QSM_INIT_QUESTNR_IND(j).INDV_ITEM_PK
	  					AND DD_STATUS_FLAG = 'N'
	  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_QSM_INIT_QUESTNR_IND(j).INDV_APPROVER_ORGANIZATION) > 0 THEN
 		
 		INSERT INTO MS_QSM_INIT_QUESTNR_IAO (
 		 		DD_STATUS_FLAG,
 		 		 QUE_REQUEST_ID
 		 		,  INDV_ITEM_PK
 		 		,  INDV_APPROVER_ORGANIZATION
 		 		) SELECT 
 		'Y',
 		 		 		  TY_QSM_INIT_QUESTNR_IND(j).IND_QUE_REQUEST_ID  		 		,  TY_QSM_INIT_QUESTNR_IND(j).INDV_ITEM_PK  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_QSM_INIT_QUESTNR_IND(j).INDV_APPROVER_ORGANIZATION,','));

 	   END IF;
	   
     UPDATE   MS_QSM_INIT_QUESTNR_IAO
	    SET DD_STATUS_FLAG   = 'N'
	    WHERE
			   				   		 QUE_REQUEST_ID =  TY_QSM_INIT_QUESTNR_IND(j).IND_QUE_REQUEST_ID
	  							   		 AND  INDV_ITEM_PK =  TY_QSM_INIT_QUESTNR_IND(j).INDV_ITEM_PK
	  				  	;
	
 		  END LOOP; 	   
	  					               									  
				   						  	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
    
    DELETE MS_QSM_INIT_QUESTNR_IND 
    WHERE DD_STATUS_FLAG = 'N'
  	  			AND QUE_REQUEST_ID = iop_data.QUE_REQUEST_ID
  	  	  ;
  	   
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in DELETE : ' || SQL%ROWCOUNT, 'D');
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
	   			   		
    END LOOP;	 
        EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in call ETL ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END CALL_ETL;        
END MS_QSM_INITIATE_QUESTNR_P ;  
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_INIT_QUESTNR_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_INIT_QUESTNR_O
    Creation Time : 2014-SEP-01 20:14:22.836472000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_INIT_QUESTNR_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_QUE_REQUEST_ID                      IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_QUE_REQUEST_ID                      IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_INIT_QUESTNR_O ; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_INIT_QUESTNR_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_QUE_REQUEST_ID                      IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT ms_apps_mdf_error_handle_id_s.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_INIT_QUESTNR', 'D');

        UPDATE MS_QSM_INIT_QUESTNR
           SET DD_EDIT_FLAG = 'N'
         WHERE QUE_REQUEST_ID                           = iop_QUE_REQUEST_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_QUE_REQUEST_ID                      IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT ms_apps_mdf_error_handle_id_s.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_INIT_QUESTNR', 'D');

        UPDATE MS_QSM_INIT_QUESTNR
           SET DD_EDIT_FLAG = 'Y'
         WHERE QUE_REQUEST_ID                           = iop_QUE_REQUEST_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_INIT_QUESTNR_O; 
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_INSERT_INSTALLER_LOG" (i_log_text  IN VARCHAR2,
                                            i_status IN VARCHAR2,
                                            i_file_name IN VARCHAR2,
                                            i_object_name IN VARCHAR2)
AS PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN

    IF i_log_text IS NOT NULL THEN
        
        INSERT INTO MS_QSM_INSTALLER_LOGS ( LOG_DATE,LOG_SEQUENCE,LOG_TEXT,STATUS,FILE_NAME,OBJECT_NAME)
        VALUES (SYSDATE,MS_QSM_INSTALLER_LOG_S.NEXTVAL,i_log_text,i_status,i_file_name,i_object_name);
    
        COMMIT;
            
    END IF;
    
    
EXCEPTION
WHEN OTHERS THEN
    NULL;
END;
  
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_INSERT_XML" 
IS
    
    FUNCTION INSERT_XML_DATA(pc_metric_name   VARCHAR2
                    ,pn_metric_id number
                    ,pn_process_id  NUMBER
                    ,pn_instance_id NUMBER
                    ,pcb_xml_data clob
                    ) RETURN varchar2; 
					
END MS_QSM_INSERT_XML; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_INSERT_XML" 
IS
    
    FUNCTION INSERT_XML_DATA(pc_metric_name   VARCHAR2
                    ,pn_metric_id number
                    ,pn_process_id  NUMBER
                    ,pn_instance_id NUMBER
                    ,pcb_xml_data clob
                    ) RETURN varchar2
    IS
    l_status VARCHAR2(4000);
    l_metric_id NUMBER;
    xn_error_handle_id NUMBER;
    xn_error_seq NUMBER;
    BEGIN
      
      SELECT METRIC_ID 
      INTO l_metric_id
      FROM SI_METRICS_T
      WHERE METRIC_NAME=pc_metric_name;
      
      l_status:=MS_APPS_MDF_INFOLETOUTPUT_PKG.INSERT_XML(pc_metric_name||'_V',
                                                 l_metric_id,
                                                 pn_process_id,
                                                 pn_instance_id,
                                                 pcb_xml_data      
                                                );
                                                
      IF l_status !='SUCCESS' OR l_status IS NULL THEN
                      ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                      pn_error_sequence    => xn_error_seq,
                      pc_error_type        => 'E',
                      pc_error_text        => 'Error While Inserting XML into Response View in the  '||l_status || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);   
      END IF;                                              
      
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;    
     
END MS_QSM_INSERT_XML; 
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_IS_USER_SUBSCRIBED" ( p_recepient IN OUT NOCOPY CLOB,
                                                                                                     p_type IN VARCHAR2)
AS
BEGIN
    
    NULL;

EXCEPTION
    WHEN OTHERS THEN                                              
            NULL;     
END; 
 
  
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_LOG_ACTIVITY" (ip_log_no NUMBER, ip_log_msg VARCHAR2, ip_log_clob CLOB)
AS
   l_param_name    VARCHAR2 (100);
   l_param_value   VARCHAR2 (100);
   PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
   IF ms_qsm_utilities.g_debug IS NULL
   THEN
      SELECT a.parameter_name, b.parameter_value
        INTO l_param_name, ms_qsm_utilities.g_debug
        FROM ms_qs_parameter_names a, ms_qs_parameter_values b, ms_qs_parameter_types c
       WHERE     a.parameter_id = b.parameter_id
             AND a.parameter_type_id = b.parameter_type_id
             AND a.parameter_type_id = c.parameter_type_id
             AND b.parameter_type_id = c.parameter_type_id
             AND c.parameter_type = 'MS_QSM_Configuration'
             AND a.parameter_name = 'QSM_Debug';
   END IF;

   IF ms_qsm_utilities.g_debug = 'Y'
   THEN
      INSERT INTO ms_qsm_flow_log
           VALUES (qsm_log_seq.NEXTVAL,
                   'pid[' || ip_log_no || '] ' || ip_log_msg,
                   SYSDATE,
                   ip_log_clob);
                   commit;
   END IF;

  
EXCEPTION
   WHEN OTHERS
   THEN
      ms_qsm_log_activity ('', 'Error' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM, '');
      NULL;
END ms_qsm_log_activity; 
 
  
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_MERGE_DATA_PROC" (ip_date  IN DATE DEFAULT SYSDATE)
AS
l_date VARCHAR2(20):= TO_CHAR(SYSDATE,'DDMMYYYY');
xn_error_handle_id  NUMBER;
xn_error_seq    NUMBER;
BEGIN

    FOR table_rec in (SELECT * FROM MS_QSM_BACKUP_DETAILS WHERE OBJECT_TYPE='TABLE' AND TRUNC(BACKUP_DATE)=TRUNC(ip_date)) LOOP
        IF table_rec.OBJECT_NAME = 'MS_QSM_PARAMS' THEN
        
               NULL;
            
--            MERGE INTO MS_QSM_PARAMS T
--            USING
--            ON T.PARAM_GROUP = B.PARAM_GROUP
--            AND T.PARAMETER = B.PARAMETER
--            WHEN MATCHED THEN
--            UPDATE SET T.VALUE = B.VALUE,
        
        ELSIF  table_rec.OBJECT_NAME = 'MS_QSM_GRADE_CONFIG' THEN
        
        NULL;
        
        ELSIF  table_rec.OBJECT_NAME = 'MS_QSM_APPLIES_TO' THEN
        
        NULL;
        
        ELSIF  table_rec.OBJECT_NAME = 'MS_QSM_STATUS' THEN
        
        NULL;
        
        ELSIF  table_rec.OBJECT_NAME = 'MS_QSM_ACTIONS' THEN
        
        NULL;
        
        ELSIF  table_rec.OBJECT_NAME = 'MS_QSM_STAGES' THEN
        
        NULL;
        
        ELSIF  table_rec.OBJECT_NAME = 'MS_QSM_STAGE_ACTION_MAPPING' THEN
        
        NULL;
        
        ELSIF  table_rec.OBJECT_NAME = 'MS_QSM_REPORTING_PERIOD_TYPE' THEN
        
        NULL;
        
        ELSIF  table_rec.OBJECT_NAME = 'MS_QSM_REPORTING_PERIOD' THEN
        
        NULL;
        
        ELSIF  table_rec.OBJECT_NAME = 'MS_QSM_APPLIES_TO_PARAMS' THEN
       
        NULL;
    
        ELSE
            NULL; 
        END IF;

    END LOOP;

EXCEPTION
    WHEN OTHERS THEN
         ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
         pn_error_sequence    => xn_error_seq,
         pc_error_type        => 'E',
         pc_error_text        => 'Fatal Error in the Surveys Data Merge  Procedure ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);  
END;
  
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_NOVT_RPT_UTILS" 
AS
  /* TODO enter package declarations (types, exceptions, methods etc) here */
  PROCEDURE PRO_REFRESH_SUVEY_DETAILS(
      X_ERROR_CODE OUT NUMBER ,
      X_ERROR_MESSAGE OUT VARCHAR2 ) ;
      
    procedure pro_refresh_suvey_response_rpt(
      X_ERROR_CODE OUT NUMBER ,
      x_error_message out varchar2 ) ;
      
  FUNCTION GET_MEAN_RESPONSE(
      P_QUESTION_PK            IN VARCHAR2 ,
      P_QUE_REQUEST_ID         IN VARCHAR2 ,
      P_APPLIES_TO_OBJECT_CODE IN VARCHAR2 )
    RETURN NUMBER;
  --
  FUNCTION GET_MEDIAN_RESPONSE(
      P_QUESTION_PK            IN VARCHAR2 ,
      P_QUE_REQUEST_ID         IN VARCHAR2 ,
      p_applies_to_object_code IN VARCHAR2 )
    RETURN NUMBER;
  --
  FUNCTION GET_MODE_RESPONSE(
      P_QUESTION_PK            IN VARCHAR2 ,
      P_QUE_REQUEST_ID         IN VARCHAR2 ,
      P_APPLIES_TO_OBJECT_CODE IN VARCHAR2 )
    RETURN VARCHAR2;
  --
  FUNCTION get_participants_who_chose_na(
      P_QUESTION_PK            IN VARCHAR2 ,
      P_QUE_REQUEST_ID         IN VARCHAR2 ,
      P_APPLIES_TO_OBJECT_CODE IN VARCHAR2 )
    RETURN NUMBER;
  --
  FUNCTION calc_survey_participants(
      P_QUESTION_PK            IN VARCHAR2 ,
      P_QUE_REQUEST_ID         IN VARCHAR2 ,
      P_APPLIES_TO_OBJECT_CODE IN VARCHAR2 )
    RETURN NUMBER;
  --
  PROCEDURE MS_QSM_POPULATE_NOVT_USRORGFLW(
      O_ERR_CODE OUT NUMBER ,
      O_ERR_MSG OUT VARCHAR2 );
  --
  PROCEDURE PRO_REFRESH_SURVEY_RESULT_DATA(
      O_ERR_CODE OUT NUMBER ,
      O_ERR_MSG OUT VARCHAR2 );
  --
END MS_QSM_NOVT_RPT_UTILS;
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_NOVT_RPT_UTILS" 
AS
PROCEDURE PRO_REFRESH_SUVEY_DETAILS(
    x_error_code out number,
    x_error_message out varchar2)
as
v_err_code number;
v_err_msg  varchar2(400);
begin
      begin
          pro_refresh_suvey_response_rpt(v_err_code, v_err_msg);
      exception
          when others then
              v_err_code := sqlcode;
              v_err_msg  := substr(sqlerrm, 1, 200)||' Failed the procedure pro_refresh_suvey_response_rpt()';
               raise_application_error(-20102, sqlerrm);
      end;
      --
      begin
          pro_refresh_survey_result_data(v_err_code, v_err_msg);
      exception
          when others then
              v_err_code := sqlcode;
              v_err_msg  := substr(sqlerrm, 1, 200)||' Failed the procedure pro_refresh_suvey_response_rpt()';
               raise_application_error(-20103, sqlerrm);
      end;
EXCEPTION
WHEN OTHERS THEN
  NULL;
END PRO_REFRESH_SUVEY_DETAILS;
--
FUNCTION get_mean_response
  (
    P_QUESTION_PK            IN VARCHAR2 ,
    P_QUE_REQUEST_ID         IN VARCHAR2 ,
    p_applies_to_object_code IN VARCHAR2
  )
  RETURN NUMBER
IS
  v_mean_response NUMBER(10, 2);
begin
  SELECT AVG(RESP_SCORE)
  INTO v_mean_response
  FROM MS_QSM_RESP_QUESTION U ,
    MS_QSM_QUESTNR_RESP V
  WHERE U.QST_RESPONSE_ID      = V.QUE_RESPONSE_ID
  AND U.QUESTION_PK            = p_question_pk
  AND V.QUE_REQUEST_ID         = p_que_request_id
  and v.applies_to_object_code = p_applies_to_object_code;
  
  RETURN v_mean_response;
EXCEPTION
WHEN OTHERS THEN
  RETURN NULL;
END get_mean_response;
--
FUNCTION get_median_response(
    P_QUESTION_PK            IN VARCHAR2 ,
    P_QUE_REQUEST_ID         IN VARCHAR2 ,
    p_applies_to_object_code IN VARCHAR2 )
  RETURN NUMBER
IS
  v_median_response NUMBER(10);
BEGIN
  SELECT MEDIAN(RESP_SCORE)
  INTO v_median_response
  FROM MS_QSM_RESP_QUESTION U ,
    MS_QSM_QUESTNR_RESP V
  WHERE U.QST_RESPONSE_ID      = V.QUE_RESPONSE_ID
  and u.question_pk            = p_question_pk
  AND V.QUE_REQUEST_ID         = p_que_request_id
  and v.applies_to_object_code = p_applies_to_object_code;
  
  RETURN v_median_response;
EXCEPTION
WHEN OTHERS THEN
  RETURN NULL;
END get_median_response;
--
FUNCTION get_mode_response(
    P_QUESTION_PK            IN VARCHAR2 ,
    P_QUE_REQUEST_ID         IN VARCHAR2 ,
    p_applies_to_object_code IN VARCHAR2 )
  RETURN VARCHAR2
is
  v_mode_response VARCHAR2(200);
begin
--
select mode_value
into v_mode_response
from
(
select mode_value, frequency, row_number() over(order by frequency desc nulls last) row_no
from
(
select  listagg(resp_score, ', ') within group (order by frequency) mode_value
       ,frequency
from ( select  resp_score
              ,case
                  when count(*) > 1 then count(*)
               end frequency
       from  ms_qsm_resp_question u
            ,ms_qsm_questnr_resp v
       where u.qst_response_id      = v.que_response_id
       and u.question_pk            = p_question_pk
       and v.que_request_id         = p_que_request_id
       and v.applies_to_object_code = p_applies_to_object_code
       group by resp_score
      )
group by frequency
)
)
where row_no = 1;
--
RETURN v_mode_response;
exception
WHEN OTHERS THEN
  RETURN NULL;
END GET_MODE_RESPONSE;
--
FUNCTION get_participants_who_chose_na(
    P_QUESTION_PK            IN VARCHAR2 ,
    P_QUE_REQUEST_ID         IN VARCHAR2 ,
    p_applies_to_object_code IN VARCHAR2 )
  RETURN NUMBER
IS
  v_na_participants NUMBER(10);
BEGIN
  SELECT COUNT(NVL(U.RESP_SCORE, 0))
  INTO v_na_participants
  FROM MS_QSM_RESP_QUESTION U ,
    MS_QSM_QUESTNR_RESP V
  WHERE U.QST_RESPONSE_ID      = V.QUE_RESPONSE_ID
  AND U.QUESTION_PK            = p_question_pk
  AND V.QUE_REQUEST_ID         = p_que_request_id
  AND V.APPLIES_TO_OBJECT_CODE = P_APPLIES_TO_OBJECT_CODE
  AND U.RESP_SCORE            IS NULL;
  --
  RETURN v_na_participants;
EXCEPTION
WHEN OTHERS THEN
  RETURN NULL;
END GET_PARTICIPANTS_WHO_CHOSE_NA;
--
  FUNCTION calc_survey_participants(
      P_QUESTION_PK            IN VARCHAR2 ,
      P_QUE_REQUEST_ID         IN VARCHAR2 ,
      P_APPLIES_TO_OBJECT_CODE IN VARCHAR2 )
  RETURN NUMBER
IS
  v_respondent_count NUMBER(10);
BEGIN
SELECT COUNT(DISTINCT T1.Que_Response_Id)
INTO v_respondent_count
FROM Ms_Qsm_Questnr_Resp_Dup_V T1
WHERE T1.Instance_Id IN (SELECT MAX(T2.Instance_Id)
                         FROM Ms_Qsm_Questnr_Resp_Dup_V T2
                         GROUP BY  T2.Applies_To_Object_Code
                                  ,T2.Que_Response_Id
                        )
  AND T1.QUESTION_PK            = p_question_pk
  AND T1.QUE_REQUEST_ID         = p_que_request_id
  AND T1.APPLIES_TO_OBJECT_CODE = P_APPLIES_TO_OBJECT_CODE
GROUP BY  T1.Applies_To_Object_Code
         ,T1.Que_Request_Id;
--
    RETURN v_respondent_count;
EXCEPTION
  WHEN OTHERS THEN
             RETURN NULL;
END calc_survey_participants;
--
PROCEDURE MS_QSM_POPULATE_NOVT_USRORGFLW(
    O_ERR_CODE OUT NUMBER ,
    O_ERR_MSG OUT VARCHAR2 )
AS
  /*-----------------------------------------------------------------------------------------------
  Author          : Sameer Ranade
  Procedure Name  : MS_GRC_POPULATE_NOVT_USRORGFLW
  Purpose         : Inserting the Organization Flow Down for the users
  Called From     : Scheduled Infolet to load the data.
  Date            :20-Mar-2015
  -----------------------------------------------------------------------------------------------*/
  CURSOR c_user_data
  IS
    SELECT user_id,user_name FROM si_users_t;
  --WHERE user_id=100011;
  CURSOR c_user_flowdwn_data (pusr VARCHAR2)
  IS
    SELECT f.org_entity_id org,
      f.org_entity_name orgname
    FROM si_org_entities f
    WHERE f.parent_org_entity_id IN
      ( SELECT DISTINCT a.org_entity_id
      FROM si_org_entities a
        START WITH a.org_entity_id IN
        (SELECT DISTINCT b.org_entity_id
        FROM si_org_entities b,
          si_org_roles c
        WHERE b.org_entity_id=c.org_entity_id
        AND c.org_role_id   IN
          (SELECT d.org_role_id
          FROM si_user_org_roles d,
            si_users_t e
          WHERE d.user_id =e.user_id
          AND e.user_id   =pusr
          )
        )
        CONNECT BY prior a.org_entity_id=a.parent_org_entity_id
      )
    UNION
    SELECT DISTINCT j.org_entity_id org,
      j.org_entity_name orgname
    FROM si_org_entities j
      START WITH j.org_entity_id IN
      (SELECT DISTINCT r.org_entity_id
      FROM si_org_entities r,
        si_org_roles l
      WHERE r.org_entity_id=l.org_entity_id
      AND l.org_role_id   IN
        (SELECT m.org_role_id
        FROM si_user_org_roles m,
          si_users_t n
        WHERE m.user_id =n.user_id
        AND n.user_id   =pusr
        )
      )
      CONNECT BY prior j.org_entity_id=j.parent_org_entity_id;
  BEGIN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE ms_qsm_novt_user_org_flow_tbl';
    FOR i IN c_user_data
    LOOP
      FOR j IN c_user_flowdwn_data(i.user_id)
      LOOP
        INSERT
        INTO ms_grc_novt_user_org_flow_tbl
          (
            user_id,
            user_name,
            org_entity_id,
            org_entity_name
          )
          VALUES
          (
            i.user_id,
            i.user_name,
            j.org,
            j.orgname
          );
      END LOOP;
    END LOOP;
  EXCEPTION
  WHEN OTHERS THEN
    o_err_code := SQLCODE;
    o_err_msg  := SUBSTR(SQLERRM, 1, 200);
    RAISE_APPLICATION_ERROR(-20102, SQLERRM);
  END MS_QSM_POPULATE_NOVT_USRORGFLW;
  /* End of procedure MS_GRC_POPULATE_NOVT_USRORGFLW */
  --
PROCEDURE pro_refresh_survey_result_data
  (
    o_err_code OUT NUMBER ,
    O_ERR_MSG OUT VARCHAR2
  )
IS
BEGIN
  --Truncating table ms_qsm_survey_result_rpt_tbl before inserts
  EXECUTE IMMEDIATE 'TRUNCATE TABLE ms_qsm_survey_result_rpt_tbl';
  --
  INSERT /*+ APPEND */
  INTO ms_qsm_survey_result_rpt_tbl
WITH T_VW AS
  (SELECT T2.INDV_ITEM_FIELD_1 BU_ID ,
    (SELECT ORG_ENTITY_NAME
    FROM SI_ORG_ENTITIES_T
    WHERE T2.INDV_ITEM_FIELD_1 = TO_CHAR(ORG_ENTITY_ID)
    ) BU_NAME ,
    T5.TGT_OBJ_ID BA_ID ,
    T5.TGT_OBJ_NAME BA_NAME ,
    (SELECT (SCH_START_DATE+SCH_DUE_AFTER)
    FROM MS_QSM_QUESTNR_SCH
    WHERE SCH_REQ_ID=T1.QUE_REQUEST_ID
    ) SURVEY_DUE_DATE ,
    T4.QST_ID ,
    T4.QST_NAME ,
    (select ms_qsm_novt_rpt_utils.get_mean_response (t4.qst_id_pk, t1.que_request_id, t2.indv_item_field_1)
    FROM DUAL
    ) avg_survey_or_impact_score ,
    (select loc_rating
		    from ms_qsm_loc_rating
			where ms_qsm_novt_rpt_utils.get_mean_response (t4.qst_id_pk, t1.que_request_id, t2.indv_item_field_1)
			      between min_score and max_score
		   ) loc_rating ,
    (select impact_rating
		    from ms_qsm_impact_rating
			where ms_qsm_novt_rpt_utils.get_mean_response (t4.qst_id_pk, t1.que_request_id, t2.indv_item_field_1)
			      between min_score and max_score
		   ) impact_rating ,
    (SELECT MS_QSM_NOVT_RPT_UTILS.GET_MEAN_RESPONSE (T4.QST_ID_PK, T1.QUE_REQUEST_ID, T2.INDV_ITEM_FIELD_1)
    FROM DUAL
    ) SURVEY_MEAN ,
    (SELECT MS_QSM_NOVT_RPT_UTILS.GET_MEDIAN_RESPONSE (T4.QST_ID_PK, T1.QUE_REQUEST_ID, T2.INDV_ITEM_FIELD_1)
    FROM DUAL
    ) SURVEY_MEDIAN ,
    (SELECT MS_QSM_NOVT_RPT_UTILS.GET_MODE_RESPONSE (T4.QST_ID_PK, T1.QUE_REQUEST_ID, T2.INDV_ITEM_FIELD_1)
    FROM DUAL
    ) SURVEY_MODE ,
    (SELECT MS_QSM_NOVT_RPT_UTILS.CALC_SURVEY_PARTICIPANTS (T4.QST_ID_PK, T1.QUE_REQUEST_ID, T2.INDV_ITEM_FIELD_1) FROM dual) TOTAL_SURVEY_PARTICIPANTS ,
    (SELECT MS_QSM_NOVT_RPT_UTILS.GET_PARTICIPANTS_WHO_CHOSE_NA (T4.QST_ID_PK, T1.QUE_REQUEST_ID, T2.INDV_ITEM_FIELD_1)
    FROM DUAL
    ) PARTICIPANTS_WHO_CHOSE_NA ,
    T6.CATEGORY_QUEST
  FROM MS_QSM_INIT_QUESTNR T1 ,
    MS_QSM_INIT_QUESTNR_IND T2 ,
    MS_QSM_SECTION T3 ,
    MS_QSM_QUESTION T4 ,
    MS_GRC_RELATIONSHIP_DETAILS T5 ,
    MS_GRC_QUESTION_PROC_CAT T6
  WHERE T1.QUE_REQUEST_ID = T2.QUE_REQUEST_ID
  AND T1.QUESTIONNAIRE_ID = T3.SECTION_QUESTNR_FK
  AND T3.SECTION_ID_PK    = T4.QST_SECTION_ID
  AND T4.QST_ID           = T5.SRC_OBJ_ID
  AND T4.QST_ID           = T6.OBJECT_ID
  AND EXISTS
    (SELECT 1
    FROM SI_ORG_ENTITIES_T
    WHERE T2.INDV_ITEM_FIELD_1 = TO_CHAR(ORG_ENTITY_ID)
    )
  )
SELECT P.BU_ID                 AS "BU_ID" ,
  P.BU_NAME                    AS "BU_NAME" ,
  P.BA_ID                      AS "BA_ID" ,
  P.BA_NAME                    AS "BA_NAME" ,
  P.SURVEY_DUE_DATE            AS "SURVEY_DUE_DATE" ,
  P.QST_ID                     AS "QST_ID" ,
  P.QST_NAME                   AS "QST_NAME" ,
  p.avg_survey_or_impact_score as "AVG_SURVEY_SCORE" ,
  P.LOC_RATING                 AS "LOC_RATING" ,
  P.SURVEY_MEAN                AS "SURVEY_MEAN" ,
  P.SURVEY_MEDIAN              AS "SURVEY_MEDIAN" ,
  P.SURVEY_MODE                AS "SURVEY_MODE" ,
  P.TOTAL_SURVEY_PARTICIPANTS  AS "TOTAL_SURVEY_PARTICIPANTS" ,
  P.PARTICIPANTS_WHO_CHOSE_NA  AS "PARTICIPANTS_WHO_CHOSE_NA" ,
  q.avg_survey_or_impact_score as "AVG_IMPACT_SCORE" ,
  Q.IMPACT_RATING              AS "IMPACT_RATING"
from
  (SELECT * FROM T_VW WHERE CATEGORY_QUEST = 6
  ) p ,
  (SELECT * FROM T_VW WHERE CATEGORY_QUEST = 7
  ) Q
WHERE P.BU_ID         = Q.BU_ID
AND P.BU_NAME         = Q.BU_NAME
AND P.BA_ID           = Q.BA_ID
AND P.BA_NAME         = Q.BA_NAME
AND P.SURVEY_DUE_DATE = Q.SURVEY_DUE_DATE;
EXCEPTION
WHEN OTHERS THEN
  o_err_code := SQLCODE;
  o_err_msg  := SUBSTR(SQLERRM, 1, 200);
  RAISE_APPLICATION_ERROR(-20101, SQLERRM);
END pro_refresh_survey_result_data;
/* End of procedure pro_refresh_survey_result_data */

PROCEDURE PRO_REFRESH_SUVEY_RESPONSE_RPT(
    X_ERROR_CODE OUT NUMBER,
    x_error_message OUT VARCHAR2)
AS
begin
  EXECUTE IMMEDIATE 'TRUNCATE TABLE MS_QSM_SURVEY_DETAILS_TBL';
  /* TODO implementation required */
  MERGE INTO MS_QSM_SURVEY_DETAILS_TBL a USING
 (SELECT a.QUE_REQUEST_ID QUE_REQUEST_ID ,
    QUE_REQUEST_NAME ,
    QUESTIONNAIRE_ID ,
    QUE_REQUEST_TYPE ,
    MANAGE_SURVEY ,
    DD_PROCESS_INSTANCE_ID ,
    DD_CREATED_ON,
    Que_Applies_To As Applies_To ,
     (SELECT B.OBJECT_NAME
    FROM MS_QSM_APPLIES_TO B
    WHERE B.OBJECT_ID = a.QUE_APPLIES_TO
    AND LOCALE_ID     =
      (SELECT Y.LOCALE_ID
      FROM SI_USERS_T x,
        SI_LOCALES y
      WHERE X.LOCALE  = Y.LOCALE_STRING
      AND X.USER_NAME = A.DD_CREATED_BY
      )
    )APPLIES_TO_DISP,
    INDV_ITEM_FIELD_1 as BU_ID,
   (select ORG_ENTITY_NAME from SI_ORG_ENTITIES_T where ORG_ENTITY_ID = INDV_ITEM_FIELD_1) as BU_NAME
   , (SELECT (SCH_START_DATE+SCH_DUE_AFTER)
    FROM MS_QSM_QUESTNR_SCH
    WHERE sch_req_id=a.QUE_REQUEST_ID
    )                                            As Sur_Due_Date,
      C.CNT AS SENT,
      (SELECT COUNT (QUE_RESPONSE_ID)
    from MS_QSM_QUESTNR_RESP SA
       where SA.QUE_REQUEST_ID = a.QUE_REQUEST_ID
  and APPLIES_TO_OBJECT= (select ORG_ENTITY_NAME from SI_ORG_ENTITIES_T where ORG_ENTITY_ID = INDV_ITEM_FIELD_1)
  )AS COMPLETED,
    TO_CHAR(DD_CREATED_ON,'yyyy') YEAR
  From Ms_Qsm_Init_Questnr A,
    Ms_Qsm_Init_Questnr_Ind B,
    
(Select Count(Distinct Que_Response_Id) as cnt,Que_Request_Id,Applies_To_Object_Code From Ms_Qsm_Questnr_Resp_Dup_V
Where Instance_Id In(Select Max(Instance_Id) From Ms_Qsm_Questnr_Resp_Dup_V
  Group By Applies_To_Object_Code,Que_Response_Id)
 Group By Applies_To_Object_Code,Que_Request_Id)c


        Where A.Que_Request_Id =B.Que_Request_Id And
    C.QUE_REQUEST_ID=A.QUE_REQUEST_ID AND 
    c.APPLIES_TO_OBJECT_CODE=INDV_ITEM_FIELD_1
   AND QUE_APPLIES_TO     =10
  And Que_Request_Type   =2
  ) Z ON(z.que_request_id=a.SURVEY_ID)
WHEN MATCHED THEN
  UPDATE
  SET a.SURVEY_NAME      =Z.QUE_REQUEST_NAME,
    a.QUESTIONNAIRE_ID   =Z.QUESTIONNAIRE_ID,
    a.SURVEY_TYPE        =Z.QUE_REQUEST_TYPE,
    a.MANAGE_SURVEY      =Z.MANAGE_SURVEY,
    a.PROCESS_INSTANCE_ID=Z.DD_PROCESS_INSTANCE_ID,
    a.SURVEY_CREATED_ON  =Z.DD_CREATED_ON,
    a.SURVEY_DUE_DATE    =Z.SUR_DUE_DATE,
    a.APPLIES_TO         =Z.APPLIES_TO,
    a.APPLIES_TO_DISP    =Z.APPLIES_TO_DISP,
    A.BU_ID              =Z.BU_ID,
    a.BU_NAME            =Z.BU_NAME,
    a.SENT               = Z.SENT,
    a.COMPLETED          = Z.COMPLETED,
    a.PROGRESS           =Z.SENT- Z.COMPLETED ,
    A.YEAR               =Z.YEAR WHEN NOT matched THEN
  INSERT
    (
      a.SURVEY_ID ,
      a.SURVEY_NAME ,
      a.QUESTIONNAIRE_ID,
      a.SURVEY_TYPE,
      a.MANAGE_SURVEY,
      a.PROCESS_INSTANCE_ID,
      a.SURVEY_CREATED_ON,
      a.SURVEY_DUE_DATE ,
      a.APPLIES_TO,
      a.APPLIES_TO_DISP,
      A.BU_ID ,
      a.BU_NAME,
      A.SENT,
      a.COMPLETED ,
      a.PROGRESS,
      A.YEAR
    )
    VALUES
    (
      Z.QUE_REQUEST_ID,
      Z.QUE_REQUEST_NAME,
      Z.QUESTIONNAIRE_ID,
      Z.QUE_REQUEST_TYPE,
      Z.MANAGE_SURVEY,
      Z.DD_PROCESS_INSTANCE_ID ,
      Z.DD_CREATED_ON,
      Z.SUR_DUE_DATE,
      Z.APPLIES_TO,
      Z.APPLIES_TO_DISP,
      Z.BU_ID ,
      Z.BU_NAME,
      Z.SENT,
      Z.COMPLETED,
      Z.SENT- Z.COMPLETED,
      Z.YEAR
    );
EXCEPTION
WHEN OTHERS THEN
  NULL;
END PRO_REFRESH_SUVEY_RESPONSE_RPT;

--
END MS_QSM_NOVT_RPT_UTILS;
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_ORB_RELATION_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_ORB_RELATION_O
    Creation Time : 2012-DEC-31 17:00:41.106939000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_ORB_RELATION_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_REL_SOURCE_ID                       IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_REL_SOURCE_ID                       IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_ORB_RELATION_O ;
  
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_ORB_RELATION_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_REL_SOURCE_ID                       IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_ORB_RELATION', 'D');

        UPDATE MS_QSM_ORB_RELATION
           SET DD_EDIT_FLAG = 'N'
         WHERE REL_SOURCE_ID                            = iop_REL_SOURCE_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_REL_SOURCE_ID                       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_ORB_RELATION', 'D');

        UPDATE MS_QSM_ORB_RELATION
           SET DD_EDIT_FLAG = 'Y'
         WHERE REL_SOURCE_ID                            = iop_REL_SOURCE_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_ORB_RELATION_O; 
 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_OVERDUE_ROW" as object
(
OWNED_BY  VARCHAR2(4000),
Issue_due_date VARCHAR2(4000),
Issue_Title VARCHAR2(4000),
Issue_Owner varchar2(4000),
Issue_Description VARCHAR2(4000),
Issue_Rating varchar2(4000),
Finding_Type VARCHAR2(4000),
Source_Type varchar2(4000),
Source varchar2(4000),
Source_Reference varchar2(4000),
Same_Approver_Flag varchar2(4000),
Approver_Org varchar2(4000),
Approver varchar2(4000),
final_action_approval varchar2(4000),
ACTION_DUE_DATE VARCHAR2(4000),
Action_Owner varchar2(4000),
Action_Title varchar2(4000),
Action_Description varchar2(4000),
PRIORITY VARCHAR2(4000),
Action_Start_Date varchar2(4000),
TARGET_OBJECT_TYPE VARCHAR2(4000),
TARGET_OBJECT_NAME VARCHAR2(4000),
TARGET_OBJECT_ID VARCHAR2(4000),
ISSUE_LANDING_STAGE VARCHAR2(4000)
); 

 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_OVERDUE_TABLE" is table of MS_QSM_OVERDUE_ROW; 

 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_PRINT_DATA_OBJ" AS OBJECT
            ( QUE_REQUEST_NAME VARCHAR2(4000),
              QUE_RESPONSE_ID VARCHAR2(4000),
              QUE_REQUEST_ID VARCHAR2(4000),
              DUE_DATE DATE,
              RESP_STATUS VARCHAR2(255),
              APPLIES_TO VARCHAR2(4000),
              ASSESSOR_ORG VARCHAR2(4000),
              RESPONDENT  VARCHAR2(4000),
              INSTRUCTIONS VARCHAR2(4000),
              OVERALL_GRADE VARCHAR2(4000),
              OVERALL_SCORE NUMBER,
              RESP_COMMENTS VARCHAR2(4000),
              QUE_REQUEST_TYPE VARCHAR2(4000),
              SECTION_NAME VARCHAR2(4000),
              SECTION_ID VARCHAR2(4000),
              SECTION_FK VARCHAR2(4000),
              SEC_GRADE VARCHAR2(4000),
              WEIGHTED_SCORE NUMBER,
              QUESTION_SEC_ID VARCHAR2(4000),
              QUESTION_NAME  VARCHAR2(4000),
              QUESTION_PK  VARCHAR2(4000),
              QUESTION_FK  VARCHAR2(4000),
              RESP_GRADE  VARCHAR2(4000),
              RESP_WEIGHTED_SCORE NUMBER,
              QUESTION_DESCRIPTION  VARCHAR2(4000),
              RESPONSE_FIELD  varchar2(4000),
              RESPONSE_TYPE varchar2(10),
              SPREADSHEET_ID VARCHAR2(255),
                CHECK_RESPONSE VARCHAR2(4000),
                QST_PARENT_TYPE VARCHAR2(255),
                QST_OPTIONAL VARCHAR2(10),
                REPORTING_PERIOD VARCHAR2(4000),
                ACTION_COMMENTS VARCHAR2(4000)
            ) ; 

 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_PRINT_DATA_TAB" as table of  MS_QSM_PRINT_DATA_OBJ; 

 
/
  CREATE OR REPLACE FUNCTION "NOVT_DEV"."MS_QSM_PRINT_PDF_DATA" (I_PID_STATUS IN VARCHAR2,
                                   i_user_name    IN VARCHAR2)
    RETURN MS_QSM_PRINT_DATA_TAB
    PIPELINED
    IS PRAGMA AUTONOMOUS_TRANSACTION;

    l_sql_string CLOB;
    ln_pid           NUMBER;
    ln_status       NUMBER;
    l_metric_id NUMBER;
    l_error_handle_id   NUMBER := 999;
    l_error_sequence    NUMBER := 999;

    l_locale_id                    NUMBER;
    l_enterprice_id         NUMBER;


    TYPE ty_PRINT_data IS RECORD 
            ( QUE_REQUEST_NAME VARCHAR2(4000),
              QUE_RESPONSE_ID VARCHAR2(4000),
              QUE_REQUEST_ID VARCHAR2(4000),
              DUE_DATE DATE,
              RESP_STATUS VARCHAR2(255),
              APPLIES_TO VARCHAR2(4000),
              ASSESSOR_ORG VARCHAR2(4000),
              RESPONDENT  VARCHAR2(4000),
              INSTRUCTIONS VARCHAR2(4000),
              OVERALL_GRADE VARCHAR2(4000),
              OVERALL_SCORE NUMBER,
              RESP_COMMENTS VARCHAR2(4000),
              QUE_REQUEST_TYPE VARCHAR2(4000),             
              SECTION_NAME VARCHAR2(4000),
              SECTION_ID VARCHAR2(4000),
              SECTION_FK VARCHAR2(4000),
              SEC_GRADE VARCHAR2(4000),
              WEIGHTED_SCORE NUMBER,
              QUESTION_SEC_ID VARCHAR2(4000),
              QUESTION_NAME  VARCHAR2(4000),
              QUESTION_PK  VARCHAR2(4000),
              QUESTION_FK  VARCHAR2(4000),
              RESP_GRADE  VARCHAR2(4000),
              RESP_WEIGHTED_SCORE NUMBER,
              QUESTION_DESCRIPTION  VARCHAR2(4000),
              RESPONSE_FIELD  varchar2(4000),
              RESPONSE_TYPE VARCHAR2(10),
              SPREADSHEET_ID  VARCHAR2(255),
              CHECK_RESPONSE  VARCHAR2(4000),
              QST_PARENT_TYPE VARCHAR2(255),
              QST_OPTIONAL VARCHAR2(10),
              REPORTING_PERIOD VARCHAR2(4000),
              ACTION_COMMENTS VARCHAR2(4000)
            ) ;

   l_PRINT_data    ty_PRINT_data;

   TYPE ty_PRINT_data_tab IS TABLE OF ty_PRINT_data
                                INDEX BY PLS_INTEGER;

   L_PRINT_DATA_TAB   TY_PRINT_DATA_TAB;
   XN_ERROR_HANDLE_ID NUMBER;
   
xn_error_seq      NUMBER;
    BEGIN
                    SELECT METRIC_ID
                    INTO l_metric_id
                    FROM SI_METRICS_T
                    WHERE METRIC_NAME = (SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='RESQSM' AND IS_ACTIVE='Y');

                    SELECT b.LOCALE_ID,a.ENTERPRISE_ID
                    INTO l_locale_id,l_enterprice_id
                    FROM SI_USERS_T a,SI_LOCALES b
                    WHERE USER_NAME =i_user_name
                    AND a.LOCALE = LOCALE_STRING  ;

                    ln_pid := TO_NUMBER(SUBSTR(i_pid_status,1,(INSTR(i_pid_status,'~',1)-1)));

                    ln_status := SUBSTR(i_pid_status,(INSTR(i_pid_status,'~',1)+1));
                    
                                        
                    L_SQL_STRING:='SELECT QUE_REQUEST_NAME,QUE_RESPONSE_ID,QUE_REQUEST_ID,DUE_DATE,
                                    RESP_STATUS,
                                    APPLIES_TO,APPLIES_TO_OBJECT AS ASSESSOR_ORG,
                                    RESPONDENT,INSTRUCTIONS,OVERALL_GRADE,
                                    OVERALL_SCORE,
                                    RESP_COMMENTS,DECODE(TMEP_QUE_TYPE,''2'',''Survey'',''3'',''Certification'',''4'',''Scorecard'') as QUE_REQUEST_TYPE,SECTION_NAME,SECTION_ID,SECTION_FK,
                                    SEC_GRADE,WEIGHTED_SCORE,QUESTION_SEC_ID,QUESTION_NAME,QUESTION_PK,QUESTION_FK,RESP_GRADE,RESP_WEIGHTED_SCORE,
                                    QUESTION_DESCRIPTION,RESPONSE_FIELD,RESPONSE_TYPE,SPREADSHEET_ID,CHECK_RESPONSE,QST_PARENT_TYPE,QST_OPTIONAL,REPORTING_PERIOD,ACTION_COMMENTS
                                    FROM
                                      (SELECT TMEP_QUE_TYPE,QUESTION_SEC_ID,INSTANCE_ID,MAX(INSTANCE_ID) OVER (PARTITION BY  PROCESS_INSTANCE_ID) MAX_IID,
                                      PROCESS_INSTANCE_ID,INSTANCE_REC_NUM,
                                      QUE_REQUEST_NAME,QUE_RESPONSE_ID,QUE_REQUEST_ID,INSTRUCTIONS,DUE_DATE,
                                      (SELECT STATUS_NAME FROM MS_QSM_STATUS WHERE STATUS_ID=RESP_STATUS)RESP_STATUS,
                                      RESPONDENT,APPLIES_TO,APPLIES_TO_OBJECT,APPLIES_TO_OBJECT_CODE,
                                      (SELECT GRADE_DESC FROM MS_QSM_GRADE_CONFIG WHERE GRADE_ID=OVERALL_GRADE)OVERALL_GRADE,
                                      OVERALL_SCORE,
                                      SECTION_NAME,SECTION_ID,SECTION_FK,
                                      SEC_GRADE,WEIGHTED_SCORE,QUESTION_NAME,QUESTION_PK,QUESTION_FK,APPROVER_COMMENT,
                                      RESP_COMMENTS,RESP_GRADE,RESP_WEIGHTED_SCORE,QUESTION_DESCRIPTION,
                                      DECODE(RESPONSE_TYPE,''1'',TO_CHAR(RESP_NUMBER),''2'',TO_CHAR(RESP_DATE),''3'',TO_CHAR(RESP_NUMBER),''4'',(SELECT MS_CONCAT(DISPLAY_VALUE)
                                      FROM MS_QSM_QST_LOV_DATA
                                      WHERE INSTR('',''||RESP_MLOV||'','','',''||STORED_VALUE||'','',1)>0
                                      AND QUESTION_ID=QUESTION_PK),''5'',RESP_CLOB,
                                      ''6'',(SELECT MS_CONCAT(DISPLAY_VALUE)
                                      FROM MS_QSM_QST_LOV_DATA
                                      where stored_value=resp_radio
                                      AND QUESTION_ID=QUESTION_PK),''7'',(SELECT MS_CONCAT(DISPLAY_VALUE)
                                      FROM MS_QSM_QST_LOV_DATA
                                      where stored_value=resp_dd
                                      AND QUESTION_ID=QUESTION_PK),''8'',SUBSTR(resp_attachment,1,INSTR(resp_attachment,''#'',1)-1),
                                      ''9'',substr(substr(qst_json_value,instr(qst_json_value,''"SPRD_LINK"'',1)+13),1,instr(substr(qst_json_value,instr(qst_json_value,''"SPRD_LINK"'',1)+13),''"'',1)-1),''10'',(SELECT MS_CONCAT(DISPLAY_VALUE)
                                      FROM MS_QSM_QST_LOV_DATA
                                      where stored_value=resp_radio_b
                                      AND QUESTION_ID=QUESTION_PK),''11'',(SELECT MS_CONCAT(DISPLAY_VALUE)
                                      FROM MS_QSM_QST_LOV_DATA
                                      WHERE INSTR('',''||CHECKBOX_HIDDEN_VALUE||'','','',''||STORED_VALUE||'','',1)>0
                                      AND QUESTION_ID=QUESTION_PK),'''')RESPONSE_FIELD,RESPONSE_TYPE AS RESPONSE_TYPE,SUBSTR(SUBSTR(QST_JSON_VALUE,INSTR(QST_JSON_VALUE,''SPREADSHEET_ID'',1)+17),1,INSTR(SUBSTR(QST_JSON_VALUE,INSTR(QST_JSON_VALUE,''SPREADSHEET_ID'',1)+17),''"'',1)-1) AS SPREADSHEET_ID,
                                      CHECK_RESPONSE,QST_PARENT_TYPE,DECODE((SELECT SECTION_OPTIONAL FROM MS_QSM_SECTION WHERE SECTION_ID_PK=QUESTION_SEC_ID),''no'',DECODE(QST_OPTIONAL,''no'',''*'','' ''),'' '') AS QST_OPTIONAL,(SELECT PERIOD_NAME FROM MS_QSM_REPORTING_PERIOD WHERE PERIOD_ID=REPORTING_PERIOD) AS REPORTING_PERIOD,ACTION_COMMENTS
                                      FROM  si_'||l_metric_id||'_T
                                      WHERE PROCESS_INSTANCE_ID='||ln_pid||')
                                    WHERE INSTANCE_ID=MAX_IID'
                                    ;
                    
                  
                    EXECUTE IMMEDIATE L_SQL_STRING
                    BULK COLLECT INTO l_PRINT_data_tab;
                                      

                   IF L_PRINT_DATA_TAB.COUNT > 0 THEN
                       FOR i IN l_PRINT_data_tab.FIRST .. l_PRINT_data_tab.LAST
                        LOOP
                         PIPE ROW (MS_QSM_PRINT_DATA_OBJ (L_PRINT_DATA_TAB (I).QUE_REQUEST_NAME,
                                                             L_PRINT_DATA_TAB (I).QUE_RESPONSE_ID,
                                                             L_PRINT_DATA_TAB (I).QUE_REQUEST_ID,
                                                             L_PRINT_DATA_TAB(I).DUE_DATE,
                                                             L_PRINT_DATA_TAB(I).RESP_STATUS,
                                                             L_PRINT_DATA_TAB(I).APPLIES_TO,
                                                             L_PRINT_DATA_TAB(I).ASSESSOR_ORG,
                                                             L_PRINT_DATA_TAB(I).RESPONDENT,
                                                             L_PRINT_DATA_TAB(I).INSTRUCTIONS,
                                                             L_PRINT_DATA_TAB(I).OVERALL_GRADE,
                                                             L_PRINT_DATA_TAB(I).OVERALL_SCORE,
                                                             L_PRINT_DATA_TAB(I).RESP_COMMENTS,
                                                             L_PRINT_DATA_TAB(I).QUE_REQUEST_TYPE,
                                                             L_PRINT_DATA_TAB(I).SECTION_NAME,
                                                             L_PRINT_DATA_TAB(I).SECTION_ID,
                                                             L_PRINT_DATA_TAB(I).SECTION_FK,
                                                             L_PRINT_DATA_TAB(I).SEC_GRADE,
                                                             L_PRINT_DATA_TAB(I).WEIGHTED_SCORE,
                                                             L_PRINT_DATA_TAB(I).QUESTION_SEC_ID,
                                                             L_PRINT_DATA_TAB(I).QUESTION_NAME,
                                                             L_PRINT_DATA_TAB(I).QUESTION_PK,
                                                             L_PRINT_DATA_TAB(I).QUESTION_FK,
                                                             L_PRINT_DATA_TAB(I).RESP_GRADE,
                                                             L_PRINT_DATA_TAB(I).RESP_WEIGHTED_SCORE,
                                                             L_PRINT_DATA_TAB(I).QUESTION_DESCRIPTION,
                                                             L_PRINT_DATA_TAB(I).RESPONSE_FIELD, 
                                                             L_PRINT_DATA_TAB(I).RESPONSE_TYPE,
                                                             L_PRINT_DATA_TAB(I).SPREADSHEET_ID,
                                                             L_PRINT_DATA_TAB(I).CHECK_RESPONSE,
                                                             L_PRINT_DATA_TAB(I).QST_PARENT_TYPE,
                                                             L_PRINT_DATA_TAB(I).QST_OPTIONAL,
                                                             L_PRINT_DATA_TAB(I).REPORTING_PERIOD,
                                                             L_PRINT_DATA_TAB(I).ACTION_COMMENTS
                                                             ));
                        END LOOP;
                        
                    End if;

--                    IF ln_status = 0 THEN
--
--                        DELETE FROM SI_EVENT_ASSIGNMENTS
--                        WHERE INFOLET_ID = l_metric_id
--                        AND USER_ID = ms_apps_utilities.get_user_id(i_user_name)
--                        AND PROCESS_INSTANCE_ID = ln_pid;
--
--                    ELSIF ln_status <> 1 THEN
--
--                        UPDATE SI_EVENT_ASSIGNMENTS
--                        SET STATUS = ln_status
--                        WHERE INFOLET_ID = l_metric_id
--                        AND USER_ID = ms_apps_utilities.get_user_id(i_user_name)
--                        AND PROCESS_INSTANCE_ID = ln_pid;
--
--                    END IF;

                    COMMIT;
                    RETURN;

    END; 
 
/
  CREATE OR REPLACE FUNCTION "NOVT_DEV"."MS_QSM_PROCESS_COLLABORATION" (p_user_list CLOB, p_metric_id_pid VARCHAR2)
   RETURN NUMBER
AS
   TYPE ty_recepients IS RECORD (
      process_instance_id   NUMBER,
      recepient             VARCHAR2 (100),
      metric_id             NUMBER,
      assignment_status     VARCHAR2 (1)
   );

   TYPE ty_recepient_table IS TABLE OF ty_recepients
                                 INDEX BY VARCHAR2 (100);

   l_recepient_table            ty_recepient_table;
   l_recepient_table_orig       ty_recepient_table;
   l_recepient_table_existing   ty_recepient_table;
   l_index                      VARCHAR2 (100);
   l_assignment_text            VARCHAR2 (1000);
   l_enterprise_id              SI_ENT.ENTERPRISE_ID%TYPE;
   l_enterprise_name            SI_ENT.ENTERPRISE_NAME%TYPE;
   l_error_code                 NUMBER;
   l_error_message              VARCHAR2 (1000);
   p_metric_id                  NUMBER;
   p_id                         NUMBER;
   PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
--   IF p_user_list <> 'NULL'
--  THEN
IF 1=2 THEN

      IF NOT (MS_QSM_UTILITIES.G_TBL_METRIC_MAINTENANCE.COUNT > 0)
      THEN
         MS_QSM_UTILITIES.INITIALIZE_METRIC_MAINT ('QSM');
      END IF;

      p_metric_id := SUBSTR (p_metric_id_pid, 1, INSTR (p_metric_id_pid, '~') - 1);
      p_id := SUBSTR (p_metric_id_pid, INSTR (p_metric_id_pid, '~') + 1);


      EXECUTE IMMEDIATE   'select dd_enterprise_info from '
                       || MS_QSM_UTILITIES.G_TBL_METRIC_MAINTENANCE ('RESQSM')
                       || '_V where process_instance_id =:1 and rownum =1'
         INTO l_enterprise_name
         USING p_id;

      SELECT enterprise_id
        INTO l_enterprise_id
        FROM si_ent
       WHERE enterprise_name = l_enterprise_name;

      FOR x IN (SELECT *
                  FROM ms_qsm_collaboration
                 WHERE metric_id = p_metric_id AND process_instance_id = p_id)
      LOOP
         l_recepient_table_existing (x.metric_id || '~' || x.process_instance_id || '~' || x.recepient).process_instance_id := x.process_instance_id;
         l_recepient_table_existing (x.metric_id || '~' || x.process_instance_id || '~' || x.recepient).recepient := x.recepient;
         l_recepient_table_existing (x.metric_id || '~' || x.process_instance_id || '~' || x.recepient).metric_id := x.metric_id;
         l_recepient_table_existing (x.metric_id || '~' || x.process_instance_id || '~' || x.recepient).assignment_status := x.assignment_status;
      END LOOP;

      FOR l_rec IN (SELECT COLUMN_VALUE AS recepient FROM TABLE (MS_APPS_UTILITIES.SPLIT_STRING (p_user_list, ',')))
      LOOP
         IF TRIM (l_rec.recepient) IS NOT NULL
         THEN
            l_recepient_table (p_metric_id || '~' || p_id || '~' || l_rec.recepient).process_instance_id := p_id;
            l_recepient_table (p_metric_id || '~' || p_id || '~' || l_rec.recepient).recepient := l_rec.recepient;
            l_recepient_table (p_metric_id || '~' || p_id || '~' || l_rec.recepient).metric_id := p_metric_id;
            l_recepient_table (p_metric_id || '~' || p_id || '~' || l_rec.recepient).assignment_status := 'U';

            l_recepient_table_orig (p_metric_id || '~' || p_id || '~' || l_rec.recepient).process_instance_id := p_id;
            l_recepient_table_orig (p_metric_id || '~' || p_id || '~' || l_rec.recepient).recepient := l_rec.recepient;
            l_recepient_table_orig (p_metric_id || '~' || p_id || '~' || l_rec.recepient).metric_id := p_metric_id;
            l_recepient_table_orig (p_metric_id || '~' || p_id || '~' || l_rec.recepient).assignment_status := 'U';
         END IF;
      END LOOP;

      l_index := l_recepient_table.FIRST;

      WHILE l_index IS NOT NULL
      LOOP
         IF l_recepient_table_existing.EXISTS (l_index)
         THEN
            l_recepient_table.delete (l_index);
         ELSIF NOT (l_recepient_table_existing.EXISTS (l_index))
         THEN
            --Make Assignment
            si_ems_sv.process_event_assignments_new (x_event_users           => l_recepient_table (l_index).recepient,
                                                     x_enterprise_id         => l_enterprise_id,
                                                     x_process_instance_id   => p_id,
                                                     x_infolet_id            => p_metric_id,
                                                     x_captured_by           => NULL,
                                                     x_xml                   => NULL,
                                                     x_comments              => NULL,
                                                     x_assignment_text       => l_assignment_text,
                                                     --x_due_dates             => TO_CHAR (ld_due_date, 'MM/DD/YYYY HH24:MI:SS'),
                                                     x_due_dates             => NULL,
                                                     x_error_code            => l_error_code,
                                                     x_error_message         => l_error_message --                                                  x_priority              => ln_priority
                                                                                               );
            l_recepient_table (l_index).assignment_status := 'P';
         END IF;

         l_index := l_recepient_table.NEXT (l_index);
      END LOOP;

      l_index := l_recepient_table_existing.FIRST;

      WHILE l_index IS NOT NULL
      LOOP
         IF NOT (l_recepient_table_orig.EXISTS (l_index))
         THEN
            --Revoke assignment
            DELETE FROM si_event_assignments
                  WHERE infolet_id = p_metric_id AND user_id = MS_APPS_UTILITIES.GET_user_ID (l_recepient_table_existing (l_index).recepient);


            DELETE FROM ms_qsm_collaboration
                  WHERE     metric_id = l_recepient_table_existing (l_index).metric_id
                        AND recepient = l_recepient_table_existing (l_index).recepient
                        AND process_instance_id = l_recepient_table_existing (l_index).process_instance_id;
         END IF;


         l_index := l_recepient_table_existing.NEXT (l_index);
      END LOOP;

      l_index := l_recepient_table.FIRST;

      WHILE l_index IS NOT NULL
      LOOP
         INSERT INTO ms_qsm_collaboration (process_instance_id,
                                           recepient,
                                           metric_id,
                                           assignment_status)
              VALUES (l_recepient_table (l_index).process_instance_id,
                      l_recepient_table (l_index).recepient,
                      l_recepient_table (l_index).metric_id,
                      l_recepient_table (l_index).assignment_status);

         l_index := l_recepient_table.NEXT (l_index);
      END LOOP;
--   END IF;

   COMMIT;
END IF;

   RETURN 0;
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line (DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      DBMS_OUTPUT.put_line (SQLERRM);
      ROLLBACK;
      RETURN 1;
END; 
 
  
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_QSMFND_QSMFND_PROD" (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN OUT CLOB,
                                                                       lt_out_data          IN OUT CLOB,
                                                                       pc_process_code      IN     VARCHAR2,
                                                                       lc_from_stage        IN     VARCHAR2,
                                                                       lc_to_stage          IN     VARCHAR2,
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
    AS
    
    l_out_xml               XMLTYPE;
    l_js_issue_id           VARCHAR2(255);
    l_issue_id_pk         VARCHAR2(255);  
    l_js_action_id           VARCHAR2(255);
    l_action_id_pk         VARCHAR2(255);  
            ln_log_no                                                NUMBER;
                    l_error_code                                            NUMBER;
        l_error_message                                      VARCHAR2(4000);
                                
    BEGIN
                            
        l_out_xml := xmltype (lt_in_data);  
                            
        FOR non_multirow_rec IN (select que_response_id,finding_issues_pk,process_instance_id
                                                FROM XMLTABLE(
                                                             xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"),'msa:datapacket/msa:data/msa:nonmultirow'
                                                             PASSING l_out_xml
                                                             COLUMNS que_response_id VARCHAR2(255) PATH 'msa:que_response_id',
                                                                            finding_issues_pk VARCHAR2(255) PATH 'msa:finding_issues_pk',
                                                                            process_instance_id NUMBER PATH 'msa:process_instance_id'))
                                                                            
          LOOP
                    
                ms_qsm_utilities.process_multirow(l_out_xml,'iss,act','issue_title,action_title');
            
                IF non_multirow_rec.finding_issues_pk IS NULL THEN
                    
                    MS_QSM_UTILITIES.update_xml (l_out_xml, 'datapacket/data/nonmultirow/finding_issues_pk/text()',non_multirow_rec.que_response_id);
                                                                             
                END IF;
                
                
                
                FOR issue_rec IN (select finding_id,finding_fk,instance_rec_num
                                            FROM XMLTABLE(
                                                xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"),'msa:datapacket/msa:data/msa:iss/msa:row'
                                                PASSING  l_out_xml
                                                COLUMNS  finding_id VARCHAR2(255) PATH 'msa:finding_id',
                                                                finding_fk VARCHAR2(255) PATH 'msa:finding_fk',
                                                                instance_rec_num   NUMBER PATH 'msa:instance_rec_num')
                                                WHERE  
                                                LENGTH (TRIM(finding_id))<7
    --                                                SUBSTR(finding_id,1,3)='FND'
                                            )
                                                
                 LOOP
                    
                    l_js_issue_id := issue_rec.finding_id;
                            
                    l_issue_id_pk :='ISSUE-' ||ms_qsm_issue_id_s.NEXTVAL;
                    
                    MS_QSM_UTILITIES.update_xml (l_out_xml, 'datapacket/data/iss/row[instance_rec_num =' || issue_rec.instance_rec_num|| ']/finding_id/text()',  l_issue_id_pk);
                    
                    MS_QSM_UTILITIES.update_xml (l_out_xml,  'datapacket/data/iss/row[instance_rec_num =' || issue_rec.instance_rec_num|| ']/finding_fk/text()',non_multirow_rec.que_response_id);
                    
                    MS_QSM_UTILITIES.update_xml (l_out_xml, 'datapacket/data/act/row[action_fk=''' ||l_js_issue_id||''']/action_fk/text()', l_issue_id_pk); 
                    
                 END LOOP;      
                            
                FOR action_rec IN (select action_id,instance_rec_num
                                            FROM XMLTABLE(
                                                xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"),'msa:datapacket/msa:data/msa:act/msa:row'
                                                PASSING  l_out_xml
                                                COLUMNS  action_id VARCHAR2(255) PATH 'msa:action_id',
                                                                instance_rec_num   NUMBER PATH 'msa:instance_rec_num')
                                                WHERE  
                                                    LENGTH (TRIM(action_id))<7
    --                                            SUBSTR(action_id,1,3)='ACN'
                                                )         
                LOOP
                    
                    l_action_id_pk :='ACTION-' ||ms_qsm_action_id_s.NEXTVAL;
                    
                    MS_QSM_UTILITIES.update_xml (l_out_xml, 'datapacket/data/act/row[instance_rec_num =' || action_rec.instance_rec_num|| ']/action_id/text()',  l_action_id_pk);
                    
                END LOOP;
                
                MS_QSM_UTILITIES.UPDATE_INOUT_DATA(l_out_xml,lt_in_data,lt_out_data);
                
                        ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                     pn_error_sequence    => xn_error_seq,
                     pc_error_type        => 'E',
                     pc_error_text        => 'TO_STAGE ' || lc_to_stage);  
                        
                IF lc_to_stage='CREATE_FINDING_ISSUES' THEN
                            
                        MS_QSM_ENGINE.ISSUES_CALL_ETL(iop_xml_data => lt_out_data,
                                        iop_log_no => ln_log_no,
                                        op_error_code =>l_error_code,
                                        op_error_message =>l_error_message,
                                        iop_error_seq =>xn_error_code,
                                        ip_pid => non_multirow_rec.process_instance_id)  ;      
                            
                END IF;                                                   
                                                                                           
            END LOOP;                            
            
    EXCEPTION                                            
            WHEN OTHERS THEN
                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                     pn_error_sequence    => xn_error_seq,
                     pc_error_type        => 'E',
                     pc_error_text        => 'ms_QSM_QSMFND_QSMFND_PROD ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);  
        
    END; 
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_QSMRTF_QSMRTF_PROD" (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN OUT CLOB,
                                                                       lt_out_data          IN OUT CLOB,
                                                                       pc_process_code      IN     VARCHAR2,
                                                                       lc_from_stage        IN     VARCHAR2,
                                                                       lc_to_stage          IN     VARCHAR2,
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
AS
    l_out_xml                                               XMLTYPE:=NULL;     
    l_RESP_CLOB_PK                                    VARCHAR2(255);   
    BEGIN
        
        l_out_xml := xmltype (lt_in_data);
                                     
        FOR non_multirow_rec IN ( SELECT 
--                                                            RESP_QUE_ID, RESPONSE_ID, RESP_COMMENTS, RESP_DESCRIPTION,  DD_OBJECT_TYPE, DD_CURRENT_USER_NAME,  DD_EVENT_USER_NAME, 
--                                                            DD_ENTERPRISE_INFO,  DD_CURRENT_STAGE,  DD_PROCESS_CODE, 
                                                            RESP_CLOB_PK
--                                                            , INSTANCE_REC_NUM, INSTANCE_ID, METRIC_ID, METRIC_RUN_DATE, METRIC_COMPLETED_DATE, LATEST_FLAG, CREATED_BY, 
--                                                            CREATION_DATE, PROCESS_FLOW_STATUS, PROCESS_INSTANCE_ID,ELECTRONICALLY_SIGNED,RESP_DESCRIPTION_HTM, RESP_COMMENTS_HTM
        FROM XMLTABLE (
            xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:nonmultirow'
            PASSING xmltype (lt_in_data_orig)
            COLUMNS                  
--                                               RESP_QUE_ID VARCHAR2 (4000 Char) PATH 'msa:resp_que_id',
--                                            RESPONSE_ID    VARCHAR2 (4000 Char) PATH 'msa:response_id',
--                                            RESP_COMMENTS    CLOB PATH 'msa:resp_comments',
--                                            RESP_DESCRIPTION    CLOB PATH 'msa:resp_description',
--                                            DD_OBJECT_TYPE    VARCHAR2 (4000 Char) PATH 'msa:dd_object_type',
--                                            DD_CURRENT_USER_NAME    VARCHAR2 (4000 Char) PATH 'msa:dd_current_user_name',
--                                            DD_EVENT_USER_NAME    VARCHAR2 (4000 Char) PATH 'msa:dd_event_user_name',
--                                            DD_ENTERPRISE_INFO    VARCHAR2 (4000 Char) PATH 'msa:dd_enterprise_info',
--                                            DD_CURRENT_STAGE    VARCHAR2 (4000 Char) PATH 'msa:dd_current_stage',
--                                            DD_PROCESS_CODE    VARCHAR2 (4000 Char) PATH 'msa:dd_process_code',
                                            RESP_CLOB_PK    VARCHAR2 (4000 Char) PATH 'msa:resp_clob_pk'
--                                            ,
--                                            INSTANCE_REC_NUM    NUMBER PATH 'msa:instance_rec_num',
--                                            INSTANCE_ID    NUMBER PATH 'msa:instance_id',
--                                            METRIC_ID    NUMBER PATH 'msa:metric_id',
--                                            METRIC_RUN_DATE    DATE PATH 'msa:metric_run_date',
--                                            METRIC_COMPLETED_DATE    DATE PATH 'msa:metric_completed_date',
--                                            LATEST_FLAG    VARCHAR2 (1 Char) PATH 'msa:latest_flag',
--                                            CREATED_BY    NUMBER PATH 'msa:created_by',
--                                            CREATION_DATE    DATE PATH 'msa:creation_date',
--                                            PROCESS_FLOW_STATUS    NUMBER PATH 'msa:process_flow_status',
--                                            PROCESS_INSTANCE_ID    NUMBER PATH 'msa:process_instance_id',
--                                            ELECTRONICALLY_SIGNED    NUMBER PATH 'msa:electronically_signed',
--                                            RESP_DESCRIPTION_HTM    CLOB PATH 'msa:resp_description_htm',
--                                            RESP_COMMENTS_HTM    CLOB PATH 'msa:resp_comments_htm'
                                            ))                                               
        LOOP                        
                                                                                   
            IF non_multirow_rec.RESP_CLOB_PK = 'NONE' OR TRIM(non_multirow_rec.RESP_CLOB_PK) IS NULL THEN
                            
                l_RESP_CLOB_PK := 'RTF-'||MS_QSM_RESP_CLOB_PK_ID_S.NEXTVAL;
                                                                                
                ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/resp_clob_pk/text()', l_RESP_CLOB_PK);    
                                        
            END IF;
                                                        
                          
            MS_QSM_UTILITIES.UPDATE_INOUT_DATA(L_OUT_XML,LT_IN_DATA,LT_OUT_DATA);
            
            ms_qsm_log_activity ('', 'Final XML~ ', lt_out_data);
            
        END LOOP;             
        
    EXCEPTION
                WHEN OTHERS THEN
                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'E',
                    pc_error_text        => 'Fatal Error in the ms_QSM_QSMRTF_QSMRTF_PROD ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
    END; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_QUESTIONNAIRE_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_QUESTIONNAIRE_O
    Creation Time : 2013-JUL-30 12:23:00.695500000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_QUESTIONNAIRE_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_INTERNAL_QUESTNR_ID                 IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_INTERNAL_QUESTNR_ID                 IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_QUESTIONNAIRE_O ; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_QUESTIONNAIRE_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_INTERNAL_QUESTNR_ID                 IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_QUESTIONNAIRE', 'D');

        UPDATE MS_QSM_QUESTIONNAIRE
           SET DD_EDIT_FLAG = 'N'
         WHERE INTERNAL_QUESTNR_ID                      = iop_INTERNAL_QUESTNR_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_INTERNAL_QUESTNR_ID                 IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_QUESTIONNAIRE', 'D');

        UPDATE MS_QSM_QUESTIONNAIRE
           SET DD_EDIT_FLAG = 'Y'
         WHERE INTERNAL_QUESTNR_ID                      = iop_INTERNAL_QUESTNR_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_QUESTIONNAIRE_O; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_QUESTION_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_QUESTION_O
    Creation Time : 2013-SEP-17 17:18:43.722726000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_QUESTION_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_QST_ID_PK                           IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_QST_ID_PK                           IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_QUESTION_O ; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_QUESTION_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_QST_ID_PK                           IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_QUESTION', 'D');

        UPDATE MS_QSM_QUESTION
           SET DD_EDIT_FLAG = 'N'
         WHERE QST_ID_PK                                = iop_QST_ID_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_QST_ID_PK                           IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_QUESTION', 'D');

        UPDATE MS_QSM_QUESTION
           SET DD_EDIT_FLAG = 'Y'
         WHERE QST_ID_PK                                = iop_QST_ID_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_QUESTION_O; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_QUESTNR_RESP_DUP_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name  : MS_QSM_QUESTNR_RESP_DUP_P
    Creation Time : Fri Dec 12 01:00:11 IST 2014
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_QUESTNR_RESP_DUP_P' ;
    GV_program_name VARCHAR2(100);
   
   
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id  IN                      NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id         IN                      VARCHAR2,
            iop_log_no              IN   OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY     CLOB,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2,
            iop_error_seq         IN     OUT                NUMBER,
            ip_pid                IN                        NUMBER
        );
   


END MS_QSM_QUESTNR_RESP_DUP_P ; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_QUESTNR_RESP_DUP_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Body.
    Author : Data Designer ETL Engine
   -------------------------------------------------------------------------- */
   
   
/* --------------------------------------------------------------------------------
    GENERATE_UPDATE_HIERARCHY : Procedure to get the update the xml data hierarchy
   ------------------------------------------------------------------------------ */

    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        );
        
    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        )
    AS
        LV_error_code               NUMBER;
        LV_error_message            VARCHAR2(1000);
        UPDATE_HIERARCHY_EXCEP      EXCEPTION;
        LV_xml                      XMLTYPE := iop_xml;
		LV_namespace                varchar2(100) := 'xmlns="http://www.metricstream.com/appstudio/msa"';
        lv_program_name             VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UPDATE_HIERARCHY';


/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
      
    	           	    SELECT DELETEXML(LV_XML,'datapacket/data/sec/row/section_fk',LV_namespace) INTO LV_XML FROM DUAL;
	           
	FOR rec in (SELECT DISTINCT 
        	    	  	 que_response_id
        FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
      'msa:datapacket/msa:data/msa:nonmultirow'       PASSING LV_xml
    COLUMNS
            	 que_response_id  VARCHAR2(4000)    PATH  'msa:que_response_id'
       ))
   
   LOOP
               	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/sec/row','section_fk',XMLTYPE('<section_fk ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.que_response_id||'</section_fk>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	    END LOOP;
           	    SELECT DELETEXML(LV_XML,'datapacket/data/qst/row/question_fk',LV_namespace) INTO LV_XML FROM DUAL;
	           
	FOR rec in (SELECT DISTINCT 
        	    	  	 section_id
        FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
     'msa:datapacket/msa:data/msa:sec/msa:row'      PASSING LV_xml
    COLUMNS
            	 section_id  VARCHAR2(4000)    PATH  'msa:section_id'
       ))
   
   LOOP
               	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/qst/row','question_fk',XMLTYPE('<question_fk ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.section_id||'</question_fk>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	    END LOOP;
	iop_xml := LV_xml;
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_pid);
    EXCEPTION
        WHEN UPDATE_HIERARCHY_EXCEP THEN

            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE_HIERARCHY_EXCEP Exception Raised ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO  MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
			MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UPDATE_HIERARCHY;
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
        LV_error_code NUMBER;
        LV_error_message VARCHAR2(1000);
        NEXT_ID_GEN_EXCEPTION EXCEPTION;
        lv_program_name VARCHAR2(100);
        ln_error_seq NUMBER:=1;

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'GET_NEXT_ID';

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;

    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_process_instance_id);
      
             
 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_process_instance_id);
    EXCEPTION
        WHEN NEXT_ID_GEN_EXCEPTION THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] NEXT_ID_GEN_EXCEPTION Exception Raised ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] WHEN OTHERS ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END GET_NEXT_ID;


 

  	    	 
  	    	 
  	    	              
/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY         CLOB,
            iop_log_no            IN     OUT                    NUMBER,
            op_error_code                OUT                    NUMBER,
            op_error_message             OUT                    VARCHAR2,
            iop_error_seq         IN     OUT                    NUMBER,
            ip_pid                IN                            NUMBER

        )
    AS

/* --------------------------------------------------------------------------
     ETL procedure created by the ETL Engine of APP BUILDER.
     The procedure takes care of loading the data that is sent
     by the FLOW BUILDER and store the same in MS TABLES.
     Data is already processed and stored accordingly in the iop_data
     object structure. The object can have one or more records.
     The ETL is designed to take care of one or more records.
     If the data has to be manipulated before populating the main
     MS TABLES, please use the HOOKS that are generated by the
     FLOW BUILDER.
   -------------------------------------------------------------------------- */
        LV_progress VARCHAR2(3) := NULL;
        LV_cntr_1   NUMBER      := NULL;
        LV_cntr_2   NUMBER      := NULL;
        LV_debug    BOOLEAN     := FALSE;
        LV_XML      XMLTYPE     := XMLTYPE(iop_xml_data);
        LV_err_code NUMBER      := NULL;
        LV_err_msg  VARCHAR2(4000);
        lV_program_name VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
              AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
      
    /************* Add the cursors for all the regions ******************/
      
            
   /************* End of cursors for all the regions ******************/
    
   /************ Add the cursors for all object relationships *****************************/
    	  		  			   CURSOR CU_QSM_RESP_SECTION is (SELECT 
			   			   
		   	   			   	   				   	   		 SECTION_ID
			   	   				   			   	   				   	   		,  SECTION_FK
			   	   				   			   	   				   	   		,  OPTIONAL_SECTION
			   	   				   			   	   				   	   		,  SECTION_NAME
			   	   				   			   	   				   	   		,  SECTION_WEIGHTAGE
			   	   				   			   	   				   	   		,  WEIGHTED_SCORE
			   	   				   			   	   				   	   		,  SEC_GRADE
			   	   				   			   FROM XMLTABLE(XMLNAMESPACES( 'http://www.metricstream.com/appstudio/msa'  as "msa"),'msa:datapacket/msa:data/msa:sec/msa:row'
			   PASSING LV_xml
	           COLUMNS
	           			   		       			 SECTION_ID  VARCHAR2(4000)   PATH 'msa:section_id'		       		       			,  SECTION_FK  VARCHAR2(4000)   PATH 'msa:section_fk'		       		       			,  OPTIONAL_SECTION  VARCHAR2(4000)   PATH 'msa:optional_section'		       		       			,  SECTION_NAME  VARCHAR2(4000)   PATH 'msa:section_name'		       		       			,  SECTION_WEIGHTAGE  NUMBER   PATH 'msa:section_weightage'		       		       			,  WEIGHTED_SCORE  NUMBER   PATH 'msa:weighted_score'		       		       			,  SEC_GRADE  VARCHAR2(4000)   PATH 'msa:sec_grade'		       	       	   )); 
	    TYPE LT_QSM_RESP_SECTION IS TABLE OF CU_QSM_RESP_SECTION%ROWTYPE;
		TY_QSM_RESP_SECTION  LT_QSM_RESP_SECTION;
	       	     		  
   		  			   CURSOR CU_QSM_RESP_QUESTION is (SELECT 
			   			   
		   	   			   	   				   	   		 RESP_ATTACHMENT
			   	   				   			   	   				   	   		,  RESP_CLOB
			   	   				   			   	   				   	   		,  RESP_RADIO_B
			   	   				   			   	   				   	   		,  RESP_CHECKBOX
			   	   				   			   	   				   	   		,  RESP_SPRD
			   	   				   			   	   				   	   		,  QST_WEIGHTAGE
			   	   				   			   	   				   	   		,  RESP_SCORE
			   	   				   			   	   				   	   		,  RESP_TARGET
			   	   				   			   	   				   	   		,  RESP_WEIGHTED_SCORE
			   	   				   			   	   				   	   		,  RESP_GRADE
			   	   				   			   	   				   	   		,  RESP_COMMENTS
			   	   				   			   	   				   	   		,  APPROVER_COMMENT
			   	   				   			   	   				   	   		,  QUESTION_ID
			   	   				   			   	   				   	   		,  QUESTION_FK
			   	   				   			   	   				   	   		,  QUESTION_SEC_ID
			   	   				   			   	   				   	   		,  QST_PARENT_TYPE
			   	   				   			   	   				   	   		,  QUESTION_TYPE
			   	   				   			   	   				   	   		,  QUESTION_PK
			   	   				   			   	   				   	   		,  HAS_SUB_QUESTIONS
			   	   				   			   	   				   	   		,  CHECK_RESPONSE
			   	   				   			   	   				   	   		,  QST_RESPONSE_ID
			   	   				   			   	   				   	   		,  QUESTION_NAME
			   	   				   			   	   				   	   		,  QST_OPTIONAL
			   	   				   			   	   				   	   		,  RESPONSE_TYPE
			   	   				   			   	   				   	   		,  REFERENCE_PID
			   	   				   			   	   				   	   		,  QST_TRIGER_SCR_INFOLET
			   	   				   			   	   				   	   		,  QST_INFOLET_SCORING
			   	   				   			   	   				   	   		,  RESPONSE_FIELD
			   	   				   			   	   				   	   		,  DEFAULT_SCORE
			   	   				   			   	   				   	   		,  RESP_REQ_APPROVAL
			   	   				   			   	   				   	   		,  RESP_REQ_ACTION
			   	   				   			   	   				   	   		,  RESP_ACTION_PLAN
			   	   				   			   	   				   	   		,  COND_APP_REQ_FLAG
			   	   				   			   	   				   	   		,  QST_JSON_VALUE
			   	   				   			   	   				   	   		,  LIST_OF_VALUES_HIDDEN
			   	   				   			   	   				   	   		,  QST_MLOV_SCORING
			   	   				   			   	   				   	   		,  CHECKBOX_HIDDEN_VALUE
			   	   				   			   	   				   	   		,  QUESTION_DESCRIPTION
			   	   				   			   	   				   	   		,  RESP_MLOV
			   	   				   			   	   				   	   		,  RESP_DD
			   	   				   			   	   				   	   		,  RESP_NUMBER
			   	   				   			   	   				   	   		,  TO_DATE(RESP_DATE ,'MM/dd/yyyy HH24:mi:ss') AS RESP_DATE
			   	   				   			   	   				   	   		,  RESP_RADIO
			   	   				   			   FROM XMLTABLE(XMLNAMESPACES( 'http://www.metricstream.com/appstudio/msa'  as "msa"),'msa:datapacket/msa:data/msa:qst/msa:row'
			   PASSING LV_xml
	           COLUMNS
	           			   		       			 RESP_ATTACHMENT  VARCHAR2(4000)   PATH 'msa:resp_attachment'		       		       			,  RESP_CLOB  VARCHAR2(4000)   PATH 'msa:resp_clob'		       		       			,  RESP_RADIO_B  VARCHAR2(4000)   PATH 'msa:resp_radio_b'		       		       			,  RESP_CHECKBOX  VARCHAR2(4000)   PATH 'msa:resp_checkbox'		       		       			,  RESP_SPRD  VARCHAR2(4000)   PATH 'msa:resp_sprd'		       		       			,  QST_WEIGHTAGE  NUMBER   PATH 'msa:qst_weightage'		       		       			,  RESP_SCORE  NUMBER   PATH 'msa:resp_score'		       		       			,  RESP_TARGET  NUMBER   PATH 'msa:resp_target'		       		       			,  RESP_WEIGHTED_SCORE  NUMBER   PATH 'msa:resp_weighted_score'		       		       			,  RESP_GRADE  VARCHAR2(4000)   PATH 'msa:resp_grade'		       		       			,  RESP_COMMENTS  VARCHAR2(4000)   PATH 'msa:resp_comments'		       		       			,  APPROVER_COMMENT  VARCHAR2(4000)   PATH 'msa:approver_comment'		       		       			,  QUESTION_ID  VARCHAR2(4000)   PATH 'msa:question_id'		       		       			,  QUESTION_FK  VARCHAR2(4000)   PATH 'msa:question_fk'		       		       			,  QUESTION_SEC_ID  VARCHAR2(4000)   PATH 'msa:question_sec_id'		       		       			,  QST_PARENT_TYPE  VARCHAR2(4000)   PATH 'msa:qst_parent_type'		       		       			,  QUESTION_TYPE  VARCHAR2(4000)   PATH 'msa:question_type'		       		       			,  QUESTION_PK  VARCHAR2(4000)   PATH 'msa:question_pk'		       		       			,  HAS_SUB_QUESTIONS  VARCHAR2(4000)   PATH 'msa:has_sub_questions'		       		       			,  CHECK_RESPONSE  VARCHAR2(4000)   PATH 'msa:check_response'		       		       			,  QST_RESPONSE_ID  VARCHAR2(4000)   PATH 'msa:qst_response_id'		       		       			,  QUESTION_NAME  VARCHAR2(4000)   PATH 'msa:question_name'		       		       			,  QST_OPTIONAL  VARCHAR2(4000)   PATH 'msa:qst_optional'		       		       			,  RESPONSE_TYPE  VARCHAR2(4000)   PATH 'msa:response_type'		       		       			,  REFERENCE_PID  VARCHAR2(4000)   PATH 'msa:reference_pid'		       		       			,  QST_TRIGER_SCR_INFOLET  VARCHAR2(4000)   PATH 'msa:qst_triger_scr_infolet'		       		       			,  QST_INFOLET_SCORING  VARCHAR2(4000)   PATH 'msa:qst_infolet_scoring'		       		       			,  RESPONSE_FIELD  VARCHAR2(4000)   PATH 'msa:response_field'		       		       			,  DEFAULT_SCORE  NUMBER   PATH 'msa:default_score'		       		       			,  RESP_REQ_APPROVAL  VARCHAR2(4000)   PATH 'msa:resp_req_approval'		       		       			,  RESP_REQ_ACTION  VARCHAR2(4000)   PATH 'msa:resp_req_action'		       		       			,  RESP_ACTION_PLAN  VARCHAR2(4000)   PATH 'msa:resp_action_plan'		       		       			,  COND_APP_REQ_FLAG  VARCHAR2(4000)   PATH 'msa:cond_app_req_flag'		       		       			,  QST_JSON_VALUE  VARCHAR2(4000)   PATH 'msa:qst_json_value'		       		       			,  LIST_OF_VALUES_HIDDEN  VARCHAR2(4000)   PATH 'msa:list_of_values_hidden'		       		       			,  QST_MLOV_SCORING  VARCHAR2(4000)   PATH 'msa:qst_mlov_scoring'		       		       			,  CHECKBOX_HIDDEN_VALUE  VARCHAR2(4000)   PATH 'msa:checkbox_hidden_value'		       		       			,  QUESTION_DESCRIPTION  VARCHAR2(4000)   PATH 'msa:question_description'		       		       			,  RESP_MLOV  VARCHAR2(4000)   PATH 'msa:resp_mlov'		       		       			,  RESP_DD  VARCHAR2(4000)   PATH 'msa:resp_dd'		       		       			,  RESP_NUMBER  NUMBER   PATH 'msa:resp_number'		       		       			,  RESP_DATE  VARCHAR2(40)   PATH 'msa:resp_date'		       		       			,  RESP_RADIO  VARCHAR2(4000)   PATH 'msa:resp_radio'		       	       	   )); 
	    TYPE LT_QSM_RESP_QUESTION IS TABLE OF CU_QSM_RESP_QUESTION%ROWTYPE;
		TY_QSM_RESP_QUESTION  LT_QSM_RESP_QUESTION;
	       	     		  
   		      BEGIN

/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------
    Note: Defining SAVEPOINT TO ROLLBACK transactions done by ETL.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        LV_progress := '001';
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'CALL_ETL';


/* --------------------------------------------------------------------------
    Note: Default DEBUG FLAG is set to FALSE to avoid unneccessary logging of data.
            If any issues found in ETL, to understand what goes into the ETL
            then set this variable to TRUE and run the ETL in the flow.
            It allows to log the entire relevant data set.
   -------------------------------------------------------------------------- */
        LV_debug := FALSE;

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);
--        
--        UPDATE_HIERARCHY
--        (
--           iop_log_no          => LV_log_no.APP_LOG_NO,
--           iop_xml             => LV_XML,
--           op_error_code       => LV_err_code,
--           op_error_message    => LV_err_msg,
--           iop_error_sequence  => iop_error_seq,
--           ip_pid              => ip_pid
--        );
--
--        IF(LV_err_code !=0) THEN
--          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'W','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Failed while updating Hierarchy ', ip_pid);
--        END IF;
        
        /* capture all cursors here */
		
				 OPEN CU_QSM_RESP_SECTION;
	       FETCH CU_QSM_RESP_SECTION BULK COLLECT INTO TY_QSM_RESP_SECTION;
	       CLOSE CU_QSM_RESP_SECTION; 		
				 OPEN CU_QSM_RESP_QUESTION;
	       FETCH CU_QSM_RESP_QUESTION BULK COLLECT INTO TY_QSM_RESP_QUESTION;
	       CLOSE CU_QSM_RESP_QUESTION; 		
		
        LV_cntr_1 := 0;
      
/* --------------------------------------------------------------------------
        Cursor to fetch non multirow details from XML
   -------------------------------------------------------------------------- */
		        FOR iop_data in ( SELECT  INSTANCE_ID
                                 ,METRIC_ID
                                 ,TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_RUN_DATE
                                 ,TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
                                 ,LATEST_FLAG
                                 ,CREATED_BY
                                 ,TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE
                                 ,PROCESS_FLOW_STATUS
                                 ,PROCESS_INSTANCE_ID
                                 ,ELECTRONICALLY_SIGNED
	                             ,INSTANCE_REC_NUM
											 					   	  , CERTIFICATION_TEXT
					    											 					   	  , CERTIFY_FLAG
					    											 					   	  , CERTIFIED_BY
					    											 					   	  , CERTIFICATION_COMMENT
					    											 					   	  , COLLABORATION_USERS_DISP
					    											 					   	  , COLLABORATION_USERS
					    											 					   	  , SUBMIT_ACTION
					    											 					   	  , ACTION_COMMENTS
					    											 					   	  , QUE_RESPONSE_ID
					    											 					   	  , QUE_REQUEST_ID
					    											 					   	  , RESPONDENT
					    											 					   	  , RESP_STATUS
					    											 					   	  , RESPONSE_APPROVER
					    											 					   	  , QUE_REQUEST_NAME
					    											 						  	, TO_DATE( DUE_DATE,'MM/dd/yyyy HH24:mi:ss') AS DUE_DATE
						   											 					   	  , APPLIES_TO_OBJECT
					    											 					   	  , CONTEXT_FIELD_1
					    											 					   	  , CONTEXT_FIELD_2
					    											 					   	  , CONTEXT_FIELD_3
					    											 					   	  , REPORTING_PERIOD
					    											 					   	  , INSTRUCTIONS
					    											 					   	  , QUESTIONNAIRE_ID
					    											 					   	  , APPLIES_TO
					    											 					   	  , REFERENCE_METRIC_ID
					    											 						  	, TO_DATE( RESPONDED_ON,'MM/dd/yyyy HH24:mi:ss') AS RESPONDED_ON
						   											 					   	  , REFERENCE_PROC_ID
					    											 					   	  , OVERALL_GRADE
					    											 					   	  , OVERALL_SCORE
					    											 					   	  , CERT_RESULT_STATUS_FLAG
					    											 					   	  , INITIATED_BY
					    											 					   	  , RESPONDED_BY
					    											 					   	  , OVERALL_APPROVER
					    											 					   	  , CONTEXT_FIELD_4
					    											 					   	  , CONTEXT_FIELD_5
					    											 					   	  , CONTEXT_FIELD_6
					    											 					   	  , APPLIES_TO_OBJECT_CODE
					    											 					   	  , RESPONSE_UPLOAD
					    											 					   	  , DD_EVENT_USER_NAME
					    											 					   	  , DD_CURRENT_USER_NAME
					    											 					   	  , DD_OBJECT_TYPE
					    											 					   	  , DD_PROCESS_CODE
					    										FROM XMLTABLE(XMLNAMESPACES(  'http://www.metricstream.com/appstudio/msa'  as "msa"),
                                'msa:datapacket/msa:data/msa:nonmultirow' 
                               PASSING LV_XML
                               COLUMNS
                                INSTANCE_ID                      NUMBER          PATH  'msa:instance_id'
                               ,METRIC_ID                        NUMBER          PATH  'msa:metric_id'
                               ,METRIC_RUN_DATE                  VARCHAR2(40)    PATH  'msa:metric_run_date'
                               ,METRIC_COMPLETED_DATE            VARCHAR2(40)    PATH  'msa:metric_completed_date'
                               ,LATEST_FLAG                      VARCHAR2(1)     PATH  'msa:latest_flag'
                               ,CREATED_BY                       NUMBER          PATH  'msa:created_by'
                               ,CREATION_DATE                    VARCHAR2(40)    PATH  'msa:creation_date'
                               ,PROCESS_FLOW_STATUS              NUMBER          PATH  'msa:process_flow_status'
                               ,PROCESS_INSTANCE_ID              NUMBER          PATH  'msa:process_instance_id'
                               ,ELECTRONICALLY_SIGNED            NUMBER          PATH  'msa:electronically_signed'
                               ,INSTANCE_REC_NUM                 NUMBER          PATH  'msa:instance_rec_num'    
														, CERTIFICATION_TEXT  VARCHAR2(4000)	 PATH   'msa:certification_text' 
																						, CERTIFY_FLAG  VARCHAR2(4000)	 PATH   'msa:certify_flag' 
																						, CERTIFIED_BY  VARCHAR2(4000)	 PATH   'msa:certified_by' 
																						, CERTIFICATION_COMMENT  VARCHAR2(4000)	 PATH   'msa:certification_comment' 
																						, COLLABORATION_USERS_DISP  VARCHAR2(4000)	 PATH   'msa:collaboration_users_disp' 
																						, COLLABORATION_USERS  VARCHAR2(4000)	 PATH   'msa:collaboration_users' 
																						, SUBMIT_ACTION  VARCHAR2(4000)	 PATH   'msa:submit_action' 
																						, ACTION_COMMENTS  VARCHAR2(4000)	 PATH   'msa:action_comments' 
																						, QUE_RESPONSE_ID  VARCHAR2(4000)	 PATH   'msa:que_response_id' 
																						, QUE_REQUEST_ID  VARCHAR2(4000)	 PATH   'msa:que_request_id' 
																						, RESPONDENT  VARCHAR2(4000)	 PATH   'msa:respondent' 
																						, RESP_STATUS  VARCHAR2(4000)	 PATH   'msa:resp_status' 
																						, RESPONSE_APPROVER  VARCHAR2(4000)	 PATH   'msa:response_approver' 
																						, QUE_REQUEST_NAME  VARCHAR2(4000)	 PATH   'msa:que_request_name' 
																						, DUE_DATE  VARCHAR2(40) 	 PATH	'msa:due_date'
																						, APPLIES_TO_OBJECT  VARCHAR2(4000)	 PATH   'msa:applies_to_object' 
																						, CONTEXT_FIELD_1  VARCHAR2(4000)	 PATH   'msa:context_field_1' 
																						, CONTEXT_FIELD_2  VARCHAR2(4000)	 PATH   'msa:context_field_2' 
																						, CONTEXT_FIELD_3  VARCHAR2(4000)	 PATH   'msa:context_field_3' 
																						, REPORTING_PERIOD  VARCHAR2(4000)	 PATH   'msa:reporting_period' 
																						, INSTRUCTIONS  VARCHAR2(4000)	 PATH   'msa:instructions' 
																						, QUESTIONNAIRE_ID  VARCHAR2(4000)	 PATH   'msa:questionnaire_id' 
																						, APPLIES_TO  VARCHAR2(4000)	 PATH   'msa:applies_to' 
																						, REFERENCE_METRIC_ID  VARCHAR2(4000)	 PATH   'msa:reference_metric_id' 
																						, RESPONDED_ON  VARCHAR2(40) 	 PATH	'msa:responded_on'
																						, REFERENCE_PROC_ID  VARCHAR2(4000)	 PATH   'msa:reference_proc_id' 
																						, OVERALL_GRADE  VARCHAR2(4000)	 PATH   'msa:overall_grade' 
																						, OVERALL_SCORE  NUMBER 	PATH   'msa:overall_score' 
																						, CERT_RESULT_STATUS_FLAG  VARCHAR2(4000)	 PATH   'msa:cert_result_status_flag' 
																						, INITIATED_BY  VARCHAR2(4000)	 PATH   'msa:initiated_by' 
																						, RESPONDED_BY  VARCHAR2(4000)	 PATH   'msa:responded_by' 
																						, OVERALL_APPROVER  VARCHAR2(4000)	 PATH   'msa:overall_approver' 
																						, CONTEXT_FIELD_4  VARCHAR2(4000)	 PATH   'msa:context_field_4' 
																						, CONTEXT_FIELD_5  VARCHAR2(4000)	 PATH   'msa:context_field_5' 
																						, CONTEXT_FIELD_6  VARCHAR2(4000)	 PATH   'msa:context_field_6' 
																						, APPLIES_TO_OBJECT_CODE  VARCHAR2(4000)	 PATH   'msa:applies_to_object_code' 
																						, RESPONSE_UPLOAD  VARCHAR2(4000)	 PATH   'msa:response_upload' 
																						, DD_EVENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_event_user_name'
																						, DD_CURRENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_current_user_name'
																						, DD_OBJECT_TYPE  VARCHAR2(4000) PATH 'msa:dd_object_type'
																						, DD_PROCESS_CODE  VARCHAR2(4000) PATH 'msa:dd_process_code'
																			))      
					
				LOOP
			           LV_cntr_1 := LV_cntr_1 + 1;
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Data Found in iop_data. ', ip_pid);
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ')', ip_pid);
    

		 /* --------------------------------------------------------------------------
		       Loop through the data object to load the data into MS tables.
		        Header info is being loaded into the system.
		  -------------------------------------------------------------------------- */ 
 			  			 	
		/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
		  -------------------------------------------------------------------------- */ 	
		  		 		
  									    		IF LV_debug THEN
												

	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CERTIFICATION_TEXT, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CERTIFY_FLAG, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CERTIFIED_BY, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CERTIFICATION_COMMENT, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.COLLABORATION_USERS_DISP, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.COLLABORATION_USERS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SUBMIT_ACTION, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.ACTION_COMMENTS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_RESPONSE_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_REQUEST_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RESPONDENT, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RESP_STATUS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RESPONSE_APPROVER, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_REQUEST_NAME, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DUE_DATE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.APPLIES_TO_OBJECT, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CONTEXT_FIELD_1, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CONTEXT_FIELD_2, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CONTEXT_FIELD_3, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.REPORTING_PERIOD, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.INSTRUCTIONS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUESTIONNAIRE_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.APPLIES_TO, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.REFERENCE_METRIC_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RESPONDED_ON, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.REFERENCE_PROC_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.OVERALL_GRADE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.OVERALL_SCORE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CERT_RESULT_STATUS_FLAG, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.INITIATED_BY, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RESPONDED_BY, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.OVERALL_APPROVER, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CONTEXT_FIELD_4, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CONTEXT_FIELD_5, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CONTEXT_FIELD_6, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.APPLIES_TO_OBJECT_CODE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RESPONSE_UPLOAD, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    				             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
			             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
    			    	END IF;
    			    	
    			    							MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  
  MERGE 
    INTO MS_QSM_QUESTNR_RESP T 
  		USING (
  				SELECT     
          iop_data.CERTIFICATION_TEXT AS CERTIFICATION_TEXT
    	          , iop_data.CERTIFY_FLAG AS CERTIFY_FLAG
    	          , iop_data.CERTIFIED_BY AS CERTIFIED_BY
    	          , iop_data.CERTIFICATION_COMMENT AS CERTIFICATION_COMMENT
    	          , iop_data.COLLABORATION_USERS_DISP AS COLLABORATION_USERS_DISP
    	          , iop_data.COLLABORATION_USERS AS COLLABORATION_USERS
    	          , iop_data.SUBMIT_ACTION AS SUBMIT_ACTION
    	          , iop_data.ACTION_COMMENTS AS ACTION_COMMENTS
    	          , iop_data.QUE_RESPONSE_ID AS QUE_RESPONSE_ID
    	          , iop_data.QUE_REQUEST_ID AS QUE_REQUEST_ID
    	          , iop_data.RESPONDENT AS RESPONDENT
    	          , iop_data.RESP_STATUS AS RESP_STATUS
    	          , iop_data.RESPONSE_APPROVER AS RESPONSE_APPROVER
    	          , iop_data.QUE_REQUEST_NAME AS QUE_REQUEST_NAME
    	          , iop_data.DUE_DATE AS DUE_DATE
    	          , iop_data.APPLIES_TO_OBJECT AS APPLIES_TO_OBJECT
    	          , iop_data.CONTEXT_FIELD_1 AS CONTEXT_FIELD_1
    	          , iop_data.CONTEXT_FIELD_2 AS CONTEXT_FIELD_2
    	          , iop_data.CONTEXT_FIELD_3 AS CONTEXT_FIELD_3
    	          , iop_data.REPORTING_PERIOD AS REPORTING_PERIOD
    	          , iop_data.INSTRUCTIONS AS INSTRUCTIONS
    	          , iop_data.QUESTIONNAIRE_ID AS QUESTIONNAIRE_ID
    	          , iop_data.APPLIES_TO AS APPLIES_TO
    	          , iop_data.REFERENCE_METRIC_ID AS REFERENCE_METRIC_ID
    	          , iop_data.RESPONDED_ON AS RESPONDED_ON
    	          , iop_data.REFERENCE_PROC_ID AS REFERENCE_PROC_ID
    	          , iop_data.OVERALL_GRADE AS OVERALL_GRADE
    	          , iop_data.OVERALL_SCORE AS OVERALL_SCORE
    	          , iop_data.CERT_RESULT_STATUS_FLAG AS CERT_RESULT_STATUS_FLAG
    	          , iop_data.INITIATED_BY AS INITIATED_BY
    	          , iop_data.RESPONDED_BY AS RESPONDED_BY
    	          , iop_data.OVERALL_APPROVER AS OVERALL_APPROVER
    	          , iop_data.CONTEXT_FIELD_4 AS CONTEXT_FIELD_4
    	          , iop_data.CONTEXT_FIELD_5 AS CONTEXT_FIELD_5
    	          , iop_data.CONTEXT_FIELD_6 AS CONTEXT_FIELD_6
    	          , iop_data.APPLIES_TO_OBJECT_CODE AS APPLIES_TO_OBJECT_CODE
    	          , iop_data.RESPONSE_UPLOAD AS RESPONSE_UPLOAD
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.QUE_RESPONSE_ID = V.QUE_RESPONSE_ID
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.CERTIFICATION_TEXT=V.CERTIFICATION_TEXT
 ,T.CERTIFY_FLAG=V.CERTIFY_FLAG
 ,T.CERTIFIED_BY=V.CERTIFIED_BY
 ,T.CERTIFICATION_COMMENT=V.CERTIFICATION_COMMENT
 ,T.COLLABORATION_USERS_DISP=V.COLLABORATION_USERS_DISP
 ,T.COLLABORATION_USERS=V.COLLABORATION_USERS
 ,T.SUBMIT_ACTION=V.SUBMIT_ACTION
 ,T.ACTION_COMMENTS=V.ACTION_COMMENTS
 ,T.QUE_REQUEST_ID=V.QUE_REQUEST_ID
 ,T.RESPONDENT=V.RESPONDENT
 ,T.RESP_STATUS=V.RESP_STATUS
 ,T.RESPONSE_APPROVER=V.RESPONSE_APPROVER
 ,T.QUE_REQUEST_NAME=V.QUE_REQUEST_NAME
 ,T.DUE_DATE=V.DUE_DATE
 ,T.APPLIES_TO_OBJECT=V.APPLIES_TO_OBJECT
 ,T.CONTEXT_FIELD_1=V.CONTEXT_FIELD_1
 ,T.CONTEXT_FIELD_2=V.CONTEXT_FIELD_2
 ,T.CONTEXT_FIELD_3=V.CONTEXT_FIELD_3
 ,T.REPORTING_PERIOD=V.REPORTING_PERIOD
 ,T.INSTRUCTIONS=V.INSTRUCTIONS
 ,T.QUESTIONNAIRE_ID=V.QUESTIONNAIRE_ID
 ,T.APPLIES_TO=V.APPLIES_TO
 ,T.REFERENCE_METRIC_ID=V.REFERENCE_METRIC_ID
 ,T.RESPONDED_ON=V.RESPONDED_ON
 ,T.REFERENCE_PROC_ID=V.REFERENCE_PROC_ID
 ,T.OVERALL_GRADE=V.OVERALL_GRADE
 ,T.OVERALL_SCORE=V.OVERALL_SCORE
 ,T.CERT_RESULT_STATUS_FLAG=V.CERT_RESULT_STATUS_FLAG
 ,T.INITIATED_BY=V.INITIATED_BY
 ,T.RESPONDED_BY=V.RESPONDED_BY
 ,T.OVERALL_APPROVER=V.OVERALL_APPROVER
 ,T.CONTEXT_FIELD_4=V.CONTEXT_FIELD_4
 ,T.CONTEXT_FIELD_5=V.CONTEXT_FIELD_5
 ,T.CONTEXT_FIELD_6=V.CONTEXT_FIELD_6
 ,T.APPLIES_TO_OBJECT_CODE=V.APPLIES_TO_OBJECT_CODE
 ,T.RESPONSE_UPLOAD=V.RESPONSE_UPLOAD
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.CERTIFICATION_TEXT
 ,T.CERTIFY_FLAG
 ,T.CERTIFIED_BY
 ,T.CERTIFICATION_COMMENT
 ,T.COLLABORATION_USERS_DISP
 ,T.COLLABORATION_USERS
 ,T.SUBMIT_ACTION
 ,T.ACTION_COMMENTS
 ,T.QUE_RESPONSE_ID
 ,T.QUE_REQUEST_ID
 ,T.RESPONDENT
 ,T.RESP_STATUS
 ,T.RESPONSE_APPROVER
 ,T.QUE_REQUEST_NAME
 ,T.DUE_DATE
 ,T.APPLIES_TO_OBJECT
 ,T.CONTEXT_FIELD_1
 ,T.CONTEXT_FIELD_2
 ,T.CONTEXT_FIELD_3
 ,T.REPORTING_PERIOD
 ,T.INSTRUCTIONS
 ,T.QUESTIONNAIRE_ID
 ,T.APPLIES_TO
 ,T.REFERENCE_METRIC_ID
 ,T.RESPONDED_ON
 ,T.REFERENCE_PROC_ID
 ,T.OVERALL_GRADE
 ,T.OVERALL_SCORE
 ,T.CERT_RESULT_STATUS_FLAG
 ,T.INITIATED_BY
 ,T.RESPONDED_BY
 ,T.OVERALL_APPROVER
 ,T.CONTEXT_FIELD_4
 ,T.CONTEXT_FIELD_5
 ,T.CONTEXT_FIELD_6
 ,T.APPLIES_TO_OBJECT_CODE
 ,T.RESPONSE_UPLOAD
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.CERTIFICATION_TEXT
        ,V.CERTIFY_FLAG
        ,V.CERTIFIED_BY
        ,V.CERTIFICATION_COMMENT
        ,V.COLLABORATION_USERS_DISP
        ,V.COLLABORATION_USERS
        ,V.SUBMIT_ACTION
        ,V.ACTION_COMMENTS
        ,V.QUE_RESPONSE_ID
        ,V.QUE_REQUEST_ID
        ,V.RESPONDENT
        ,V.RESP_STATUS
        ,V.RESPONSE_APPROVER
        ,V.QUE_REQUEST_NAME
        ,V.DUE_DATE
        ,V.APPLIES_TO_OBJECT
        ,V.CONTEXT_FIELD_1
        ,V.CONTEXT_FIELD_2
        ,V.CONTEXT_FIELD_3
        ,V.REPORTING_PERIOD
        ,V.INSTRUCTIONS
        ,V.QUESTIONNAIRE_ID
        ,V.APPLIES_TO
        ,V.REFERENCE_METRIC_ID
        ,V.RESPONDED_ON
        ,V.REFERENCE_PROC_ID
        ,V.OVERALL_GRADE
        ,V.OVERALL_SCORE
        ,V.CERT_RESULT_STATUS_FLAG
        ,V.INITIATED_BY
        ,V.RESPONDED_BY
        ,V.OVERALL_APPROVER
        ,V.CONTEXT_FIELD_4
        ,V.CONTEXT_FIELD_5
        ,V.CONTEXT_FIELD_6
        ,V.APPLIES_TO_OBJECT_CODE
        ,V.RESPONSE_UPLOAD
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
						
																		
		  		  	     	/* --------------------------------------------------------------------------
	      	Loading data for related Child object. Data has been loaded into parent table
	      	-------------------------------------------------------------------------- */
			   	   		  			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_QSM_RESP_SECTION.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SECTION(j).SECTION_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SECTION(j).SECTION_FK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SECTION(j).OPTIONAL_SECTION, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SECTION(j).SECTION_NAME, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SECTION(j).SECTION_WEIGHTAGE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SECTION(j).WEIGHTED_SCORE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SECTION(j).SEC_GRADE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    	 END LOOP;
 				END IF;
				
												MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  FORALL i IN TY_QSM_RESP_SECTION.FIRST..TY_QSM_RESP_SECTION.LAST 
  
  MERGE 
    INTO MS_QSM_RESP_SECTION T 
  		USING (
  				SELECT     
          TY_QSM_RESP_SECTION(i).SECTION_ID AS SECTION_ID
    	          , TY_QSM_RESP_SECTION(i).SECTION_FK AS SECTION_FK
    	          , TY_QSM_RESP_SECTION(i).OPTIONAL_SECTION AS OPTIONAL_SECTION
    	          , TY_QSM_RESP_SECTION(i).SECTION_NAME AS SECTION_NAME
    	          , TY_QSM_RESP_SECTION(i).SECTION_WEIGHTAGE AS SECTION_WEIGHTAGE
    	          , TY_QSM_RESP_SECTION(i).WEIGHTED_SCORE AS WEIGHTED_SCORE
    	          , TY_QSM_RESP_SECTION(i).SEC_GRADE AS SEC_GRADE
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.SECTION_ID = V.SECTION_ID
 AND  T.SECTION_FK = V.SECTION_FK
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.OPTIONAL_SECTION=V.OPTIONAL_SECTION
 ,T.SECTION_NAME=V.SECTION_NAME
 ,T.SECTION_WEIGHTAGE=V.SECTION_WEIGHTAGE
 ,T.WEIGHTED_SCORE=V.WEIGHTED_SCORE
 ,T.SEC_GRADE=V.SEC_GRADE
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.SECTION_ID
 ,T.SECTION_FK
 ,T.OPTIONAL_SECTION
 ,T.SECTION_NAME
 ,T.SECTION_WEIGHTAGE
 ,T.WEIGHTED_SCORE
 ,T.SEC_GRADE
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.SECTION_ID
        ,V.SECTION_FK
        ,V.OPTIONAL_SECTION
        ,V.SECTION_NAME
        ,V.SECTION_WEIGHTAGE
        ,V.WEIGHTED_SCORE
        ,V.SEC_GRADE
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
											 	   		 	     	/* --------------------------------------------------------------------------
	      	Loading data for related Child object. Data has been loaded into parent table
	      	-------------------------------------------------------------------------- */
			   	   		  			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_QSM_RESP_QUESTION.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESP_ATTACHMENT, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESP_CLOB, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESP_RADIO_B, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESP_CHECKBOX, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESP_SPRD, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).QST_WEIGHTAGE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESP_SCORE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESP_TARGET, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESP_WEIGHTED_SCORE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESP_GRADE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESP_COMMENTS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).APPROVER_COMMENT, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).QUESTION_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).QUESTION_FK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).QUESTION_SEC_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).QST_PARENT_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).QUESTION_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).QUESTION_PK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).HAS_SUB_QUESTIONS, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).CHECK_RESPONSE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).QST_RESPONSE_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).QUESTION_NAME, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).QST_OPTIONAL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESPONSE_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).REFERENCE_PID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).QST_TRIGER_SCR_INFOLET, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).QST_INFOLET_SCORING, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESPONSE_FIELD, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).DEFAULT_SCORE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESP_REQ_APPROVAL, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESP_REQ_ACTION, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESP_ACTION_PLAN, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).COND_APP_REQ_FLAG, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).QST_JSON_VALUE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).LIST_OF_VALUES_HIDDEN, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).QST_MLOV_SCORING, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).CHECKBOX_HIDDEN_VALUE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).QUESTION_DESCRIPTION, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESP_DD, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESP_NUMBER, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESP_DATE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_QUESTION(j).RESP_RADIO, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    	 END LOOP;
 				END IF;
				
												MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  FORALL i IN TY_QSM_RESP_QUESTION.FIRST..TY_QSM_RESP_QUESTION.LAST 
  
  MERGE 
    INTO MS_QSM_RESP_QUESTION T 
  		USING (
  				SELECT     
          TY_QSM_RESP_QUESTION(i).RESP_ATTACHMENT AS RESP_ATTACHMENT
    	          , TY_QSM_RESP_QUESTION(i).RESP_CLOB AS RESP_CLOB
    	          , TY_QSM_RESP_QUESTION(i).RESP_RADIO_B AS RESP_RADIO_B
    	          , TY_QSM_RESP_QUESTION(i).RESP_CHECKBOX AS RESP_CHECKBOX
    	          , TY_QSM_RESP_QUESTION(i).RESP_SPRD AS RESP_SPRD
    	          , TY_QSM_RESP_QUESTION(i).QST_WEIGHTAGE AS QST_WEIGHTAGE
    	          , TY_QSM_RESP_QUESTION(i).RESP_SCORE AS RESP_SCORE
    	          , TY_QSM_RESP_QUESTION(i).RESP_TARGET AS RESP_TARGET
    	          , TY_QSM_RESP_QUESTION(i).RESP_WEIGHTED_SCORE AS RESP_WEIGHTED_SCORE
    	          , TY_QSM_RESP_QUESTION(i).RESP_GRADE AS RESP_GRADE
    	          , TY_QSM_RESP_QUESTION(i).RESP_COMMENTS AS RESP_COMMENTS
    	          , TY_QSM_RESP_QUESTION(i).APPROVER_COMMENT AS APPROVER_COMMENT
    	          , TY_QSM_RESP_QUESTION(i).QUESTION_ID AS QUESTION_ID
    	          , TY_QSM_RESP_QUESTION(i).QUESTION_FK AS QUESTION_FK
    	          , TY_QSM_RESP_QUESTION(i).QUESTION_SEC_ID AS QUESTION_SEC_ID
    	          , TY_QSM_RESP_QUESTION(i).QST_PARENT_TYPE AS QST_PARENT_TYPE
    	          , TY_QSM_RESP_QUESTION(i).QUESTION_TYPE AS QUESTION_TYPE
    	          , TY_QSM_RESP_QUESTION(i).QUESTION_PK AS QUESTION_PK
    	          , TY_QSM_RESP_QUESTION(i).HAS_SUB_QUESTIONS AS HAS_SUB_QUESTIONS
    	          , TY_QSM_RESP_QUESTION(i).CHECK_RESPONSE AS CHECK_RESPONSE
    	          , TY_QSM_RESP_QUESTION(i).QST_RESPONSE_ID AS QST_RESPONSE_ID
    	          , TY_QSM_RESP_QUESTION(i).QUESTION_NAME AS QUESTION_NAME
    	          , TY_QSM_RESP_QUESTION(i).QST_OPTIONAL AS QST_OPTIONAL
    	          , TY_QSM_RESP_QUESTION(i).RESPONSE_TYPE AS RESPONSE_TYPE
    	          , TY_QSM_RESP_QUESTION(i).REFERENCE_PID AS REFERENCE_PID
    	          , TY_QSM_RESP_QUESTION(i).QST_TRIGER_SCR_INFOLET AS QST_TRIGER_SCR_INFOLET
    	          , TY_QSM_RESP_QUESTION(i).QST_INFOLET_SCORING AS QST_INFOLET_SCORING
    	          , TY_QSM_RESP_QUESTION(i).RESPONSE_FIELD AS RESPONSE_FIELD
    	          , TY_QSM_RESP_QUESTION(i).DEFAULT_SCORE AS DEFAULT_SCORE
    	          , TY_QSM_RESP_QUESTION(i).RESP_REQ_APPROVAL AS RESP_REQ_APPROVAL
    	          , TY_QSM_RESP_QUESTION(i).RESP_REQ_ACTION AS RESP_REQ_ACTION
    	          , TY_QSM_RESP_QUESTION(i).RESP_ACTION_PLAN AS RESP_ACTION_PLAN
    	          , TY_QSM_RESP_QUESTION(i).COND_APP_REQ_FLAG AS COND_APP_REQ_FLAG
    	          , TY_QSM_RESP_QUESTION(i).QST_JSON_VALUE AS QST_JSON_VALUE
    	          , TY_QSM_RESP_QUESTION(i).LIST_OF_VALUES_HIDDEN AS LIST_OF_VALUES_HIDDEN
    	          , TY_QSM_RESP_QUESTION(i).QST_MLOV_SCORING AS QST_MLOV_SCORING
    	          , TY_QSM_RESP_QUESTION(i).CHECKBOX_HIDDEN_VALUE AS CHECKBOX_HIDDEN_VALUE
    	          , TY_QSM_RESP_QUESTION(i).QUESTION_DESCRIPTION AS QUESTION_DESCRIPTION
    	          , TY_QSM_RESP_QUESTION(i).RESP_DD AS RESP_DD
    	          , TY_QSM_RESP_QUESTION(i).RESP_NUMBER AS RESP_NUMBER
    	          , TY_QSM_RESP_QUESTION(i).RESP_DATE AS RESP_DATE
    	          , TY_QSM_RESP_QUESTION(i).RESP_RADIO AS RESP_RADIO
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.QUESTION_PK = V.QUESTION_PK
 AND  T.QST_RESPONSE_ID = V.QST_RESPONSE_ID
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.RESP_ATTACHMENT=V.RESP_ATTACHMENT
 ,T.RESP_CLOB=V.RESP_CLOB
 ,T.RESP_RADIO_B=V.RESP_RADIO_B
 ,T.RESP_CHECKBOX=V.RESP_CHECKBOX
 ,T.RESP_SPRD=V.RESP_SPRD
 ,T.QST_WEIGHTAGE=V.QST_WEIGHTAGE
 ,T.RESP_SCORE=V.RESP_SCORE
 ,T.RESP_TARGET=V.RESP_TARGET
 ,T.RESP_WEIGHTED_SCORE=V.RESP_WEIGHTED_SCORE
 ,T.RESP_GRADE=V.RESP_GRADE
 ,T.RESP_COMMENTS=V.RESP_COMMENTS
 ,T.APPROVER_COMMENT=V.APPROVER_COMMENT
 ,T.QUESTION_ID=V.QUESTION_ID
 ,T.QUESTION_FK=V.QUESTION_FK
 ,T.QUESTION_SEC_ID=V.QUESTION_SEC_ID
 ,T.QST_PARENT_TYPE=V.QST_PARENT_TYPE
 ,T.QUESTION_TYPE=V.QUESTION_TYPE
 ,T.HAS_SUB_QUESTIONS=V.HAS_SUB_QUESTIONS
 ,T.CHECK_RESPONSE=V.CHECK_RESPONSE
 ,T.QUESTION_NAME=V.QUESTION_NAME
 ,T.QST_OPTIONAL=V.QST_OPTIONAL
 ,T.RESPONSE_TYPE=V.RESPONSE_TYPE
 ,T.REFERENCE_PID=V.REFERENCE_PID
 ,T.QST_TRIGER_SCR_INFOLET=V.QST_TRIGER_SCR_INFOLET
 ,T.QST_INFOLET_SCORING=V.QST_INFOLET_SCORING
 ,T.RESPONSE_FIELD=V.RESPONSE_FIELD
 ,T.DEFAULT_SCORE=V.DEFAULT_SCORE
 ,T.RESP_REQ_APPROVAL=V.RESP_REQ_APPROVAL
 ,T.RESP_REQ_ACTION=V.RESP_REQ_ACTION
 ,T.RESP_ACTION_PLAN=V.RESP_ACTION_PLAN
 ,T.COND_APP_REQ_FLAG=V.COND_APP_REQ_FLAG
 ,T.QST_JSON_VALUE=V.QST_JSON_VALUE
 ,T.LIST_OF_VALUES_HIDDEN=V.LIST_OF_VALUES_HIDDEN
 ,T.QST_MLOV_SCORING=V.QST_MLOV_SCORING
 ,T.CHECKBOX_HIDDEN_VALUE=V.CHECKBOX_HIDDEN_VALUE
 ,T.QUESTION_DESCRIPTION=V.QUESTION_DESCRIPTION
 ,T.RESP_DD=V.RESP_DD
 ,T.RESP_NUMBER=V.RESP_NUMBER
 ,T.RESP_DATE=V.RESP_DATE
 ,T.RESP_RADIO=V.RESP_RADIO
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.RESP_ATTACHMENT
 ,T.RESP_CLOB
 ,T.RESP_RADIO_B
 ,T.RESP_CHECKBOX
 ,T.RESP_SPRD
 ,T.QST_WEIGHTAGE
 ,T.RESP_SCORE
 ,T.RESP_TARGET
 ,T.RESP_WEIGHTED_SCORE
 ,T.RESP_GRADE
 ,T.RESP_COMMENTS
 ,T.APPROVER_COMMENT
 ,T.QUESTION_ID
 ,T.QUESTION_FK
 ,T.QUESTION_SEC_ID
 ,T.QST_PARENT_TYPE
 ,T.QUESTION_TYPE
 ,T.QUESTION_PK
 ,T.HAS_SUB_QUESTIONS
 ,T.CHECK_RESPONSE
 ,T.QST_RESPONSE_ID
 ,T.QUESTION_NAME
 ,T.QST_OPTIONAL
 ,T.RESPONSE_TYPE
 ,T.REFERENCE_PID
 ,T.QST_TRIGER_SCR_INFOLET
 ,T.QST_INFOLET_SCORING
 ,T.RESPONSE_FIELD
 ,T.DEFAULT_SCORE
 ,T.RESP_REQ_APPROVAL
 ,T.RESP_REQ_ACTION
 ,T.RESP_ACTION_PLAN
 ,T.COND_APP_REQ_FLAG
 ,T.QST_JSON_VALUE
 ,T.LIST_OF_VALUES_HIDDEN
 ,T.QST_MLOV_SCORING
 ,T.CHECKBOX_HIDDEN_VALUE
 ,T.QUESTION_DESCRIPTION
 ,T.RESP_DD
 ,T.RESP_NUMBER
 ,T.RESP_DATE
 ,T.RESP_RADIO
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.RESP_ATTACHMENT
        ,V.RESP_CLOB
        ,V.RESP_RADIO_B
        ,V.RESP_CHECKBOX
        ,V.RESP_SPRD
        ,V.QST_WEIGHTAGE
        ,V.RESP_SCORE
        ,V.RESP_TARGET
        ,V.RESP_WEIGHTED_SCORE
        ,V.RESP_GRADE
        ,V.RESP_COMMENTS
        ,V.APPROVER_COMMENT
        ,V.QUESTION_ID
        ,V.QUESTION_FK
        ,V.QUESTION_SEC_ID
        ,V.QST_PARENT_TYPE
        ,V.QUESTION_TYPE
        ,V.QUESTION_PK
        ,V.HAS_SUB_QUESTIONS
        ,V.CHECK_RESPONSE
        ,V.QST_RESPONSE_ID
        ,V.QUESTION_NAME
        ,V.QST_OPTIONAL
        ,V.RESPONSE_TYPE
        ,V.REFERENCE_PID
        ,V.QST_TRIGER_SCR_INFOLET
        ,V.QST_INFOLET_SCORING
        ,V.RESPONSE_FIELD
        ,V.DEFAULT_SCORE
        ,V.RESP_REQ_APPROVAL
        ,V.RESP_REQ_ACTION
        ,V.RESP_ACTION_PLAN
        ,V.COND_APP_REQ_FLAG
        ,V.QST_JSON_VALUE
        ,V.LIST_OF_VALUES_HIDDEN
        ,V.QST_MLOV_SCORING
        ,V.CHECKBOX_HIDDEN_VALUE
        ,V.QUESTION_DESCRIPTION
        ,V.RESP_DD
        ,V.RESP_NUMBER
        ,V.RESP_DATE
        ,V.RESP_RADIO
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	  	  FOR j IN 1..TY_QSM_RESP_QUESTION.COUNT LOOP 
	   	  
 	  DELETE MS_QSM_RESP_QUESTION_RML WHERE 
 	   	   	   		 QUESTION_PK =  TY_QSM_RESP_QUESTION(j).QUESTION_PK
	  		   		 AND  QST_RESPONSE_ID =  TY_QSM_RESP_QUESTION(j).QST_RESPONSE_ID
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(TY_QSM_RESP_QUESTION(j).RESP_MLOV) > 0 THEN
 		
 		INSERT INTO MS_QSM_RESP_QUESTION_RML (
 		 		DD_STATUS_FLAG,
 		 		 QUESTION_PK
 		 		,  QST_RESPONSE_ID
 		 		,  RESP_MLOV
 		 		) SELECT 
 		'Y',
 		 		 		  TY_QSM_RESP_QUESTION(j).QUESTION_PK  		 		,  TY_QSM_RESP_QUESTION(j).QST_RESPONSE_ID  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(TY_QSM_RESP_QUESTION(j).RESP_MLOV,','));

 	   END IF;
 		  END LOOP; 	   
	  								 	   		 		  		            
          			                    
          									  
				   			   		
    END LOOP;	 
        EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in call ETL ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END CALL_ETL;        

END MS_QSM_QUESTNR_RESP_DUP_P ; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_QUESTNR_RESP_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_QUESTNR_RESP_O
    Creation Time : 2015-APR-21 00:50:44.529000000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_QUESTNR_RESP_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_QUE_RESPONSE_ID                     IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_QUE_RESPONSE_ID                     IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_QUESTNR_RESP_O ;
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_QUESTNR_RESP_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_QUE_RESPONSE_ID                     IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT ms_apps_mdf_error_handle_id_s.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_QUESTNR_RESP', 'D');

        UPDATE MS_QSM_QUESTNR_RESP
           SET DD_EDIT_FLAG = 'N'
         WHERE QUE_RESPONSE_ID                          = iop_QUE_RESPONSE_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_QUE_RESPONSE_ID                     IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT ms_apps_mdf_error_handle_id_s.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_QUESTNR_RESP', 'D');

        UPDATE MS_QSM_QUESTNR_RESP
           SET DD_EDIT_FLAG = 'Y'
         WHERE QUE_RESPONSE_ID                          = iop_QUE_RESPONSE_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_QUESTNR_RESP_O;
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_QUESTNR_SCH_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_QUESTNR_SCH_O
    Creation Time : 2013-JAN-08 19:55:51.862307000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_QUESTNR_SCH_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_SCH_REQ_ID                          IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_SCH_REQ_ID                          IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_QUESTNR_SCH_O ;
  
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_QUESTNR_SCH_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_SCH_REQ_ID                          IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_QUESTNR_SCH', 'D');

        UPDATE MS_QSM_QUESTNR_SCH
           SET DD_EDIT_FLAG = 'N'
         WHERE SCH_REQ_ID                               = iop_SCH_REQ_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_SCH_REQ_ID                          IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_QUESTNR_SCH', 'D');

        UPDATE MS_QSM_QUESTNR_SCH
           SET DD_EDIT_FLAG = 'Y'
         WHERE SCH_REQ_ID                               = iop_SCH_REQ_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_QUESTNR_SCH_O; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_REMAINDER_EMAIL_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_REMAINDER_EMAIL_O
    Creation Time : 2013-JAN-08 20:19:40.992093000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_REMAINDER_EMAIL_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_REMAINDER_ID_PK                     IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_REMAINDER_ID_PK                     IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_REMAINDER_EMAIL_O ;
  
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_REMAINDER_EMAIL_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_REMAINDER_ID_PK                     IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_REMAINDER_EMAIL', 'D');

        UPDATE MS_QSM_REMAINDER_EMAIL
           SET DD_EDIT_FLAG = 'N'
         WHERE REMAINDER_ID_PK                          = iop_REMAINDER_ID_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_REMAINDER_ID_PK                     IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_REMAINDER_EMAIL', 'D');

        UPDATE MS_QSM_REMAINDER_EMAIL
           SET DD_EDIT_FLAG = 'Y'
         WHERE REMAINDER_ID_PK                          = iop_REMAINDER_ID_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_REMAINDER_EMAIL_O; 
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_REMINDER_EMAIL_LOG_PROC" (
    LOG_TYPE_IN                IN VARCHAR2,
    LOG_DESC_IN                IN VARCHAR2,
    REMINDER_ID_IN             IN VARCHAR2,
    REMINDER_TYPE_IN           IN VARCHAR2,
    REMINDER_NO_OF_DAYS_IN     IN NUMBER,
    REMINDER_SEND_TO_IN        IN VARCHAR2,
    REMINDER_FK_IN             IN VARCHAR2,
    REMINDER_SUBJECT_IN        IN VARCHAR2,
    reminder_text_in           in varchar2,
    reminder_next_send_date_in in date,
    log_id                     in number,
    recipient_count            in number default null,
    sch_iteration_in           in varchar2,
    cc_for_in                  in varchar2,
    cc_user_role_in            in clob,
    ITEM_BASED_FILTER_in       in VARCHAR2)
IS
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    INSERT
    INTO MS_QSM_REMINDER_EMAIL_LOG
      (
        LOG_ID,
        LOG_TYPE,
        LOG_DESC,
        REMINDER_ID,
        REMINDER_TYPE,
        REMINDER_NO_OF_DAYS,
        REMINDER_SEND_TO,
        REMINDER_FK,
        REMINDER_SUBJECT,
        REMINDER_TEXT,
        REMINDER_NEXT_SEND_DATE,
        log_datetime,
        recipient_count,
        sch_iteration,
        cc_for,
CC_USER_ROLE,
ITEM_BASED_FILTER
      )
      VALUES
      (
        log_id,
        LOG_TYPE_IN,
        LOG_DESC_IN,
        REMINDER_ID_IN,
        REMINDER_TYPE_IN,
        REMINDER_NO_OF_DAYS_IN,
        REMINDER_SEND_TO_IN,
        REMINDER_FK_IN,
        REMINDER_SUBJECT_IN,
        REMINDER_TEXT_IN,
        REMINDER_NEXT_SEND_DATE_IN,
        sysdate,
        recipient_count,
        sch_iteration_in,
        cc_for_in,
cc_user_role_in,
ITEM_BASED_FILTER_in
      );
    COMMIT;
  EXCEPTION
  WHEN OTHERS THEN
    NULL;
  END MS_QSM_REMINDER_EMAIL_LOG_PROC; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_REMINDER_EMAIL_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_REMINDER_EMAIL_O
    Creation Time : 2013-JAN-25 19:18:18.912945000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_REMINDER_EMAIL_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_REMINDER_ID_PK                      IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_REMINDER_ID_PK                      IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_REMINDER_EMAIL_O ;
  
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_REMINDER_EMAIL_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_REMINDER_ID_PK                      IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_REMINDER_EMAIL', 'D');

        UPDATE MS_QSM_REMINDER_EMAIL
           SET DD_EDIT_FLAG = 'N'
         WHERE REMINDER_ID_PK                           = iop_REMINDER_ID_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_REMINDER_ID_PK                      IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_REMINDER_EMAIL', 'D');

        UPDATE MS_QSM_REMINDER_EMAIL
           SET DD_EDIT_FLAG = 'Y'
         WHERE REMINDER_ID_PK                           = iop_REMINDER_ID_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_REMINDER_EMAIL_O; 
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_REMINDER_EMAIL_PROC" (
    o_error_code OUT NUMBER,
    o_error_message OUT VARCHAR2 )
AS
  v_run_date  DATE                := sysdate ;
  v_delimiter VARCHAR2(10)        := ',';
  v_recipients_arr varchar2_array := varchar2_array (); -- final array containing all usernames
  v_user_name_arr varchar2_array  := varchar2_array (); -- temp array to store user names
  v_org_arr varchar2_array        := varchar2_array ();
  v_param_names varchar2_array    := varchar2_array ();
  v_param_values clob_array       := clob_array ();
  v_error_code              NUMBER;
  v_error_message           VARCHAR2 (4000);
  v_progress                NUMBER;
  v_exception_message       VARCHAR2 (4000);
  v_user_exception          EXCEPTION;
  v_enterprise_id           NUMBER;
  v_tbl_name                VARCHAR2(30);
  v_respondents             VARCHAR2(32767);
  v_reminder_email_template VARCHAR2(255);
  V_SUBJECT_LOCALE          VARCHAR2(4000);
  L_SQL_STRING              CLOB;
  l_status                  VARCHAR2(1);
  l_clob CLOB;
  -- cursor selects all active reminders that need to be sent on the run date
  CURSOR reminder_list_cur
  IS
    SELECT a.REMINDER_ID_PK,
      a.REMINDER_TYPE,
      a.REMINDER_NO_OF_DAYS,
      a.REMINDER_SEND_TO,
      a.REMINDER_FK,
      a.REMINDER_SUBJECT,
      a.REMINDER_TEXT,
      a.REMINDER_NEXT_SEND_DATE,
      M.SCH_FREQUENCY,
      B.SCH_ITERATION,
      A.CC_FOR_EMAIL,
      a.email_send_to_users,
      a.EMAIL_SEND_TO_USERS_STORED,
      a.ADD_USER_RELATED_TO_ITEM
    FROM ms_qsm_reminder_email a,
      MS_QSM_SCHEDULER_MASTER m,
      ms_qsm_survey_scheduler_log b
    WHERE a.REMINDER_FK                   = m.SCH_REQ_ID
    AND NVL(a.REMINDER_SENT,'N')          = 'N'
    AND a.IS_ACTIVE                       ='Y'
    AND TRUNC(a.REMINDER_NEXT_SEND_DATE) <= TRUNC(v_run_date)
    AND m.sequence_no                     = 1
    AND a.reminder_type                  IS NOT NULL
    AND m.sch_req_id                      = b.que_request_id;
TYPE ms_rmdr_log_det
IS
  RECORD
  (
    LOG_ID        NUMBER,
    recipent_name VARCHAR2(4000),--varchar2_array,
    CC_USERS CLOB,
    STATUS   VARCHAR2(10),
    log_date DATE);
TYPE ms_rmdr_log_det_tab
IS
  TABLE OF ms_rmdr_log_det;
  L_MS_RMDR_LOG_DET_TAB MS_RMDR_LOG_DET_TAB:= MS_RMDR_LOG_DET_TAB();
  l_log_id NUMBER;
  l_cnt    NUMBER          :=0;
  L_USER_CC_TAB USER_CC_TAB:=USER_CC_TAB();
  --  Program Begins Here
FUNCTION GET_TABLE_DATA(
    L_SQL VARCHAR2)
  RETURN USER_CC_TAB
IS
  THE_RESULT USER_CC_TAB := USER_CC_TAB ( );
BEGIN
  EXECUTE IMMEDIATE L_SQL BULK COLLECT INTO THE_RESULT;
  RETURN THE_RESULT;
END;
BEGIN
  v_progress          := 10;
  v_exception_message := 'v_progress:- ' || v_progress || 'Procedure Begins';
  ms_qsm_utilities.initialize_metric_maint ('QSM');
  v_tbl_name := MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM'); -- 'MS_QSM_QUESTNR_RESP_DUP';
  v_progress := 20;
  BEGIN
    SELECT enterprise_id
    INTO v_enterprise_id
    FROM si_metrics_t t
    WHERE t.metric_name =
      (SELECT METRIC_NAME
      FROM MS_QSM_METRIC_MAINT
      WHERE GUID   ='RESQSM'
      AND IS_ACTIVE='Y'
      );
  EXCEPTION
  WHEN OTHERS THEN
    v_exception_message := SUBSTR (SQLERRM, 1, 255) || '- v_progress:- ' || v_progress || '-Exception in fetching the enterprise id from the si_metrics_t';
    RAISE v_user_exception;
  END;
  V_PROGRESS := 30;
  BEGIN
    SELECT VALUE
    INTO v_reminder_email_template
    FROM ms_qsm_params
    WHERE PARAM_GROUP = 'QSM_PARAMS'
    AND PARAMETER     = 'QSM_REMINDER_EMAIL_TEMPLATE'
    AND ENABLED       = 'Y';
  EXCEPTION
  WHEN OTHERS THEN
    v_exception_message := SUBSTR (SQLERRM, 1, 255) || '- v_progress:- ' || v_progress || '-Exception in fetching the parameter value, PARAMETER=QSM_REMINDER_EMAIL_TEMPLATE';
    RAISE V_USER_EXCEPTION;
  END;
  v_progress := 40;
  -- get the list of all reminders
  FOR reminder_rec IN reminder_list_cur --REMINDER_ID_PK, REMINDER_TYPE, REMINDER_NO_OF_DAYS, REMINDER_SEND_TO, REMINDER_FK, REMINDER_SUBJECT, REMINDER_TEXT, REMINDER_NEXT_SEND_DATE
  LOOP                                  -- start loop1
    v_progress := 50;
    BEGIN
    
      l_log_id           :=MS_QSM_REMINDER_EMAIL_LOG_SEQ.NEXTVAL;
      
      IF REMINDER_REC.REMINDER_SEND_TO = '2' AND REMINDER_REC.REMINDER_TYPE != 4 THEN --reminder_send_to 1-all respondents 2-all incomplete responses  --REMINDER_TYPE 4-send now
          v_progress                    := 51;
          --This query gets list of all users with incomplete responses, the view MS_QSM_QUESTNR_RESP_DUP_v contains response by all user in various stages of the workflow. resp_status='4' is for pending responses, instance_id is used to exclude responses that are submitted for approval or other stages in which case responses are not incomplete anymore but submitted for further processing.
          L_SQL_STRING:= 'select  user_cc_object(respondent,                            
                          DECODE('''||reminder_rec.CC_FOR_EMAIL||''',''4'',DECODE('''||reminder_rec.ADD_USER_RELATED_TO_ITEM||''',''no'','''||reminder_rec.EMAIL_SEND_TO_USERS_STORED||''',                            
                          (SELECT MS_CONCAT(TRIM(SUBSTR(COLUMN_VALUE,1,INSTR(COLUMN_VALUE,''['',1,1)-1)))    
                          FROM TABLE(MS_APPS_UTILITIES.PARSE_STRING('''||reminder_rec.EMAIL_SEND_TO_USERS_STORED||''','',''))    
                          where TRIM(SUBSTR(COLUMN_VALUE,INSTR(COLUMN_VALUE,''['',1,1)+1,(INSTR(COLUMN_VALUE,'']'',1,1)-1)-(INSTR(COLUMN_VALUE,''['',1,1))))=APPLIES_TO_OBJECT)),                            
                          MS_QSM_UTILITIES.FN_GET_MLOV_VALUES(DECODE('''||reminder_rec.ADD_USER_RELATED_TO_ITEM||
                                  ''',''yes'',''A.USER_NAME = B.USER_NAME'',''A.USER_NAME = B.USER_NAME(+)''),''A.USER_NAME'',''(SELECT DISTINCT USER_NAME                                                                      
                          FROM MS_QSM_ORG_FLOW_V FDO                                                                      
                          WHERE ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (''||'''''''||reminder_rec.EMAIL_SEND_TO_USERS_STORED||'''''''||'' ,'''','''')))                                                                      
                          ) A,                                                                      
                          (SELECT USER_NAME,OBJECT_ID                                                                      
                          FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(''''''||'||'(SELECT OBJECT_ID FROM MS_QSM_APPLIES_TO X WHERE X.OBJECT_NAME=A.APPLIES_TO)'||'||''~''||'||'APPLIES_TO_OBJECT_CODE'||
                                  '||''''''))) B'')))                            
                          from  ( SELECT RESPONDENT,RESP_STATUS,APPLIES_TO_OBJECT,APPLIES_TO,APPLIES_TO_OBJECT_CODE,QUE_REQUEST_ID,PROCESS_INSTANCE_ID,INSTANCE_ID, MAX(INSTANCE_ID) OVER (PARTITION BY PROCESS_INSTANCE_ID) MAX_INSTANCE_ID                
                          FROM '|| V_TBL_NAME ||'_V                               
                          where que_request_id='''||reminder_rec.REMINDER_FK|| '''                             
                          and instance_rec_num =1 ) A                            
                          WHERE  instance_id = MAX_INSTANCE_ID                             
                          and resp_status=''4''' ;
          ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id => v_progress, pn_error_sequence => v_progress, pc_error_type => 'E', pc_error_text => 'JAMSHEED'||l_sql_string||'@@@@'|| DBMS_UTILITY.format_error_backtrace || ' ~ ' || v_error_message );
          L_USER_CC_TAB:=GET_TABLE_DATA(L_SQL_STRING);
          --bulk collect INTO l_USER_CC_TAB;
          IF v_user_name_arr IS NOT NULL THEN
            v_recipients_arr :=v_user_name_arr;
          END IF;
      ELSE
          l_sql_string:= 'select user_cc_object(respondent,               
                          DECODE('''||reminder_rec.CC_FOR_EMAIL||''',''4'',DECODE('''||reminder_rec.ADD_USER_RELATED_TO_ITEM||''',''no'','''||reminder_rec.EMAIL_SEND_TO_USERS_STORED||''',                            
                          (SELECT MS_CONCAT(TRIM(SUBSTR(COLUMN_VALUE,1,INSTR(COLUMN_VALUE,''['',1,1)-1)))    
                          FROM TABLE(MS_APPS_UTILITIES.PARSE_STRING('''||reminder_rec.EMAIL_SEND_TO_USERS_STORED||''','',''))    
                          where TRIM(SUBSTR(COLUMN_VALUE,INSTR(COLUMN_VALUE,''['',1,1)+1,(INSTR(COLUMN_VALUE,'']'',1,1)-1)-(INSTR(COLUMN_VALUE,''['',1,1))))=APPLIES_TO_OBJECT)),                                                       
                          MS_QSM_UTILITIES.FN_GET_MLOV_VALUES(DECODE('''||reminder_rec.ADD_USER_RELATED_TO_ITEM||
                                  ''',''yes'',''A.USER_NAME = B.USER_NAME'',''A.USER_NAME = B.USER_NAME(+)''),''A.USER_NAME'',''(SELECT DISTINCT USER_NAME                                                                      
                          FROM MS_QSM_ORG_FLOW_V FDO                                                                      
                          WHERE ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (''||'''''''||reminder_rec.EMAIL_SEND_TO_USERS_STORED||'''''''||'' ,'''','''')))                                                                      
                          ) A,                                                                      
                          (SELECT USER_NAME,OBJECT_ID                                                                      
                          FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(''''''||'||'(SELECT OBJECT_ID FROM MS_QSM_APPLIES_TO X WHERE X.OBJECT_NAME=A.APPLIES_TO)'||'||''~''||'||'APPLIES_TO_OBJECT_CODE'||
                                  '||''''''))) B'')))                            
                          from  ( SELECT RESPONDENT,APPLIES_TO_OBJECT,APPLIES_TO,APPLIES_TO_OBJECT_CODE,QUE_REQUEST_ID,PROCESS_INSTANCE_ID,INSTANCE_ID, MAX(INSTANCE_ID) OVER (PARTITION BY PROCESS_INSTANCE_ID) MAX_INSTANCE_ID                
                          FROM '|| V_TBL_NAME ||'_V                               
                          where que_request_id='''||reminder_rec.REMINDER_FK|| '''                             
                          and instance_rec_num =1 ) A                            
                          WHERE  instance_id = MAX_INSTANCE_ID' ;
          ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id => v_progress, pn_error_sequence => v_progress, pc_error_type => 'E', pc_error_text => 'JAMSHEED'||l_sql_string||'@@@@'|| DBMS_UTILITY.format_error_backtrace || ' ~ ' || v_error_message );
          L_USER_CC_TAB:=GET_TABLE_DATA(L_SQL_STRING);
          -- get list of all respondents
          v_progress := 105;
      END IF;
      
      IF L_USER_CC_TAB.COUNT>0 THEN          
          v_progress         := 106;
          v_recipients_arr   := SET(v_recipients_arr);
          -- get the reminder mail subject and text for each user based on his locale from ms_qsm_reminder_email_TL table
          FOR X IN
                (SELECT a.user_name username,
                  CC_LIST,
                  b.locale_id,
                  d.reminder_subject subject_locale,
                  d.reminder_text text_locale
                FROM si_users_t a,
                  SI_LOCALES B,
                  (SELECT USER_NAME USER_NAME,CC_LIST CC_LIST FROM TABLE(L_USER_CC_TAB)
                  ) c,
                  (SELECT reminder_id_PK,
                    reminder_subject,
                    reminder_text,
                    locale_id
                  FROM ms_qsm_reminder_email_TL
                  WHERE reminder_id_PK = reminder_rec.REMINDER_ID_PK
                  ) d
                WHERE a.locale      = B.LOCALE_STRING
                AND a.user_name     = c.USER_NAME
                AND a.enterprise_id = v_enterprise_id
                AND b.locale_id     = d.locale_id(+)
                )
          LOOP
              l_status := 'S';
              l_cnt    := l_cnt+1;
              --set the parameters for send_mail procedure
              v_progress := 110;
              v_param_names.EXTEND (1);
              V_PARAM_NAMES (1) := 'EMail_Body';
              v_param_values.extend (1);
              v_param_values(1) := REPLACE(NVL(x.text_locale,reminder_rec.REMINDER_TEXT),CHR(10),'<br>');
              V_SUBJECT_LOCALE  := NVL(X.SUBJECT_LOCALE,REMINDER_REC.REMINDER_SUBJECT);
              v_progress        := 115;
              SI_ALERT_SV.SEND_EMAIL (X_PRIORITY=>2 , X_RECIPIENTS=>VARCHAR2_ARRAY(X.USERNAME), X_CCRECIPIENTS=>VARCHAR2_ARRAY(X.CC_LIST), X_FROM =>'', X_ENTERPRISE_ID=>V_ENTERPRISE_ID, X_SUBJECT=>V_SUBJECT_LOCALE, X_TEMPLATE=>V_REMINDER_EMAIL_TEMPLATE, X_PARAM_NAMES=>V_PARAM_NAMES, X_PARAM_VALUES=>V_PARAM_VALUES, X_ERROR_CODE=>V_ERROR_CODE, x_error_message=>v_error_message );
              IF V_ERROR_CODE = '-1' THEN
                l_status     := 'E';
              END IF;
              v_param_names.delete;
              v_param_values.delete;
              l_ms_rmdr_log_det_tab.EXTEND;
              l_ms_rmdr_log_det_tab(l_cnt).log_id        :=l_log_id;
              l_ms_rmdr_log_det_tab(l_cnt).recipent_name := x.username;
              L_MS_RMDR_LOG_DET_TAB(L_CNT).CC_USERS      :=X.CC_LIST;
              l_ms_rmdr_log_det_tab(l_cnt).status        :=l_status;
              l_ms_rmdr_log_det_tab(l_cnt).log_date      :=SYSDATE;
          END LOOP;
          v_progress := 120;
      END IF;
      -- SCH_FREQUENCY values : 1-anually,2-daily,3-live,4-monthly,5-quarterly,6-run now,7-semi anually,8-specific date,9-weelky
      -- If it is one time survey set reminder_sent to 'Y' and for recurring survey set reminder_sent to 'N'
      UPDATE MS_QSM_REMINDER_EMAIL
      SET REMINDER_SENT         = DECODE(reminder_rec.sch_frequency,3,'Y',6,'Y',8,'Y',NULL,'Y','N'),
        REMINDER_LAST_SEND_DATE = v_run_date,
        REMINDER_NEXT_SEND_DATE = DECODE(to_number(reminder_rec.sch_frequency),1,add_months(REMINDER_NEXT_SEND_DATE, 12),2,REMINDER_NEXT_SEND_DATE+1,4,add_months(REMINDER_NEXT_SEND_DATE, 1),5,add_months(REMINDER_NEXT_SEND_DATE, 3),7,add_months(REMINDER_NEXT_SEND_DATE, 6),9,REMINDER_NEXT_SEND_DATE+7, NULL)
      WHERE reminder_id_pk      = reminder_rec.reminder_id_pk ;
      MS_QSM_REMINDER_EMAIL_LOG_PROC( 'I' , 'Reminder Sent Successfully. Recipient count = '||l_USER_CC_TAB.count, reminder_rec.REMINDER_ID_PK , reminder_rec.REMINDER_TYPE , reminder_rec.REMINDER_NO_OF_DAYS , reminder_rec.REMINDER_SEND_TO , reminder_rec.REMINDER_FK , reminder_rec.REMINDER_SUBJECT , reminder_rec.REMINDER_TEXT , reminder_rec.REMINDER_NEXT_SEND_DATE,l_log_id,l_USER_CC_TAB.count,reminder_rec.sch_iteration,reminder_rec.CC_FOR_EMAIL,reminder_rec.email_send_to_users,reminder_rec.ADD_USER_RELATED_TO_ITEM);
      --clearing the collections
      l_USER_CC_TAB.DELETE;
      v_recipients_arr.delete;
      v_user_name_arr.delete;
    EXCEPTION
    WHEN OTHERS THEN
      MS_QSM_REMINDER_EMAIL_LOG_PROC( 'E' , 'ERROR while sending Reminder. Recipient count ='||l_USER_CC_TAB.COUNT||' : Progress - '||v_progress||' : '||SQLCODE||' : '|| SUBSTR(SQLERRM,1,200)||' Respondents: '||SUBSTR(v_respondents,1,2000)||' Orgn count:'||v_org_arr.count||'@'||DBMS_UTILITY.format_error_backtrace||'@'||l_sql_string , reminder_rec.REMINDER_ID_PK , reminder_rec.REMINDER_TYPE , reminder_rec.REMINDER_NO_OF_DAYS , reminder_rec.REMINDER_SEND_TO , reminder_rec.REMINDER_FK , reminder_rec.REMINDER_SUBJECT , reminder_rec.REMINDER_TEXT , reminder_rec.REMINDER_NEXT_SEND_DATE,l_log_id,v_recipients_arr.COUNT,reminder_rec.sch_iteration,reminder_rec.CC_FOR_EMAIL,reminder_rec.email_send_to_users,reminder_rec.ADD_USER_RELATED_TO_ITEM );      
      l_USER_CC_TAB.DELETE;
      V_RECIPIENTS_ARR.DELETE;
      v_user_name_arr.delete;   
      
    END;
  END LOOP; --end loop1
  forall i IN 1 .. l_ms_rmdr_log_det_tab.count SAVE exceptions
  INSERT INTO ms_qsm_reminder_email_log_dtls VALUES l_ms_rmdr_log_det_tab
    (i
    );
    
  l_ms_rmdr_log_det_tab.DELETE;
  COMMIT;
  v_error_code    := 0;
  v_error_message := 'Successfully Completed';
EXCEPTION
WHEN v_user_exception THEN
  v_error_code    := -1;
  v_error_message := v_exception_message;
  ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id => v_progress, pn_error_sequence => v_progress, pc_error_type => 'ERROR', pc_error_text => 'Problem Sending MS_QSM_REMINDER_EMAIL' || DBMS_UTILITY.format_error_backtrace || ' ~ ' || v_error_message );
WHEN OTHERS THEN
  COMMIT; --commit work that has been done.
  v_exception_message := SUBSTR (SQLERRM, 1, 255) || 'v_progress:- ' || v_progress || 'No Others exception raised ';
  v_error_code        := -1;
  v_error_message     := v_exception_message;
  ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id => v_progress, pn_error_sequence => v_progress, pc_error_type => 'ERROR', pc_error_text => 'WO Problem Sending MS_QSM_REMINDER_EMAIL' || DBMS_UTILITY.format_error_backtrace || ' ~ ' || v_error_message );
END MS_QSM_REMINDER_EMAIL_PROC; 
 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_RESPONDED_ROW" AS OBJECT
(

ISSUE_SOURCE_TYPE VARCHAR2(4000),
ISSUE_ID VARCHAR2(4000), 
COMMENTS VARCHAR2(4000),
ACTION_ID VARCHAR2(4000), 
WORK_DONE VARCHAR2(4000), 
RESULTS VARCHAR2(4000)
); 

 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_RESPONDED_TABLE" is table of MS_QSM_RESPONDED_ROW; 

 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_RESPONSE" 
                  AS OBJECT
       (code VARCHAR2 (10), que_request_id VARCHAR2 (100), errors varchar2_array) 

 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_RESPONSE_DETAILS_REPO_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name  : MS_QSM_RESPONSE_DETAILS_REPO_P
    Creation Time : Sat Jun 21 00:42:13 IST 2014
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_RESPONSE_DETAILS_REPO_P' ;
    GV_program_name VARCHAR2(100);
   
   
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id  IN                      NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id         IN                      VARCHAR2,
            iop_log_no              IN   OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY     CLOB,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2,
            iop_error_seq         IN     OUT                NUMBER,
            ip_pid                IN                        NUMBER
        );
   


END MS_QSM_RESPONSE_DETAILS_REPO_P ;
 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_RESPONSE_DETAILS_REPO_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Body.
    Author : Data Designer ETL Engine
   -------------------------------------------------------------------------- */
   
   
/* --------------------------------------------------------------------------------
    GENERATE_UPDATE_HIERARCHY : Procedure to get the update the xml data hierarchy
   ------------------------------------------------------------------------------ */

    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        );
        
    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        )
    AS
        LV_error_code               NUMBER;
        LV_error_message            VARCHAR2(1000);
        UPDATE_HIERARCHY_EXCEP      EXCEPTION;
        LV_xml                      XMLTYPE := iop_xml;
		LV_namespace                varchar2(100) := 'xmlns="http://www.metricstream.com/appstudio/msa"';
        lv_program_name             VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UPDATE_HIERARCHY';


/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
      
    		iop_xml := LV_xml;
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_pid);
    EXCEPTION
        WHEN UPDATE_HIERARCHY_EXCEP THEN

            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE_HIERARCHY_EXCEP Exception Raised ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO  MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
			MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UPDATE_HIERARCHY;
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
        LV_error_code NUMBER;
        LV_error_message VARCHAR2(1000);
        NEXT_ID_GEN_EXCEPTION EXCEPTION;
        lv_program_name VARCHAR2(100);
        ln_error_seq NUMBER:=1;

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'GET_NEXT_ID';

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;

    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_process_instance_id);
      
             
 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_process_instance_id);
    EXCEPTION
        WHEN NEXT_ID_GEN_EXCEPTION THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] NEXT_ID_GEN_EXCEPTION Exception Raised ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] WHEN OTHERS ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END GET_NEXT_ID;


 

  	    	 
  	    	 
  	    	              
/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY         CLOB,
            iop_log_no            IN     OUT                    NUMBER,
            op_error_code                OUT                    NUMBER,
            op_error_message             OUT                    VARCHAR2,
            iop_error_seq         IN     OUT                    NUMBER,
            ip_pid                IN                            NUMBER

        )
    AS

/* --------------------------------------------------------------------------
     ETL procedure created by the ETL Engine of APP BUILDER.
     The procedure takes care of loading the data that is sent
     by the FLOW BUILDER and store the same in MS TABLES.
     Data is already processed and stored accordingly in the iop_data
     object structure. The object can have one or more records.
     The ETL is designed to take care of one or more records.
     If the data has to be manipulated before populating the main
     MS TABLES, please use the HOOKS that are generated by the
     FLOW BUILDER.
   -------------------------------------------------------------------------- */
        LV_progress VARCHAR2(3) := NULL;
        LV_cntr_1   NUMBER      := NULL;
        LV_cntr_2   NUMBER      := NULL;
        LV_debug    BOOLEAN     := FALSE;
        LV_XML      XMLTYPE     := XMLTYPE(iop_xml_data);
        LV_err_code NUMBER      := NULL;
        LV_err_msg  VARCHAR2(4000);
        lV_program_name VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
              AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
      
    /************* Add the cursors for all the regions ******************/
      
            
   /************* End of cursors for all the regions ******************/
    
   /************ Add the cursors for all object relationships *****************************/
    	  		      BEGIN

/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------
    Note: Defining SAVEPOINT TO ROLLBACK transactions done by ETL.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        LV_progress := '001';
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'CALL_ETL';


/* --------------------------------------------------------------------------
    Note: Default DEBUG FLAG is set to FALSE to avoid unneccessary logging of data.
            If any issues found in ETL, to understand what goes into the ETL
            then set this variable to TRUE and run the ETL in the flow.
            It allows to log the entire relevant data set.
   -------------------------------------------------------------------------- */
        LV_debug := FALSE;

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);
        
        UPDATE_HIERARCHY
        (
           iop_log_no          => LV_log_no.APP_LOG_NO,
           iop_xml             => LV_XML,
           op_error_code       => LV_err_code,
           op_error_message    => LV_err_msg,
           iop_error_sequence  => iop_error_seq,
           ip_pid              => ip_pid
        );

        IF(LV_err_code !=0) THEN
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'W','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Failed while updating Hierarchy ', ip_pid);
        END IF;
        
        /* capture all cursors here */
		
		
        LV_cntr_1 := 0;
      
/* --------------------------------------------------------------------------
        Cursor to fetch non multirow details from XML
   -------------------------------------------------------------------------- */
		        FOR iop_data in ( SELECT  INSTANCE_ID
                                 ,METRIC_ID
                                 ,TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_RUN_DATE
                                 ,TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
                                 ,LATEST_FLAG
                                 ,CREATED_BY
                                 ,TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE
                                 ,PROCESS_FLOW_STATUS
                                 ,PROCESS_INSTANCE_ID
                                 ,ELECTRONICALLY_SIGNED
	                             ,INSTANCE_REC_NUM
											 					   	  , INFOLET_PARAM
					    											 					   	  , QUESTION
					    											 					   	  , FILTER_TYPE
					    											 					   	  , SECTION
					    											 					   	  , RESPONDENT
					    											 					   	  , QUESTNR_SURVEY
					    											 					   	  , RESPONSES
					    											 					   	  , DD_EVENT_USER_NAME
					    											 					   	  , DD_CURRENT_USER_NAME
					    											 					   	  , DD_OBJECT_TYPE
					    											 					   	  , DD_PROCESS_CODE
					    										FROM XMLTABLE(XMLNAMESPACES(  'http://www.metricstream.com/appstudio/msa'  as "msa"),
                                'msa:datapacket/msa:data/msa:nonmultirow' 
                               PASSING LV_XML
                               COLUMNS
                                INSTANCE_ID                      NUMBER          PATH  'msa:instance_id'
                               ,METRIC_ID                        NUMBER          PATH  'msa:metric_id'
                               ,METRIC_RUN_DATE                  VARCHAR2(40)    PATH  'msa:metric_run_date'
                               ,METRIC_COMPLETED_DATE            VARCHAR2(40)    PATH  'msa:metric_completed_date'
                               ,LATEST_FLAG                      VARCHAR2(1)     PATH  'msa:latest_flag'
                               ,CREATED_BY                       NUMBER          PATH  'msa:created_by'
                               ,CREATION_DATE                    VARCHAR2(40)    PATH  'msa:creation_date'
                               ,PROCESS_FLOW_STATUS              NUMBER          PATH  'msa:process_flow_status'
                               ,PROCESS_INSTANCE_ID              NUMBER          PATH  'msa:process_instance_id'
                               ,ELECTRONICALLY_SIGNED            NUMBER          PATH  'msa:electronically_signed'
                               ,INSTANCE_REC_NUM                 NUMBER          PATH  'msa:instance_rec_num'    
														, INFOLET_PARAM  VARCHAR2(4000)	 PATH   'msa:infolet_param' 
																						, QUESTION  VARCHAR2(4000)	 PATH   'msa:question' 
																						, FILTER_TYPE  VARCHAR2(4000)	 PATH   'msa:filter_type' 
																						, SECTION  VARCHAR2(4000)	 PATH   'msa:section' 
																						, RESPONDENT  VARCHAR2(4000)	 PATH   'msa:respondent' 
																						, QUESTNR_SURVEY  VARCHAR2(4000)	 PATH   'msa:questnr_survey' 
																						, RESPONSES  VARCHAR2(4000)	 PATH   'msa:responses' 
																						, DD_EVENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_event_user_name'
																						, DD_CURRENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_current_user_name'
																						, DD_OBJECT_TYPE  VARCHAR2(4000) PATH 'msa:dd_object_type'
																						, DD_PROCESS_CODE  VARCHAR2(4000) PATH 'msa:dd_process_code'
																			))      
					
				LOOP
			           LV_cntr_1 := LV_cntr_1 + 1;
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Data Found in iop_data. ', ip_pid);
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ')', ip_pid);
    

		 /* --------------------------------------------------------------------------
		       Loop through the data object to load the data into MS tables.
		        Header info is being loaded into the system.
		  -------------------------------------------------------------------------- */ 
 			  			 	
		/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
		  -------------------------------------------------------------------------- */ 	
		  		 		
  									    		IF LV_debug THEN
												

	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.INFOLET_PARAM, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.FILTER_TYPE, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUESTNR_SURVEY, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    				             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
			             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
    			    	END IF;
    			    	
    			    							MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  
  MERGE 
    INTO MS_QSM_RESP_DTLS_RPT T 
  		USING (
  				SELECT     
          iop_data.INFOLET_PARAM AS INFOLET_PARAM
    	          , iop_data.FILTER_TYPE AS FILTER_TYPE
    	          , iop_data.QUESTNR_SURVEY AS QUESTNR_SURVEY
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.FILTER_TYPE = V.FILTER_TYPE
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.INFOLET_PARAM=V.INFOLET_PARAM
 ,T.QUESTNR_SURVEY=V.QUESTNR_SURVEY
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.INFOLET_PARAM
 ,T.FILTER_TYPE
 ,T.QUESTNR_SURVEY
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.INFOLET_PARAM
        ,V.FILTER_TYPE
        ,V.QUESTNR_SURVEY
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
						
																		

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	  DELETE MS_QSM_RESP_DTLS_RPT_QSN WHERE 
 	   	   	   		 FILTER_TYPE = iop_data.FILTER_TYPE
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.QUESTION) > 0 THEN
 		
 		INSERT INTO MS_QSM_RESP_DTLS_RPT_QSN (
 		 		DD_STATUS_FLAG,
 		 		 FILTER_TYPE
 		 		,  QUESTION
 		 		) SELECT 
 		'Y',
 		 		 		  iop_data.FILTER_TYPE  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.QUESTION,','));

 	   END IF;
 	  													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	  DELETE MS_QSM_RESP_DTLS_RPT_SCN WHERE 
 	   	   	   		 FILTER_TYPE = iop_data.FILTER_TYPE
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.SECTION) > 0 THEN
 		
 		INSERT INTO MS_QSM_RESP_DTLS_RPT_SCN (
 		 		DD_STATUS_FLAG,
 		 		 FILTER_TYPE
 		 		,  SECTION
 		 		) SELECT 
 		'Y',
 		 		 		  iop_data.FILTER_TYPE  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.SECTION,','));

 	   END IF;
 	  													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	  DELETE MS_QSM_RESP_DTLS_RPT_RES WHERE 
 	   	   	   		 FILTER_TYPE = iop_data.FILTER_TYPE
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.RESPONDENT) > 0 THEN
 		
 		INSERT INTO MS_QSM_RESP_DTLS_RPT_RES (
 		 		DD_STATUS_FLAG,
 		 		 FILTER_TYPE
 		 		,  RESPONDENT
 		 		) SELECT 
 		'Y',
 		 		 		  iop_data.FILTER_TYPE  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.RESPONDENT,','));

 	   END IF;
 	  													

 	  MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	  	  	  
	   	  
 	  DELETE MS_QSM_RESP_DTLS_RPT_RPS WHERE 
 	   	   	   		 FILTER_TYPE = iop_data.FILTER_TYPE
	  		  	;
	  	
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
		
		MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');
		
		 		IF length(iop_data.RESPONSES) > 0 THEN
 		
 		INSERT INTO MS_QSM_RESP_DTLS_RPT_RPS (
 		 		DD_STATUS_FLAG,
 		 		 FILTER_TYPE
 		 		,  RESPONSES
 		 		) SELECT 
 		'Y',
 		 		 		  iop_data.FILTER_TYPE  		 		, COLUMN_VALUE  			   FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.RESPONSES,','));

 	   END IF;
 	  													
		  		  		  		            
          			                    
          									  
				   			   		
    END LOOP;	 
        EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in call ETL ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END CALL_ETL;        

END MS_QSM_RESPONSE_DETAILS_REPO_P ;   
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_RESPONSE_SPREADSHEET_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name  : MS_QSM_RESPONSE_SPREADSHEET_P
    Creation Time : Thu May 29 19:13:52 IST 2014
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_RESPONSE_SPREADSHEET_P' ;
    GV_program_name VARCHAR2(100);
   
   
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id  IN                      NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id         IN                      VARCHAR2,
            iop_log_no              IN   OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY     CLOB,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2,
            iop_error_seq         IN     OUT                NUMBER,
            ip_pid                IN                        NUMBER
        );
   


END MS_QSM_RESPONSE_SPREADSHEET_P ;
 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_RESPONSE_SPREADSHEET_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Body.
    Author : Data Designer ETL Engine
   -------------------------------------------------------------------------- */
   
   
/* --------------------------------------------------------------------------------
    GENERATE_UPDATE_HIERARCHY : Procedure to get the update the xml data hierarchy
   ------------------------------------------------------------------------------ */

    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        );
        
    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        )
    AS
        LV_error_code               NUMBER;
        LV_error_message            VARCHAR2(1000);
        UPDATE_HIERARCHY_EXCEP      EXCEPTION;
        LV_xml                      XMLTYPE := iop_xml;
		LV_namespace                varchar2(100) := 'xmlns="http://www.metricstream.com/appstudio/msa"';
        lv_program_name             VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UPDATE_HIERARCHY';


/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
      
    	           	    SELECT DELETEXML(LV_XML,'datapacket/data/clm/row/clm_question_id',LV_namespace) INTO LV_XML FROM DUAL;
	              	    SELECT DELETEXML(LV_XML,'datapacket/data/clm/row/clm_spreadsheet_id',LV_namespace) INTO LV_XML FROM DUAL;
	              	    SELECT DELETEXML(LV_XML,'datapacket/data/clm/row/clm_response_id',LV_namespace) INTO LV_XML FROM DUAL;
	           
	FOR rec in (SELECT DISTINCT 
        	    	  	 question_id
        	    	  	 ,  spreadsheet_id
        	    	  	 ,  response_id
        FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
      'msa:datapacket/msa:data/msa:nonmultirow'       PASSING LV_xml
    COLUMNS
            	 question_id  VARCHAR2(4000)    PATH  'msa:question_id'
        	, spreadsheet_id  VARCHAR2(4000)    PATH  'msa:spreadsheet_id'
        	, response_id  VARCHAR2(4000)    PATH  'msa:response_id'
       ))
   
   LOOP
               	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/clm/row','clm_question_id',XMLTYPE('<clm_question_id ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.question_id||'</clm_question_id>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	           	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/clm/row','clm_spreadsheet_id',XMLTYPE('<clm_spreadsheet_id ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.spreadsheet_id||'</clm_spreadsheet_id>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	           	SELECT INSERTCHILDXML(LV_XML,'datapacket/data/clm/row','clm_response_id',XMLTYPE('<clm_response_id ' ||'xmlns="http://www.metricstream.com/appstudio/msa" ' ||'>'||rec.response_id||'</clm_response_id>'),LV_namespace)
    INTO LV_XML
    FROM DUAL;
 	    END LOOP;
	iop_xml := LV_xml;
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_pid);
    EXCEPTION
        WHEN UPDATE_HIERARCHY_EXCEP THEN

            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE_HIERARCHY_EXCEP Exception Raised ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO  MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
			MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UPDATE_HIERARCHY;
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
        LV_error_code NUMBER;
        LV_error_message VARCHAR2(1000);
        NEXT_ID_GEN_EXCEPTION EXCEPTION;
        lv_program_name VARCHAR2(100);
        ln_error_seq NUMBER:=1;

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'GET_NEXT_ID';

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;

    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_process_instance_id);
      
             
 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_process_instance_id);
    EXCEPTION
        WHEN NEXT_ID_GEN_EXCEPTION THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] NEXT_ID_GEN_EXCEPTION Exception Raised ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] WHEN OTHERS ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END GET_NEXT_ID;


 

  	    	 
  	    	 
  	    	              
/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY         CLOB,
            iop_log_no            IN     OUT                    NUMBER,
            op_error_code                OUT                    NUMBER,
            op_error_message             OUT                    VARCHAR2,
            iop_error_seq         IN     OUT                    NUMBER,
            ip_pid                IN                            NUMBER

        )
    AS

/* --------------------------------------------------------------------------
     ETL procedure created by the ETL Engine of APP BUILDER.
     The procedure takes care of loading the data that is sent
     by the FLOW BUILDER and store the same in MS TABLES.
     Data is already processed and stored accordingly in the iop_data
     object structure. The object can have one or more records.
     The ETL is designed to take care of one or more records.
     If the data has to be manipulated before populating the main
     MS TABLES, please use the HOOKS that are generated by the
     FLOW BUILDER.
   -------------------------------------------------------------------------- */
        LV_progress VARCHAR2(3) := NULL;
        LV_cntr_1   NUMBER      := NULL;
        LV_cntr_2   NUMBER      := NULL;
        LV_debug    BOOLEAN     := FALSE;
        LV_XML      XMLTYPE     := XMLTYPE(iop_xml_data);
        LV_err_code NUMBER      := NULL;
        LV_err_msg  VARCHAR2(4000);
        lV_program_name VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
              AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
      
    /************* Add the cursors for all the regions ******************/
      
        				
		CURSOR CU_QSM_RESP_SPRDSHEET_CLM is (SELECT 
				   	   			   	    	  CLM_RESPONSE_ID
		   	   		   			   	   			   	    	,   CLM_SPREADSHEET_ID
		   	   		   			   	   			   	    	,   CLM_QUESTION_ID
		   	   		   			   	   			   	    	,  FIELD_9
		   	   		   			   	   			   	    	,  FIELD_5
		   	   		   			   	   			   	    	,  FIELD_8
		   	   		   			   	   			   	    	,  FIELD_11
		   	   		   			   	   			   	    	,  FIELD_10
		   	   		   			   	   			   	    	,  FIELD_3
		   	   		   			   	   			   	    	,  FIELD_13
		   	   		   			   	   			   	    	,  FIELD_19
		   	   		   			   	   			   	    	,  FIELD_16
		   	   		   			   	   			   	    	,  FIELD_15
		   	   		   			   	   			   	    	,  FIELD_1
		   	   		   			   	   			   	    	,  FIELD_17
		   	   		   			   	   			   	    	,  FIELD_12
		   	   		   			   	   			   	    	,  FIELD_2
		   	   		   			   	   			   	    	,  FIELD_6
		   	   		   			   	   			   	    	,  FIELD_14
		   	   		   			   	   			   	    	,  DATA_ID_PK
		   	   		   			   	   			   	    	,  FIELD_7
		   	   		   			   	   			   	    	,  FIELD_18
		   	   		   			   	   			   	    	,  FIELD_20
		   	   		   			   	   			   	    	,  FIELD_4
		   	   		   	 		FROM XMLTABLE(XMLNAMESPACES( 'http://www.metricstream.com/appstudio/msa'  as "msa"),'msa:datapacket/msa:data/msa:clm/msa:row'
		PASSING LV_xml
		COLUMNS
	    	    	   			  CLM_RESPONSE_ID  VARCHAR2(4000)   PATH 'msa:clm_response_id' 	    	   			,   CLM_SPREADSHEET_ID  VARCHAR2(4000)   PATH 'msa:clm_spreadsheet_id' 	    	   			,   CLM_QUESTION_ID  VARCHAR2(4000)   PATH 'msa:clm_question_id' 	    	   			,  FIELD_9  VARCHAR2(4000)   PATH 'msa:field_9' 	    	   			,  FIELD_5  VARCHAR2(4000)   PATH 'msa:field_5' 	    	   			,  FIELD_8  VARCHAR2(4000)   PATH 'msa:field_8' 	    	   			,  FIELD_11  VARCHAR2(4000)   PATH 'msa:field_11' 	    	   			,  FIELD_10  VARCHAR2(4000)   PATH 'msa:field_10' 	    	   			,  FIELD_3  VARCHAR2(4000)   PATH 'msa:field_3' 	    	   			,  FIELD_13  VARCHAR2(4000)   PATH 'msa:field_13' 	    	   			,  FIELD_19  VARCHAR2(4000)   PATH 'msa:field_19' 	    	   			,  FIELD_16  VARCHAR2(4000)   PATH 'msa:field_16' 	    	   			,  FIELD_15  VARCHAR2(4000)   PATH 'msa:field_15' 	    	   			,  FIELD_1  VARCHAR2(4000)   PATH 'msa:field_1' 	    	   			,  FIELD_17  VARCHAR2(4000)   PATH 'msa:field_17' 	    	   			,  FIELD_12  VARCHAR2(4000)   PATH 'msa:field_12' 	    	   			,  FIELD_2  VARCHAR2(4000)   PATH 'msa:field_2' 	    	   			,  FIELD_6  VARCHAR2(4000)   PATH 'msa:field_6' 	    	   			,  FIELD_14  VARCHAR2(4000)   PATH 'msa:field_14' 	    	   			,  DATA_ID_PK  VARCHAR2(4000)   PATH 'msa:data_id_pk' 	    	   			,  FIELD_7  VARCHAR2(4000)   PATH 'msa:field_7' 	    	   			,  FIELD_18  VARCHAR2(4000)   PATH 'msa:field_18' 	    	   			,  FIELD_20  VARCHAR2(4000)   PATH 'msa:field_20' 	    	   			,  FIELD_4  VARCHAR2(4000)   PATH 'msa:field_4' 	    			));	  
		TYPE LT_QSM_RESP_SPRDSHEET_CLM IS TABLE OF CU_QSM_RESP_SPRDSHEET_CLM%ROWTYPE;
		TY_QSM_RESP_SPRDSHEET_CLM  LT_QSM_RESP_SPRDSHEET_CLM; 
		
		        
   /************* End of cursors for all the regions ******************/
    
   /************ Add the cursors for all object relationships *****************************/
    	  		      BEGIN

/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------
    Note: Defining SAVEPOINT TO ROLLBACK transactions done by ETL.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        LV_progress := '001';
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'CALL_ETL';


/* --------------------------------------------------------------------------
    Note: Default DEBUG FLAG is set to FALSE to avoid unneccessary logging of data.
            If any issues found in ETL, to understand what goes into the ETL
            then set this variable to TRUE and run the ETL in the flow.
            It allows to log the entire relevant data set.
   -------------------------------------------------------------------------- */
        LV_debug := FALSE;

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);
        
        UPDATE_HIERARCHY
        (
           iop_log_no          => LV_log_no.APP_LOG_NO,
           iop_xml             => LV_XML,
           op_error_code       => LV_err_code,
           op_error_message    => LV_err_msg,
           iop_error_sequence  => iop_error_seq,
           ip_pid              => ip_pid
        );

        IF(LV_err_code !=0) THEN
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'W','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Failed while updating Hierarchy ', ip_pid);
        END IF;
        
        /* capture all cursors here */
					       OPEN CU_QSM_RESP_SPRDSHEET_CLM;
	       FETCH CU_QSM_RESP_SPRDSHEET_CLM BULK COLLECT INTO TY_QSM_RESP_SPRDSHEET_CLM;
	       CLOSE CU_QSM_RESP_SPRDSHEET_CLM; 
	    		
		
        LV_cntr_1 := 0;
      
/* --------------------------------------------------------------------------
        Cursor to fetch non multirow details from XML
   -------------------------------------------------------------------------- */
		        FOR iop_data in ( SELECT  INSTANCE_ID
                                 ,METRIC_ID
                                 ,TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_RUN_DATE
                                 ,TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
                                 ,LATEST_FLAG
                                 ,CREATED_BY
                                 ,TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE
                                 ,PROCESS_FLOW_STATUS
                                 ,PROCESS_INSTANCE_ID
                                 ,ELECTRONICALLY_SIGNED
	                             ,INSTANCE_REC_NUM
											 					   	  , RESPONSE_ID
					    											 					   	  , SPREADSHEET_ID
					    											 					   	  , QUESTION_ID
					    											 					   	  , JSON_OBJECT
					    											 					   	  , QUESTIONNAIRE_ID
					    											 					   	  , DD_EVENT_USER_NAME
					    											 					   	  , DD_CURRENT_USER_NAME
					    											 					   	  , DD_OBJECT_TYPE
					    											 					   	  , DD_PROCESS_CODE
					    										FROM XMLTABLE(XMLNAMESPACES(  'http://www.metricstream.com/appstudio/msa'  as "msa"),
                                'msa:datapacket/msa:data/msa:nonmultirow' 
                               PASSING LV_XML
                               COLUMNS
                                INSTANCE_ID                      NUMBER          PATH  'msa:instance_id'
                               ,METRIC_ID                        NUMBER          PATH  'msa:metric_id'
                               ,METRIC_RUN_DATE                  VARCHAR2(40)    PATH  'msa:metric_run_date'
                               ,METRIC_COMPLETED_DATE            VARCHAR2(40)    PATH  'msa:metric_completed_date'
                               ,LATEST_FLAG                      VARCHAR2(1)     PATH  'msa:latest_flag'
                               ,CREATED_BY                       NUMBER          PATH  'msa:created_by'
                               ,CREATION_DATE                    VARCHAR2(40)    PATH  'msa:creation_date'
                               ,PROCESS_FLOW_STATUS              NUMBER          PATH  'msa:process_flow_status'
                               ,PROCESS_INSTANCE_ID              NUMBER          PATH  'msa:process_instance_id'
                               ,ELECTRONICALLY_SIGNED            NUMBER          PATH  'msa:electronically_signed'
                               ,INSTANCE_REC_NUM                 NUMBER          PATH  'msa:instance_rec_num'    
														, RESPONSE_ID  VARCHAR2(4000)	 PATH   'msa:response_id' 
																						, SPREADSHEET_ID  VARCHAR2(4000)	 PATH   'msa:spreadsheet_id' 
																						, QUESTION_ID  VARCHAR2(4000)	 PATH   'msa:question_id' 
																						, JSON_OBJECT  CLOB 			 PATH   'msa:json_object' 
																						, QUESTIONNAIRE_ID  VARCHAR2(4000)	 PATH   'msa:questionnaire_id' 
																						, DD_EVENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_event_user_name'
																						, DD_CURRENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_current_user_name'
																						, DD_OBJECT_TYPE  VARCHAR2(4000) PATH 'msa:dd_object_type'
																						, DD_PROCESS_CODE  VARCHAR2(4000) PATH 'msa:dd_process_code'
																			))      
					
				LOOP
			           LV_cntr_1 := LV_cntr_1 + 1;
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Data Found in iop_data. ', ip_pid);
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ')', ip_pid);
    

		 /* --------------------------------------------------------------------------
		       Loop through the data object to load the data into MS tables.
		        Header info is being loaded into the system.
		  -------------------------------------------------------------------------- */ 
 			  			 	
		/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
		  -------------------------------------------------------------------------- */ 	
		  		 		
  									    		IF LV_debug THEN
												

	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RESPONSE_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SPREADSHEET_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUESTION_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.JSON_OBJECT, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUESTIONNAIRE_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_OBJECT_TYPE, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.PROCESS_INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
	    		    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_PROCESS_CODE, ip_pid);
	    				             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
			             MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
    			    	END IF;
    			    	
    			    							MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  
  MERGE 
    INTO MS_QSM_RESP_SPRDSHEET T 
  		USING (
  				SELECT     
          iop_data.RESPONSE_ID AS RESPONSE_ID
    	          , iop_data.SPREADSHEET_ID AS SPREADSHEET_ID
    	          , iop_data.QUESTION_ID AS QUESTION_ID
    	          , iop_data.JSON_OBJECT AS JSON_OBJECT
    	          , iop_data.QUESTIONNAIRE_ID AS QUESTIONNAIRE_ID
    	      		,iop_data.DD_OBJECT_TYPE  AS DD_OBJECT_TYPE
	      		,iop_data.DD_EVENT_USER_NAME AS DD_CREATED_BY
	      	      		,iop_data.DD_CURRENT_USER_NAME AS DD_MODIFIED_BY
	      	      		,iop_data.PROCESS_INSTANCE_ID  AS DD_PROCESS_INSTANCE_ID
	      		,iop_data.INSTANCE_ID  AS DD_INSTANCE_ID
	      		,iop_data.DD_PROCESS_CODE AS DD_PROCESS_CODE
	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.RESPONSE_ID = V.RESPONSE_ID
 AND  T.SPREADSHEET_ID = V.SPREADSHEET_ID
 AND  T.QUESTION_ID = V.QUESTION_ID
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.JSON_OBJECT=V.JSON_OBJECT
 ,T.QUESTIONNAIRE_ID=V.QUESTIONNAIRE_ID
 ,T.DD_OBJECT_TYPE=V.DD_OBJECT_TYPE
 ,T.DD_MODIFIED_BY=V.DD_MODIFIED_BY
 ,T.DD_MODIFIED_ON=SYSDATE
,T.DD_PROCESS_INSTANCE_ID=V.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID=V.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE=V.DD_PROCESS_CODE
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.RESPONSE_ID
 ,T.SPREADSHEET_ID
 ,T.QUESTION_ID
 ,T.JSON_OBJECT
 ,T.QUESTIONNAIRE_ID
 ,T.DD_OBJECT_TYPE
 ,T.DD_CREATED_BY
 ,T.DD_CREATED_ON
 ,T.DD_PROCESS_INSTANCE_ID
 ,T.DD_INSTANCE_ID
 ,T.DD_PROCESS_CODE
)
VALUES 
  ('Y'         
     ,V.RESPONSE_ID
        ,V.SPREADSHEET_ID
        ,V.QUESTION_ID
        ,V.JSON_OBJECT
        ,V.QUESTIONNAIRE_ID
        ,V.DD_OBJECT_TYPE
        ,V.DD_CREATED_BY
       ,SYSDATE
         ,V.DD_PROCESS_INSTANCE_ID
        ,V.DD_INSTANCE_ID
        ,V.DD_PROCESS_CODE
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
						
																		
		  		  		  		            
          							 	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING UPDATE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
 	UPDATE MS_QSM_RESP_SPRDSHEET_CLM 
 	SET DD_STATUS_FLAG   = 'N'
 	WHERE			
			RESPONSE_ID= iop_data.RESPONSE_ID	
	 		 AND SPREADSHEET_ID= iop_data.SPREADSHEET_ID	
	 		 AND QUESTION_ID= iop_data.QUESTION_ID	
	 	 ;
	 
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in UPDATE : ' || SQL%ROWCOUNT, 'D');
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

	                            
          						   	
               			/* --------------------------------------------------------------------------
			    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
			   -------------------------------------------------------------------------- */
					            IF LV_debug THEN	
		            					

 FOR j IN 1..TY_QSM_RESP_SPRDSHEET_CLM.COUNT LOOP 
 	  
 	 	    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).CLM_RESPONSE_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).CLM_SPREADSHEET_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).CLM_QUESTION_ID, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_9, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_5, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_8, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_11, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_10, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_3, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_13, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_19, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_16, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_15, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_1, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_17, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_12, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_2, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_6, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_14, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).DATA_ID_PK, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_7, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_18, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_20, ip_pid);
				    	    	MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || TY_QSM_RESP_SPRDSHEET_CLM(j).FIELD_4, ip_pid);
			 END LOOP;
 				END IF;
				
								MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
 
 
  FORALL i IN TY_QSM_RESP_SPRDSHEET_CLM.FIRST..TY_QSM_RESP_SPRDSHEET_CLM.LAST 
  
  MERGE 
    INTO MS_QSM_RESP_SPRDSHEET_CLM T 
  		USING (
  				SELECT     
          TY_QSM_RESP_SPRDSHEET_CLM(i).CLM_RESPONSE_ID AS RESPONSE_ID
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).CLM_SPREADSHEET_ID AS SPREADSHEET_ID
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).CLM_QUESTION_ID AS QUESTION_ID
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_9 AS FIELD_9
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_5 AS FIELD_5
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_8 AS FIELD_8
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_11 AS FIELD_11
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_10 AS FIELD_10
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_3 AS FIELD_3
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_13 AS FIELD_13
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_19 AS FIELD_19
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_16 AS FIELD_16
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_15 AS FIELD_15
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_1 AS FIELD_1
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_17 AS FIELD_17
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_12 AS FIELD_12
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_2 AS FIELD_2
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_6 AS FIELD_6
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_14 AS FIELD_14
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).DATA_ID_PK AS DATA_ID_PK
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_7 AS FIELD_7
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_18 AS FIELD_18
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_20 AS FIELD_20
    	          , TY_QSM_RESP_SPRDSHEET_CLM(i).FIELD_4 AS FIELD_4
    	  	   FROM DUAL
	      ) V
	      ON
	      (
 T.RESPONSE_ID = V.RESPONSE_ID
 AND  T.SPREADSHEET_ID = V.SPREADSHEET_ID
 AND  T.QUESTION_ID = V.QUESTION_ID
 AND  T.DATA_ID_PK = V.DATA_ID_PK
) 
 WHEN  MATCHED THEN
 UPDATE SET DD_STATUS_FLAG   = 'Y'
 
,T.FIELD_9=V.FIELD_9
 ,T.FIELD_5=V.FIELD_5
 ,T.FIELD_8=V.FIELD_8
 ,T.FIELD_11=V.FIELD_11
 ,T.FIELD_10=V.FIELD_10
 ,T.FIELD_3=V.FIELD_3
 ,T.FIELD_13=V.FIELD_13
 ,T.FIELD_19=V.FIELD_19
 ,T.FIELD_16=V.FIELD_16
 ,T.FIELD_15=V.FIELD_15
 ,T.FIELD_1=V.FIELD_1
 ,T.FIELD_17=V.FIELD_17
 ,T.FIELD_12=V.FIELD_12
 ,T.FIELD_2=V.FIELD_2
 ,T.FIELD_6=V.FIELD_6
 ,T.FIELD_14=V.FIELD_14
 ,T.FIELD_7=V.FIELD_7
 ,T.FIELD_18=V.FIELD_18
 ,T.FIELD_20=V.FIELD_20
 ,T.FIELD_4=V.FIELD_4
 
	WHEN
	NOT MATCHED THEN
	INSERT
	(DD_STATUS_FLAG
 ,T.RESPONSE_ID
 ,T.SPREADSHEET_ID
 ,T.QUESTION_ID
 ,T.FIELD_9
 ,T.FIELD_5
 ,T.FIELD_8
 ,T.FIELD_11
 ,T.FIELD_10
 ,T.FIELD_3
 ,T.FIELD_13
 ,T.FIELD_19
 ,T.FIELD_16
 ,T.FIELD_15
 ,T.FIELD_1
 ,T.FIELD_17
 ,T.FIELD_12
 ,T.FIELD_2
 ,T.FIELD_6
 ,T.FIELD_14
 ,T.DATA_ID_PK
 ,T.FIELD_7
 ,T.FIELD_18
 ,T.FIELD_20
 ,T.FIELD_4
)
VALUES 
  ('Y'         
     ,V.RESPONSE_ID
        ,V.SPREADSHEET_ID
        ,V.QUESTION_ID
        ,V.FIELD_9
        ,V.FIELD_5
        ,V.FIELD_8
        ,V.FIELD_11
        ,V.FIELD_10
        ,V.FIELD_3
        ,V.FIELD_13
        ,V.FIELD_19
        ,V.FIELD_16
        ,V.FIELD_15
        ,V.FIELD_1
        ,V.FIELD_17
        ,V.FIELD_12
        ,V.FIELD_2
        ,V.FIELD_6
        ,V.FIELD_14
        ,V.DATA_ID_PK
        ,V.FIELD_7
        ,V.FIELD_18
        ,V.FIELD_20
        ,V.FIELD_4
   	);           
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);      
	 
	 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
				
								               									  
				   						  	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
    
    DELETE MS_QSM_RESP_SPRDSHEET_CLM 
    WHERE DD_STATUS_FLAG = 'N'
  	  			AND RESPONSE_ID = iop_data.RESPONSE_ID
  	  			AND SPREADSHEET_ID = iop_data.SPREADSHEET_ID
  	  			AND QUESTION_ID = iop_data.QUESTION_ID
  	  	  ;
  	   
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in DELETE : ' || SQL%ROWCOUNT, 'D');
	MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');
	   			   		
    END LOOP;	 
        EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in call ETL ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END CALL_ETL;        

END MS_QSM_RESPONSE_SPREADSHEET_P ;   
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_RESPONSE_UPLOAD_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_RESPONSE_UPLOAD_O
    Creation Time : 2013-JUL-24 12:21:46.580406000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_RESPONSE_UPLOAD_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_FILE_TO_UPLOAD                      IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_FILE_TO_UPLOAD                      IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_RESPONSE_UPLOAD_O ; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_RESPONSE_UPLOAD_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_FILE_TO_UPLOAD                      IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_RESPONSE_UPLOAD', 'D');

        UPDATE MS_QSM_RESPONSE_UPLOAD
           SET DD_EDIT_FLAG = 'N'
         WHERE FILE_TO_UPLOAD                           = iop_FILE_TO_UPLOAD;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_FILE_TO_UPLOAD                      IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_RESPONSE_UPLOAD', 'D');

        UPDATE MS_QSM_RESPONSE_UPLOAD
           SET DD_EDIT_FLAG = 'Y'
         WHERE FILE_TO_UPLOAD                           = iop_FILE_TO_UPLOAD;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_RESPONSE_UPLOAD_O; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_RESPONSE_UPLOAD_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_RESPONSE_UPLOAD_P
    Creation Time : 2013-JUL-24 12:22:10.402158000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_RESPONSE_UPLOAD_P';
    GV_program_name VARCHAR2(100);
    --GV_ETL_PLSQL_DATA_TYPE ;

/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        );
/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY     CLOB,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2,
            iop_error_seq         IN     OUT                NUMBER,
            ip_pid                IN                        NUMBER
        );

END MS_QSM_RESPONSE_UPLOAD_P ; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_RESPONSE_UPLOAD_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Body.
    Author : Data Designer ETL Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------------
    GENERATE_UPDATE_HIERARCHY : Procedure to get the update the xml data hierarchy
   ------------------------------------------------------------------------------ */

    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        );
    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER           
        )
    AS
        LV_error_code               NUMBER;
        LV_error_message            VARCHAR2(1000);
        UPDATE_HIERARCHY_EXCEP      EXCEPTION;
        LV_xml                      XMLTYPE := iop_xml;
        LV_namespace                varchar2(4000) := 'xmlns="http://www.metricstream.com/appstudio/msa"';
        lv_program_name             VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UPDATE_HIERARCHY';


/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);

       iop_xml := LV_xml;
    
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_pid);
    EXCEPTION
        WHEN UPDATE_HIERARCHY_EXCEP THEN
            
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE_HIERARCHY_EXCEP Exception Raised ', ip_pid);       
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);         
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);          
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            ROLLBACK TO  MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            ROLLBACK TO MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
        LV_error_code NUMBER;
        LV_error_message VARCHAR2(1000);
        NEXT_ID_GEN_EXCEPTION EXCEPTION;
        lv_program_name VARCHAR2(100);
        ln_error_seq NUMBER:=1;

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'GET_NEXT_ID';

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_process_instance_id);


    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_process_instance_id);
    EXCEPTION
        WHEN NEXT_ID_GEN_EXCEPTION THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] NEXT_ID_GEN_EXCEPTION Exception Raised ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] WHEN OTHERS ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END GET_NEXT_ID;

/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY         CLOB,
            iop_log_no            IN     OUT                    NUMBER,
            op_error_code                OUT                    NUMBER,
            op_error_message             OUT                    VARCHAR2,
            iop_error_seq         IN     OUT                    NUMBER,
            ip_pid                IN                            NUMBER
            
        )
    AS

/* --------------------------------------------------------------------------
     ETL procedure created by the ETL Engine of APP BUILDER.
     The procedure takes care of loading the data that is sent
     by the FLOW BUILDER and store the same in MS TABLES.
     Data is already processed and stored accordingly in the iop_data
     object structure. The object can have one or more records.
     The ETL is designed to take care of one or more records.
     If the data has to be manipulated before populating the main
     MS TABLES, please use the HOOKS that are generated by the
     FLOW BUILDER.
   -------------------------------------------------------------------------- */
        LV_progress VARCHAR2(3) := NULL;
        LV_cntr_1   NUMBER      := NULL;
        LV_cntr_2   NUMBER      := NULL;
        LV_debug    BOOLEAN     := FALSE;
        LV_XML      XMLTYPE     := XMLTYPE(iop_xml_data);
        LV_err_code NUMBER      := NULL;
        LV_err_msg  VARCHAR2(4000);
        lV_program_name VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
              AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;

    BEGIN

/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------
    Note: Defining SAVEPOINT TO ROLLBACK transactions done by ETL.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        LV_progress := '001';
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'CALL_ETL';


/* --------------------------------------------------------------------------
    Note: Default DEBUG FLAG is set to FALSE to avoid unneccessary logging of data.
            If any issues found in ETL, to understand what goes into the ETL
            then set this variable to TRUE and run the ETL in the flow.
            It allows to log the entire relevant data set.
   -------------------------------------------------------------------------- */
        LV_debug := FALSE;

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);        UPDATE_HIERARCHY
        (
           iop_log_no          => LV_log_no.APP_LOG_NO,
           iop_xml             => LV_XML,
           op_error_code       => LV_err_code,
           op_error_message    => LV_err_msg,
           iop_error_sequence  => iop_error_seq,
           ip_pid              => ip_pid
        );

        IF(LV_err_code !=0) THEN
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'W','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Failed while updating Hierarchy ', ip_pid);
        END IF;

        LV_cntr_1 := 0;

/* --------------------------------------------------------------------------
        Cursor to fetch non multirow details from XML
   -------------------------------------------------------------------------- */
        FOR iop_data in ( SELECT  INSTANCE_ID
                                 ,METRIC_ID
                                 ,TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_RUN_DATE
                                 ,TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
                                 ,LATEST_FLAG
                                 ,CREATED_BY
                                 ,TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE
                                 ,PROCESS_FLOW_STATUS
                                 ,PROCESS_INSTANCE_ID
                                 ,ELECTRONICALLY_SIGNED
                                 ,INSTANCE_REC_NUM
                                 ,ATTACHMENT
                                 ,DATA_FORM
                                 ,DD_EVENT_USER_NAME
                                 ,DD_CURRENT_USER_NAME
                                 ,DD_OBJECT_TYPE
                                 ,DD_PROCESS_CODE
                                 ,FILE_TO_UPLOAD
                                 ,MODULE
                                 ,QSM_PROFILE
                                 ,SYSTEM_ENTITY
                                 ,UPLOAD_TYPE
                          FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
                                       'msa:datapacket/msa:data/msa:nonmultirow'
                                       PASSING LV_XML
                                       COLUMNS
                                        INSTANCE_ID                      NUMBER          PATH  'msa:instance_id'
                                       ,METRIC_ID                        NUMBER          PATH  'msa:metric_id'
                                       ,METRIC_RUN_DATE                  VARCHAR2(40)    PATH  'msa:metric_run_date'
                                       ,METRIC_COMPLETED_DATE            VARCHAR2(40)    PATH  'msa:metric_completed_date'
                                       ,LATEST_FLAG                      VARCHAR2(1)     PATH  'msa:latest_flag'
                                       ,CREATED_BY                       NUMBER          PATH  'msa:created_by'
                                       ,CREATION_DATE                    VARCHAR2(40)    PATH  'msa:creation_date'
                                       ,PROCESS_FLOW_STATUS              NUMBER          PATH  'msa:process_flow_status'
                                       ,PROCESS_INSTANCE_ID              NUMBER          PATH  'msa:process_instance_id'
                                       ,ELECTRONICALLY_SIGNED            NUMBER          PATH  'msa:electronically_signed'
                                       ,INSTANCE_REC_NUM                 NUMBER          PATH  'msa:instance_rec_num'
                                       ,ATTACHMENT                       VARCHAR2(4000)  PATH  'msa:attachment'
                                       ,DATA_FORM                        VARCHAR2(4000)  PATH  'msa:data_form'
                                       ,DD_EVENT_USER_NAME               VARCHAR2(4000)  PATH  'msa:dd_event_user_name'
                                       ,DD_CURRENT_USER_NAME             VARCHAR2(4000)  PATH  'msa:dd_current_user_name'
                                       ,DD_OBJECT_TYPE                   VARCHAR2(4000)  PATH  'msa:dd_object_type'
                                       ,DD_PROCESS_CODE                  VARCHAR2(4000)  PATH  'msa:dd_process_code'
                                       ,FILE_TO_UPLOAD                   VARCHAR2(4000)  PATH  'msa:file_to_upload'
                                       ,MODULE                           VARCHAR2(4000)  PATH  'msa:module'
                                       ,QSM_PROFILE                      VARCHAR2(4000)  PATH  'msa:qsm_profile'
                                       ,SYSTEM_ENTITY                    VARCHAR2(4000)  PATH  'msa:system_entity'
                                       ,UPLOAD_TYPE                      VARCHAR2(4000)  PATH  'msa:upload_type'
                        ))
        LOOP
           LV_cntr_1 := LV_cntr_1 + 1;
           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Data Found in iop_data. ', ip_pid);
           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ')', ip_pid);

     /* --------------------------------------------------------------------------
           Loop through the data object to load the data into MS tables.
            Header info is being loaded into the system.
      -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
   -------------------------------------------------------------------------- */
           IF LV_debug THEN
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SYSTEM_ENTITY, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.ATTACHMENT, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DATA_FORM, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QSM_PROFILE, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.FILE_TO_UPLOAD, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.UPLOAD_TYPE, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.MODULE, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_OBJECT_TYPE, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_PROCESS_CODE, ip_pid);

           END IF;

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);

           MERGE
            INTO MS_QSM_RESPONSE_UPLOAD T 
           USING 
               (
                   SELECT 
                          iop_data.SYSTEM_ENTITY                                      AS SYSTEM_ENTITY
                        , iop_data.ATTACHMENT                                         AS ATTACHMENT
                        , iop_data.DATA_FORM                                          AS DATA_FORM
                        , iop_data.QSM_PROFILE                                        AS QSM_PROFILE
                        , iop_data.FILE_TO_UPLOAD                                     AS FILE_TO_UPLOAD
                        , iop_data.UPLOAD_TYPE                                        AS UPLOAD_TYPE
                        , iop_data.MODULE                                             AS MODULE
                        , iop_data.DD_OBJECT_TYPE                                     AS DD_OBJECT_TYPE
                        , iop_data.DD_EVENT_USER_NAME                                 AS DD_CREATED_BY
                        , iop_data.DD_CURRENT_USER_NAME                               AS DD_MODIFIED_BY
                        , iop_data.PROCESS_INSTANCE_ID                                AS DD_PROCESS_INSTANCE_ID
                        , iop_data.INSTANCE_ID                                        AS DD_INSTANCE_ID
                        , iop_data.DD_PROCESS_CODE                                    AS DD_PROCESS_CODE
                     FROM DUAL
               ) V
              ON
               (
                            T.FILE_TO_UPLOAD                         = V.FILE_TO_UPLOAD
               )
            WHEN
               MATCHED THEN
                   UPDATE SET  DD_STATUS_FLAG                         = 'Y'
                           , T.SYSTEM_ENTITY                          = V.SYSTEM_ENTITY
                           , T.ATTACHMENT                             = V.ATTACHMENT
                           , T.DATA_FORM                              = V.DATA_FORM
                           , T.QSM_PROFILE                            = V.QSM_PROFILE
                           , T.UPLOAD_TYPE                            = V.UPLOAD_TYPE
                           , T.MODULE                                 = V.MODULE
                           , T.DD_OBJECT_TYPE                         = V.DD_OBJECT_TYPE
                           , T.DD_MODIFIED_BY                         = V.DD_MODIFIED_BY
                           , T.DD_MODIFIED_ON                         = SYSDATE
                           , T.DD_PROCESS_INSTANCE_ID                 = V.DD_PROCESS_INSTANCE_ID
                           , T.DD_INSTANCE_ID                         = V.DD_INSTANCE_ID
                           , T.DD_PROCESS_CODE                        = V.DD_PROCESS_CODE
            WHEN
               NOT MATCHED THEN
                   INSERT
                       (DD_STATUS_FLAG
                      , T.SYSTEM_ENTITY
                      , T.ATTACHMENT
                      , T.DATA_FORM
                      , T.QSM_PROFILE
                      , T.FILE_TO_UPLOAD
                      , T.UPLOAD_TYPE
                      , T.MODULE
                      , T.DD_OBJECT_TYPE
                      , T.DD_CREATED_BY
                      , T.DD_CREATED_ON
                      , T.DD_PROCESS_INSTANCE_ID
                      , T.DD_INSTANCE_ID
                      , T.DD_PROCESS_CODE
                       )
                   VALUES 
                       ('Y'
                      , V.SYSTEM_ENTITY
                      , V.ATTACHMENT
                      , V.DATA_FORM
                      , V.QSM_PROFILE
                      , V.FILE_TO_UPLOAD
                      , V.UPLOAD_TYPE
                      , V.MODULE
                      , V.DD_OBJECT_TYPE
                      , V.DD_CREATED_BY
                            , SYSDATE
                      , V.DD_PROCESS_INSTANCE_ID
                      , V.DD_INSTANCE_ID
                      , V.DD_PROCESS_CODE
                       );

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);

        END LOOP;

        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ETL END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] END ', ip_pid);
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END CALL_ETL;

END MS_QSM_RESPONSE_UPLOAD_P; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_RESP_ACTION_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_RESP_ACTION_O
    Creation Time : 2012-DEC-31 17:01:40.177984000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_RESP_ACTION_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_ACTION_ID                           IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_ACTION_ID                           IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_RESP_ACTION_O ;
  
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_RESP_ACTION_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_ACTION_ID                           IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_RESP_ACTION', 'D');

        UPDATE MS_QSM_RESP_ACTION
           SET DD_EDIT_FLAG = 'N'
         WHERE ACTION_ID                                = iop_ACTION_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_ACTION_ID                           IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_RESP_ACTION', 'D');

        UPDATE MS_QSM_RESP_ACTION
           SET DD_EDIT_FLAG = 'Y'
         WHERE ACTION_ID                                = iop_ACTION_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_RESP_ACTION_O; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_RESP_CLOB_FLDS_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_RESP_CLOB_FLDS_O
    Creation Time : 2013-MAR-19 18:06:01.168218000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_RESP_CLOB_FLDS_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_RESP_CLOB_PK                        IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_RESP_CLOB_PK                        IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_RESP_CLOB_FLDS_O ;
  
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_RESP_CLOB_FLDS_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_RESP_CLOB_PK                        IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_RESP_CLOB_FLDS', 'D');

        UPDATE MS_QSM_RESP_CLOB_FLDS
           SET DD_EDIT_FLAG = 'N'
         WHERE RESP_CLOB_PK                             = iop_RESP_CLOB_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_RESP_CLOB_PK                        IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_RESP_CLOB_FLDS', 'D');

        UPDATE MS_QSM_RESP_CLOB_FLDS
           SET DD_EDIT_FLAG = 'Y'
         WHERE RESP_CLOB_PK                             = iop_RESP_CLOB_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_RESP_CLOB_FLDS_O; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_RESP_COMMETNS_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_RESP_COMMETNS_P
    Creation Time : 2013-APR-09 16:22:54.362220000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_RESP_COMMETNS_P';
    GV_program_name VARCHAR2(100);
    --GV_ETL_PLSQL_DATA_TYPE ;

/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        );
/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY     CLOB,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2,
            iop_error_seq         IN     OUT                NUMBER,
            ip_pid                IN                        NUMBER
        );

END MS_QSM_RESP_COMMETNS_P ;
  
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_RESP_COMMETNS_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Body.
    Author : Data Designer ETL Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------------
    GENERATE_UPDATE_HIERARCHY : Procedure to get the update the xml data hierarchy
   ------------------------------------------------------------------------------ */

    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        );
    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER           
        )
    AS
        LV_error_code               NUMBER;
        LV_error_message            VARCHAR2(1000);
        UPDATE_HIERARCHY_EXCEP      EXCEPTION;
        LV_xml                      XMLTYPE := iop_xml;
        LV_namespace                varchar2(4000) := 'xmlns="http://www.metricstream.com/appstudio/msa"';
        lv_program_name             VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UPDATE_HIERARCHY';


/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);

       iop_xml := LV_xml;
    
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_pid);
    EXCEPTION
        WHEN UPDATE_HIERARCHY_EXCEP THEN
            
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE_HIERARCHY_EXCEP Exception Raised ', ip_pid);       
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);         
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);          
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            ROLLBACK TO  MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            ROLLBACK TO MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
        LV_error_code NUMBER;
        LV_error_message VARCHAR2(1000);
        NEXT_ID_GEN_EXCEPTION EXCEPTION;
        lv_program_name VARCHAR2(100);
        ln_error_seq NUMBER:=1;

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'GET_NEXT_ID';

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_process_instance_id);


    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_process_instance_id);
    EXCEPTION
        WHEN NEXT_ID_GEN_EXCEPTION THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] NEXT_ID_GEN_EXCEPTION Exception Raised ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] WHEN OTHERS ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END GET_NEXT_ID;

/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY         CLOB,
            iop_log_no            IN     OUT                    NUMBER,
            op_error_code                OUT                    NUMBER,
            op_error_message             OUT                    VARCHAR2,
            iop_error_seq         IN     OUT                    NUMBER,
            ip_pid                IN                            NUMBER
            
        )
    AS

/* --------------------------------------------------------------------------
     ETL procedure created by the ETL Engine of APP BUILDER.
     The procedure takes care of loading the data that is sent
     by the FLOW BUILDER and store the same in MS TABLES.
     Data is already processed and stored accordingly in the iop_data
     object structure. The object can have one or more records.
     The ETL is designed to take care of one or more records.
     If the data has to be manipulated before populating the main
     MS TABLES, please use the HOOKS that are generated by the
     FLOW BUILDER.
   -------------------------------------------------------------------------- */
        LV_progress VARCHAR2(3) := NULL;
        LV_cntr_1   NUMBER      := NULL;
        LV_cntr_2   NUMBER      := NULL;
        LV_debug    BOOLEAN     := FALSE;
        LV_XML      XMLTYPE     := XMLTYPE(iop_xml_data);
        LV_err_code NUMBER      := NULL;
        LV_err_msg  VARCHAR2(4000);
        lv_program_name varchar2(100);
        lv_session_count                                         number;

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
              AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;

    BEGIN

/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------
    Note: Defining SAVEPOINT TO ROLLBACK transactions done by ETL.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        LV_progress := '001';
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'CALL_ETL';


/* --------------------------------------------------------------------------
    Note: Default DEBUG FLAG is set to FALSE to avoid unneccessary logging of data.
            If any issues found in ETL, to understand what goes into the ETL
            then set this variable to TRUE and run the ETL in the flow.
            It allows to log the entire relevant data set.
   -------------------------------------------------------------------------- */
        LV_debug := FALSE;
        
        IF NOT (MS_QSM_UTILITIES.G_TBL_CONFIG_PARAMS.COUNT > 0)  THEN 
          ms_qsm_utilities.initialize_perf_config_params;
        END IF;
        
         IF ms_qsm_utilities.G_TBL_CONFIG_PARAMS('DB_Sleep_Required') = 'Y' THEN
       
            LOOP
                  select count(1) into lv_session_count from v$session where status = 'ACTIVE' and type != 'BACKGROUND' AND EVENT != 'PL/SQL lock timer';
                  EXIT WHEN ( LV_SESSION_COUNT <= MS_QSM_UTILITIES.G_TBL_CONFIG_PARAMS('Maximum_Allowed_Sessions') );
                  sys.dbms_lock.sleep(sys.dbms_random.value(ms_qsm_utilities.G_TBL_CONFIG_PARAMS('Minimum_Session_Sleep_Time'),ms_qsm_utilities.G_TBL_CONFIG_PARAMS('Maximum_Session_Sleep_Time')));
            END LOOP;

        END IF;    

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);        UPDATE_HIERARCHY
        (
           iop_log_no          => LV_log_no.APP_LOG_NO,
           iop_xml             => LV_XML,
           op_error_code       => LV_err_code,
           op_error_message    => LV_err_msg,
           iop_error_sequence  => iop_error_seq,
           ip_pid              => ip_pid
        );

        IF(LV_err_code !=0) THEN
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'W','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Failed while updating Hierarchy ', ip_pid);
        END IF;

        LV_cntr_1 := 0;

/* --------------------------------------------------------------------------
        Cursor to fetch non multirow details from XML
   -------------------------------------------------------------------------- */
        FOR iop_data in ( SELECT  INSTANCE_ID
                                 ,METRIC_ID
                                 ,TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_RUN_DATE
                                 ,TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
                                 ,LATEST_FLAG
                                 ,CREATED_BY
                                 ,TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE
                                 ,PROCESS_FLOW_STATUS
                                 ,PROCESS_INSTANCE_ID
                                 ,ELECTRONICALLY_SIGNED
                                 ,INSTANCE_REC_NUM
                                 ,CLOB_FIELD_TYPE
                                 ,DD_EVENT_USER_NAME
                                 ,DD_CURRENT_USER_NAME
                                 ,DD_OBJECT_TYPE
                                 ,DD_PROCESS_CODE
                                 ,RESPONSE_ID
                                 ,RESP_CLOB_PK
                                 ,RESP_COMMENTS
                                 ,RESP_DESCRIPTION
                                 ,RESP_QUE_ID
                                 ,RTF_ATTACH
                                 ,TO_RETRIEV_DESCRIPTION
                          FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
                                       'msa:datapacket/msa:data/msa:nonmultirow'
                                       PASSING LV_XML
                                       COLUMNS
                                        INSTANCE_ID                      NUMBER          PATH  'msa:instance_id'
                                       ,METRIC_ID                        NUMBER          PATH  'msa:metric_id'
                                       ,METRIC_RUN_DATE                  VARCHAR2(40)    PATH  'msa:metric_run_date'
                                       ,METRIC_COMPLETED_DATE            VARCHAR2(40)    PATH  'msa:metric_completed_date'
                                       ,LATEST_FLAG                      VARCHAR2(1)     PATH  'msa:latest_flag'
                                       ,CREATED_BY                       NUMBER          PATH  'msa:created_by'
                                       ,CREATION_DATE                    VARCHAR2(40)    PATH  'msa:creation_date'
                                       ,PROCESS_FLOW_STATUS              NUMBER          PATH  'msa:process_flow_status'
                                       ,PROCESS_INSTANCE_ID              NUMBER          PATH  'msa:process_instance_id'
                                       ,ELECTRONICALLY_SIGNED            NUMBER          PATH  'msa:electronically_signed'
                                       ,INSTANCE_REC_NUM                 NUMBER          PATH  'msa:instance_rec_num'
                                       ,CLOB_FIELD_TYPE                  VARCHAR2(4000)  PATH  'msa:clob_field_type'
                                       ,DD_EVENT_USER_NAME               VARCHAR2(4000)  PATH  'msa:dd_event_user_name'
                                       ,DD_CURRENT_USER_NAME             VARCHAR2(4000)  PATH  'msa:dd_current_user_name'
                                       ,DD_OBJECT_TYPE                   VARCHAR2(4000)  PATH  'msa:dd_object_type'
                                       ,DD_PROCESS_CODE                  VARCHAR2(4000)  PATH  'msa:dd_process_code'
                                       ,RESPONSE_ID                      VARCHAR2(4000)  PATH  'msa:response_id'
                                       ,RESP_CLOB_PK                     VARCHAR2(4000)  PATH  'msa:resp_clob_pk'
                                       ,RESP_COMMENTS                    CLOB            PATH  'msa:resp_comments_htm'
                                       ,RESP_DESCRIPTION                 CLOB            PATH  'msa:resp_description_htm'
                                       ,RESP_QUE_ID                      VARCHAR2(4000)  PATH  'msa:resp_que_id'
                                       ,RTF_ATTACH                       VARCHAR2(4000)  PATH  'msa:rtf_attach'
                                       ,TO_RETRIEV_DESCRIPTION           CLOB            PATH  'msa:to_retriev_description_htm'
                        ))
        LOOP
           LV_cntr_1 := LV_cntr_1 + 1;
           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Data Found in iop_data. ', ip_pid);
           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ')', ip_pid);

     /* --------------------------------------------------------------------------
           Loop through the data object to load the data into MS tables.
            Header info is being loaded into the system.
      -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
   -------------------------------------------------------------------------- */
           IF LV_debug THEN
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RESP_QUE_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RESPONSE_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RESP_DESCRIPTION, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RESP_COMMENTS, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RTF_ATTACH, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.TO_RETRIEV_DESCRIPTION, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RESP_CLOB_PK, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.CLOB_FIELD_TYPE, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_OBJECT_TYPE, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_PROCESS_CODE, ip_pid);

           END IF;

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);

           MERGE
            INTO MS_QSM_RESP_CLOB_FLDS T 
           USING 
               (
                   SELECT 
                          iop_data.RESP_QUE_ID                                        AS RESP_QUE_ID
                        , iop_data.RESPONSE_ID                                        AS RESPONSE_ID
                        , iop_data.RESP_DESCRIPTION                                   AS RESP_DESCRIPTION
                        , iop_data.RESP_COMMENTS                                      AS RESP_COMMENTS
                        , iop_data.RTF_ATTACH                                         AS RTF_ATTACH
                        , iop_data.TO_RETRIEV_DESCRIPTION                             AS TO_RETRIEV_DESCRIPTION
                        , iop_data.RESP_CLOB_PK                                       AS RESP_CLOB_PK
                        , iop_data.CLOB_FIELD_TYPE                                    AS CLOB_FIELD_TYPE
                        , iop_data.DD_OBJECT_TYPE                                     AS DD_OBJECT_TYPE
                        , iop_data.DD_EVENT_USER_NAME                                 AS DD_CREATED_BY
                        , iop_data.DD_CURRENT_USER_NAME                               AS DD_MODIFIED_BY
                        , iop_data.PROCESS_INSTANCE_ID                                AS DD_PROCESS_INSTANCE_ID
                        , iop_data.INSTANCE_ID                                        AS DD_INSTANCE_ID
                        , iop_data.DD_PROCESS_CODE                                    AS DD_PROCESS_CODE
                     FROM DUAL
               ) V
              ON
               (
                            T.RESP_CLOB_PK                           = V.RESP_CLOB_PK
               )
            WHEN
               MATCHED THEN
                   UPDATE SET  DD_STATUS_FLAG                         = 'Y'
                           , T.RESP_QUE_ID                            = V.RESP_QUE_ID
                           , T.RESPONSE_ID                            = V.RESPONSE_ID
                           , T.RESP_DESCRIPTION                       = V.RESP_DESCRIPTION
                           , T.RESP_COMMENTS                          = V.RESP_COMMENTS
                           , T.RTF_ATTACH                             = V.RTF_ATTACH
                           , T.TO_RETRIEV_DESCRIPTION                 = V.TO_RETRIEV_DESCRIPTION
                           , T.CLOB_FIELD_TYPE                        = V.CLOB_FIELD_TYPE
                           , T.DD_OBJECT_TYPE                         = V.DD_OBJECT_TYPE
                           , T.DD_MODIFIED_BY                         = V.DD_MODIFIED_BY
                           , T.DD_MODIFIED_ON                         = SYSDATE
                           , T.DD_PROCESS_INSTANCE_ID                 = V.DD_PROCESS_INSTANCE_ID
                           , T.DD_INSTANCE_ID                         = V.DD_INSTANCE_ID
                           , T.DD_PROCESS_CODE                        = V.DD_PROCESS_CODE
            WHEN
               NOT MATCHED THEN
                   INSERT
                       (DD_STATUS_FLAG
                      , T.RESP_QUE_ID
                      , T.RESPONSE_ID
                      , T.RESP_DESCRIPTION
                      , T.RESP_COMMENTS
                      , T.RTF_ATTACH
                      , T.TO_RETRIEV_DESCRIPTION
                      , T.RESP_CLOB_PK
                      , T.CLOB_FIELD_TYPE
                      , T.DD_OBJECT_TYPE
                      , T.DD_CREATED_BY
                      , T.DD_CREATED_ON
                      , T.DD_PROCESS_INSTANCE_ID
                      , T.DD_INSTANCE_ID
                      , T.DD_PROCESS_CODE
                       )
                   VALUES 
                       ('Y'
                      , V.RESP_QUE_ID
                      , V.RESPONSE_ID
                      , V.RESP_DESCRIPTION
                      , V.RESP_COMMENTS
                      , V.RTF_ATTACH
                      , V.TO_RETRIEV_DESCRIPTION
                      , V.RESP_CLOB_PK
                      , V.CLOB_FIELD_TYPE
                      , V.DD_OBJECT_TYPE
                      , V.DD_CREATED_BY
                            , SYSDATE
                      , V.DD_PROCESS_INSTANCE_ID
                      , V.DD_INSTANCE_ID
                      , V.DD_PROCESS_CODE
                       );

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);

        END LOOP;

        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ETL END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] END ', ip_pid);
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END CALL_ETL;

END MS_QSM_RESP_COMMETNS_P; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_RESP_DTLS_RPT_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_RESP_DTLS_RPT_O
    Creation Time : 2015-JAN-21 23:35:58.957725000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_RESP_DTLS_RPT_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_FILTER_TYPE                         IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_FILTER_TYPE                         IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_RESP_DTLS_RPT_O ; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_RESP_DTLS_RPT_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_FILTER_TYPE                         IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT ms_apps_mdf_error_handle_id_s.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_RESP_DTLS_RPT', 'D');

        UPDATE MS_QSM_RESP_DTLS_RPT
           SET DD_EDIT_FLAG = 'N'
         WHERE FILTER_TYPE                              = iop_FILTER_TYPE;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_FILTER_TYPE                         IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT ms_apps_mdf_error_handle_id_s.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_RESP_DTLS_RPT', 'D');

        UPDATE MS_QSM_RESP_DTLS_RPT
           SET DD_EDIT_FLAG = 'Y'
         WHERE FILTER_TYPE                              = iop_FILTER_TYPE;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_RESP_DTLS_RPT_O; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_RESP_ISSUE_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_RESP_ISSUE_O
    Creation Time : 2012-DEC-31 17:01:39.768885000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_RESP_ISSUE_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_FINDING_ID                          IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_FINDING_ID                          IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_RESP_ISSUE_O ;
  
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_RESP_ISSUE_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_FINDING_ID                          IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_RESP_ISSUE', 'D');

        UPDATE MS_QSM_RESP_ISSUE
           SET DD_EDIT_FLAG = 'N'
         WHERE FINDING_ID                               = iop_FINDING_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_FINDING_ID                          IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_RESP_ISSUE', 'D');

        UPDATE MS_QSM_RESP_ISSUE
           SET DD_EDIT_FLAG = 'Y'
         WHERE FINDING_ID                               = iop_FINDING_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_RESP_ISSUE_O; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_RESP_QUESTION_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_RESP_QUESTION_O
    Creation Time : 2013-JUL-10 14:45:31.074606000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_RESP_QUESTION_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_QST_RESPONSE_ID                     IN                        VARCHAR2,
            iop_QUESTION_PK                         IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_QST_RESPONSE_ID                     IN                        VARCHAR2,
            iop_QUESTION_PK                         IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_RESP_QUESTION_O ; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_RESP_QUESTION_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_QST_RESPONSE_ID                     IN                        VARCHAR2,
            iop_QUESTION_PK                         IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_RESP_QUESTION', 'D');

        UPDATE MS_QSM_RESP_QUESTION
           SET DD_EDIT_FLAG = 'N'
         WHERE QST_RESPONSE_ID                          = iop_QST_RESPONSE_ID
           AND QUESTION_PK                              = iop_QUESTION_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_QST_RESPONSE_ID                     IN                        VARCHAR2,
            iop_QUESTION_PK                         IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_RESP_QUESTION', 'D');

        UPDATE MS_QSM_RESP_QUESTION
           SET DD_EDIT_FLAG = 'Y'
         WHERE QST_RESPONSE_ID                          = iop_QST_RESPONSE_ID
           AND QUESTION_PK                              = iop_QUESTION_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_RESP_QUESTION_O; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_RESP_SECTION_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_RESP_SECTION_O
    Creation Time : 2012-DEC-31 17:01:42.573118000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_RESP_SECTION_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_SECTION_FK                          IN                        VARCHAR2,
            iop_SECTION_ID                          IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_SECTION_FK                          IN                        VARCHAR2,
            iop_SECTION_ID                          IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_RESP_SECTION_O ;
  
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_RESP_SECTION_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_SECTION_FK                          IN                        VARCHAR2,
            iop_SECTION_ID                          IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_RESP_SECTION', 'D');

        UPDATE MS_QSM_RESP_SECTION
           SET DD_EDIT_FLAG = 'N'
         WHERE SECTION_FK                               = iop_SECTION_FK
           AND SECTION_ID                               = iop_SECTION_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_SECTION_FK                          IN                        VARCHAR2,
            iop_SECTION_ID                          IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_RESP_SECTION', 'D');

        UPDATE MS_QSM_RESP_SECTION
           SET DD_EDIT_FLAG = 'Y'
         WHERE SECTION_FK                               = iop_SECTION_FK
           AND SECTION_ID                               = iop_SECTION_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_RESP_SECTION_O; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_RESP_SPRDSHEET_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_RESP_SPRDSHEET_O
    Creation Time : 2013-JAN-15 12:32:51.907744000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_RESP_SPRDSHEET_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_RESPONSE_ID                         IN                        VARCHAR2,
            iop_QUESTION_ID                         IN                        VARCHAR2,
            iop_SPREADSHEET_ID                      IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_RESPONSE_ID                         IN                        VARCHAR2,
            iop_QUESTION_ID                         IN                        VARCHAR2,
            iop_SPREADSHEET_ID                      IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_RESP_SPRDSHEET_O ;
  
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_RESP_SPRDSHEET_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_RESPONSE_ID                         IN                        VARCHAR2,
            iop_QUESTION_ID                         IN                        VARCHAR2,
            iop_SPREADSHEET_ID                      IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_RESP_SPRDSHEET', 'D');

        UPDATE MS_QSM_RESP_SPRDSHEET
           SET DD_EDIT_FLAG = 'N'
         WHERE RESPONSE_ID                              = iop_RESPONSE_ID
           AND QUESTION_ID                              = iop_QUESTION_ID
           AND SPREADSHEET_ID                           = iop_SPREADSHEET_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_RESPONSE_ID                         IN                        VARCHAR2,
            iop_QUESTION_ID                         IN                        VARCHAR2,
            iop_SPREADSHEET_ID                      IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_RESP_SPRDSHEET', 'D');

        UPDATE MS_QSM_RESP_SPRDSHEET
           SET DD_EDIT_FLAG = 'Y'
         WHERE RESPONSE_ID                              = iop_RESPONSE_ID
           AND QUESTION_ID                              = iop_QUESTION_ID
           AND SPREADSHEET_ID                           = iop_SPREADSHEET_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_RESP_SPRDSHEET_O; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_RESP_UPLOAD_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_RESP_UPLOAD_O
    Creation Time : 2013-AUG-30 10:01:22.557401000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_RESP_UPLOAD_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_UPLOAD_ID_PK                        IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_UPLOAD_ID_PK                        IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_RESP_UPLOAD_O ; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_RESP_UPLOAD_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_UPLOAD_ID_PK                        IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_RESP_UPLOAD', 'D');

        UPDATE MS_QSM_RESP_UPLOAD
           SET DD_EDIT_FLAG = 'N'
         WHERE UPLOAD_ID_PK                             = iop_UPLOAD_ID_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_UPLOAD_ID_PK                        IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_RESP_UPLOAD', 'D');

        UPDATE MS_QSM_RESP_UPLOAD
           SET DD_EDIT_FLAG = 'Y'
         WHERE UPLOAD_ID_PK                             = iop_UPLOAD_ID_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_RESP_UPLOAD_O; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_RESP_UPLOAD_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_RESP_UPLOAD_P
    Creation Time : 2013-AUG-30 10:01:23.915632000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_RESP_UPLOAD_P';
    GV_program_name VARCHAR2(100);
    --GV_ETL_PLSQL_DATA_TYPE ;

/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        );
/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY     CLOB,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2,
            iop_error_seq         IN     OUT                NUMBER,
            ip_pid                IN                        NUMBER
        );

END MS_QSM_RESP_UPLOAD_P ; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_RESP_UPLOAD_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Body.
    Author : Data Designer ETL Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------------
    GENERATE_UPDATE_HIERARCHY : Procedure to get the update the xml data hierarchy
   ------------------------------------------------------------------------------ */

    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        );
    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER           
        )
    AS
        LV_error_code               NUMBER;
        LV_error_message            VARCHAR2(1000);
        UPDATE_HIERARCHY_EXCEP      EXCEPTION;
        LV_xml                      XMLTYPE := iop_xml;
        LV_namespace                varchar2(4000) := 'xmlns="http://www.metricstream.com/appstudio/msa"';
        lv_program_name             VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UPDATE_HIERARCHY';


/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);

       iop_xml := LV_xml;
    
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_pid);
    EXCEPTION
        WHEN UPDATE_HIERARCHY_EXCEP THEN
            
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE_HIERARCHY_EXCEP Exception Raised ', ip_pid);       
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);         
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);          
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            ROLLBACK TO  MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            ROLLBACK TO MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
        LV_error_code NUMBER;
        LV_error_message VARCHAR2(1000);
        NEXT_ID_GEN_EXCEPTION EXCEPTION;
        lv_program_name VARCHAR2(100);
        ln_error_seq NUMBER:=1;

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'GET_NEXT_ID';

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_process_instance_id);


    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_process_instance_id);
    EXCEPTION
        WHEN NEXT_ID_GEN_EXCEPTION THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] NEXT_ID_GEN_EXCEPTION Exception Raised ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] WHEN OTHERS ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END GET_NEXT_ID;

/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY         CLOB,
            iop_log_no            IN     OUT                    NUMBER,
            op_error_code                OUT                    NUMBER,
            op_error_message             OUT                    VARCHAR2,
            iop_error_seq         IN     OUT                    NUMBER,
            ip_pid                IN                            NUMBER
            
        )
    AS

/* --------------------------------------------------------------------------
     ETL procedure created by the ETL Engine of APP BUILDER.
     The procedure takes care of loading the data that is sent
     by the FLOW BUILDER and store the same in MS TABLES.
     Data is already processed and stored accordingly in the iop_data
     object structure. The object can have one or more records.
     The ETL is designed to take care of one or more records.
     If the data has to be manipulated before populating the main
     MS TABLES, please use the HOOKS that are generated by the
     FLOW BUILDER.
   -------------------------------------------------------------------------- */
        LV_progress VARCHAR2(3) := NULL;
        LV_cntr_1   NUMBER      := NULL;
        LV_cntr_2   NUMBER      := NULL;
        LV_debug    BOOLEAN     := FALSE;
        LV_XML      XMLTYPE     := XMLTYPE(iop_xml_data);
        LV_err_code NUMBER      := NULL;
        LV_err_msg  VARCHAR2(4000);
        lV_program_name VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
              AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;

    BEGIN

/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------
    Note: Defining SAVEPOINT TO ROLLBACK transactions done by ETL.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        LV_progress := '001';
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'CALL_ETL';


/* -------------------------------------------------------------------------- 
/* -------------------------------------------------------------------------- 
    Note: Default DEBUG FLAG is set to FALSE to avoid unneccessary logging of data.
            If any issues found in ETL, to understand what goes into the ETL
            then set this variable to TRUE and run the ETL in the flow.
            It allows to log the entire relevant data set.
   -------------------------------------------------------------------------- */
        LV_debug := FALSE;

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);        UPDATE_HIERARCHY
        (
           iop_log_no          => LV_log_no.APP_LOG_NO,
           iop_xml             => LV_XML,
           op_error_code       => LV_err_code,
           op_error_message    => LV_err_msg,
           iop_error_sequence  => iop_error_seq,
           ip_pid              => ip_pid
        );

        IF(LV_err_code !=0) THEN
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'W','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Failed while updating Hierarchy ', ip_pid);
        END IF;

        LV_cntr_1 := 0;

/* --------------------------------------------------------------------------
        Cursor to fetch non multirow details from XML
   -------------------------------------------------------------------------- */
        FOR iop_data in ( SELECT  INSTANCE_ID
                                 ,METRIC_ID
                                 ,TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_RUN_DATE
                                 ,TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
                                 ,LATEST_FLAG
                                 ,CREATED_BY
                                 ,TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE
                                 ,PROCESS_FLOW_STATUS
                                 ,PROCESS_INSTANCE_ID
                                 ,ELECTRONICALLY_SIGNED
                                 ,INSTANCE_REC_NUM
                                 ,DD_EVENT_USER_NAME
                                 ,DD_CURRENT_USER_NAME
                                 ,DD_OBJECT_TYPE
                                 ,DD_PROCESS_CODE
                                 ,FILE_NAME
                                 ,STATUS
                                 ,SUBMIT_ACTION
                                 ,UPLOAD_ID_PK
                          FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
                                       'msa:datapacket/msa:data/msa:nonmultirow'
                                       PASSING LV_XML
                                       COLUMNS
                                        INSTANCE_ID                      NUMBER          PATH  'msa:instance_id'
                                       ,METRIC_ID                        NUMBER          PATH  'msa:metric_id'
                                       ,METRIC_RUN_DATE                  VARCHAR2(40)    PATH  'msa:metric_run_date'
                                       ,METRIC_COMPLETED_DATE            VARCHAR2(40)    PATH  'msa:metric_completed_date'
                                       ,LATEST_FLAG                      VARCHAR2(1)     PATH  'msa:latest_flag'
                                       ,CREATED_BY                       NUMBER          PATH  'msa:created_by'
                                       ,CREATION_DATE                    VARCHAR2(40)    PATH  'msa:creation_date'
                                       ,PROCESS_FLOW_STATUS              NUMBER          PATH  'msa:process_flow_status'
                                       ,PROCESS_INSTANCE_ID              NUMBER          PATH  'msa:process_instance_id'
                                       ,ELECTRONICALLY_SIGNED            NUMBER          PATH  'msa:electronically_signed'
                                       ,INSTANCE_REC_NUM                 NUMBER          PATH  'msa:instance_rec_num'
                                       ,DD_EVENT_USER_NAME               VARCHAR2(4000)  PATH  'msa:dd_event_user_name'
                                       ,DD_CURRENT_USER_NAME             VARCHAR2(4000)  PATH  'msa:dd_current_user_name'
                                       ,DD_OBJECT_TYPE                   VARCHAR2(4000)  PATH  'msa:dd_object_type'
                                       ,DD_PROCESS_CODE                  VARCHAR2(4000)  PATH  'msa:dd_process_code'
                                       ,FILE_NAME                        VARCHAR2(4000)  PATH  'msa:file_name'
                                       ,STATUS                           VARCHAR2(4000)  PATH  'msa:status'
                                       ,SUBMIT_ACTION                    VARCHAR2(4000)  PATH  'msa:submit_action'
                                       ,UPLOAD_ID_PK                     VARCHAR2(4000)  PATH  'msa:upload_id_pk'
                        ))
        LOOP
           LV_cntr_1 := LV_cntr_1 + 1;
           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Data Found in iop_data. ', ip_pid);
           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ')', ip_pid);

     /* --------------------------------------------------------------------------
           Loop through the data object to load the data into MS tables.
            Header info is being loaded into the system.
      -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
   -------------------------------------------------------------------------- */
           IF LV_debug THEN
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.FILE_NAME, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SUBMIT_ACTION, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.UPLOAD_ID_PK, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.STATUS, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_OBJECT_TYPE, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_PROCESS_CODE, ip_pid);

           END IF;

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);

           MERGE
            INTO MS_QSM_RESP_UPLOAD T 
           USING 
               (
                   SELECT 
                          iop_data.FILE_NAME                                          AS FILE_NAME
                        , iop_data.SUBMIT_ACTION                                      AS SUBMIT_ACTION
                        , iop_data.UPLOAD_ID_PK                                       AS UPLOAD_ID_PK
                        , iop_data.STATUS                                             AS STATUS
                        , iop_data.DD_OBJECT_TYPE                                     AS DD_OBJECT_TYPE
                        , iop_data.DD_EVENT_USER_NAME                                 AS DD_CREATED_BY
                        , iop_data.DD_CURRENT_USER_NAME                               AS DD_MODIFIED_BY
                        , iop_data.PROCESS_INSTANCE_ID                                AS DD_PROCESS_INSTANCE_ID
                        , iop_data.INSTANCE_ID                                        AS DD_INSTANCE_ID
                        , iop_data.DD_PROCESS_CODE                                    AS DD_PROCESS_CODE
                     FROM DUAL
               ) V
              ON
               (
                            T.UPLOAD_ID_PK                           = V.UPLOAD_ID_PK
               )
            WHEN
               MATCHED THEN
                   UPDATE SET  DD_STATUS_FLAG                         = 'Y'
                           , T.FILE_NAME                              = V.FILE_NAME
                           , T.SUBMIT_ACTION                          = V.SUBMIT_ACTION
                           , T.STATUS                                 = V.STATUS
                           , T.DD_OBJECT_TYPE                         = V.DD_OBJECT_TYPE
                           , T.DD_MODIFIED_BY                         = V.DD_MODIFIED_BY
                           , T.DD_MODIFIED_ON                         = SYSDATE
                           , T.DD_PROCESS_INSTANCE_ID                 = V.DD_PROCESS_INSTANCE_ID
                           , T.DD_INSTANCE_ID                         = V.DD_INSTANCE_ID
                           , T.DD_PROCESS_CODE                        = V.DD_PROCESS_CODE
            WHEN
               NOT MATCHED THEN
                   INSERT
                       (DD_STATUS_FLAG
                      , T.FILE_NAME
                      , T.SUBMIT_ACTION
                      , T.UPLOAD_ID_PK
                      , T.STATUS
                      , T.DD_OBJECT_TYPE
                      , T.DD_CREATED_BY
                      , T.DD_CREATED_ON
                      , T.DD_PROCESS_INSTANCE_ID
                      , T.DD_INSTANCE_ID
                      , T.DD_PROCESS_CODE
                       )
                   VALUES 
                       ('Y'
                      , V.FILE_NAME
                      , V.SUBMIT_ACTION
                      , V.UPLOAD_ID_PK
                      , V.STATUS
                      , V.DD_OBJECT_TYPE
                      , V.DD_CREATED_BY
                            , SYSDATE
                      , V.DD_PROCESS_INSTANCE_ID
                      , V.DD_INSTANCE_ID
                      , V.DD_PROCESS_CODE
                       );

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);

        END LOOP;

        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ETL END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] END ', ip_pid);
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END CALL_ETL;

END MS_QSM_RESP_UPLOAD_P; 
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_RESQSM_POST_HOOK" (
    lt_in_data_orig             IN CLOB,
    lt_in_data                  IN CLOB,
    pc_process_code             IN VARCHAR2,
    ln_orig_process_instance_id IN NUMBER,
    ln_process_instance_id      IN OUT NUMBER,
    xn_error_handle_id          IN OUT NUMBER,
    xn_error_seq                IN OUT NUMBER,
    xn_error_code               OUT VARCHAR2)
AS
  l_out_xml           XMLTYPE:=NULL;
  l_error_code        NUMBER;
  l_error_message     VARCHAR2 (4000);
  l_response_id       ms_qsm_questnr_resp.que_response_id%type;
  l_request_id        ms_qsm_questnr_resp.que_request_id%type;
  l_enterprise_info   SI_ENT.ENTERPRISE_NAME%TYPE;
  l_params            ms_param_tbl := ms_param_tbl ();
  
  l_source_ref        ms_qsm_init_questnr.survey_source_ref%type;
  l_source_type       ms_qsm_init_questnr.survey_source_type%type;
  L_EVENT_NAME        MS_APPS_EVENTS.EVENT_NAME%type;
  l_event_log_id      NUMBER;

  ex_invalid_be       exception;
  ex_invalid_data     exception;
  l_transform_to_cif_payload  VARCHAR2(1);
  
  lv_path                                                        VARCHAR2(100):='event/info/packet/data/nonmultirow/$/text()';
  
  l_response_val  VARCHAR2(4000);
  l_response_val_disp VARCHAR2(4000);
  l_process_instance_id NUMBER;
  l_instance_id number;

  L_XSL XMLTYPE;
  XML_NL           DBMS_XMLDOM.DOMNODELIST;
  XML_NODE         DBMS_XMLDOM.DOMNODE;
  XML_DOC          DBMS_XMLDOM.DOMDOCUMENT;
  V_XML_CLOB       CLOB;
  v_att_val           varchar2(32767);
  V_XML            XMLTYPE ;
  V_UUID           VARCHAR2(50);
  
        l_reporting_period VARCHAR2(4000);
        l_overall_grade VARCHAR2(4000);
        l_questionnaire_id VARCHAR2(4000);
        l_applies_to VARCHAR2(4000);
        l_resp_status VARCHAR2(4000);

        l_reporting_period_disp VARCHAR2(4000);
        l_overall_grade_disp VARCHAR2(4000);
        l_questionnaire_id_disp VARCHAR2(4000);
        l_applies_to_disp VARCHAR2(4000);
        l_resp_status_disp VARCHAR2(4000);
        l_response_type_disp VARCHAR2(4000);
        lv_session_count number;
        l_request_name   varchar2(4000);
  
BEGIN
    l_out_xml:= XMLTYPE(lt_in_data);
    
--     IF NOT (MS_QSM_UTILITIES.G_TBL_CONFIG_PARAMS.COUNT > 0)  THEN 
--          MS_QSM_UTILITIES.INITIALIZE_PERF_CONFIG_PARAMS;
--        END IF;
--        
--        IF ms_qsm_utilities.G_TBL_CONFIG_PARAMS('DB_Sleep_Required') = 'Y' THEN
--       
--            LOOP
--                  select count(1) into lv_session_count from v$session where status = 'ACTIVE' and type != 'BACKGROUND' AND EVENT != 'PL/SQL lock timer';
--                  EXIT WHEN ( LV_SESSION_COUNT <= MS_QSM_UTILITIES.G_TBL_CONFIG_PARAMS('Maximum_Allowed_Sessions') );
--                  sys.dbms_lock.sleep(sys.dbms_random.value(ms_qsm_utilities.G_TBL_CONFIG_PARAMS('Minimum_Session_Sleep_Time'),ms_qsm_utilities.G_TBL_CONFIG_PARAMS('Maximum_Session_Sleep_Time')));
--            END LOOP;
--
--      END IF;      
    
    select que_response_id, que_request_id ,dd_enterprise_info,que_request_name
      INTO l_response_id, l_request_id , l_enterprise_info ,l_request_name
      FROM XMLTABLE (
         xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:nonmultirow'
         PASSING l_out_xml
         COLUMNS que_response_id VARCHAR2(100) PATH 'msa:que_response_id',
                 que_request_id varchar2(100) path 'msa:que_request_id',
                 dd_enterprise_info varchar2(60) path 'msa:dd_enterprise_info',
                 que_request_name varchar2(4000)  path 'msa:que_request_name'); 
  
      if L_RESPONSE_ID is null or L_REQUEST_ID is null then
        L_ERROR_CODE := 001;
        l_error_message := 'Invalid Response or Request ID';
        raise ex_invalid_data;
      end if;

      Begin
       select survey_source_ref, survey_source_type
         into l_source_ref, l_source_type
         from ms_qsm_initiate_questnr_v
       -- where que_request_id = l_request_id
        where que_request_name = l_request_name
        and survey_source_type is not null
        and rownum <=1;
      Exception
        when NO_DATA_FOUND then
          ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id => xn_error_handle_id, pn_error_sequence => xn_error_seq, pc_error_type => 'E', pc_error_text => 'Request ID-' || l_request_id || ' Not Found in ms_qsm_init_questnr P_QSM_RESPONSE_POSTHOOK' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
          L_ERROR_CODE := 002;
          L_ERROR_MESSAGE := 'Invalid Request ID';
          raise ex_invalid_data;          
      End;
      
      select MS_QSM_UTILITIES.GET_SOUCE_API_NAME(l_source_type)  
        into l_event_name
        from dual;

     if (SUBSTR(L_EVENT_NAME,1,2) = '-1') then
        L_ERROR_CODE := 003;
        L_ERROR_MESSAGE := 'Invalid Business Event'||l_source_type;
        raise ex_invalid_be; 
     end if; 
     
     
      select transform_to_cif_payload
      into l_transform_to_cif_payload
      from ms_qsm_posthook_interface
      where UPPER(source_type) = UPPER(l_source_type);
      -- Modify the l_out_xml to CIF Template section start
     /* check if xml to be modified to support Common Integration Framework */
     IF l_transform_to_cif_payload = 'Y' THEN
      /*   Get the xml stylesheet for CIF */
        SELECT XMLTYPE(XML)
         INTO L_XSL
        FROM MS_QSM_XML_TEMPLATES
        WHERE KEY='CIF_OUTBOUND';
      
      
      /* Transform the Input XML to CIF-XML format in xmltype variable l_out_xml */
        SELECT XMLTRANSFORM(l_out_xml, L_XSL)   
          INTO l_out_xml  
        FROM DUAL;
        /* Convert xmltype variable l_out_xml to Varchar2 */
        V_XML :=l_out_xml ;--.getStringVal();
        
        XML_DOC := DBMS_XMLDOM.NEWDOMDOCUMENT(V_XML);
        XML_NL  := DBMS_XMLDOM.GETELEMENTSBYTAGNAME(XML_DOC, 'packet');
          FOR I IN 0 .. (DBMS_XMLDOM.GETLENGTH(XML_NL) - 1) LOOP
              /* Generated the UUID, store into Varchar2 variable */
              SELECT SYS_GUID() INTO V_UUID FROM DUAL;
              XML_NODE := DBMS_XMLDOM.ITEM(XML_NL, I);
              DBMS_XSLPROCESSOR.VALUEOF(XML_NODE, '@uuid', V_ATT_VAL);
               /* Process only if the UUID value is null */
               IF V_ATT_VAL IS NULL THEN
                  DBMS_XMLDOM.SETATTRIBUTE(DBMS_XMLDOM.MAKEELEMENT(XML_NODE), 'uuid',V_UUID);
               END IF;
          END LOOP;
        DBMS_LOB.CREATETEMPORARY(V_XML_CLOB, CACHE => FALSE);
        DBMS_LOB.OPEN(V_XML_CLOB, DBMS_LOB.LOB_READWRITE);
        DBMS_XMLDOM.WRITETOCLOB(XML_DOC, V_XML_CLOB);
        /* Convert CLOB variable V_XML_CLOB into xmltype variable l_out_xml */
        
        L_OUT_XML := xmltype(V_XML_CLOB);  
        
        -- updating the added display tags
        
        l_reporting_period:= MS_QSM_UTILITIES.GET_TAG_VALUE(l_out_xml,'event/info/packet/data/nonmultirow/reporting_period/text()');
        l_overall_grade := MS_QSM_UTILITIES.GET_TAG_VALUE(l_out_xml,'event/info/packet/data/nonmultirow/overall_grade/text()');
        l_questionnaire_id:=MS_QSM_UTILITIES.GET_TAG_VALUE(l_out_xml,'event/info/packet/data/nonmultirow/questionnaire_id/text()');
        l_applies_to:=MS_QSM_UTILITIES.GET_TAG_VALUE(l_out_xml,'event/info/packet/data/nonmultirow/applies_to/text()');
        l_resp_status:=MS_QSM_UTILITIES.GET_TAG_VALUE(l_out_xml,'event/info/packet/data/nonmultirow/resp_status/text()');
        
        l_process_instance_id:=MS_QSM_UTILITIES.GET_TAG_VALUE(l_out_xml,'event/info/packet/data/nonmultirow/process_instance_id/text()');
        l_instance_id:=MS_QSM_UTILITIES.GET_TAG_VALUE(l_out_xml,'event/info/packet/data/nonmultirow/instance_id/text()');
        
        
        if l_reporting_period is not null then
          BEGIN
            SELECT PERIOD_NAME
            INTO l_reporting_period_disp
            FROM MS_QSM_REPORTING_PERIOD 
            WHERE PERIOD_ID = l_reporting_period;
          EXCEPTION
            WHEN OTHERS THEN
              l_reporting_period_disp:=NULL;
          END;
        END IF;   
        
        if l_overall_grade is not null then
          BEGIN
            SELECT GRADE_DESC
            INTO l_overall_grade_disp
            FROM MS_QSM_GRADE_CONFIG
            WHERE GRADE_ID = l_overall_grade;
          EXCEPTION
            WHEN OTHERS THEN
              l_overall_grade_disp:=NULL;
          END;
        END IF;   

        if l_questionnaire_id is not null then
          BEGIN
            SELECT QUE_NAME
            INTO l_questionnaire_id_disp
            FROM MS_QSM_QUESTIONNAIRE
            WHERE INTERNAL_QUESTNR_ID = l_questionnaire_id;
          EXCEPTION
            WHEN OTHERS THEN
              l_questionnaire_id_disp:=NULL;
          END;
        END IF; 
        
        l_applies_to_disp :=l_applies_to;
        
        if l_resp_status is not null then
          BEGIN
            SELECT status_name
            INTO l_resp_status_disp
            FROM MS_QSM_STATUS
            WHERE status_id = l_resp_status;
          EXCEPTION
            WHEN OTHERS THEN
              l_resp_status_disp:=NULL;
          END;
        END IF; 
        
        ms_qsm_utilities.update_xml(L_OUT_XML,REPLACE(lv_path,'$','reporting_period_disp'),l_reporting_period);
        ms_qsm_utilities.update_xml(L_OUT_XML,REPLACE(lv_path,'$','questionnaire_disp'),l_questionnaire_id_disp);
        ms_qsm_utilities.update_xml(L_OUT_XML,REPLACE(lv_path,'$','overall_grade_disp'),l_overall_grade_disp);
        ms_qsm_utilities.update_xml(L_OUT_XML,REPLACE(lv_path,'$','applies_to_disp'),l_applies_to_disp);
        ms_qsm_utilities.update_xml(L_OUT_XML,REPLACE(lv_path,'$','resp_status_disp'),l_resp_status_disp);
        

        for qst_rec in (select 
                       question_pk,
                       response_type,
                       qst_response_id,
                       resp_grade
                FROM XMLTABLE (xmlnamespaces('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:event/msa:info/msa:packet/msa:data/msa:qst/msa:row'
                                             passing L_OUT_XML
                                             columns question_pk varchar2(255) path 'msa:question_pk',
                                                    response_type varchar2(4000)  path 'msa:response_type',
                                                    qst_response_id varchar2(255) path 'msa:qst_response_id',
                                                    resp_grade VARCHAR2(4000) PATH 'msa:resp_grade'))
          LOOP
          
            if qst_rec.response_type IS NOT NULL THEN
            
                  select DISPLAYED_VALUE 
                  into l_response_type_disp
                  from ms_qs_list_of_values_t a,ms_qs_lov_names b
                  where a.lov_id = b.lov_id
                  and b.lov_name = 'MS_QSM_Response_Type'
                  AND STORED_VALUE=qst_rec.response_type;
                  
                  ms_qsm_utilities.update_xml(l_out_xml,'event/info/packet/data/qst/row[question_pk='''||qst_rec.question_pk||''']/response_type_disp/text()',l_response_type_disp);
                  
            END IF;
            
            if qst_rec.resp_grade IS NOT NULL THEN
                  BEGIN
                    l_overall_grade_disp := NULL;
                    SELECT GRADE_DESC
                    INTO l_overall_grade_disp
                    FROM MS_QSM_GRADE_CONFIG
                    WHERE GRADE_ID = qst_rec.resp_grade;
                    
                    ms_qsm_utilities.update_xml(l_out_xml,'event/info/packet/data/qst/row[question_pk='''||qst_rec.question_pk||''']/resp_grade_disp/text()',l_overall_grade_disp);
                    
                  EXCEPTION
                    WHEN OTHERS THEN
                      l_overall_grade_disp:=NULL;
                  END;
                  
            END IF; 
            BEGIN 
              SELECT DECODE(RESPONSE_TYPE,'1',TO_CHAR(RESP_NUMBER),'2',TO_CHAR(RESP_DATE),'3',TO_CHAR(RESP_NUMBER),'4',RESP_MLOV,'7',RESP_DD,'6',RESP_RADIO,
              '5',RESP_CLOB,'8',RESP_ATTACHMENT,'9',RESP_SPRD,'10',RESP_RADIO_B,'11',CHECKBOX_HIDDEN_VALUE)
              INTO l_response_val
              FROM MS_QSM_QUESTNR_RESP_DUP_V 
              WHERE QUE_RESPONSE_ID = l_response_id
              AND PROCESS_INSTANCE_ID= l_process_instance_id
              AND INSTANCE_ID = l_instance_id 
              AND QUESTION_PK = qst_rec.question_pk;
              
              IF qst_rec.response_type IN ('4','6','7','10','11') THEN
              
                SELECT MS_CONCAT(DISPLAY_VALUE)
                INTO l_response_val_disp
                FROM MS_QSM_QST_LOV_DATA
                WHERE INSTR(','||l_response_val||',',','||STORED_VALUE||',')>0;
                
              ELSE
                l_response_val_disp :=  l_response_val;          
              END IF;
              
              ms_qsm_utilities.update_xml(l_out_xml,'event/info/packet/data/qst/row[question_pk='''||qst_rec.question_pk||''']/response_values/text()',l_response_val);
              ms_qsm_utilities.update_xml(l_out_xml,'event/info/packet/data/qst/row[question_pk='''||qst_rec.question_pk||''']/response_values_disp/text()',l_response_val_disp);
              
              
             EXCEPTION 
              WHEN OTHERS THEN
                NULL;
             END;   
         
          END LOOP;     
          
          for sec_rec in (select section_id,
                       sec_grade
                      FROM XMLTABLE (xmlnamespaces('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:event/msa:info/msa:packet/msa:data/msa:sec/msa:row'
                                             passing L_OUT_XML
                                             columns section_id varchar2(255) path 'msa:section_id',
                                                    sec_grade varchar2(4000)  path 'msa:sec_grade'))
          LOOP
          
            if sec_rec.sec_grade IS NOT NULL THEN
                  BEGIN
                    l_overall_grade_disp := NULL;
                    SELECT GRADE_DESC
                    INTO l_overall_grade_disp
                    FROM MS_QSM_GRADE_CONFIG
                    WHERE GRADE_ID = sec_rec.sec_grade;
                    
                    ms_qsm_utilities.update_xml(l_out_xml,'event/info/packet/data/sec/row[section_id='''||sec_rec.section_id||''']/sec_grade_disp/text()',l_overall_grade_disp);
                    
                  EXCEPTION
                    WHEN OTHERS THEN
                      l_overall_grade_disp:=NULL;
                  END;
                  
            END IF;            
         
          
          END LOOP;
          
        -- Till here
        

       END IF;
     -- Modify the l_out_xml to CIF Template section end
     l_params.EXTEND;
     l_params (1) :=
              ms_param_obj (param_name     => l_event_name,
                            param_type     => ms_apps_constants.g_parameter_type_reference,
                            data_type      => ms_apps_constants.g_data_type_text,
                            mandatory      => ms_apps_constants.g_no,
                            text_value     => l_response_id,
                            number_value   => NULL,
                            date_value     => null,
                            clob_value     => l_out_xml.getclobval(),       --l_ism_xml.getclobval(),
                            blob_value     => NULL,
                            BFILE_VALUE    => null);
            ms_apps_businessevents.raise_business_event (i_event_name            => l_event_name,
                                                        i_parent_event_log_id   => NULL,
                                                        i_parameter_tab         => l_params,
                                                        i_registration_name     => NULL,
                                                        i_commit_flag           => TRUE,
                                                        o_event_log_id          => l_event_log_id,
                                                        o_error_code            => l_error_code,
                                                        o_error_message         => l_error_message);
          
           ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
           pn_error_sequence    => xn_error_seq,
           PC_ERROR_TYPE        => 'I',
           pc_error_text        => 'Success : Post Hook For Request : '|| l_request_id ||'Log ID:'||l_event_log_id||',Code:'||l_error_code||'MSG:'||l_error_message ); 

  
  
  NULL;
EXCEPTION
  When ex_invalid_be then
     ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
     pn_error_sequence    => xn_error_seq,
     PC_ERROR_TYPE        => 'E',
     pc_error_text        => L_ERROR_CODE||':'||L_ERROR_MESSAGE||':'||l_event_name || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
  When ex_invalid_data then
     ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
     pn_error_sequence    => xn_error_seq,
     PC_ERROR_TYPE        => 'E',
     pc_error_text        => L_ERROR_CODE||':'||L_ERROR_MESSAGE||':'||'Response id-' || l_response_id || ', Request ID-' || l_request_id || ' ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM); 
  WHEN OTHERS THEN
    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id => xn_error_handle_id, pn_error_sequence => xn_error_seq, pc_error_type => 'E', pc_error_text => 'Fatal Error in the P_QSM_RESPONSE_POSTHOOK ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
    
end; 
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_RESQSM_RESQSM_PROD" (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN OUT CLOB,
                                                                       lt_out_data          IN OUT CLOB,
                                                                       pc_process_code      IN     VARCHAR2,
                                                                       lc_from_stage        IN     VARCHAR2,
                                                                       lc_to_stage          IN     VARCHAR2,
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
    AS
    
        l_out_xml XMLTYPE;
        l_error_code                                            NUMBER;
        l_error_message                                      VARCHAR2(4000);
        ln_log_no                                                NUMBER;
        l_action                                                   VARCHAR2(10);
        l_issues_count                                          NUMBER:=0;
        ln_response_pid                                        NUMBER;
        ln_response_iid                                         NUMBER;
        ln_que_response_id                                   NUMBER;
        
        l_from_locale                                           NUMBER;
        l_to_locale                                                 NUMBER;
        l_en_locale                                              NUMBER;
        -- Added these variables for Apple by Gaurav
        lv_overall_approver                                     VARCHAR2(4000);
        lv_process_instance_id                                  NUMBER;
        lv_count                                                NUMBER:=0;
        lv_pushform_view                                        varchar2(4000);
        LV_STRING                                               varchar2(4000);
        LV_STRING1                                               varchar2(4000);
        lv_max_instance_id                                      Number;
        l_from_user                                             VARCHAR2(255);
        L_TO_USER                                             VARCHAR2(255);
        LV_TEMP_CONFIG_FLAG                                   VARCHAR2(4000);            
        LV_REQ_ALL_USER_APPROVAL                              VARCHAR2(4000);
        LV_RESPONSE_APPROVER                                   VARCHAR2(4000);
        LV_APPROVED_USERS                                     VARCHAR2(4000);
        LV_PENDING_APPROVERS                                   VARCHAR2(4000);
        lv_session_count                                         number;
        l_delimeter                                            varchar2(1);
        l_comments_pid                                          number;
        l_qst_comments                                          varchar2(4000);
        l_sprd_pid                                              number;
        l_row_count                                             number;
        l_sch_iteration                                         VARCHAR2(4000);
        
        l_sec_id VARCHAR2(255) := 'X';
        L_OVERALL_SCORE number :=0;
        l_overall_grade  varchar2(255); 
        l_resp_stored_value varchar2(4000);
        l_enterprise_info number;
        L_Req_Clar_Count    Number;
        l_scoring_flag  varchar2(10);
        l_Prepopulation_Flag Varchar2(10);
        l_resp_prepopulate varchar2(10);
        l_sch_frequency ms_qsm_questnr_sch.sch_frequency%type;
        
        L_SPREADSHEET_ID    VARCHAR2(4000);
        L_RESP_SPRD_METRIC_ID NUMBER;
        L_RESP_SPRD         VARCHAR2(4000);  
        L_QST_JSON_VALUE    VARCHAR2(4000);
        
    BEGIN
       
       IF NOT (MS_QSM_UTILITIES.G_TBL_CONFIG_PARAMS.COUNT > 0)  THEN 
          MS_QSM_UTILITIES.INITIALIZE_PERF_CONFIG_PARAMS;
        END IF;
        
        IF ms_qsm_utilities.G_TBL_CONFIG_PARAMS('DB_Sleep_Required') = 'Y' THEN
       
            LOOP
                  select count(1) into lv_session_count from v$session where status = 'ACTIVE' and type != 'BACKGROUND' AND EVENT != 'PL/SQL lock timer';
                  EXIT WHEN ( LV_SESSION_COUNT <= MS_QSM_UTILITIES.G_TBL_CONFIG_PARAMS('Maximum_Allowed_Sessions') );
                  sys.dbms_lock.sleep(sys.dbms_random.value(ms_qsm_utilities.G_TBL_CONFIG_PARAMS('Minimum_Session_Sleep_Time'),ms_qsm_utilities.G_TBL_CONFIG_PARAMS('Maximum_Session_Sleep_Time')));
            END LOOP;

       END IF;                                       
       
       
        BEGIN               
               
            SELECT VALUE
            INTO l_delimeter
            FROM MS_QSM_PARAMS
            WHERE PARAM_GROUP='QSM_PARAMS'
            AND PARAMETER = 'QUESTION_LOV_DELIMETER'
            AND ENABLED='Y';

        EXCEPTION
            WHEN OTHERS THEN
                l_delimeter :=',';
        END;     
        
        l_out_xml := xmltype(lt_in_data);
        
        IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0)  THEN
            ms_qsm_utilities.initialize_metric_maint ('QSM');
        END IF;
        
        SELECT MS_APPS_UTILITIES.GET_PARAMETER_VALUE (1,'MS_QSM_Configuration','Enable Response Pre Population')into L_PREPOPULATION_FLAG FROM dual;
        FOR non_multirow_rec IN (SELECT  que_response_id,
                                                            certification_comment,
                                                            certified_by,
                                                            certify_flag,
                                                            certification_text,
                                                            certification_text_htm,
                                                            instructions,
                                                            instructions_htm,
                                                            respondent,
                                                            previous_stage,
                                                            collaboration_users,
                                                            resp_status,
                                                            response_approver,
                                                            tmep_que_type,
                                                            action_comments,
                                                            submit_action,
                                                            dd_object_type,
                                                            dd_current_user_name,
                                                            dd_event_user_name,
                                                            dd_enterprise_info,
                                                            dd_current_stage,
                                                            dd_process_code,
                                                            instance_rec_num,
                                                            instance_id,
                                                            metric_id,
                                                            created_by,
                                                            creation_date,
                                                            process_instance_id,
                                                            que_request_id,
                                                            reference_proc_id,
                                                            temp_pk_id,
                                                            questionnaire_id,
                                                            maint_current_stage,
                                                            assignee,
                                                            app_based_on_resp,
                                                            response_upload
                                             FROM XMLTABLE (xmlnamespaces('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:nonmultirow'
                                             PASSING XMLTYPE(lt_in_data_orig)
                                             COLUMNS que_response_id VARCHAR2(255) PATH 'msa:que_response_id',
                                                            certification_comment VARCHAR2(4000)  PATH 'msa:certification_comment',
                                                            certified_by VARCHAR2(255) PATH 'msa:certified_by',
                                                            certify_flag VARCHAR2(10) PATH 'msa:certify_flag',
                                                            certification_text CLOB PATH 'msa:certification_text',
                                                            certification_text_htm CLOB PATH 'msa:certification_text_htm',
                                                            instructions CLOB PATH 'msa:instructions',
                                                            instructions_htm CLOB PATH 'msa:instructions_htm',
                                                            respondent VARCHAR2(255) PATH 'msa:respondent',
                                                            previous_stage VARCHAR2(100) PATH 'msa:previous_stage',
                                                            collaboration_users VARCHAR2(4000) PATH 'msa:collaboration_users',
                                                            resp_status VARCHAR2(255) PATH 'msa:resp_status',
                                                            response_approver VARCHAR2(255) PATH 'msa:response_approver',
                                                            tmep_que_type   VARCHAR2(255)   PATH 'msa:tmep_que_type',
                                                            action_comments VARCHAR2(4000) PATH 'msa:action_comments',
                                                            submit_action VARCHAR2(100) PATH 'msa:submit_action',
                                                            dd_object_type VARCHAR2(100) PATH 'msa:dd_object_type',
                                                            dd_current_user_name VARCHAR2(100) PATH 'msa:dd_current_user_name',
                                                            dd_event_user_name VARCHAR2(100) PATH 'msa:dd_event_user_name',
                                                            dd_enterprise_info VARCHAR2(100) PATH 'msa:dd_enterprise_info',
                                                            dd_current_stage VARCHAR2(100) PATH 'msa:dd_current_stage',
                                                            dd_process_code VARCHAR2(255) PATH 'msa:dd_process_code',
                                                            instance_rec_num NUMBER(10) PATH 'msa:instance_rec_num',
                                                            instance_id NUMBER(10) PATH 'msa:instance_id',
                                                            metric_id NUMBER(10) PATH 'msa:metric_id',
                                                            created_by VARCHAR2(100) PATH 'msa:created_by',
                                                            creation_date VARCHAR2(100) PATH 'msa:creation_date',
                                                            process_instance_id NUMBER(10) PATH 'msa:process_instance_id',
                                                            que_request_id  VARCHAR2(255) PATH 'msa:que_request_id',
                                                            reference_proc_id NUMBER PATH 'msa:reference_proc_id',
                                                            temp_pk_id VARCHAR2(255) PATH 'msa:temp_pk_id',
                                                            questionnaire_id VARCHAR2(255) PATH 'msa:questionnaire_id',
                                                            maint_current_stage VARCHAR2(255) PATH 'msa:maint_current_stage',
                                                            assignee varchar2(255) path 'msa:assignee',
                                                            app_based_on_resp varchar2(255) path 'msa:app_based_on_resp',
                                                            response_upload VARCHAR2(10) path 'msa:response_upload')) 

        LOOP                      
        
                l_action := TRIM(non_multirow_rec.submit_action);
                    
                -- getting the overall approver by passing que_request_id -GAPPLE
                BEGIN
                
                select overall_approver
                into lv_overall_approver
                from MS_QSM_INIT_QUESTNR
                where QUE_REQUEST_ID = non_multirow_rec.que_request_id; 
                
                EXCEPTION
                    WHEN OTHERS THEN
                        lv_overall_approver:=NULL;
                END;
                
                -- getting pushform view name dynamically
                SELECT metric_name ||'_V'
                INTO lv_pushform_view
                FROM ms_qsm_metric_maint
                WHERE guid = 'RESQSM' AND is_active = 'Y';
                
                
                LV_STRING1 :=  'select max(instance_id),SUM(DECODE(submit_action,''REQ_CLR'',1,0)) from '||lv_pushform_view||' WHERE process_instance_id = :2';  
                --getting max instance id for a particular process_instance_id                           
                execute immediate lv_string1
                            INTO lv_max_instance_id,l_req_clar_count 
                            using non_multirow_rec.process_instance_id;                              
                
                                             
                LV_STRING:='SELECT COUNT(1)
                                           from MS_QSM_QUESTNR_RESP_DUP_V X
                                           where PROCESS_INSTANCE_ID= :1
                                           and INSTANCE_ID =:2
                                           and ((--NVL(RESPONSE_UPLOAD,''N'') = ''N'' and 
                                                    COND_APP_REQ_FLAG = ''1'') 
                                                or (NVL(RESPONSE_UPLOAD,''N'') = ''Y'' 
                                                         and EXISTS  (SELECT 1 FROM MS_QSM_QST_LOV_DATA A
                                                                      WHERE A.QUESTION_ID=X.QUESTION_PK
                                                                      AND INSTR('''||l_delimeter||'''||DECODE(RESPONSE_TYPE,''4'',RESP_MLOV,''6'',RESP_RADIO,''7'',RESP_DD,''10'',RESP_RADIO_B,''11'',RESP_CHECKBOX)||'''||l_delimeter||''','''||l_delimeter||'''||DISPLAY_VALUE||'''||l_delimeter||''',1,1)>0
                               AND INSTR('',''||RESP_REQ_APPROVAL||'','','',''||STORED_VALUE||'','',1)>0)
                               ))
                               AND RESPONSE_TYPE IN (''4'',''6'',''7'',''10'',''11'')';
                
                --taking the count of APPROVAL_BASED_ON_RESPONSE selected based on process_instance_id and max_instance_id
                EXECUTE IMMEDIATE LV_STRING
                            INTO lv_count 
                            using non_multirow_rec.process_instance_id,lv_max_instance_id;
             
             
             if  lc_from_stage = 'QUESTNR_RESPONSE' and lc_to_stage <>'QUESTNR_RESPONSE' and non_multirow_rec.response_upload ='Y' AND l_req_clar_count <=0  then
             
                for qst_rec in (select question_pk,
                                       response_type,
                                       resp_dd,
                                       resp_mlov,
                                       resp_radio,
                                       list_of_values_hidden,
                                       qst_response_id,
                                       qst_json_value,
                                       RESP_REQ_APPROVAL,
                                       RESP_RADIO_B,
                                       resp_checkbox
                                FROM XMLTABLE (xmlnamespaces('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:qst/msa:row'
                                                             passing xmltype(lt_in_data_orig)
                                                             columns question_pk varchar2(255) path 'msa:question_pk',
                                                                    response_type varchar2(4000)  path 'msa:response_type',
                                                                    resp_dd varchar2(4000)  path 'msa:resp_dd',
                                                                    resp_mlov varchar2(4000)  path 'msa:resp_mlov',
                                                                    resp_radio varchar2(4000)  path 'msa:resp_radio',
                                                                    list_of_values_hidden varchar2(4000)  path 'msa:list_of_values_hidden',
                                                                    qst_response_id varchar2(255) path 'msa:qst_response_id',
                                                                    qst_json_value  varchar2(4000) path 'msa:qst_json_value',
                                                                    RESP_REQ_APPROVAL VARCHAR2(4000) PATH 'msa:resp_req_approval',
                                                                    RESP_RADIO_B VARCHAR2(4000) PATH 'msa:resp_radio_b',
                                                                    RESP_CHECKBOX VARCHAR2(4000) PATH 'msa:resp_checkbox')
                                where response_type in ('4','6','7','10','11'))
                LOOP
                     
                     l_comments_pid := null;
                     l_qst_comments := null;
                     l_sprd_pid     :=null;
                     l_row_count    := null;
                                          
                     
                     select ms_concat(stored_value)
                     INTO l_resp_stored_value
                     FROM MS_QSM_QST_LOV_DATA
                     where INSTR(l_delimeter||DECODE(qst_rec.response_type,'4',qst_rec.resp_mlov,'6',qst_rec.resp_radio,'7',qst_rec.resp_dd,'10',qst_rec.resp_radio_b,'11',qst_rec.resp_checkbox,'')||l_delimeter,l_delimeter||display_value||l_delimeter,1)>0
                     and locale_id = '1009'
                     and questionnaire_id = non_multirow_rec.questionnaire_id
                     AND QUESTION_ID = qst_rec.question_pk;
                     
                    
                     if qst_rec.response_type = '4' then     -- LOV  
                     
                        MS_QSM_UTILITIES.UPDATE_XML(L_OUT_XML, 'datapacket/data/qst/row[question_pk ='''||QST_REC.QUESTION_PK||''']/resp_mlov/text()',L_RESP_STORED_VALUE);
                        ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/qst/row[question_pk ='''||qst_rec.question_pk||''']/list_of_values_hidden/text()', qst_rec.resp_mlov);                      
                        
                     elsif qst_rec.response_type = '6' then  -- Y/N 
                       
                        ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/qst/row[question_pk ='''||qst_rec.question_pk||''']/resp_radio/text()', l_resp_stored_value);
                       
                     ELSIF QST_REC.RESPONSE_TYPE = '7' then
                      
                        MS_QSM_UTILITIES.UPDATE_XML(L_OUT_XML, 'datapacket/data/qst/row[question_pk ='''||QST_REC.QUESTION_PK||''']/resp_dd/text()', L_RESP_STORED_VALUE);
                      
                     elsif qst_rec.response_type = '10' then
                        
                        ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/qst/row[question_pk ='''||qst_rec.question_pk||''']/resp_radio_b/text()', l_resp_stored_value);
                        
                     elsif qst_rec.response_type = '11' then
                        
                        ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/qst/row[question_pk ='''||qst_rec.question_pk||''']/checkbox_hidden_value/text()', l_resp_stored_value);
                        
                     end if; 
                     
                     IF non_multirow_rec.app_based_on_resp='yes' AND qst_rec.resp_req_approval IS NOT NULL AND INSTR(','||l_resp_stored_value||',',','||qst_rec.resp_req_approval||',',1,1)>0 THEN

                        ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/qst/row[question_pk ='''||qst_rec.question_pk||''']/cond_app_req_flag/text()','1');
                      
                     END IF;
                     
                end LOOP;   
                
                
                if NON_MULTIROW_REC.TMEP_QUE_TYPE = '3' and NON_MULTIROW_REC.CERTIFY_FLAG is not null then  -- Certification
                
                   begin
                      select ENTERPRISE_ID
                      into l_enterprise_info
                      from SI_USERS_T
                      WHERE USER_NAME = NON_MULTIROW_REC.certified_by;
                    EXCEPTION
                      when OTHERS then 
                        null;
                    end;
                
                    ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/certify_flag/text()',ms_apps_utilities.get_stored_value(l_enterprise_info,'MS_QSM_Yes_No',non_multirow_rec.certify_flag));
                    MS_QSM_UTILITIES. UPDATE_XML (L_OUT_XML,'datapacket/data/nonmultirow/temp_get_user_full_name/text()',NON_MULTIROW_REC.certified_by);
                                       
                END IF;
                
             END IF;                
   
            IF  lc_from_stage = 'QUESTNR_RESPONSE' AND lc_to_stage ='QUESTNR_RESPONSE' or ( non_multirow_rec.response_upload ='Y' and ( (lc_from_stage = 'QUESTNR_RESPONSE' and lc_to_stage ='PUBLISH_RESPONSE') or (lc_from_stage='APPROVE_RESPONSE'	and lc_to_stage='PUBLISH_RESPONSE'))) THEN
                
                IF  l_action IS NULL or (non_multirow_rec.response_upload ='Y' and (l_action='TSK_CMPL' or l_action ='APPROVE') ) THEN -- Initiate Response Flow
                    
                    ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/sec/row/section_fk/text()',non_multirow_rec.que_response_id);
                    ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/qst_response_id/text()',non_multirow_rec.que_response_id);
                    ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/collaborative_parameter/text()',non_multirow_rec.metric_id||'~'||non_multirow_rec.process_instance_id);
                    
                ELSIF l_action = 'TSK_CMPL' OR l_action = 'SND_APP' THEN     -- This block will trigger for Live Surveys   
                    
                    ln_response_pid := si_process_instance_id_s.NEXTVAL;
                    ln_response_iid := si_metric_results_s.NEXTVAL;
                    LN_QUE_RESPONSE_ID:=MS_QSM_QUE_RESPONSE_ID_S.NEXTVAL;
                   
                    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/nonmultirow/que_response_id/text()',ln_que_response_id);
                    ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/sec/row/section_fk/text()',ln_que_response_id);
                    ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/qst_response_id/text()',ln_que_response_id);
                    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/nonmultirow/instance_id/text()',ln_response_iid);
                    MS_QSM_UTILITIES.UPDATE_XML(L_OUT_XML,'datapacket/data/nonmultirow/process_instance_id/text()',LN_RESPONSE_PID);   
                    ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/approver_comment/text()','');
                    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/nonmultirow/certify_flag/text()',''); 
                    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/nonmultirow/certified_by/text()',NON_MULTIROW_REC.certified_by); 
                    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/nonmultirow/certification_comment/text()',''); 
                    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/nonmultirow/action_comments/text()',''); 
                    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/nonmultirow/resp_status/text()','4'); 
                    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/nonmultirow/responded_on/text()',''); 
                    ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/nonmultirow/responded_by/text()','');
                --raghu
                    ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/resp_sprd/text()','');
                    ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/reference_pid/text()','');
                    
                        BEGIN
                            
                              SELECT METRIC_ID 
                              INTO l_resp_sprd_metric_id
                              FROM SI_METRICS_T 
                              WHERE METRIC_NAME = (SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='RESSPR' AND IS_ACTIVE='Y');
                          
                            EXCEPTION
                                WHEN OTHERS THEN
                                    l_resp_sprd_metric_id :='';
                            END; 
                          
                            for qst_rec in (select question_pk,
                                               response_type,
                                               qst_response_id,
                                               qst_json_value                                        
                                        FROM XMLTABLE (xmlnamespaces('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:qst/msa:row'
                                            passing l_out_xml
                                             columns question_pk varchar2(255) path 'msa:question_pk',
                                                    response_type varchar2(4000)  path 'msa:response_type',
                                                    qst_response_id varchar2(255) path 'msa:qst_response_id',
                                                    qst_json_value  varchar2(4000) path 'msa:qst_json_value'
                                                   ))
                             LOOP
                                       
                                L_SPREADSHEET_ID := NULL;
                                l_qst_json_value:=NULL;
                                    
                                IF qst_rec.response_type='9' then
                                    
                                    SELECT QST_SPRDSHEET_TEMPLATE 
                                    into l_spreadsheet_id
                                    FROM MS_QSM_QUESTION 
                                    where qst_id_pk=qst_rec.question_pk;
                                    
                                    SELECT SPRD_SHEET_LINK
                                    INTO l_resp_sprd
                                    FROM MS_QSM_SPREADSHEET
                                    WHERE SPRD_SHEET_INTERNAL_ID = l_spreadsheet_id;
                                    
                                end if;                              
                               
                                l_qst_json_value := '{';
                                L_QST_JSON_VALUE := L_QST_JSON_VALUE || '"RESP_SPRD_METRIC_ID"' || ':' || '"' || L_RESP_SPRD_METRIC_ID || '"';
                                l_qst_json_value := l_qst_json_value || ',' ||'"SPREADSHEET_ID"' || ':' || '"' ||l_spreadsheet_id || '"';
                                L_QST_JSON_VALUE := L_QST_JSON_VALUE || ',' ||'"DELIMETER"' || ':' || '"' || L_DELIMETER || '"';
                                L_QST_JSON_VALUE := L_QST_JSON_VALUE || ',' ||'"SPRD_LINK"' || ':' || '"' || L_RESP_SPRD || '"';
                                l_qst_json_value := l_qst_json_value || '}';
                                
                                MS_QSM_UTILITIES. UPDATE_XML (L_OUT_XML,'datapacket/data/qst/row[question_pk ='''||qst_rec.question_pk||''']/qst_json_value/text()',l_qst_json_value);
                                    

                            END LOOP;  
                 --raghu   
                    -- Configuration Parameter is not enabled OR Pre population is not checked for the live survey
                    begin
                      select resp_prepopulate,sch_frequency 
                        into l_resp_prepopulate ,
                             l_sch_frequency
                        from ms_qsm_questnr_sch
                        where sch_req_id=non_multirow_rec.que_request_id;
                        
                    exception
                    when others then
                       ms_apps_mdf_errors_pkg.insert_log 
                          (
                           pn_error_handle_id => xn_error_handle_id, 
                           pn_error_sequence => xn_error_seq, 
                           pc_error_type => 'E', 
                           pc_error_text => 'Error while fetching resp_prepopulate and sch_frequency  '||sqlerrm
                           );
                    end;
                      
                    if (l_prepopulation_flag <> 'Y' OR (nvl(l_resp_prepopulate,'no')='no' and l_sch_frequency=3)) then
                            
                            MS_QSM_UTILITIES.UPDATE_XML(L_OUT_XML,'datapacket/data/nonmultirow/reference_proc_id/text()',''); 
                            ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/nonmultirow/overall_score/text()',''); 
                            ms_qsm_utilities.update_xml(l_out_xml,'datapacket/data/nonmultirow/overall_grade/text()',''); 
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/sec/row/sec_grade/text()','');                    
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/sec/row/weighted_score/text()',''); 
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/resp_mlov/text()','');
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/resp_attachment/text()','');
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/resp_radio/text()','');
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/resp_dd/text()','');                          
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/resp_comments/text()','');
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/resp_grade/text()','');
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/resp_weighted_score/text()','');
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/resp_score/text()','');
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/resp_clob/text()','');
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/resp_date/text()','');
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/resp_number/text()','');
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/resp_comments/text()','');
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/resp_comments_htm/text()','');
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/resp_number/text()','');
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/resp_sprd/text()','');
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/resp_radio_b/text()','');
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/resp_checkbox/text()','');
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/reference_pid/text()','');
                            MS_QSM_UTILITIES. UPDATE_XML (L_OUT_XML,'datapacket/data/qst/row/checkbox_hidden_value/text()','');
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/list_of_values_hidden/text()','');  
                            MS_QSM_UTILITIES.UPDATE_XML(L_OUT_XML,'datapacket/data/nonmultirow/action_comments/text()',''); 
                            MS_QSM_UTILITIES.UPDATE_XML(L_OUT_XML,'datapacket/data/nonmultirow/submit_action/text()',''); 
                            ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/qst/row/cond_app_req_flag/text()',''); 
                            
                            BEGIN
                            
                              SELECT METRIC_ID 
                              INTO l_resp_sprd_metric_id
                              FROM SI_METRICS_T 
                              WHERE METRIC_NAME = (SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='RESSPR' AND IS_ACTIVE='Y');
                          
                            EXCEPTION
                                WHEN OTHERS THEN
                                    l_resp_sprd_metric_id :='';
                            END; 
                          
                            for qst_rec in (select question_pk,
                                               response_type,
                                               qst_response_id,
                                               qst_json_value                                        
                                        FROM XMLTABLE (xmlnamespaces('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:qst/msa:row'
                                            passing l_out_xml
                                             columns question_pk varchar2(255) path 'msa:question_pk',
                                                    response_type varchar2(4000)  path 'msa:response_type',
                                                    qst_response_id varchar2(255) path 'msa:qst_response_id',
                                                    qst_json_value  varchar2(4000) path 'msa:qst_json_value'
                                                   ))
                             LOOP
                                       
                                L_SPREADSHEET_ID := NULL;
                                l_qst_json_value:=NULL;
                                    
                                IF qst_rec.response_type='9' then
                                    
                                    SELECT QST_SPRDSHEET_TEMPLATE 
                                    into l_spreadsheet_id
                                    FROM MS_QSM_QUESTION 
                                    where qst_id_pk=qst_rec.question_pk;
                                    
                                    SELECT SPRD_SHEET_LINK
                                    INTO l_resp_sprd
                                    FROM MS_QSM_SPREADSHEET
                                    WHERE SPRD_SHEET_INTERNAL_ID = l_spreadsheet_id;
                                    
                                end if;                              
                               
                                l_qst_json_value := '{';
                                L_QST_JSON_VALUE := L_QST_JSON_VALUE || '"RESP_SPRD_METRIC_ID"' || ':' || '"' || L_RESP_SPRD_METRIC_ID || '"';
                                l_qst_json_value := l_qst_json_value || ',' ||'"SPREADSHEET_ID"' || ':' || '"' ||l_spreadsheet_id || '"';
                                L_QST_JSON_VALUE := L_QST_JSON_VALUE || ',' ||'"DELIMETER"' || ':' || '"' || L_DELIMETER || '"';
                                L_QST_JSON_VALUE := L_QST_JSON_VALUE || ',' ||'"SPRD_LINK"' || ':' || '"' || L_RESP_SPRD || '"';
                                l_qst_json_value := l_qst_json_value || '}';
                                
                                MS_QSM_UTILITIES. UPDATE_XML (L_OUT_XML,'datapacket/data/qst/row[question_pk ='''||qst_rec.question_pk||''']/qst_json_value/text()',l_qst_json_value);
                                    
                            END LOOP;   
                                    
                      end if;
                      
                      ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/temp_pk_id/text()',ln_response_pid); 
                  
                      select count(1)+1
                      into l_sch_iteration
                      from ms_qsm_survey_scheduler_log
                      WHERE que_request_id=non_multirow_rec.que_request_id;
                  
                      l_sch_iteration:='ITR-'||l_sch_iteration;
            
                      ms_qsm_utilities.insert_schedule_logs(i_request_id => non_multirow_rec.que_request_id
                                            ,i_respondents =>non_multirow_rec.respondent
                                            ,i_log_level => 'D'
                                            ,i_sequence_no => 1
                                            ,i_process_instance_id => ln_response_pid
                                            ,i_status=> 'S'
                                            ,i_response_id =>ln_que_response_id
                                            ,i_iteration_number =>l_sch_iteration
                                            ,o_error_code=>l_error_code
                                            ,o_error_message=>l_error_message);
                                            
                      IF l_error_code <> 1 THEN 
                      
                          insert into ms_qsm_survey_scheduler_log
                            (que_request_id ,sch_frequency ,triggered_date,sch_due_date,sch_iteration)
                          values
                            (non_multirow_rec.que_request_id,'3',sysdate,null,l_sch_iteration);
                      
                      
                      END IF;

                 END IF;

            ELSE    
                IF l_action = 'TSK_CMPL' OR l_action = 'SND_APP' THEN
                    ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/responded_by/text()',non_multirow_rec.dd_current_user_name); 
                END IF;
                ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/resp_status/text()',ms_qsm_utilities.get_status (non_multirow_rec.dd_current_stage, non_multirow_rec.previous_stage, non_multirow_rec.submit_action));
                ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/collaborative_parameter/text()',non_multirow_rec.metric_id||'~'||non_multirow_rec.process_instance_id);           
            END IF;
            
          IF lc_from_stage = 'QUESTNR_RESPONSE' AND lc_to_stage ='APPROVE_RESPONSE' THEN -- Transition RESPONSE_TO_APPROVE
            
              ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'RESPONSE');
              ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'APPROVE');
              ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/responded_on/text()', TO_CHAR(SYSDATE,'MM/DD/YYYY HH24:MI:SS'));
                 
                -- assigning from and to user 
              l_from_user := non_multirow_rec.respondent;
              l_to_user := non_multirow_rec.response_approver; 

               -- checking if current stage is "Ovarall Approver", the assign "Overall user" in assignee field.
             if  TRIM(non_multirow_rec.maint_current_stage) = 'OA' then
                  ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/assignee/text()',lv_overall_approver);
                  l_to_user := non_multirow_rec.response_approver;                  
               --This logic is implemented to check whether REQUEST FOR CLARIFICATION has come from IA or at RESPONDENT LEVEL, Response value has been changed to 
               --different APP_BASED_ON_RESP value,then in that case assignment has to route through IA.   
             elsif (trim(non_multirow_rec.app_based_on_resp) = 'yes') and trim(lv_count)>0 and TRIM(non_multirow_rec.maint_current_stage) = 'IA' then
                  ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/assignee/text()',non_multirow_rec.response_approver);
                   
               --This logic is implemented to check whether Request for clarification has come from IA (same as above mentioned logic but the only difference 
               --is while trigerring Response, APP_BASED_ON_RESP is not selected)    
             elsif (trim(non_multirow_rec.app_based_on_resp) <> 'yes') and TRIM(non_multirow_rec.maint_current_stage) = 'IA' then
                    ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/assignee/text()',non_multirow_rec.response_approver); 
                
               --Assignment has to route through IA if "APP_BASED_ON_RESP(ABR)" is "yes", slected any response is there in Questinnare ABR, and INDIVIDUAL APPROVER is not null
             elsif (trim(non_multirow_rec.app_based_on_resp) = 'yes') and trim(lv_count)>0 and (TRIM(non_multirow_rec.response_approver) is not null) then
                    ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/maint_current_stage/text()','IA'); --write current stage as IA
                    ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/assignee/text()',non_multirow_rec.response_approver);
               --Assignment has to route through IA if "APP_BASED_ON_RESP(ABR)" is "no" and INDIVIDUAL APPROVER is not null     
             elsif (trim(non_multirow_rec.app_based_on_resp) <> 'yes') and (TRIM(non_multirow_rec.response_approver) is not null) then
                    ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/maint_current_stage/text()','IA'); --write current stage as IA
                    ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/assignee/text()',non_multirow_rec.response_approver); 
               -- If IA is not there and OVERALL APPROVER is not null then assignment will directly go to OVERALL APPROVER.
             elsif trim(lv_overall_approver) is not null then 
                    ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/maint_current_stage/text()','OA');
                    ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/assignee/text()',lv_overall_approver);
                    l_to_user := non_multirow_rec.response_approver;
             end if;

           ELSIF  LC_FROM_STAGE = 'APPROVE_RESPONSE' and LC_TO_STAGE ='APPROVE_RESPONSE' then -- APPROVE_RESPONSE to APPROVE_RESPONSE
            
                LV_TEMP_CONFIG_FLAG := MS_QSM_UTILITIES.GET_TAG_VALUE(L_OUT_XML,'datapacket/data/nonmultirow/temp_config_flag/text()');
                LV_RESPONSE_APPROVER  :=  MS_QSM_UTILITIES.GET_TAG_VALUE(L_OUT_XML,'datapacket/data/nonmultirow/response_approver/text()');   
                lV_APPROVED_USERS   :=   MS_QSM_UTILITIES.GET_TAG_VALUE(L_OUT_XML,'datapacket/data/nonmultirow/approval_pending_users/text()');

                SELECT DECODE(LV_APPROVED_USERS,'',NON_MULTIROW_REC.DD_CURRENT_USER_NAME,LV_APPROVED_USERS||','||NON_MULTIROW_REC.DD_CURRENT_USER_NAME)
                INTO LV_APPROVED_USERS
                FROM DUAL;
                
                SELECT COUNT(1),MS_CONCAT(COLUMN_VALUE)
                INTO LV_COUNT,lv_pending_approvers
                FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING(LV_RESPONSE_APPROVER,',')) A
                WHERE INSTR(','||LV_APPROVED_USERS||',',','||COLUMN_VALUE||',',1)<1;
               
            
                LV_REQ_ALL_USER_APPROVAL :=  SUBSTR(SUBSTR(LV_TEMP_CONFIG_FLAG,INSTR(LV_TEMP_CONFIG_FLAG,'"REQUIRE_ALL_USER_APPROVAL":',1)+29),1,
                                    (INSTR(SUBSTR(LV_TEMP_CONFIG_FLAG,INSTR(LV_TEMP_CONFIG_FLAG,'"REQUIRE_ALL_USER_APPROVAL":',1)+29),'"',1)-1));
            
                ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'APPROVE');
                ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'APPROVE');
                
                IF TRIM(LV_REQ_ALL_USER_APPROVAL) = '1' AND LV_COUNT > 0 THEN
                
                  MS_QSM_UTILITIES.UPDATE_XML (L_OUT_XML, 'datapacket/data/nonmultirow/maint_current_stage/text()','IA'); -- Writing OA to diffrentiate between IA(Individual Approver) and OA(Overall Approver)
                  MS_QSM_UTILITIES.UPDATE_XML (L_OUT_XML, 'datapacket/data/nonmultirow/assignee/text()',lv_pending_approvers); -- Assignee will be overall approver
                
                  ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/approval_pending_users/text()',lV_APPROVED_USERS);
                
                  L_FROM_USER :=  NON_MULTIROW_REC.RESPONDENT;
                  L_TO_USER := lv_pending_approvers;
                
                ELSE
                  
                  ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/maint_current_stage/text()','OA'); -- Writing OA to diffrentiate between IA(Individual Approver) and OA(Overall Approver)
                  MS_QSM_UTILITIES.UPDATE_XML (L_OUT_XML, 'datapacket/data/nonmultirow/assignee/text()',LV_OVERALL_APPROVER); -- Assignee will be overall approver
                
                  ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/approval_pending_users/text()',LV_RESPONSE_APPROVER);
                
                  l_from_user :=  non_multirow_rec.response_approver;
                  L_TO_USER := LV_OVERALL_APPROVER;
                  
                END IF;
                
            ELSIF LC_FROM_STAGE = 'QUESTNR_RESPONSE' and LC_TO_STAGE ='PUBLISH_RESPONSE' then -- Transition RESPONSE_TO_APPROVE
                               
                ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'RESPONSE');
                ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'PUBLISH');
                ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/responded_on/text()', TO_CHAR(SYSDATE,'MM/DD/YYYY HH24:MI:SS'));
                ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/resp_status/text()','6');                
                ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/collaborative_parameter/text()',non_multirow_rec.metric_id||'~'||non_multirow_rec.process_instance_id);--211573
                
            ELSIF LC_FROM_STAGE = 'APPROVE_RESPONSE' and LC_TO_STAGE ='QUESTNR_RESPONSE' then -- Transition APPROVE_TO_RESPONSE
                
                ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'APPROVE');
                ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'RESPONSE');
                -- Assigning to user and from use and will be using for MLS - GAPPLE Start
                l_to_user := non_multirow_rec.respondent;
                
                if TRIM(non_multirow_rec.maint_current_stage) = 'IA' THEN
                
                    L_FROM_USER:= NON_MULTIROW_REC.RESPONSE_APPROVER;
                    
                    ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/approval_pending_users/text()', '');
                
                ELSIF TRIM(non_multirow_rec.maint_current_stage) = 'OA' THEN
                
                    l_from_user:= lv_overall_approver;                    
                
                END IF;
                
               
            ELSIF LC_FROM_STAGE = 'APPROVE_RESPONSE' and LC_TO_STAGE ='PUBLISH_RESPONSE' then -- Transition RESPONSE_TO_APPROVE
                               
                ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/previous_stage/text()', 'APPROVE');
                ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/dd_current_stage/text()', 'PUBLISH');
                MS_QSM_UTILITIES. UPDATE_XML (L_OUT_XML,'datapacket/data/nonmultirow/resp_status/text()','9');
                -- ms_qsm_log_activity('','from APPROVE_RESPONSE to PUBLISH_RESPONSE~',l_out_xml.getclobval());
               
            END IF;
            
            if  (LC_FROM_STAGE = 'APPROVE_RESPONSE' and LC_TO_STAGE ='QUESTNR_RESPONSE') or  (LC_FROM_STAGE = 'QUESTNR_RESPONSE' and LC_TO_STAGE ='APPROVE_RESPONSE') or (LC_FROM_STAGE = 'APPROVE_RESPONSE' and LC_TO_STAGE ='APPROVE_RESPONSE') then
                            
                SELECT LOCALE_ID 
                INTO  l_en_locale
                FROM SI_LOCALES 
                WHERE LOCALE_STRING='en_US';
            
                BEGIN
                
                    SELECT LOCALE_ID 
                    INTO  l_to_locale
                    FROM SI_LOCALES 
                    WHERE LOCALE_STRING=(SELECT LOCALE FROM SI_USERS_T WHERE USER_NAME =l_to_user);
                    
                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        l_to_locale := l_en_locale;
                    
                END;    
                
                BEGIN
                
                    SELECT LOCALE_ID 
                    INTO  l_from_locale
                    FROM SI_LOCALES 
                    WHERE LOCALE_STRING=(SELECT LOCALE FROM SI_USERS_T WHERE USER_NAME =l_from_user);
                
                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        l_from_locale := l_en_locale;
                    
                END;  
                
                IF l_from_locale <> l_to_locale THEN
                
                    IF l_to_locale <> l_en_locale then
                   
                        FOR qstr IN (SELECT * FROM MS_QSM_QUESTIONNAIRE_TL_V WHERE internal_questnr_id =non_multirow_rec.questionnaire_id and locale_id=l_to_locale)
                        LOOP
                             ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/nonmultirow/instructions/text()',ms_qsm_utilities.fn_remove_html_tags(qstr.instructions_tl));
                             ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/nonmultirow/certification_text/text()',ms_qsm_utilities.fn_remove_html_tags(qstr.certification_text_tl));
                           
                        END LOOP;
                         
                       FOR sec IN (SELECT * FROM MS_QSM_SECTION_TL_V WHERE section_questnr_fk =non_multirow_rec.questionnaire_id and locale_id=l_to_locale)
                       LOOP
                                                                
                           ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/sec/row[section_id ='''||sec.section_id_pk||''']/section_name/text()', sec.section_name_tl);
                        
                       END LOOP;
                       
                     
                       FOR qst IN (SELECT * FROM ms_qsm_question_tl_v WHERE  QST_SECTION_ID in  --qst_section_fk
                                                        (select section_id_pk from ms_qsm_section_tl_v where section_questnr_fk =non_multirow_rec.questionnaire_id and locale_id=l_to_locale) and locale_id=l_to_locale)
                       LOOP  
                                                              
                           ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/qst/row[question_pk ='''||qst.qst_id_pk||''']/question_name/text()', qst.qst_name_tl);
                           ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/qst/row[question_pk ='''||qst.qst_id_pk||''']/question_description/text()',ms_qsm_utilities.fn_remove_html_tags(qst.qst_description_tl));
                           ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/qst/row[question_pk ='''||qst.qst_id_pk||''']/resp_action_plan/text()', qst.QST_ACTION_PLAN);
                       END LOOP;
                         
                       
                    ELSE
                    
                       FOR qstr IN (SELECT * FROM MS_QSM_QUESTIONNAIRE WHERE internal_questnr_id =non_multirow_rec.questionnaire_id)
                       LOOP
                                                          
                         ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/nonmultirow/instructions/text()',ms_qsm_utilities.fn_remove_html_tags(qstr.instructions));
                         ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/nonmultirow/certification_text/text()',ms_qsm_utilities.fn_remove_html_tags(qstr.certification_text));
                           
                       END LOOP;  
                      
                      
                       FOR sec IN (SELECT * FROM MS_QSM_SECTION WHERE section_questnr_fk =non_multirow_rec.questionnaire_id)
                       LOOP
                                                                
                           ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/sec/row[section_id ='''||sec.section_id_pk||''']/section_name/text()', sec.section_name);
                        
                       END LOOP;
                      
                      
                       FOR qst IN (SELECT * FROM ms_qsm_question WHERE  QST_SECTION_ID in  --qst_section_fk
                                                        (select section_id_pk from ms_qsm_section where section_questnr_fk =non_multirow_rec.questionnaire_id))
                       LOOP  
                                                              
                           ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/qst/row[question_pk ='''||qst.qst_id_pk||''']/question_name/text()', qst.qst_name);
                           ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/qst/row[question_pk ='''||qst.qst_id_pk||''']/question_description/text()', ms_qsm_utilities.fn_remove_html_tags(qst.qst_description)); 
                           --ms_qsm_utilities.update_xml(lx_resp_xml, 'datapacket/data/qst/row[question_pk ='''||qst.qst_id_pk||''']/qst_description/text()', qst.qst_list_of_values_tl);
                       END LOOP;               
                        
                    END IF;               
                    
                END IF;    
            
            END IF;
                     
               --Endded  MLS Change
            
            
            
            IF lc_to_stage ='PUBLISH_RESPONSE' THEN 
                
               
                IF non_multirow_rec.tmep_que_type='3' AND non_multirow_rec.certify_flag='1' THEN
                    
                    ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/resp_status/text()','7');
                    ms_qsm_log_activity ('', 'STAGE~ '||lc_to_stage||' TYPE '||non_multirow_rec.tmep_que_type||' FLAG '||non_multirow_rec.certify_flag, lt_out_data);
                                        
                ELSIF non_multirow_rec.tmep_que_type='3' AND non_multirow_rec.certify_flag='2' THEN
                    
                    ms_qsm_utilities. update_xml (l_out_xml,'datapacket/data/nonmultirow/resp_status/text()','8');
                    ms_qsm_log_activity ('', 'PUBLISH_RESPONSE2~ ', lt_out_data);
                    
                END IF;
                
                                
            
            END IF;
            
            
--             ms_qsm_log_activity ('', 'Score XML~ ', l_out_xml.getclobval());
             
            select scoring_flag 
            into l_scoring_flag
            from ms_qsm_questionnaire 
            WHERE INTERNAL_QUESTNR_ID= non_multirow_rec.questionnaire_id;
            
            IF l_scoring_flag='1' AND (NVL(ms_qsm_utilities.G_TBL_CONFIG_PARAMS('Score_Calculation_From_Backend'),'N')='Y' OR non_multirow_rec.response_upload ='Y') AND (l_action = 'TSK_CMPL' OR l_action = 'COLABORATE') THEN --lc_from_stage = 'QUESTNR_RESPONSE' AND lc_to_stage <> 'QUESTNR_RESPONSE' THEN
               
               BEGIN
    
                                                                                 
                   FOR SCORING_REC IN (SELECT  QUESTION_PK,QUESTION_SEC_ID,SCR_SCORE,QST_WEIGHTED_SCORE,
                   (SELECT GRD_GRADE
                                                                                            FROM XMLTABLE (
                                                                                             xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:grd/msa:row'
                                                                                             PASSING l_out_xml
                                                                                             COLUMNS grd_value_2    VARCHAR2 (100) PATH 'msa:grd_value_2' ,
                                                                                                            grd_value_1 NUMBER  PATH 'msa:grd_value_1',
                                                                                                            grd_scoring_rule    VARCHAR2(255) PATH 'msa:grd_scoring_rule',
                                                                                                            grd_grade    VARCHAR2(255) PATH 'msa:grd_grade')
                                                                          WHERE  (CASE WHEN grd_scoring_rule =1 AND  grd_value_1 = tot_qst_weighted_score THEN 1 END)=1
                                                                                  OR (CASE WHEN grd_scoring_rule =2 AND tot_qst_weighted_score > nvl(grd_value_1,0) THEN 1 END)=1
                                                                                  OR (CASE WHEN GRD_SCORING_RULE =3 AND TOT_QST_WEIGHTED_SCORE < NVL(GRD_VALUE_1,0)  THEN 1 END)=1
                                                                                  OR (CASE WHEN GRD_SCORING_RULE =4 AND TOT_QST_WEIGHTED_SCORE BETWEEN NVL(GRD_VALUE_1,0) AND NVL(GRD_VALUE_2,0) THEN 1 END)=1) GRD_GRADE,
                                                                                  ROUND(((tot_qst_weighted_score * section_weightage)*(l_total_section_weightage/100)/100),2) section_weighted_score,scr_grade
                                            from (select question_pk,question_sec_id,scr_grade,scr_score,qst_weighted_score,sum(qst_weighted_score) OVER (PARTITION BY question_sec_id)tot_qst_weighted_score,l_total_section_weightage,section_weightage
                                                  from (select question_pk,question_sec_id,min(scr_grade)scr_grade,l_total_section_weightage,section_weightage,
                                                        decode(mlov_scoring,'1',max(nvl2((case when scr_scoring_rule =1 and (((case when response_type in ('1','3') then scr_value_1 
                                                                        when response_type in ('6','7','10') then scr_value_1_1 end)=l_resp_val) or ((response_type ='4' or response_type ='11') and instr(','||l_resp_val||',',','||scr_value_1_1||',',1,1)>0)) then 1 
                                                                        when response_type in ('6','7','10') then scr_value_1_1 end)=l_resp_val) or ((response_type ='4' or response_type ='11') and instr(','||l_resp_val||',',','||scr_value_1_1||',',1,1)>0)) then 1 
                                                                        WHEN response_type IN ('6','7','10') THEN scr_value_1_1 END)=l_resp_val) OR ((response_type ='4' OR response_type ='11') AND instr(','||l_resp_val||',',','||scr_value_1_1||',',1,1)>0)) THEN 1 
                                                                        WHEN response_type IN ('6','7','10') THEN scr_value_1_1 END)=l_resp_val) OR ((response_type ='4' OR response_type ='11') AND instr(','||l_resp_val||',',','||scr_value_1_1||',',1,1)>0)) THEN 1 
                                                        from  
                                                            (select  question_pk,response_type,resp_score,default_score,qst_weightage,qst_optional,question_sec_id,mlov_scoring,
                                                              resp_number,resp_radio,resp_mlov,resp_dd,resp_radio_b,checkbox_hidden_value, SUM(qst_weightage) OVER (PARTITION BY question_sec_id) l_qst_toatl_wtge,
                                                              CASE WHEN response_type in ('1','3') THEN
                                                                      resp_number
                                                                   WHEN response_type = '4' THEN
                                                                      resp_mlov
                                                                   when response_type = '6' then
                                                                      resp_radio
                                                                  WHEN response_type = '7' THEN
                                                                      resp_dd
                                                                  when response_type = '10' then
                                                                      resp_radio_b    
                                                                  when response_type = '11' then
                                                                      checkbox_hidden_value                                                                 
                                                                  ELSE
                                                                    null
                                                                  END l_resp_val
                                                              FROM XMLTABLE (xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:qst/msa:row'
                                                                   passing l_out_xml
                                                                   COLUMNS question_pk    VARCHAR2 (100) PATH 'msa:question_pk',
                                                                           response_type NUMBER  PATH 'msa:response_type',
                                                                           resp_score VARCHAR2(255) PATH 'msa:resp_score',
                                                                           default_score NUMBER PATH 'msa:default_score',
                                                                           qst_weightage NUMBER PATH 'msa:qst_weightage',
                                                                           qst_optional VARCHAR2(10) PATH 'msa:qst_optional',
                                                                           question_sec_id  VARCHAR2(255) PATH 'msa:question_sec_id',
                                                                           resp_number varchar2(4000) PATH 'msa:resp_number',
                                                                           resp_radio VARCHAR2(4000) PATH 'msa:resp_radio',
                                                                           resp_mlov VARCHAR2(4000) PATH 'msa:resp_mlov',
                                                                           resp_dd varchar2(4000) path 'msa:resp_dd',
                                                                           mlov_scoring varchar2(4000) path 'msa:qst_mlov_scoring',
                                                                           resp_radio_b varchar2(4000) path 'msa:resp_radio_b',
                                                                           checkbox_hidden_value varchar2(4000) path 'msa:checkbox_hidden_value'
                                                                   )WHERE response_type IN ('1','3','4','6','7','10','11')) QUESTION_TAB,
                                                            (SELECT scr_qst_fk,nvl(scr_value_1,'0')scr_value_1,nvl(scr_value_2,'0')scr_value_2,scr_grade,scr_score,scr_scoring_rule,nvl(scr_value_1_1,'')scr_value_1_1
                                                              FROM XMLTABLE (
                                                                             xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:scr/msa:row'
                                                                             PASSING l_out_xml
                                                                             COLUMNS scr_qst_fk    VARCHAR2 (100) PATH 'msa:scr_qst_fk',
                                                                                    scr_value_1 VARCHAR2(255) PATH 'msa:scr_value_1' ,
                                                                                    scr_value_2 VARCHAR2(255) PATH 'msa:scr_value_2',
                                                                                    scr_grade VARCHAR2(255) PATH 'msa:scr_grade',
                                                                                    scr_score VARCHAR2(255) PATH 'msa:scr_score',
                                                                                    scr_scoring_rule VARCHAR2(255) PATH 'msa:scr_scoring_rule',
                                                                                    scr_value_1_1 VARCHAR2(255) PATH 'msa:scr_value_1_1')
                                                                                    ) QST_SCORE_TAB,
                                                            (SELECT section_id,section_weightage,optional_section,SUM(section_weightage) OVER () l_total_section_weightage
                                                              FROM XMLTABLE (
                                                                            xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:sec/msa:row'
                                                                            PASSING l_out_xml
                                                                            COLUMNS section_id    VARCHAR2 (100) PATH 'msa:section_id',
                                                                                    section_weightage    NUMBER  PATH 'msa:section_weightage',
                                                                                    optional_section VARCHAR2(255) PATH  'msa:optional_section' )) SECTION_TAB                            
                                                            WHERE QUESTION_TAB.question_sec_id = SECTION_TAB.section_id
                                                            and question_tab.question_pk= qst_score_tab.scr_qst_fk(+)             
                                                            and ((scr_qst_fk is null and default_score is not null) or (case when scr_scoring_rule =1 and (((case when response_type in ('1','3') then scr_value_1 
                                                                        WHEN response_type IN ('6','7','10') THEN scr_value_1_1 END)=l_resp_val) OR ((response_type ='4' OR response_type ='11')  AND instr(','||l_resp_val||',',','||scr_value_1_1||',',1,1)>0)) THEN 1 END)=1
                                                                          group by question_pk,question_sec_id,l_total_section_weightage,section_weightage,mlov_scoring ) a
                                                            ) QST_OUTER_TAB
                                                                          order by question_sec_id ) 
                   loop                          
                                     
                                     
                      
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/qst/row[question_pk =''' ||scoring_rec.question_pk||''']/resp_score/text()',trim(to_char(scoring_rec.scr_score,'999999999999D99')));                                
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/qst/row[question_pk =''' || scoring_rec.question_pk||''']/resp_weighted_score/text()',trim(to_char(scoring_rec.qst_weighted_score,'999999999999D99')));                         
                      ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/qst/row[question_pk =''' || scoring_rec.question_pk||''']/resp_grade/text()',scoring_rec.scr_grade);                             
                                               
                                          
                                          
                      if l_sec_id <> scoring_rec.question_sec_id THEN
                        
                        ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/sec/row[section_id =''' || scoring_rec.question_sec_id||''']/weighted_score/text()',trim(to_char(scoring_rec.section_weighted_score,'999999999999D99')));                             
                        
                        ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/sec/row[section_id =''' || scoring_rec.question_sec_id||''']/sec_grade/text()',scoring_rec.grd_grade);     
                        
                        l_sec_id := scoring_rec.question_sec_id;
                        
                        l_overall_score := l_overall_score + scoring_rec.section_weighted_score;
                      
                      end if;
                                          
                    end LOOP;     
                          
                    begin
                    
                         ms_qsm_utilities.update_xml (l_out_xml,'datapacket/data/nonmultirow/overall_score/text()',trim(to_char(l_overall_score,'999999999999D99')));                               
                         
                         SELECT grd_grade
                         INTO l_overall_grade
                         FROM XMLTABLE (
                         xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:grd/msa:row'
                         PASSING l_out_xml
                         COLUMNS grd_value_2    VARCHAR2 (100) PATH 'msa:grd_value_2' ,
                                        grd_value_1 NUMBER  PATH 'msa:grd_value_1',
                                        grd_scoring_rule    VARCHAR2(255) PATH 'msa:grd_scoring_rule',
                                        GRD_GRADE    varchar2(255) PATH 'msa:grd_grade')
                         WHERE ((CASE WHEN grd_scoring_rule =1 AND  grd_value_1 = l_overall_score THEN 1 END)=1
                                OR (CASE WHEN grd_scoring_rule =2 AND l_overall_score > nvl(grd_value_1,0) THEN 1 END)=1
                                or (case when GRD_SCORING_RULE =3 and L_OVERALL_SCORE < NVL(GRD_VALUE_1,0)  then 1 end)=1
                                or (case when GRD_SCORING_RULE =4 and L_OVERALL_SCORE between NVL(GRD_VALUE_1,0) and NVL(GRD_VALUE_2,0) then 1 end)=1)
                          AND ROWNUM <=1 ;
                                
                                
                          ms_qsm_utilities.update_xml (l_out_xml,'datapacket/data/nonmultirow/overall_grade/text()',l_overall_grade); 
                      exception
                        when others then 
                          null;
                      end;    
                                  
              EXCEPTION
              WHEN OTHERS THEN  
                 ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                   pn_error_sequence    => xn_error_seq,
                                   pc_error_type        => 'E',
                                   pc_error_text        => 'Fatal Error in the SCORE_CALC ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);         
               -- RAISE;                     
              END ;
    
           END IF; 
                                   
           MS_QSM_UTILITIES.UPDATE_INOUT_DATA(l_out_xml,lt_in_data,lt_out_data);
 
            --if non_multirow_rec.action_comments is not null then 
            ms_qsm_utilities.insert_comments (non_multirow_rec.temp_pk_id, --non_multirow_rec.process_instance_id,
                                                    non_multirow_rec.instance_id,
                                                    non_multirow_rec.metric_id,
                                                    non_multirow_rec.dd_current_user_name,
                                                    ms_apps_utilities.get_user_full_name (non_multirow_rec.dd_current_user_name),
                                                    'RESPONSE_COMMENTS',
                                                    non_multirow_rec.action_comments,
                                                    l_error_code,
                                                    l_error_message);
             
           --End if;
                     
           
           if LC_FROM_STAGE = 'QUESTNR_RESPONSE' and LC_TO_STAGE <>'QUESTNR_RESPONSE' AND NVL(NON_MULTIROW_REC.RESPONSE_UPLOAD,'N') ='N' THEN
                            
              update MS_QSM_EXCEL_SURVEY_STATUS
              set UPLOAD_STATUS='R' -- Online Responded
              WHERE QUE_RESPONSE_ID = non_multirow_rec.que_response_id;
            
            ELSIF LC_FROM_STAGE = 'QUESTNR_RESPONSE' and LC_TO_STAGE = 'QUESTNR_RESPONSE' and NVL(NON_MULTIROW_REC.RESPONSE_UPLOAD,'N')='N' and L_ACTION ='COLABORATE' THEN 
                                   
              update MS_QSM_EXCEL_SURVEY_STATUS
              set UPLOAD_STATUS='C' -- Collaborated
              WHERE QUE_RESPONSE_ID = non_multirow_rec.que_response_id;
            
            END IF;
                                                    
            IF lc_to_stage ='PUBLISH_RESPONSE' THEN
                
          
               SELECT COUNT(1)
               INTO l_issues_count
               FROM MS_QSM_FINDING_ISSUES A, MS_QSM_RESP_ISSUE B
               WHERE QUE_RESPONSE_ID =non_multirow_rec.que_response_id
               AND A.DD_PROCESS_INSTANCE_ID = non_multirow_rec.reference_proc_id
               AND A.QUE_RESPONSE_ID = B.FINDING_FK
               AND ISSUE_DISPOSITION = '1';
                          
                IF  l_issues_count >0 THEN
                                                                   
                     MS_QSM_TRIGGER_FINDINGS (ip_in_response_id  => non_multirow_rec.que_response_id,
                                                                  ip_test_execution_id =>non_multirow_rec.que_request_id,
                                                                 ip_in_pid=>non_multirow_rec.reference_proc_id);    
                          
                END IF;  
                
          
                
MS_QSM_QUESTNR_RESP_DUP_P.CALL_ETL(iop_xml_data => lt_out_data,
                                    iop_log_no => ln_log_no,
                                    op_error_code =>l_error_code,
                                    op_error_message =>l_error_message,
                                    iop_error_seq =>xn_error_code,
                                    ip_pid => non_multirow_rec.process_instance_id)  ;    
  
--                MS_QSM_ENGINE.RESPONSE_CALL_ETL(iop_xml_data => lt_out_data,
--                                iop_log_no => ln_log_no,
--                                op_error_code =>l_error_code,
--                                op_error_message =>l_error_message,
--                                iop_error_seq =>xn_error_code,
--                                ip_pid => non_multirow_rec.process_instance_id)  ;      
--                
            END IF;
            
        END LOOP;      
        
     
    EXCEPTION
        WHEN OTHERS THEN
            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                     pn_error_sequence    => xn_error_seq,
                     pc_error_type        => 'E',
                     pc_error_text        => 'Fatal Error in the ms_QSM_RNIQSM_RNIQSM_PROD ' || DBMS_UTILITY.format_error_backtrace || ' ~ ' || SQLERRM);         
    END; 
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_RESSPR_RESSPR_PROD" (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN OUT CLOB,
                                                                       lt_out_data          IN OUT CLOB,
                                                                       pc_process_code      IN     VARCHAR2,
                                                                       lc_from_stage        IN     VARCHAR2,
                                                                       lc_to_stage          IN     VARCHAR2,
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
                        AS
                        
                        l_out_xml                                   XMLTYPE:=NULL; 
                        l_spreadsheet_id                        VARCHAR2(100);
                        l_internal_spreadsheet_id            VARCHAR2(100);
                        ln_new_pid                                NUMBER;
                        ln_new_iid                                 NUMBER;
                        l_metric_id                                 NUMBER;
                        l_error_message                        VARCHAR2(4000);
                        l_test_log_no                           NUMBER;
                        l_test_log_msg                          VARCHAR2(4000);
                        l_lov_delimeter                         VARCHAR2(100);
                        l_version                               VARCHAR2(100);
                        l_created_by                            NUMBER;
                               
                        BEGIN
                          
                          L_OUT_XML := xmltype (LT_IN_DATA);
                                    
                        IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0)  THEN
                            ms_qsm_utilities.initialize_metric_maint ('QSM');
                        END IF;
                        
                        
                        FOR clm_rec
                          IN ( SELECT data_id_pk,instance_rec_num
                          FROM XMLTABLE (
                               xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:clm/msa:row'
                               PASSING l_out_xml
                              COLUMNS data_id_pk    VARCHAR2 (100) PATH 'msa:data_id_pk',
                              instance_rec_num    NUMBER  PATH 'msa:instance_rec_num')
                              WHERE trim(data_id_pk) IS NULL)
                        LOOP
                        
                          MS_QSM_UTILITIES.update_xml (l_out_xml, 'datapacket/data/clm/row[instance_rec_num =' || clm_rec.instance_rec_num|| ']/data_id_pk/text()',  'DATA-'||clm_rec.instance_rec_num);
                        
                        END LOOP;
                        
                        MS_QSM_LOG_ACTIVITY ('', 'Final', L_OUT_XML.GETCLOBVAL());
                                    
                        MS_QSM_UTILITIES.UPDATE_INOUT_DATA(l_out_xml,lt_in_data,lt_out_data);      
                                   
                                                                                    
                        EXCEPTION
                            WHEN OTHERS THEN
                                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                         pn_error_sequence    => xn_error_seq,
                                         pc_error_type        => 'E',
                                         pc_error_text        => 'Fatal Error in the ms_QSM_RESSPR_RESSPR_PROD ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);                                      
                                    
                        END; 
  
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_RESUPL_RESUPL_PROD" (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN OUT CLOB,
                                                                       lt_out_data          IN OUT CLOB,
                                                                       pc_process_code      IN     VARCHAR2,
                                                                       lc_from_stage        IN     VARCHAR2,
                                                                       lc_to_stage          IN     VARCHAR2,
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
                        AS
                        
                        l_out_xml                                   XMLTYPE:=NULL; 
                        l_error_message                        VARCHAR2(4000);
                               
                        BEGIN
                          
                          l_out_xml := xmltype (lt_in_data);
                                    
                        IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0)  THEN
                            ms_qsm_utilities.initialize_metric_maint ('QSM');
                        END IF;
                        
                        
                        for clm_rec
                          IN ( SELECT upload_id_pk,instance_rec_num
                          FROM XMLTABLE (
                               xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:nonmultirow'
                               PASSING l_out_xml
                              COLUMNS upload_id_pk    VARCHAR2 (100) PATH 'msa:upload_id_pk',
                              instance_rec_num    number  path 'msa:instance_rec_num')
                              WHERE trim(upload_id_pk) IS NULL)
                        LOOP
                        
                          ms_qsm_utilities.update_xml (l_out_xml, 'datapacket/data/nonmultirow/upload_id_pk/text()',  'UPOLOAD-'||ms_qsm_resp_upload_id_s.nextval);
                          MS_QSM_UTILITIES.update_xml (l_out_xml, 'datapacket/data/nonmultirow/status/text()','P');
                        END LOOP;
                        
                        ms_qsm_log_activity ('', 'Final', l_out_xml.getclobval());
                                    
                        MS_QSM_UTILITIES.UPDATE_INOUT_DATA(l_out_xml,lt_in_data,lt_out_data);      
                                   
                                                                                    
                        EXCEPTION
                            WHEN OTHERS THEN
                                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                         pn_error_sequence    => xn_error_seq,
                                         pc_error_type        => 'E',
                                         pc_error_text        => 'Fatal Error in the ms_QSM_RESUPL_RESUPL_PROD ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);                                      
                                    
                        END; 
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_ROUTER_MS_QSM_CREA_PROD" (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN OUT CLOB,
                                                                       lt_out_data          IN OUT CLOB,
                                                                       pc_process_code      IN     VARCHAR2,
                                                                       lc_from_stage        IN     VARCHAR2,
                                                                       lc_to_stage          IN     VARCHAR2,
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
                        AS
                        l_out_xml              XMLTYPE := NULL;
                        l_to_dd_object_type    VARCHAR2 (100);
                        l_frm_dd_object_type   VARCHAR2 (100);
                        l_dd_process_code      VARCHAR2 (1000);
                        l_blueprint_code         VARCHAR2(1000);
                        BEGIN
                               
                               l_out_xml :=xmltype(lt_in_data);
                               
                                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                pn_error_sequence    => xn_error_seq,
                                pc_error_type        => 'I',
                                pc_error_text        => 'Inside ms_QSM_router_MS_QSM_CREA_PROD ');
                               
                               l_dd_process_code := ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/dd_process_code');   
                              SELECT object_name
        INTO l_to_dd_object_type
        FROM (       SELECT to_code, object_name, view_name
                       FROM XMLTABLE (
                               xmlnamespaces ('http://www.metricstream.com/appstudio/mdf' AS "mdf"), 'mdf:process/mdf:stages/mdf:stage'
                               PASSING (SELECT xmltype (flow_xml)
                                          FROM ms_apps_mdf_flow_xml
                                         WHERE flow_code = l_dd_process_code)
                               COLUMNS to_code       VARCHAR2 (100) PATH 'mdf:code',
                                       object_name   VARCHAR2 (100) PATH 'mdf:object',
                                       view_name     VARCHAR2 (100) PATH 'mdf:view'))
       WHERE UPPER (to_code) = UPPER (lc_to_stage);

      SELECT object_name
        INTO l_frm_dd_object_type
        FROM (       SELECT to_code, object_name, view_name
                       FROM XMLTABLE (
                               xmlnamespaces ('http://www.metricstream.com/appstudio/mdf' AS "mdf"), 'mdf:process/mdf:stages/mdf:stage'
                               PASSING (SELECT xmltype (flow_xml)
                                          FROM ms_apps_mdf_flow_xml
                                         WHERE flow_code = l_dd_process_code)
                               COLUMNS to_code       VARCHAR2 (100) PATH 'mdf:code',
                                       object_name   VARCHAR2 (100) PATH 'mdf:object',
                                       view_name     VARCHAR2 (100) PATH 'mdf:view'))
       WHERE UPPER (to_code) = UPPER (lc_from_stage);
              IF upper(l_frm_dd_object_type) ='MS_QSM_CREATE_QUESTNR' AND upper(l_to_dd_object_type) = 'MS_QSM_CREATE_QUESTNR' THEN 
                                execute immediate'BEGIN ms_QSM_CREQSM_CREQSM_PROD(:1,:2,:3,:4,:5,:6,:7,:8,:9) ; END;'
                               Using lt_in_data_orig, IN OUT lt_in_data ,IN OUT lt_out_data ,pc_process_code,lc_from_stage,lc_to_stage,IN OUT xn_error_handle_id ,IN OUT xn_error_seq ,OUT xn_error_code;
                                 END IF;
END; 
 
  
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_ROUTER_MS_QSM_INIT_PROD" (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN OUT CLOB,
                                                                       lt_out_data          IN OUT CLOB,
                                                                       pc_process_code      IN     VARCHAR2,
                                                                       lc_from_stage        IN     VARCHAR2,
                                                                       lc_to_stage          IN     VARCHAR2,
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
                        AS
                        l_out_xml              XMLTYPE := NULL;
                        l_to_dd_object_type    VARCHAR2 (100);
                        l_frm_dd_object_type   VARCHAR2 (100);
                        l_dd_process_code      VARCHAR2 (1000);
                        l_blueprint_code         VARCHAR2(1000);
                        BEGIN
                                NULL;
                               l_out_xml :=xmltype(lt_in_data);
                               l_dd_process_code := ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/dd_process_code');   
                              SELECT object_name
        INTO l_to_dd_object_type
        FROM (       SELECT to_code, object_name, view_name
                       FROM XMLTABLE (
                               xmlnamespaces ('http://www.metricstream.com/appstudio/mdf' AS "mdf"), 'mdf:process/mdf:stages/mdf:stage'
                               PASSING (SELECT xmltype (flow_xml)
                                          FROM ms_apps_mdf_flow_xml
                                         WHERE flow_code = l_dd_process_code)
                               COLUMNS to_code       VARCHAR2 (100) PATH 'mdf:code',
                                       object_name   VARCHAR2 (100) PATH 'mdf:object',
                                       view_name     VARCHAR2 (100) PATH 'mdf:view'))
       WHERE UPPER (to_code) = UPPER (lc_to_stage);

      SELECT object_name
        INTO l_frm_dd_object_type
        FROM (       SELECT to_code, object_name, view_name
                       FROM XMLTABLE (
                               xmlnamespaces ('http://www.metricstream.com/appstudio/mdf' AS "mdf"), 'mdf:process/mdf:stages/mdf:stage'
                               PASSING (SELECT xmltype (flow_xml)
                                          FROM ms_apps_mdf_flow_xml
                                         WHERE flow_code = l_dd_process_code)
                               COLUMNS to_code       VARCHAR2 (100) PATH 'mdf:code',
                                       object_name   VARCHAR2 (100) PATH 'mdf:object',
                                       view_name     VARCHAR2 (100) PATH 'mdf:view'))
       WHERE UPPER (to_code) = UPPER (lc_from_stage);
              IF upper(l_frm_dd_object_type) ='MS_QSM_INITIATE_QUESTNR' AND upper(l_to_dd_object_type) = 'MS_QSM_INITIATE_QUESTNR' THEN 
                                execute immediate'BEGIN ms_QSM_INIQSM_INIQSM_PROD(:1,:2,:3,:4,:5,:6,:7,:8,:9) ; END;'
                               Using lt_in_data_orig, IN OUT lt_in_data ,IN OUT lt_out_data ,pc_process_code,lc_from_stage,lc_to_stage,IN OUT xn_error_handle_id ,IN OUT xn_error_seq ,OUT xn_error_code;
                                 END IF;
END; 
 
  
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_ROUTER_MS_QSM_MAST_PROD" (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN OUT CLOB,
                                                                       lt_out_data          IN OUT CLOB,
                                                                       pc_process_code      IN     VARCHAR2,
                                                                       lc_from_stage        IN     VARCHAR2,
                                                                       lc_to_stage          IN     VARCHAR2,
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
                        AS
                        l_out_xml              XMLTYPE := NULL;
                        l_to_dd_object_type    VARCHAR2 (100);
                        l_frm_dd_object_type   VARCHAR2 (100);
                        l_dd_process_code      VARCHAR2 (1000);
                        l_blueprint_code         VARCHAR2(1000);
                        BEGIN
                                NULL;
                               l_out_xml :=xmltype(lt_in_data);
                               l_dd_process_code := ms_QSM_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/dd_process_code');   
                              SELECT object_name
        INTO l_to_dd_object_type
        FROM (       SELECT to_code, object_name, view_name
                       FROM XMLTABLE (
                               xmlnamespaces ('http://www.metricstream.com/appstudio/mdf' AS "mdf"), 'mdf:process/mdf:stages/mdf:stage'
                               PASSING (SELECT xmltype (flow_xml)
                                          FROM ms_apps_mdf_flow_xml
                                         WHERE flow_code = l_dd_process_code)
                               COLUMNS to_code       VARCHAR2 (100) PATH 'mdf:code',
                                       object_name   VARCHAR2 (100) PATH 'mdf:object',
                                       view_name     VARCHAR2 (100) PATH 'mdf:view'))
       WHERE UPPER (to_code) = UPPER (lc_to_stage);

      SELECT object_name
        INTO l_frm_dd_object_type
        FROM (       SELECT to_code, object_name, view_name
                       FROM XMLTABLE (
                               xmlnamespaces ('http://www.metricstream.com/appstudio/mdf' AS "mdf"), 'mdf:process/mdf:stages/mdf:stage'
                               PASSING (SELECT xmltype (flow_xml)
                                          FROM ms_apps_mdf_flow_xml
                                         WHERE flow_code = l_dd_process_code)
                               COLUMNS to_code       VARCHAR2 (100) PATH 'mdf:code',
                                       object_name   VARCHAR2 (100) PATH 'mdf:object',
                                       view_name     VARCHAR2 (100) PATH 'mdf:view'))
       WHERE UPPER (to_code) = UPPER (lc_from_stage);
              IF upper(l_frm_dd_object_type) ='MS_QSM_SPREADSHEET' AND upper(l_to_dd_object_type) = 'MS_QSM_SPREADSHEET' THEN 
                                execute immediate'BEGIN ms_QSM_SPRSHT_SPRSHT_PROD(:1,:2,:3,:4,:5,:6,:7,:8,:9) ; END;'
                               Using lt_in_data_orig, IN OUT lt_in_data ,IN OUT lt_out_data ,pc_process_code,lc_from_stage,lc_to_stage,IN OUT xn_error_handle_id ,IN OUT xn_error_seq ,OUT xn_error_code;

              END IF;
              
              
              
END;
  
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_ROUTER_MS_QSM_RESP_PROD" (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN OUT CLOB,
                                                                       lt_out_data          IN OUT CLOB,
                                                                       pc_process_code      IN     VARCHAR2,
                                                                       lc_from_stage        IN     VARCHAR2,
                                                                       lc_to_stage          IN     VARCHAR2,
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
                        AS
                        l_out_xml              XMLTYPE := NULL;
                        l_to_dd_object_type    VARCHAR2 (100);
                        l_frm_dd_object_type   VARCHAR2 (100);
                        l_dd_process_code      VARCHAR2 (1000);
                        l_blueprint_code         VARCHAR2(1000);
                        BEGIN
                                NULL;
                               l_out_xml :=xmltype(lt_in_data);
                               l_dd_process_code := ms_qsm_utilities.get_tag_value (l_out_xml, '/datapacket/data/nonmultirow/dd_process_code');   

--                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
--                    pn_error_sequence    => xn_error_seq,
--                    pc_error_type        => 'E',
--                    pc_error_text        => 'STAGES'||l_dd_process_code||':'||lc_from_stage||':'||lc_to_stage);
                               
                               
                              SELECT object_name
        INTO l_to_dd_object_type
        FROM (       SELECT to_code, object_name, view_name
                       FROM XMLTABLE (
                               xmlnamespaces ('http://www.metricstream.com/appstudio/mdf' AS "mdf"), 'mdf:process/mdf:stages/mdf:stage'
                               PASSING (SELECT xmltype (flow_xml)
                                          FROM ms_apps_mdf_flow_xml
                                         WHERE flow_code = l_dd_process_code)
                               COLUMNS to_code       VARCHAR2 (100) PATH 'mdf:code',
                                       object_name   VARCHAR2 (100) PATH 'mdf:object',
                                       view_name     VARCHAR2 (100) PATH 'mdf:view'))
       WHERE UPPER (to_code) = UPPER (lc_to_stage);

      SELECT object_name
        INTO l_frm_dd_object_type
        FROM (       SELECT to_code, object_name, view_name
                       FROM XMLTABLE (
                               xmlnamespaces ('http://www.metricstream.com/appstudio/mdf' AS "mdf"), 'mdf:process/mdf:stages/mdf:stage'
                               PASSING (SELECT xmltype (flow_xml)
                                          FROM ms_apps_mdf_flow_xml
                                         WHERE flow_code = l_dd_process_code)
                               COLUMNS to_code       VARCHAR2 (100) PATH 'mdf:code',
                                       object_name   VARCHAR2 (100) PATH 'mdf:object',
                                       view_name     VARCHAR2 (100) PATH 'mdf:view'))
       WHERE UPPER (to_code) = UPPER (lc_from_stage);
              IF upper(l_frm_dd_object_type) ='MS_QSM_QUESTNR_RESP_DUP' AND upper(l_to_dd_object_type) = 'MS_QSM_QUESTNR_RESP_DUP' THEN 
--              IF upper(l_frm_dd_object_type) ='MS_QSM_QUESTNR_RESPONSE' AND upper(l_to_dd_object_type) = 'MS_QSM_QUESTNR_RESPONSE' THEN               
                                execute immediate'BEGIN ms_QSM_RESQSM_RESQSM_PROD(:1,:2,:3,:4,:5,:6,:7,:8,:9) ; END;'
                               Using lt_in_data_orig, IN OUT lt_in_data ,IN OUT lt_out_data ,pc_process_code,lc_from_stage,lc_to_stage,IN OUT xn_error_handle_id ,IN OUT xn_error_seq ,OUT xn_error_code;
                               
             ELSIF upper(l_frm_dd_object_type) ='MS_QSM_RESP_COMMETNS' AND upper(l_to_dd_object_type) = 'MS_QSM_RESP_COMMETNS' THEN 
                                execute immediate'BEGIN ms_QSM_QSMRTF_QSMRTF_PROD(:1,:2,:3,:4,:5,:6,:7,:8,:9) ; END;'
                               Using lt_in_data_orig, IN OUT lt_in_data ,IN OUT lt_out_data ,pc_process_code,lc_from_stage,lc_to_stage,IN OUT xn_error_handle_id ,IN OUT xn_error_seq ,OUT xn_error_code;
             ELSIF upper(l_frm_dd_object_type) ='MS_QSM_FINDING_ISSUES_NEW' AND upper(l_to_dd_object_type) = 'MS_QSM_FINDING_ISSUES_NEW' THEN 
                                execute immediate'BEGIN ms_QSM_QSMFND_QSMFND_PROD(:1,:2,:3,:4,:5,:6,:7,:8,:9) ; END;'
                               Using lt_in_data_orig, IN OUT lt_in_data ,IN OUT lt_out_data ,pc_process_code,lc_from_stage,lc_to_stage,IN OUT xn_error_handle_id ,IN OUT xn_error_seq ,OUT xn_error_code;
             ELSIF upper(l_frm_dd_object_type) ='MS_QSM_RESPONSE_SPREADSHEET' AND upper(l_to_dd_object_type) = 'MS_QSM_RESPONSE_SPREADSHEET' THEN 
                                execute immediate'BEGIN ms_QSM_RESSPR_RESSPR_PROD(:1,:2,:3,:4,:5,:6,:7,:8,:9) ; END;'
                               using lt_in_data_orig, in out lt_in_data ,in out lt_out_data ,pc_process_code,lc_from_stage,lc_to_stage,in out xn_error_handle_id ,in out xn_error_seq ,out xn_error_code;                                 
             elsif upper(l_frm_dd_object_type) ='MS_QSM_RESP_UPLOAD' and upper(l_to_dd_object_type) = 'MS_QSM_RESP_UPLOAD' then 
                                execute immediate'BEGIN ms_QSM_RESUPL_RESUPL_PROD(:1,:2,:3,:4,:5,:6,:7,:8,:9) ; END;'
                               Using lt_in_data_orig, IN OUT lt_in_data ,IN OUT lt_out_data ,pc_process_code,lc_from_stage,lc_to_stage,IN OUT xn_error_handle_id ,IN OUT xn_error_seq ,OUT xn_error_code;                                 
             
             END IF;
END; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_RPT_UTIL" AS
  FUNCTION GET_URL( IP_OBJECT_TYPE VARCHAR2,
                    IP_PID NUMBER, 
                    IP_NAME VARCHAR2) 
  RETURN VARCHAR2;
  FUNCTION GET_EDIT_URL( IP_OBJECT_TYPE VARCHAR2,
                    IP_STR VARCHAR2, 
                    IP_NAME VARCHAR2) 
  RETURN VARCHAR2;
  FUNCTION get_display_value( p_login_id     IN  VARCHAR2
                            , p_lov_name     IN  VARCHAR2
                            , p_stored_value IN  VARCHAR2
                            , p_object_type  IN  VARCHAR2
                            )
  return varchar2;


  function get_applies_to_display_value( p_login_id     in  varchar2
                                        , p_stored_value IN  VARCHAR2
                                        )
  RETURN VARCHAR2;  

  FUNCTION get_resp_status_display_value( p_login_id     IN  VARCHAR2
                                        , p_stored_value IN  VARCHAR2
                                        )
  RETURN VARCHAR2;   
  
 FUNCTION GET_ISSUE_COUNT (
       p_issue_status_type   VARCHAR2                   -- ALL , OPEN , OVERDUE
      ,p_source_type         varchar2
      ,p_source_id           VARCHAR2 
      ,p_org_id              VARCHAR2 DEFAULT NULL
   )
  RETURN VARCHAR2;
  
FUNCTION GET_PRINT_URL( RESPONSE_ID VARCHAR2) 
  RETURN VARCHAR2;
 
FUNCTION GET_FINDINGS_COUNT(P_SOURCE_ID VARCHAR2,
                             P_QUE_RESPONSE_ID VARCHAR2, 
                             P_NO_OF_FINDINGS NUMBER)
 RETURN NUMBER;                    
END; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_RPT_UTIL" as
  FUNCTION GET_QUESTNR_REINIT_PID(IP_PID NUMBER)
    RETURN NUMBER IS 
        REINT_PID NUMBER;
        l_cnt   NUMBER;
        l_new_pid NUMBER;
        l_que_id VARCHAR2(255);
        l_version_number  VARCHAR2(255);
        l_expired_flag BOOLEAN := false;
    BEGIN
        
        BEGIN
        
          SELECT CONFIG_FLAG,QUE_ID,VERSION_NUMBER
          INTO l_new_pid,l_que_id,l_version_number
          FROM MS_QSM_QUESTIONNAIRE 
          WHERE DD_PROCESS_INSTANCE_ID=IP_PID
          --and TRUNC(NVL(VALID_UNTILL,SYSDATE)) <= TRUNC(SYSDATE); CHANGED THE CONDITION
          and TRUNC(NVL(VALID_UNTILL,SYSDATE)) >= TRUNC(SYSDATE);
          
        EXCEPTION 
          WHEN OTHERS THEN 
            l_expired_flag := true;
        END;
        
        SELECT COUNT(*)
        INTO l_cnt 
        FROM MS_QSM_QUESTIONNAIRE
        WHERE QUE_ID = l_que_id
        AND to_number(SUBSTR(VERSION_NUMBER,1,INSTR(VERSION_NUMBER,'.',1)-1)) > to_number(SUBSTR(l_version_number,1,INSTR(l_version_number,'.',1)-1));
        
        IF l_expired_flag OR l_cnt > 0 THEN
            
            REINT_PID := IP_PID;
            
        ELSE
                l_cnt :=0;
                
                SELECT COUNT(*) 
                into l_cnt
                from ms_qsm_create_questnr_v a
                where a.previous_stage <> 'PUB_QST'
                and a.dd_current_stage <> 'CR_ED_QST'
                and a.que_id = l_que_id
                and a.instance_rec_num=1
                and a.process_instance_id = l_new_pid     
                and A.instance_id=(select max(instance_id) 
                                  from ms_qsm_create_questnr_v b 
                                  where b.process_instance_id = a.process_instance_id)
                AND QUE_ACTION <>'CANCEl';
                
                IF l_cnt =0 THEN 
                    REINT_PID:=l_new_pid;
                ELSE
                    REINT_PID:=IP_PID;
                END IF;
          
        END IF;  
            
         /*           
        SELECT COUNT(*) 
        INTO l_cnt
        FROM MS_QSM_CREATE_QUESTNR_V
        WHERE PREVIOUS_STAGE <> 'PUB_QST'
        AND DD_CURRENT_STAGE <> 'CR_ED_QST'
        AND QUE_ID = (SELECT DISTINCT QUE_ID FROM  MS_QSM_CREATE_QUESTNR_V WHERE PROCESS_INSTANCE_ID=IP_PID AND QUE_ID IS NOT NULL)
        AND INSTANCE_REC_NUM=1
        AND PROCESS_INSTANCE_ID <>IP_PID;
        
        IF l_cnt =0 THEN 
        
            SELECT MAX( PROCESS_INSTANCE_ID)
            INTO REINT_PID
            FROM MS_QSM_CREATE_QUESTNR_V
            WHERE PROCESS_INSTANCE_ID <>IP_PID
            AND QUE_ID = (SELECT DISTINCT QUE_ID FROM  MS_QSM_CREATE_QUESTNR_V WHERE PROCESS_INSTANCE_ID=IP_PID AND QUE_ID IS NOT NULL);
        ELSE
            REINT_PID:=IP_PID;
        END IF;   */    
        
        RETURN REINT_PID;
    END;
  
  FUNCTION GET_URL(IP_OBJECT_TYPE VARCHAR2,IP_PID NUMBER, IP_NAME VARCHAR2)
  RETURN VARCHAR2 IS
  X_STR varchar2(1000);
  x_reinit_pid number;
  l_edit  varchar2(10);
  l_cnt NUMBER;
  begin
  
    IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0)  THEN
        ms_qsm_utilities.initialize_metric_maint ('QSM');   
    END IF;
    
   

  IF IP_OBJECT_TYPE=  MS_QSM_UTILITIES.g_tbl_metric_maintenance('CREQSM') THEN
    X_REINIT_PID:=GET_QUESTNR_REINIT_PID(IP_PID);
    IF X_REINIT_PID<>IP_PID THEN
    X_STR:='<a target="_self" href="javascript'||CHR(58)||'callreportdetails(''Pushinfolet?id='||MS_APPS_UTILITIES.GET_INFOLET_ID(IP_OBJECT_TYPE)||CHR(38)||'proc='||X_REINIT_PID|| CHR (38)|| 'instid='||'0'|| CHR (38)||'flag=1'|| CHR (38)|| 'emd=1'|| CHR (38)|| 'my_edit_mode=No' || CHR (38) || 'wrapper=no'')">'||HTF.ESCAPE_SC(IP_NAME)|| '</a>' ; 
    ELSE
    X_STR:='<a target="_self" href="javascript'||CHR(58)||'callreportdetails(''Pushinfolet?id='||MS_APPS_UTILITIES.GET_INFOLET_ID(IP_OBJECT_TYPE)||CHR(38)||'proc='||IP_PID      || CHR (38)|| 'instid='||'0'|| CHR (38)||'flag=1'|| CHR (38)|| 'emd=1'|| CHR (38)|| 'my_edit_mode=NOEDIT' || CHR (38) || 'wrapper=no'')">'||HTF.ESCAPE_SC(IP_NAME)|| '</a>' ; 
    end if;
    
  ELSIF  IP_OBJECT_TYPE=  MS_QSM_UTILITIES.g_tbl_metric_maintenance('INIQSM') THEN
    
    x_reinit_pid := IP_PID;
    
    SELECT DECODE(count(1),0,'NOEDIT','No')
    INTO l_edit
    FROM MS_QSM_INIT_QUESTNR a,MS_QSM_QUESTNR_SCH b
    WHERE A.QUE_REQUEST_ID = B.SCH_REQ_ID 
    AND a.QUE_REQUEST_NAME = IP_NAME
    AND a.MANAGE_SURVEY = '1'
    AND ((B.SCH_END_BY IS NULL AND B.SCH_CLOSE_DATE IS NULL) OR (NVL(TRUNC(SCH_END_BY),TRUNC(SCH_CLOSE_DATE))>=TRUNC(SYSDATE)));
    
    IF l_edit = 'No' THEN
    
       SELECT REINIT_PID 
       INTO x_reinit_pid
       FROM MS_QSM_INIT_QUESTNR
       WHERE DD_PROCESS_INSTANCE_ID = IP_PID;
       
       SELECT COUNT(*) 
       INTO l_cnt
       FROM MS_QSM_INITIATE_QUESTNR_V
       WHERE PREVIOUS_STAGE <> 'PUB_QST'
       AND DD_CURRENT_STAGE <> 'CR_ED_QST'
       AND INSTANCE_REC_NUM=1
       AND PROCESS_INSTANCE_ID = x_reinit_pid;
      
       IF l_cnt > 0 THEN
          x_reinit_pid := IP_PID;
          l_edit := 'NOEDIT';
       END IF;
    END IF;    
    X_STR:='<a target="_self" href="javascript'||CHR(58)||'callreportdetails(''Pushinfolet?id='||MS_APPS_UTILITIES.GET_INFOLET_ID(IP_OBJECT_TYPE)||CHR(38)||'proc='||x_reinit_pid|| CHR (38)|| 'instid='||'0'|| CHR (38)||'flag=1'|| CHR (38)|| 'emd=1'|| CHR (38)|| 'my_edit_mode='||l_edit || CHR (38) || 'wrapper=no'')">'||HTF.ESCAPE_SC(IP_NAME)|| '</a>' ;             
  
  ELSIF  IP_OBJECT_TYPE=  MS_QSM_UTILITIES.g_tbl_metric_maintenance('SPRSHT') THEN
    
        SELECT DECODE(COUNT(1),0,'No','NOEDIT')
        INTO l_edit
        FROM MS_QSM_SPREADSHEET a,(SELECT VERSION_NO,SPRD_SHEET_ID FROM MS_QSM_SPREADSHEET WHERE  DD_PROCESS_INSTANCE_ID= IP_PID) b
        WHERE a.SPRD_SHEET_ID =  b.SPRD_SHEET_ID
        AND to_number(SUBSTR(a.VERSION_NO,1,INSTR(a.VERSION_NO,'.',1)-1)) > to_number(SUBSTR(b.VERSION_NO,1,INSTR(b.VERSION_NO,'.',1)-1));
        
        X_REINIT_PID := IP_PID;
        
        IF l_edit = 'No' THEN 
            
            SELECT REINIT_PID
            INTO X_REINIT_PID 
            FROM MS_QSM_SPREADSHEET
            WHERE DD_PROCESS_INSTANCE_ID= IP_PID;
            
        END IF;
        
        
        X_STR:='<a target="_self" href="javascript'||CHR(58)||'callreportdetails(''Pushinfolet?id='||MS_APPS_UTILITIES.GET_INFOLET_ID(IP_OBJECT_TYPE)||CHR(38)||'proc='||X_REINIT_PID|| CHR (38)|| 'instid='||'0'|| CHR (38)||'flag=1'|| CHR (38)|| 'emd=1'|| CHR (38)|| 'my_edit_mode='||l_edit || CHR (38) || 'wrapper=no'')">'||HTF.ESCAPE_SC(IP_NAME)|| '</a>' ;
    
  ELSE
    
    X_STR:='<a target="_self" href="javascript'||CHR(58)||'callreportdetails(''Pushinfolet?id='||MS_APPS_UTILITIES.GET_INFOLET_ID(IP_OBJECT_TYPE)||CHR(38)||'proc='||IP_PID|| CHR (38)|| 'instid='||'0'|| CHR (38)||'flag=1'|| CHR (38)|| 'emd=1'|| CHR (38)|| 'my_edit_mode=No' || CHR (38) || 'wrapper=no'')">'||HTF.ESCAPE_SC(IP_NAME)|| '</a>' ; 
   
  end if;
    
    return X_STR;

  END;

  FUNCTION GET_EDIT_URL(IP_OBJECT_TYPE VARCHAR2,IP_STR VARCHAR2, IP_NAME VARCHAR2)
  RETURN VARCHAR2 IS
  X_STR VARCHAR2(1000);
  BEGIN
  --X_STR:='<a target="_self" href="javascript'||CHR(58)||'callreportdetails(''Pushinfolet?id='||MS_APPS_UTILITIES.GET_INFOLET_ID(IP_OBJECT_TYPE)||CHR(38)||'proc='||IP_PID|| CHR (38)||'flag=1'|| CHR (38)|| 'emd=1'|| CHR (38)|| 'edit_mode=Yes' || CHR (38) || 'wrapper=no'')">'||IP_NAME|| '</a>' ; 
  X_STR:='<a target="_self" href="javascript'||CHR(58)||'callreportdetails(''Pushinfolet?id='||MS_APPS_UTILITIES.GET_INFOLET_ID(IP_OBJECT_TYPE)||CHR(38)||IP_STR|| CHR (38)||'flag=3'|| CHR (38)|| 'emd=1'|| CHR (38)|| 'edit_mode=Yes' || CHR (38) || 'wrapper=no'')">'||HTF.ESCAPE_SC(IP_NAME)|| '</a>' ; 
  RETURN X_STR;
  END;
  
  FUNCTION get_display_value( p_login_id     IN  VARCHAR2
                            , p_lov_name     IN  VARCHAR2
                            , p_stored_value IN  VARCHAR2
                            , p_object_type  IN  VARCHAR2
                            )
  RETURN VARCHAR2
  AS 
  l_locale_id   NUMBER;
  l_result      VARCHAR2(4000);
  BEGIN
  
      SELECT LOCALE_ID 
      INTO l_locale_id 
      FROM SI_LOCALES a , si_users_t b 
      WHERE a.LOCALE_STRING = b.LOCALE
      AND   b.USER_NAME = p_login_id;
  
       l_result  := ms_apps_utilities.GET_DISPLAY_VALUE(
                                      ms_apps_utilities.GET_ENTERPRISE_ID(ms_apps_utilities.GET_INFOLET_ID(p_object_type))
                                      ,p_lov_name
                                      ,p_stored_value
                                      ,1
                                      ,l_locale_id
                                      );
  
      RETURN l_result;
  EXCEPTION
  WHEN OTHERS THEN
      RETURN NULL;
  end get_display_value;

  FUNCTION get_applies_to_display_value( p_login_id     IN  VARCHAR2
                            , p_stored_value IN  VARCHAR2
                            )
  RETURN VARCHAR2
  AS 
  l_locale_id   NUMBER;
  l_result      VARCHAR2(4000);
  BEGIN
  
      SELECT LOCALE_ID 
      INTO l_locale_id 
      FROM SI_LOCALES a , si_users_t b 
      WHERE a.LOCALE_STRING = b.LOCALE
      AND   b.USER_NAME = p_login_id;
  
      select ms_concat(object_name)
      into l_result
      from ms_qsm_applies_to
      WHERE IS_ACTIVE = 'Y'
      and object_id in (select column_value from table(MS_APPS_UTILITIES.SPLIT_STRING(p_stored_value,',') ))
      and locale_id=l_locale_id;
  
      RETURN l_result;
  EXCEPTION
  WHEN OTHERS THEN
      return null;
  END GET_APPLIES_TO_DISPLAY_VALUE;

    FUNCTION get_RESP_STATUS_display_value( p_login_id     IN  VARCHAR2
                            , p_stored_value IN  VARCHAR2
                            )
  RETURN VARCHAR2
  AS 
  l_locale_id   NUMBER;
  l_result      VARCHAR2(4000);
  BEGIN
  
      SELECT LOCALE_ID 
      INTO l_locale_id 
      FROM SI_LOCALES a , si_users_t b 
      WHERE a.LOCALE_STRING = b.LOCALE
      AND   b.USER_NAME = p_login_id;
     
      BEGIN 
          select status_name
          into l_result
          from MS_QSM_STATUS_TL
          WHERE status_id =p_stored_value
          and locale_id=l_locale_id;
          
      EXCEPTION
        WHEN OTHERS THEN
              select status_name
              into l_result
              from MS_QSM_STATUS
              WHERE status_id =p_stored_value;   
        END;
                        
      RETURN l_result;
  EXCEPTION
  WHEN OTHERS THEN
      RETURN NULL;
  END GET_RESP_STATUS_DISPLAY_VALUE;
  
FUNCTION get_issue_count (
      p_issue_status_type   VARCHAR2,                   -- ALL , OPEN , OVERDUE
      p_source_type         VARCHAR2,
      p_source_id           VARCHAR2,
      p_org_id              VARCHAR2 DEFAULT NULL
   )
      RETURN VARCHAR2
   IS
      l_sql_stmt            VARCHAR2 (32767);
      l_is_ism_integrated   VARCHAR2 (100)   := 'N';
      l_return_value        NUMBER           := 0;
      l_entp_id             VARCHAR2 (20);
      l_grc_obj_type        VARCHAR2 (100);
      ln_ism_int_check      NUMBER;
      V_AUTO_CREATE_ISSUE_STATUS VARCHAR2(10); --ADDED FOR AUTO CREATE/CLOSURE REQUIREMENT
      V_COUNT NUMBER := 0;--ADDED FOR AUTO CREATE/CLOSURE REQUIREMENT
      
      TYPE ty_date IS RECORD ( ISSUE_DUE_DATE DATE );--ADDED FOR AUTO CREATE/CLOSURE REQUIREMENT
      TYPE ty_date_tab IS TABLE OF ty_date INDEX BY PLS_INTEGER;--ADDED FOR AUTO CREATE/CLOSURE REQUIREMENT
      l_date_tab   ty_date_tab;--ADDED FOR AUTO CREATE/CLOSURE REQUIREMENT

   BEGIN
      /* l_is_ism_integrated := ms_apps_utilities.get_parameter_value
                                                                    (  0
                                                                    ,  'MS_ISM_Integration'
                                                                    ,  'IS_CMP_Integrated'
                                                                    );  */
      SELECT COUNT (*)
        INTO ln_ism_int_check
        FROM ms_apps_event_subscriptions
       WHERE subscription_name = 'Trigger issue In ISM'
         AND subscription_program_name = 'MS_ISM_ENGINE.TRIGGER_ISSUE';
/*
      IF ln_ism_int_check <= 0
      THEN
         --RETURN '0';
         RETURN NULL;
      END IF; */
    
      if p_issue_status_type = 'OVERDUE' THEN
        
          IF ln_ism_int_check > 0 THEN       
            if p_source_type='REQUEST_ID' THEN
              l_sql_stmt :=
                    'Select Count(a.Issue_Id) 
                     From  MS_ISM_INTEGRATION_PUB_V a 
                     Where   a.ISSUE_SOURCE_REF IN
                      (SELECT QUE_RESPONSE_ID FROM MS_QSM_QUESTNR_RESP WHERE QUE_REQUEST_ID=:1)';
            ELSE
              l_sql_stmt :=
                    'Select
                     Count(a.Issue_Id)
                     From   MS_ISM_INTEGRATION_PUB_V a
                     Where   a.ISSUE_SOURCE_REF = :1';
            END IF;      
            l_sql_stmt :=
                   l_sql_stmt
                || ' AND    Trunc(a.Issue_Due_Date) < Trunc(Sysdate) AND    a.Issue_Status <> ''Closed'' ';
         ELSE
         
           RETURN NULL;
         
         end if;
         
      else
      
        IF ln_ism_int_check > 0 THEN
          if p_source_type='REQUEST_ID' THEN
                  l_sql_stmt :=
                    'select count(1)
                     FROM MS_QSM_RESP_ISSUE X,MS_QSM_ISM_RPT_V Y
                     WHERE X.FINDING_FK IN (SELECT DISTINCT QUE_RESPONSE_ID FROM MS_QSM_QUESTNR_RESP_DUP_V WHERE QUE_REQUEST_ID=:1 and DD_CURRENT_STAGE =''PUBLISH'')
                     AND X.FINDING_FK = Y.ISSUE_SOURCE_REF(+)
                      AND X.ISSUE_TITLE=Y.ISSUE_TITLE';
          else 
                  l_sql_stmt :=
                    'select count(1)
                     FROM MS_QSM_RESP_ISSUE X,MS_QSM_ISM_RPT_V Y
                     WHERE X.FINDING_FK IN =:1
                     AND X.FINDING_FK = Y.ISSUE_SOURCE_REF(+)
                     AND X.ISSUE_TITLE=Y.ISSUE_TITLE';        
          
          end if;
          
          if p_issue_status_type = 'OPEN' then
               l_sql_stmt := l_sql_stmt || ' AND    NVL(Y.Issue_Status,''X'') <> ''Closed'' ';
          END IF; 
        ELSE        
           if p_source_type='REQUEST_ID' THEN
                  l_sql_stmt :=
                    'select count(1)
                     FROM MS_QSM_RESP_ISSUE X
                     WHERE X.FINDING_FK IN (SELECT DISTINCT QUE_RESPONSE_ID FROM MS_QSM_QUESTNR_RESP_DUP_V WHERE QUE_REQUEST_ID=:1 and DD_CURRENT_STAGE =''PUBLISH'')';
                     
          else 
                  l_sql_stmt :=
                    'select count(1)
                     FROM MS_QSM_RESP_ISSUE X
                     WHERE X.FINDING_FK IN =:1';
                               
          end if;
        
        END IF;        
      END IF;           

/*    
        if p_source_type='REQUEST_ID' THEN
          l_sql_stmt :=
                'Select  '
             || '       Count(a.Issue_Id) '
             || 'From   MS_ISM_INTEGRATION_PUB_V a '
             || 'Where   a.ISSUE_SOURCE_REF IN '
             || '(SELECT QUE_RESPONSE_ID FROM MS_QSM_QUESTNR_RESP WHERE QUE_REQUEST_ID=:1)';
        ELSE
          l_sql_stmt :=
                'Select  '
             || '       Count(a.Issue_Id) '
             || 'From   MS_ISM_INTEGRATION_PUB_V a '
             || 'Where   a.ISSUE_SOURCE_REF = :1';
        END IF;

      IF p_issue_status_type = 'ALL'
      THEN
         NULL;
      ELSIF p_issue_status_type = 'OPEN'
      THEN
         l_sql_stmt := l_sql_stmt || ' AND    a.Issue_Status <> ''Closed'' ';
      ELSIF p_issue_status_type = 'OVERDUE'
      THEN
         l_sql_stmt :=
               l_sql_stmt
            || ' AND    Trunc(a.Issue_Due_Date) < Trunc(Sysdate) '
            || ' AND    a.Issue_Status <> ''Closed'' ';
      END IF; */

      BEGIN
         EXECUTE IMMEDIATE l_sql_stmt
                      INTO l_return_value
                     USING IN p_source_id;
      EXCEPTION
         WHEN OTHERS
         THEN
            --RETURN '0';
            RETURN NULL;
      END;


--START OF ADDITION FOR AUTO CREATE/CLOSURE OF ISSUE REQUIREMENT 

      IF (P_ISSUE_STATUS_TYPE = 'OPEN' AND P_SOURCE_TYPE='REQUEST_ID')  THEN
      BEGIN
      
      SELECT AUTO_CREATE_ISSUE INTO V_AUTO_CREATE_ISSUE_STATUS 
      FROM MS_QSM_INIT_QUESTNR WHERE QUE_REQUEST_ID = p_source_id;
      
      IF (V_AUTO_CREATE_ISSUE_STATUS = 'yes') THEN
      
        SELECT COUNT(*) INTO l_return_value FROM MS_QSM_OVERDUE_ISSUE_LOG 
        WHERE SOURCE = p_source_id
        AND CREATION_MESSAGE = 'SUCCESS'
        AND (CLOSURE_STATUS IS NULL);
        
      END IF;
      
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
      V_AUTO_CREATE_ISSUE_STATUS := NULL;
      WHEN OTHERS THEN
      RETURN NULL;
      END;
      
      ELSIF (P_ISSUE_STATUS_TYPE = 'OVERDUE' AND P_SOURCE_TYPE='REQUEST_ID')  THEN
      
     
      l_sql_stmt := 'SELECT ISSUE_DUE_DATE FROM MS_ISM_ISSUE WHERE ISSUE_ID IN (
                SELECT ISSUE_ID FROM MS_QSM_OVERDUE_ISSUE_LOG WHERE SOURCE =:P_SOURCE_ID
                AND CREATION_MESSAGE = ''SUCCESS'' AND (CLOSURE_STATUS IS NULL))';
        
       
       EXECUTE IMMEDIATE l_sql_stmt BULK COLLECT INTO l_date_tab USING P_SOURCE_ID;         
       
      
     /* FOR K IN (SELECT ISSUE_DUE_DATE FROM MS_ISM_ISSUE WHERE ISSUE_ID IN (
                SELECT ISSUE_ID FROM MS_QSM_OVERDUE_ISSUE_LOG WHERE SOURCE = P_SOURCE_ID
                AND CREATION_MESSAGE = 'SUCCESS' AND (CLOSURE_STATUS IS NULL)))*/
         
         IF l_date_tab.count > 0 THEN
            FOR i IN l_date_tab.FIRST .. l_date_tab.LAST       
            LOOP
              -- IF (TRUNC(SYSDATE) > TRUNC(K.ISSUE_DUE_DATE)) THEN
              IF TRUNC(SYSDATE) > TRUNC(l_date_tab (i).ISSUE_DUE_DATE) THEN
                  V_COUNT := V_COUNT + 1;
              END IF;
            END LOOP;
        END IF;
      
      l_return_value := V_COUNT;
      
      END IF;
      
--END OF ADDITION FOR AUTO CREATE/CLOSURE OF ISSUE REQUIREMENT      

      
      RETURN l_return_value;

   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN '0';
   END GET_ISSUE_COUNT;

FUNCTION GET_PRINT_URL( RESPONSE_ID VARCHAR2) 
  RETURN VARCHAR2
  IS
  L_RETURN_VALUE VARCHAR2(4000);
  BEGIN
    L_RETURN_VALUE := '<a target="_self" href="javascript:printPDFCustom(''Reportsexportwordpopup?resourcename=Response Report&output=pdf&que_response_id='||RESPONSE_ID||''')">PDF</a>';
 
    RETURN L_RETURN_VALUE;
    
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;
 
 FUNCTION GET_FINDINGS_COUNT(P_SOURCE_ID VARCHAR2,
                             P_QUE_RESPONSE_ID VARCHAR2, 
                             P_NO_OF_FINDINGS NUMBER)
 RETURN NUMBER
 IS
 
 V_AUTO_CREATE_ISSUE_FLAG VARCHAR2(10);
 V_COUNT NUMBER;

 
 BEGIN
 
 SELECT AUTO_CREATE_ISSUE INTO V_AUTO_CREATE_ISSUE_FLAG
 FROM MS_QSM_INIT_QUESTNR WHERE QUE_REQUEST_ID = P_SOURCE_ID;
 
 IF V_AUTO_CREATE_ISSUE_FLAG = 'yes' THEN
 
 select count(*) into V_COUNT 
 from MS_QSM_OVERDUE_ISSUE_LOG 
 where source = P_SOURCE_ID 
 and source_reference = P_QUE_RESPONSE_ID;
 
 RETURN V_COUNT;
 
 END IF;
 
 
 RETURN P_NO_OF_FINDINGS;
 
 EXCEPTION
 WHEN OTHERS THEN
  RETURN P_NO_OF_FINDINGS;
 
 END GET_FINDINGS_COUNT; 
  
END; 
 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_SAVED_DATA" AS OBJECT
            ( SECTION_NAME VARCHAR2(255),
              QUESTION_TEXT VARCHAR2(4000),
              RESPONSE_TYPE VARCHAR2(100),
              RESPONSE_OPTIONS  VARCHAR2(4000)
            ) 

 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_SAVED_DATA_TABLE" as table of  MS_QSM_SAVED_DATA 

 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_SCHEDULER" (   o_error_code      OUT   NUMBER,
                                                                                       o_error_message   OUT   VARCHAR2
                                                                                    )
    AS

        ln_response_metric_id                                          NUMBER;     
        lx_response_xml_template                                    XMLTYPE := NULL;
        lx_response_xml                                                  XMLTYPE := NULL;
        lv_path                                                        VARCHAR2(100):='datapacket/data/nonmultirow/$/text()';
        lv_path_clob                                                 VARCHAR2(100):='datapacket/data/nonmultirow/$';    
        lc_child_xml_clob                                          CLOB:='<msa:sec xmlns:msa="http://www.metricstream.com/appstudio/msa">';            
        lx_child_xml_template                                    XMLTYPE:=NULL;  
        lx_child_xml                                                  XMLTYPE:=NULL;            
        lv_child_path                                                 VARCHAR2(100):='row/$/text()';
        lc_all_questions_id                                        CLOB;
        lc_all_section_ids                                          CLOB;
        ln_instance_rec_num                                     NUMBER:=0;
        lv_applies_to_name                                      VARCHAR2(500);
        lv_scoring_flag                                             VARCHAR2(10);
        lc_send_user_role                                          CLOB;
        lc_org                                                           CLOB;
        lc_respondents                                              CLOB;             
        l_send_to_assessor_org                                 CLOB;
        l_send_to_assessors                                      CLOB;  
        lv_applies_to_object                                       CLOB;
        ln_error_handle_id                                         NUMBER;
        ln_error_seq                                                  NUMBER;
        l_sequence_no                                               NUMBER :=1;
        l_created_by                                                  NUMBER;
        
        xn_error_handle_id  number;
        xn_error_seq number;
        lv_org_desc                                                     CLOB;
        l_has_sub_qst                                               CLOB;
        l_check_resp                                                VARCHAR2(4000);
        l_due_date_param_val                                    NUMBER(10);
        lv_param_flag                                                   VARCHAR2(255);
        l_dd_enterprise_info                                        VARCHAR2(4000);
        l_certification_text                                            VARCHAR2(4000);
        lv_finding_can_add_by                                       VARCHAR2(4000);
        l_RTF_metric_id                                           NUMBER;
        l_finding_metric_id                                           NUMBER;
        l_reference_metric_ids                                  VARCHAR2(1000);
        l_finding_param_val                                         VARCHAR2(10);
        l_period_id                                                     NUMBER;
        lv_user_locale_id                                           NUMBER;
        
        
        l_resp_sprd                                                 VARCHAR2(255);
        l_resp_req_approval                                         VARCHAR2(4000);
        l_resp_req_action                                           VARCHAR2(4000);
        l_qst_json_value                                            VARCHAR2(4000);
        l_resp_sprd_metric_id                                       NUMBER;
        l_stored_val                                                VARCHAR2(100);
        l_delimeter                                                 VARCHAR2(255);
        l_next_date                                                 DATE;
        l_init_metric_id                                            NUMBER;
        lv_delimeter                                            VARCHAR2(255);
        lv_list_of_values                                       VARCHAR2(4000);
        l_triggered_count                                       NUMBER :=0;
        l_triggered_flag                                        BOOLEAN;
        LV_DISPLAY_SCORING                                      VARCHAR2(100);
        L_RESPONSE_APPROVER                                     CLOB;
        L_CONTACT_USER_AVAILABLE                                VARCHAR2(10);
        L_EXCEL_RESPONSE_VAL                                    CLOB;
        L_OBJECT_NAME                                           VARCHAR2(4000);
        L_OBJECT_ID                                             VARCHAR2(4000);
        l_applies_to_items                                      CLOB;
        L_REPORTING_PERIOD_DISP                                 varchar2(4000);
        L_CHECK_RESP_DISP                                       varchar2(4000);
        l_approver_due_date_param_val                           number(10);
        l_sch_iteration                                         varchar2(255);
        l_survey_source_type                                    VARCHAR2(255);
        l_indv_approver_organization                            CLOB;
        l_approver_organization                                 CLOB;
        l_resp_cnt                                              number;
        L_SCHD_CNT                                              number;
        L_RESP_PID                                              number;
        l_resp_iid                                              number;
        l_enriched_xml                                          xmltype;
        l_qst_order                                             NUMBER:=0;
    
    PROCEDURE check_response_triggerd (ip_respondent IN VARCHAR2,
                                                             ip_que_request_id IN  VARCHAR2,
                                                             ip_indv_item_pk  IN VARCHAR2,
                                                             ip_send_option IN VARCHAR2 DEFAULT '2',
                                                             op_triggered_flag OUT BOOLEAN)
    IS
    l_count NUMBER;
    
    BEGIN
                    
        
        IF ip_send_option = '2' THEN   -- Seperate Copy
            
            SELECT COUNT(1)
            INTO l_count
            FROM MS_QSM_SCHEDULER_DETAILS a,MS_QSM_SCHEDULER_MASTER b
            WHERE A.SCH_REQ_ID =B.SCH_REQ_ID
            AND A.SEQUENCE_NO= B.SEQUENCE_NO
            AND A.SCH_REQ_ID = ip_que_request_id
            AND NVL(B.INDV_ITEM_PK,'X') = NVL(ip_indv_item_pk,'X')
            AND INDIVIUDAL_RESPONDENET = ip_respondent;
        ELSE    -- Same Copy

            SELECT COUNT(1)
            INTO l_count
            FROM MS_QSM_SCHEDULER_DETAILS a,MS_QSM_SCHEDULER_MASTER b
            WHERE A.SCH_REQ_ID =B.SCH_REQ_ID
            AND A.SEQUENCE_NO= B.SEQUENCE_NO
            AND A.SCH_REQ_ID = ip_que_request_id
            AND NVL(B.INDV_ITEM_PK,'X') = NVL(ip_indv_item_pk,'X');
                       
        END IF;            
            
        IF l_count > 0 THEN            
            op_triggered_flag := True;
        ELSE          
            op_triggered_flag := False;                     
        END IF;
         
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;                                         
        
    BEGIN

        IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0)  THEN
        
            ms_qsm_utilities.initialize_metric_maint ('QSM');
        END IF;
        
        l_init_metric_id := ms_apps_utilities.get_infolet_id (ms_qsm_utilities.g_tbl_metric_maintenance ('INIQSM'));
        
        BEGIN               
               
            SELECT VALUE
            INTO l_delimeter
            FROM MS_QSM_PARAMS
            WHERE PARAM_GROUP='QSM_PARAMS'
            AND PARAMETER = 'QUESTION_LOV_DELIMETER'
            AND ENABLED='Y';

        EXCEPTION
            WHEN OTHERS THEN
                l_delimeter :=',';
        END;         
        
        SELECT metric_id 
        INTO ln_response_metric_id
        from SI_METRICS_T
        WHERE METRIC_NAME = MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM');
        
        -- This Delete Satement is to Revoke the assignments if the Due date has been crossed
        
        
            SELECT NVL(b.parameter_value,0)
            INTO l_due_date_param_val
            FROM ms_qs_parameter_names a, ms_qs_parameter_values b, ms_qs_parameter_types c
            WHERE     a.parameter_id = b.parameter_id
             AND a.parameter_type_id = b.parameter_type_id
             AND a.parameter_type_id = c.parameter_type_id
             AND b.parameter_type_id = c.parameter_type_id
             AND c.parameter_type = 'MS_QSM_Configuration'
             AND a.parameter_name = 'Response_Assignment_Validity_After_Due_Date';
             
            SELECT NVL(b.parameter_value,0)
            INTO l_approver_due_date_param_val
            FROM ms_qs_parameter_names a, ms_qs_parameter_values b, ms_qs_parameter_types c
            WHERE     a.parameter_id = b.parameter_id
             AND a.parameter_type_id = b.parameter_type_id
             AND a.parameter_type_id = c.parameter_type_id
             AND b.parameter_type_id = c.parameter_type_id
             and C.PARAMETER_TYPE = 'MS_QSM_Configuration'
             AND a.parameter_name = 'Approval_Assignment_Validity_After_Due_Date';
             
             SELECT NVL(parameter_value,'N')
            INTO l_finding_param_val
            FROM ms_qs_parameter_names a, ms_qs_parameter_values b, ms_qs_parameter_types c
            WHERE     a.parameter_id = b.parameter_id
             AND a.parameter_type_id = b.parameter_type_id
             AND a.parameter_type_id = c.parameter_type_id
             AND b.parameter_type_id = c.parameter_type_id
             AND c.parameter_type = 'MS_QSM_Configuration'
             AND A.parameter_name = 'Enable Findings or Issues for Questionnaires';
 

        INSERT INTO MS_QSM_EVENT_REVOKE_HISTORY (USER_ID,PROCESS_INSTANCE_ID,INFOLET_ID,ASSIGNMENT_ID,STATUS,PRIORITY,INITIATED_BY,CAPTURED_BY,ASSIGNMENT_TEXT,APPROVAL_PROCESS_ID,
               LOCALE_ID,CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY,XML,COMMENTS,OFFLINE_STATUS,ORIGINAL_USER_ID,DUE_DATE,REVOKED_ON,REMARKS,STAGE)
        SELECT USER_ID,PROCESS_INSTANCE_ID,INFOLET_ID,ASSIGNMENT_ID,STATUS,PRIORITY,INITIATED_BY,CAPTURED_BY,ASSIGNMENT_TEXT,APPROVAL_PROCESS_ID,
               LOCALE_ID,CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY,XML,COMMENTS,OFFLINE_STATUS,ORIGINAL_USER_ID,DUE_DATE,SYSDATE,'Response Assignment has been revoked on crossing the due date','RESPONSE'
               FROM SI_EVENT_ASSIGNMENTS
        WHERE PROCESS_INSTANCE_ID IN (SELECT a.PROCESS_INSTANCE_ID
                                                            FROM MS_QSM_SCHEDULER_DETAILS a,MS_QSM_QUESTNR_SCH b
                                                            WHERE A.SCH_REQ_ID = B.SCH_REQ_ID 
                                                            AND SCH_FREQUENCY <>'3'
                                                            AND TRUNC (A.SENT_OUT_ON)+(NVL(B.SCH_DUE_AFTER,0)+L_DUE_DATE_PARAM_VAL) < TRUNC(SYSDATE)
                                                            AND EXISTS(SELECT 1 FROM MS_QSM_QUESTNR_RESP_DUP_V x 
                                                                              WHERE x.PROCESS_INSTANCE_ID=a.PROCESS_INSTANCE_ID 
                                                                              AND INSTANCE_ID=(SELECT MAX(INSTANCE_ID) FROM MS_QSM_QUESTNR_RESP_DUP_V y 
                                                                              WHERE y.PROCESS_INSTANCE_ID=x.PROCESS_INSTANCE_ID)
                                                                              AND x.DD_CURRENT_STAGE='RESPONSE'
                                                                              AND X.PREVIOUS_STAGE='RESPONSE'
                                                                              and X.INSTANCE_REC_NUM <=1))
        AND STATUS IN ('1','4','5','6');
        
        DELETE FROM SI_EVENT_ASSIGNMENTS
        WHERE PROCESS_INSTANCE_ID IN (SELECT a.PROCESS_INSTANCE_ID
                                                            FROM MS_QSM_SCHEDULER_DETAILS a,MS_QSM_QUESTNR_SCH b
                                                            WHERE A.SCH_REQ_ID = B.SCH_REQ_ID 
                                                            AND SCH_FREQUENCY <>'3'
                                                            AND TRUNC (A.SENT_OUT_ON)+(NVL(B.SCH_DUE_AFTER,0)+L_DUE_DATE_PARAM_VAL) < TRUNC(SYSDATE)
                                                            AND EXISTS(SELECT 1 FROM MS_QSM_QUESTNR_RESP_DUP_V x 
                                                                              WHERE x.PROCESS_INSTANCE_ID=a.PROCESS_INSTANCE_ID 
                                                                              AND INSTANCE_ID=(SELECT MAX(INSTANCE_ID) FROM MS_QSM_QUESTNR_RESP_DUP_V y 
                                                                              WHERE y.PROCESS_INSTANCE_ID=x.PROCESS_INSTANCE_ID)
                                                                              AND x.DD_CURRENT_STAGE='RESPONSE'
                                                                              AND X.PREVIOUS_STAGE='RESPONSE'
                                                                              AND X.INSTANCE_REC_NUM <=1))
        AND STATUS IN ('1','4','5','6');
        
        
        
        INSERT INTO MS_QSM_EVENT_REVOKE_HISTORY (USER_ID,PROCESS_INSTANCE_ID,INFOLET_ID,ASSIGNMENT_ID,STATUS,PRIORITY,INITIATED_BY,CAPTURED_BY,ASSIGNMENT_TEXT,APPROVAL_PROCESS_ID,
               LOCALE_ID,CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY,XML,COMMENTS,OFFLINE_STATUS,ORIGINAL_USER_ID,DUE_DATE,REVOKED_ON,REMARKS,STAGE)
        SELECT USER_ID,PROCESS_INSTANCE_ID,INFOLET_ID,ASSIGNMENT_ID,STATUS,PRIORITY,INITIATED_BY,CAPTURED_BY,ASSIGNMENT_TEXT,APPROVAL_PROCESS_ID,
               LOCALE_ID,CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY,XML,COMMENTS,OFFLINE_STATUS,ORIGINAL_USER_ID,DUE_DATE,SYSDATE,'Approver Assignment has been revoked on crossing the due date','APPROVE'
               FROM SI_EVENT_ASSIGNMENTS
        WHERE PROCESS_INSTANCE_ID IN (SELECT a.PROCESS_INSTANCE_ID
                                                            FROM MS_QSM_SCHEDULER_DETAILS a,MS_QSM_QUESTNR_SCH b
                                                            WHERE A.SCH_REQ_ID = B.SCH_REQ_ID 
                                                            --AND SCH_FREQUENCY <>'3'
                                                            AND TRUNC (A.SENT_OUT_ON)+(NVL(B.SCH_DUE_AFTER,0)+l_approver_due_date_param_val) < TRUNC(SYSDATE)
                                                            AND EXISTS(SELECT 1 FROM MS_QSM_QUESTNR_RESP_DUP_V x 
                                                                              WHERE x.PROCESS_INSTANCE_ID=a.PROCESS_INSTANCE_ID 
                                                                              AND INSTANCE_ID=(SELECT MAX(INSTANCE_ID) FROM MS_QSM_QUESTNR_RESP_DUP_V y 
                                                                              WHERE y.PROCESS_INSTANCE_ID=x.PROCESS_INSTANCE_ID)
                                                                              AND x.DD_CURRENT_STAGE='APPROVE'
                                                                              AND X.INSTANCE_REC_NUM <=1))
        AND STATUS IN ('1','4','5','6');
        
        DELETE FROM SI_EVENT_ASSIGNMENTS
        WHERE PROCESS_INSTANCE_ID IN (SELECT a.PROCESS_INSTANCE_ID
                                                            FROM MS_QSM_SCHEDULER_DETAILS a,MS_QSM_QUESTNR_SCH b
                                                            WHERE A.SCH_REQ_ID = B.SCH_REQ_ID 
                                                            --AND SCH_FREQUENCY <>'3'
                                                            AND TRUNC (A.SENT_OUT_ON)+(NVL(B.SCH_DUE_AFTER,0)+l_approver_due_date_param_val) < TRUNC(SYSDATE)
                                                            AND EXISTS(SELECT 1 FROM MS_QSM_QUESTNR_RESP_DUP_V x 
                                                                              WHERE x.PROCESS_INSTANCE_ID=a.PROCESS_INSTANCE_ID 
                                                                              AND INSTANCE_ID=(SELECT MAX(INSTANCE_ID) FROM MS_QSM_QUESTNR_RESP_DUP_V y 
                                                                              WHERE Y.PROCESS_INSTANCE_ID=X.PROCESS_INSTANCE_ID)
                                                                              AND x.DD_CURRENT_STAGE='APPROVE'
                                                                              and X.INSTANCE_REC_NUM <=1))
        AND STATUS IN ('1','4','5','6');
           
        -- Deleting Live Survey Tasks
                                                                     
        INSERT INTO MS_QSM_EVENT_REVOKE_HISTORY (USER_ID,PROCESS_INSTANCE_ID,INFOLET_ID,ASSIGNMENT_ID,STATUS,PRIORITY,INITIATED_BY,CAPTURED_BY,ASSIGNMENT_TEXT,APPROVAL_PROCESS_ID,
               LOCALE_ID,CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY,XML,COMMENTS,OFFLINE_STATUS,ORIGINAL_USER_ID,DUE_DATE,REVOKED_ON,REMARKS,STAGE)
        SELECT USER_ID,PROCESS_INSTANCE_ID,INFOLET_ID,ASSIGNMENT_ID,STATUS,PRIORITY,INITIATED_BY,CAPTURED_BY,ASSIGNMENT_TEXT,APPROVAL_PROCESS_ID,
               LOCALE_ID,CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY,XML,COMMENTS,OFFLINE_STATUS,ORIGINAL_USER_ID,DUE_DATE,SYSDATE,'Approver Assignment has been revoked on crossing the due date','APPROVE'
        FROM SI_EVENT_ASSIGNMENTS
        WHERE PROCESS_INSTANCE_ID IN (SELECT a.PROCESS_INSTANCE_ID
                                                            FROM MS_QSM_SCHEDULER_DETAILS a,MS_QSM_QUESTNR_SCH b
                                                            WHERE A.SCH_REQ_ID = B.SCH_REQ_ID 
                                                            AND SCH_FREQUENCY ='3'
                                                            AND TRUNC (SCH_END_BY) < TRUNC(SYSDATE)
                                                            AND EXISTS(SELECT 1 FROM MS_QSM_QUESTNR_RESP_DUP_V x 
                                                                              WHERE x.PROCESS_INSTANCE_ID=a.PROCESS_INSTANCE_ID 
                                                                              AND INSTANCE_ID=(SELECT MAX(INSTANCE_ID) FROM MS_QSM_QUESTNR_RESP_DUP_V y 
                                                                              WHERE y.PROCESS_INSTANCE_ID=x.PROCESS_INSTANCE_ID)
                                                                              AND x.DD_CURRENT_STAGE='RESPONSE'
                                                                              AND X.PREVIOUS_STAGE='RESPONSE'
                                                                              AND X.INSTANCE_REC_NUM <=1))
        AND STATUS IN ('1','4','5','6');
        
                                                                     
        DELETE FROM SI_EVENT_ASSIGNMENTS
        WHERE PROCESS_INSTANCE_ID IN (SELECT a.PROCESS_INSTANCE_ID
                                                            FROM MS_QSM_SCHEDULER_DETAILS a,MS_QSM_QUESTNR_SCH b
                                                            WHERE A.SCH_REQ_ID = B.SCH_REQ_ID 
                                                            AND SCH_FREQUENCY ='3'
                                                            AND TRUNC (SCH_END_BY) < TRUNC(SYSDATE)
                                                            AND EXISTS(SELECT 1 FROM MS_QSM_QUESTNR_RESP_DUP_V x 
                                                                              WHERE x.PROCESS_INSTANCE_ID=a.PROCESS_INSTANCE_ID 
                                                                              AND INSTANCE_ID=(SELECT MAX(INSTANCE_ID) FROM MS_QSM_QUESTNR_RESP_DUP_V y 
                                                                              WHERE y.PROCESS_INSTANCE_ID=x.PROCESS_INSTANCE_ID)
                                                                              AND x.DD_CURRENT_STAGE='RESPONSE'
                                                                              AND X.PREVIOUS_STAGE='RESPONSE'
                                                                              AND X.INSTANCE_REC_NUM <=1))
        AND STATUS IN ('1','4','5','6');
                                                            
         -- Till Here                                                   
 
        FOR schedule_rec IN (SELECT B.SCH_REQ_ID    "SCH_REQ_ID",
                                                    B.SCH_FREQUENCY "SCH_FREQUENCY",
                                                   -- A.RESPONDENTS_VAL   "RESPONDENTS_VAL",
                                                    B.SCH_START_DATE    "SCH_START_DATE",
                                                    B.SCH_NEXT_DATE "SCH_NEXT_DATE",
                                                    B.SCH_END_BY    SCH_END_BY,
                                                    B.SCH_DUE_AFTER SCH_DUE_AFTER,
                                                    C.COLLABORATIVE_RESPONSE    COLLABORATIVE_RESPONSE,
                                                    C.CONSDR_NO_OF_PAST_MONTHS  CONSDR_NO_OF_PAST_MONTHS,
                                                  --  C.DISPLAY_SCORING   DISPLAY_SCORING,
                                                    C.INIT_COMMENTS INIT_COMMENTS,
                                                    C.INSTRUCTIONS  INSTRUCTIONS,
                                                    C.LEVEL_1_APPROVER  LEVEL_1_APPROVER,
                                                    C.LEVEL_2_APPROVER  LEVEL_2_APPROVER,
                                                    C.QUE_ACTION    QUE_ACTION,
                                                    C.QUE_APPLIES_TO    QUE_APPLIES_TO,
                                                    C.QUE_REQUEST_NAME  QUE_REQUEST_NAME,
                                                    C.QUE_REQUEST_TYPE  QUE_REQUEST_TYPE,
                                                    C.QUE_SEND_TO   QUE_SEND_TO,
                                                    C.QUESTIONNAIRE_ID  QUESTIONNAIRE_ID,
                                                    C.RESPONSE_APPROVER RESPONSE_APPROVER,
                                                    C.RESTRICT_ACCESS_TO    RESTRICT_ACCESS_TO,
                                                    C.SEND_OPTION   SEND_OPTION,
                                                    C.STATUS    STATUS,
                                                    C.SUB_CERTIFICATION_FOR SUB_CERTIFICATION_FOR,                                            
                                                    C.SURVEY_SCOPE_SELECTION    SURVEY_SCOPE_SELECTION,
                                                    C.DD_CREATED_BY DD_CREATED_BY,
                                                    C.DD_PROCESS_INSTANCE_ID PROCESS_INSTANCE_ID,
                                                    C.REPORTING_PERIOD REPORTING_PERIOD,
                                                    C.APPROVAL_BASED_ON_RESPONSE APPROVAL_BASED_ON_RESPONSE,
                                                    c.REINIT_PID REINIT_PID,
                                                    C.EXCEL_BASED,
                                                    C.ALL_USER_APPROVAL,
                                                    C.FIILTER_LEVEL,
                                                    C.QUE_REQUEST_ID,
                                                    C.SEND_TO_APPROVAL,
                                                    C.DD_CREATED_BY DD_CURRENT_USER_NAME,
                                                    C.OVERALL_APPROVER,
                                                    B.RESP_PREPOPULATE RESP_PREPOPULATE
                                  --      FROM MS_QSM_SCHEDULER_MASTER A, MS_QSM_QUESTNR_SCH  B,MS_QSM_INIT_QUESTNR    C
                                        FROM MS_QSM_QUESTNR_SCH  B,MS_QSM_INIT_QUESTNR    C
                                        WHERE B.SCH_REQ_ID = C.QUE_REQUEST_ID
                                        and b.sch_frequency <> '6'
                                        AND TRUNC(B.SCH_NEXT_DATE) = TRUNC(SYSDATE)
                                        AND (TRUNC(B.SCH_END_BY)>=TRUNC(SYSDATE) OR B.SCH_END_BY IS NULL) 
                                        and b.dd_status_flag='Y')
                                        
        LOOP
            l_sequence_no :=1;
            BEGIN 
             
                
                --raghu
                /*SELECT MS_CONCAT(APPROVER_ORGANIZATION)
                INTO l_approver_organization
                FROM MS_QSM_INIT_QUESTNR_APO
                WHERE QUE_REQUEST_ID = schedule_rec.QUE_REQUEST_ID;*/
				
                SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('QUE_REQUEST_ID = '''||schedule_rec.QUE_REQUEST_ID||'''','APPROVER_ORGANIZATION','MS_QSM_INIT_QUESTNR_APO')
                INTO l_approver_organization
                FROM DUAl;
                
                select count(1)+1
                into l_sch_iteration
                from ms_qsm_survey_scheduler_log
                WHERE que_request_id=schedule_rec.sch_req_id;
                
                l_sch_iteration:='ITR-'||l_sch_iteration;
            
                insert into ms_qsm_survey_scheduler_log
                  (que_request_id ,sch_frequency ,triggered_date,sch_due_date,sch_iteration)
                values
                  (schedule_rec.sch_req_id,schedule_rec.SCH_FREQUENCY,SYSDATE,schedule_rec.SCH_NEXT_DATE + TO_NUMBER(schedule_rec.SCH_DUE_AFTER),l_sch_iteration);
                
            
                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                pn_error_sequence    => xn_error_seq,
                pc_error_type        => 'I',
                pc_error_text        => 'INSIDE LOOP');   
                --raghu
                /*SELECT MS_CONCAT(APPLIES_TO_ITEMS)
                INTO l_APPLIES_TO_ITEMS
                FROM MS_QSM_INIT_QUESTNR_ATI
                WHERE QUE_REQUEST_ID = schedule_rec.QUE_REQUEST_ID;*/
				
                SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('QUE_REQUEST_ID = '''||schedule_rec.QUE_REQUEST_ID||'''','APPLIES_TO_ITEMS','MS_QSM_INIT_QUESTNR_ATI')
                INTO l_APPLIES_TO_ITEMS
                FROM DUAl;
                                        
                lc_child_xml_clob :='<msa:sec xmlns:msa="http://www.metricstream.com/appstudio/msa">';                                     
                                        
                EXECUTE IMMEDIATE 'SELECT  DISTINCT DD_ENTERPRISE_INFO FROM '||MS_QSM_UTILITIES.g_tbl_metric_maintenance('INIQSM')||'_V WHERE  PROCESS_INSTANCE_ID = :1 AND DD_ENTERPRISE_INFO IS NOT NULL '
                INTO l_dd_enterprise_info
                USING schedule_rec.PROCESS_INSTANCE_ID;
                
                SELECT B.LOCALE_ID
                INTO lv_user_locale_id
                FROM SI_USERS_T a,SI_LOCALES b
                WHERE a.USER_NAME =schedule_rec.DD_CREATED_BY
                AND A.LOCALE = B.LOCALE_STRING;
                
                SELECT USER_ID
                INTO l_created_by
                FROM SI_USERS_T
                WHERE USER_NAME = schedule_rec.DD_CREATED_BY;                       
                
                IF schedule_rec.sch_frequency = '8' THEN
                
                  SELECT TRIGGER_COUNT
                  INTO l_triggered_count
                  FROM MS_QSM_SCHEDULER_MASTER
                  WHERE SCH_REQ_ID = schedule_rec.sch_req_id;
                  
                END IF;                  
				--raghu
                /*SELECT MS_CONCAT(SECTIONS) 
                INTO lc_all_section_ids
                FROM MS_QSM_INIT_QUESTNR_SCS 
                WHERE QUE_REQUEST_ID = schedule_rec.SCH_REQ_ID;*/
				
                SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('QUE_REQUEST_ID = '''||schedule_rec.SCH_REQ_ID||'''','SECTIONS','MS_QSM_INIT_QUESTNR_SCS')
                INTO lc_all_section_ids
                FROM DUAl;
                
                 ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                        pn_error_sequence    => xn_error_seq,
                                        pc_error_type        => 'I',
                                        pc_error_text        => 'LENGTH'|| LENGTH(TRIM(lc_all_section_ids)));  
                
                IF NVL(LENGTH(lc_all_section_ids),0)<=0 THEN 
                    --raghu
                    /*SELECT MS_CONCAT(SECTION_ID_PK)
                    INTO lc_all_section_ids
                    FROM MS_QSM_SECTION
                    WHERE SECTION_QUESTNR_FK = schedule_rec.QUESTIONNAIRE_ID;*/
					
                SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('SECTION_QUESTNR_FK = '''||schedule_rec.QUESTIONNAIRE_ID||'''','SECTION_ID_PK','MS_QSM_SECTION')
                INTO lc_all_section_ids
                FROM DUAl;
                    
                END IF;
                
                SELECT OBJECT_NAME,CONTACT_USER_AVAILABLE  
                INTO lv_applies_to_name,l_CONTACT_USER_AVAILABLE
                FROM MS_QSM_APPLIES_TO
                WHERE OBJECT_ID = schedule_rec.QUE_APPLIES_TO
                AND LOCALE_ID = lv_user_locale_id;
                
                SELECT NVL(SCORING_FLAG,'2')
                INTO lv_scoring_flag
                FROM MS_QSM_QUESTIONNAIRE
                WHERE INTERNAL_QUESTNR_ID = schedule_rec.QUESTIONNAIRE_ID;
                            
                IF LENGTH(TRIM(lc_all_section_ids))<=0 THEN
                    --raghu
                    /*SELECT MS_CONCAT(SECTION_ID_PK)
                    INTO lc_all_section_ids
                    FROM MS_QSM_SECTION
                    WHERE SECTION_QUESTNR_FK = schedule_rec.QUESTIONNAIRE_ID;                    */
					
                    SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('SECTION_QUESTNR_FK = '''||schedule_rec.QUESTIONNAIRE_ID||'''','SECTION_ID_PK','MS_QSM_SECTION')
                    INTO lc_all_section_ids
                    FROM DUAl;

                END IF;                        
                
                select  TO_CHAR(SUBSTR(MS_QSM_UTILITIES.fn_remove_html_tags(CERTIFICATION_TEXT),1,3000))
                INTO l_certification_text
                from ms_qsm_questionnaire
                where  INTERNAL_QUESTNR_ID = schedule_rec.questionnaire_id;
                
    --            SELECT MS_CONCAT(QST_ID_PK)
    --            INTO lc_all_questions_id
    --            FROM MS_QSM_QUESTION A,MS_QSM_SECTION B
    --            WHERE A.QST_SECTION_FK=B.SECTION_ID_PK
    --            AND B.SECTION_QUESTNR_FK = TRIM(schedule_rec.QUESTIONNAIRE_ID)
    --            AND QST_SECTION_FK IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (lc_all_section_ids ,',')));
                
                ms_qsm_utilities.get_multirow_template (p_multirow => lx_response_xml_template, p_metric_id => ln_response_metric_id, p_full_blown => 'Y');
                                    
                LX_RESPONSE_XML := LX_RESPONSE_XML_TEMPLATE;
                ms_qsm_log_activity('','in the begin of ms_qsm_scheduler',LX_RESPONSE_XML.getclobval());
                                                       
                -- Updating XML withe Data to be displayed in Response from
                
                BEGIN 
                    
                    if trim(schedule_rec.sch_frequency) in ('1','5','7') then -- Quarterly,Semi Annually,Annually
                        select period_id,period_name
                        into l_period_id,l_reporting_period_disp 
                        from MS_QSM_REPORTING_PERIOD a,MS_QSM_QUESTIONNAIRE b
                        where A.PERIOD_TYPE = B.REPORTING_PERIOD_TYPE
                        AND TRUNC(SYSDATE) BETWEEN TRUNC(A.ASSIGNMENT_START_DATE) AND TRUNC(A.ASSIGNMENT_END_DATE)
                        AND B.INTERNAL_QUESTNR_ID = schedule_rec.questionnaire_id;
                                    
                        ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','reporting_period'),l_period_id); 
                   
                        lx_response_xml :=ms_qsm_utilities.insert_xml(lx_response_xml,'datapacket/data/nonmultirow/reporting_period',xmltype('<msa:reporting_period_display xmlns:msa="http://www.metricstream.com/appstudio/msa">'||l_reporting_period_disp||'</msa:reporting_period_display>'),'A');
                                    
                    END IF;            
                EXCEPTION
                    WHEN OTHERS THEN
                        l_period_id :=NULL;    
                END;         
                
                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','dd_enterprise_info'),l_dd_enterprise_info);
                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','certification_text'),l_certification_text);
                
                
                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','initiated_by'),schedule_rec.DD_CREATED_BY);                          
                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','que_request_id'),schedule_rec.SCH_REQ_ID);
                ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','instructions'),MS_QSM_UTILITIES.fn_remove_html_tags(schedule_rec.INSTRUCTIONS));
                ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','instructions_htm'), DBMS_XMLGEN.CONVERT(schedule_rec.INSTRUCTIONS));
                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','questionnaire_id'),schedule_rec.QUESTIONNAIRE_ID);
                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','tmep_que_type'),schedule_rec.QUE_REQUEST_TYPE);                    
    --            ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','resp_all_section_ids'),lc_all_section_ids);
    --            ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','resp_all_question_ids'),lc_all_questions_id);
    --            ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','temp_pk_id'),lv_scoring_flag);   -- Contains the Scoring Flag Yes or No 
    --            ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to_object'),lv_applies_to_object);
                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','response_approver'),schedule_rec.RESPONSE_APPROVER);
                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','due_date'),TO_CHAR(TRUNC(schedule_rec.SCH_NEXT_DATE + TO_NUMBER(schedule_rec.SCH_DUE_AFTER)),'MM/DD/YYYY HH:MI:SS')) ;
                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','que_request_name'),schedule_rec.QUE_REQUEST_NAME) ;
                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','dd_object_type'),MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM'));  
                --                ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','dd_current_user_name'),)  
    --            ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','dd_event_user_name'),schedule_rec.DD_CREATED_BY);
    --            ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','dd_enterprise_info'),schedule_rec.dd_enterprise_info);
                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','previous_stage'), 'RESPONSE');
                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'dd_current_stage'),'RESPONSE');
                --                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'submit_action'),'');                       
                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'dd_process_code'),ms_qsm_utilities.get_flow_code('QSM Respond questionnaire workflow'));
                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'instance_rec_num'),'1');
                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'metric_id'),ln_response_metric_id);
                --                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'metric_run_date'),)
                --                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'metric_completed_date'),)
                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'latest_flag'),'Y');
                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'created_by') ,l_created_by);         
                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'creation_date'),TO_CHAR(SYSDATE,'MM/DD/YYYY HH:MM:SS'));
                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','resp_status'),'4');       
                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','process_flow_status'),'4') ;    
                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','overall_approver'),schedule_rec.overall_approver) ; 
                
                begin
                
                  select stored_value 
                  into l_survey_source_type
                  from ms_qs_list_of_values_t a,ms_qs_lov_names b
                  where a.lov_id = b.lov_id
                  and b.lov_name = 'MS_QSM_INTEGRATED_MODULES'
                  AND UPPER(DISPLAYED_VALUE)='SURVEYS';
                  
                exception 
                  when others then
                  l_survey_source_type:= null;
                end;    
            
              ms_qsm_utilities.update_xml (lx_response_xml,REPLACE(lv_path,'$','survey_source_type'), l_survey_source_type);  
                
                IF l_finding_param_val = 'Y' THEN
                    
                    SELECT MS_CONCAT(FINDINGS_CAN_ADD_BY)
                    INTO lv_finding_can_add_by
                    FROM MS_QSM_INIT_QUESTNR_FCA
                    WHERE QUE_REQUEST_ID = schedule_rec.SCH_REQ_ID;
                    
                    ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','finding_can_be_added_by'),lv_finding_can_add_by) ;     
                    
                END IF;
                -- Changed display scoring flag to MLOV from Radio 
                BEGIN
                  SELECT MS_CONCAT(DISPLAY_SCORING)
                  INTO lv_display_scoring
                  FROM MS_QSM_INIT_QUESTNR_DSR
                  WHERE QUE_REQUEST_ID = schedule_rec.SCH_REQ_ID;
                EXCEPTION
                WHEN OTHERS THEN
                  lv_display_scoring := '';
                END ;
                
                SELECT METRIC_ID 
                INTO l_RTF_metric_id
                FROM SI_METRICS_T 
                WHERE METRIC_NAME = (SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='QSMRTF' AND IS_ACTIVE='Y');
                                    
                SELECT METRIC_ID 
                INTO l_finding_metric_id
                FROM SI_METRICS_T 
                WHERE METRIC_NAME = (SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='QSMFND' AND IS_ACTIVE='Y');
                                    
                 l_reference_metric_ids := '{"RTF_METRIC":"'||l_RTF_metric_id||'","FINDING_METRIC":"'||l_finding_metric_id||'"}';   
                                    
                ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$','reference_metric_id'),l_reference_metric_ids);
                                   
                ms_qsm_utilities.get_multirow_template (p_multirow => lx_child_xml_template, p_metric_id => ln_response_metric_id,p_region_name=>'sec', p_full_blown => 'N');
                                                                
                FOR sec_multirow_rec IN (SELECT *  FROM MS_QSM_SECTION WHERE SECTION_ID_PK IN (SELECT COLUMN_VALUE FROM TABLE(ms_apps_utilities.parse_string (lc_all_section_ids ,','))))
                LOOP
                    ln_instance_rec_num:=ln_instance_rec_num+1;                                    
                    lx_child_xml := lx_child_xml_template;
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','section_weightage'),sec_multirow_rec.SECTION_WEIGHTAGE);                            
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','optional_section'),NVL(sec_multirow_rec.SECTION_OPTIONAL,'no'));
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','section_name'),sec_multirow_rec.SECTION_NAME);                        
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','section_fk'),sec_multirow_rec.SECTION_QUESTNR_FK);      
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','section_id'),sec_multirow_rec.SECTION_ID_PK);      
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','instance_rec_num'),ln_instance_rec_num);   
                            
                     DBMS_LOB.APPEND (lc_child_xml_clob,lx_child_xml.getclobval());
                                                                                                       
                END LOOP;   
                        
                       
                ms_qsm_utilities.get_multirow_template (p_multirow => lx_child_xml_template, p_metric_id => ln_response_metric_id,p_region_name=>'qst', p_full_blown => 'N');
                                           
                DBMS_LOB.APPEND (lc_child_xml_clob,'</msa:sec>');
                
                
                        
                lx_response_xml := MS_QSM_UTILITIES.INSERT_XML(lx_response_xml,'datapacket/data/nonmultirow',XMLTYPE(lc_child_xml_clob),'A');
                        
                lc_child_xml_clob:='<msa:qst xmlns:msa="http://www.metricstream.com/appstudio/msa">';
                        
    --            FOR qst_multirow_rec IN (SELECT *  FROM MS_QSM_QUESTION WHERE QST_ID_PK IN (SELECT COLUMN_VALUE FROM TABLE(ms_apps_utilities.parse_string (lc_all_questions_id ,','))))
    --            FOR qst_multirow_rec IN (SELECT *  FROM MS_QSM_QUESTION WHERE QST_SECTION_FK IN (SELECT COLUMN_VALUE FROM TABLE(ms_apps_utilities.parse_string (lc_all_section_ids ,','))))
                FOR qst_multirow_rec IN (SELECT  QST_SECTION_ID,QST_NAME,QST_ID_PK,QST_TYPE,QST_PARENT_TYPE,QST_SECTION_FK,QST_ID,QST_WEIGHTAGE,QST_RESPONSE_TYPE,QST_TARGET,
                                                        --TO_CHAR(SUBSTR(QST_DESCRIPTION,1,3000)) QST_DESCRIPTION,QST_OPTIONAL,PARENT_RESPONSE_TYPE,QST_BASED_ON_RESPONSE,
                                                        TO_CHAR(SUBSTR(ms_qsm_utilities.fn_remove_html_tags(QST_DESCRIPTION),1,3000)) QST_DESCRIPTION,QST_OPTIONAL,PARENT_RESPONSE_TYPE,QST_BASED_ON_RESPONSE,
                                                        QST_BASED_ON_NUMBER,QST_DEFAULT_SCORE,QST_INFOLET_SCORING,QST_SPRDSHEET_TEMPLATE, QST_ACTION_PLAN,RESP_REQ_APPROVAL,RESP_REQ_ACTION,QST_MLOV_SCORING
                                                      FROM MS_QSM_QUESTION WHERE QST_SECTION_ID IN (SELECT COLUMN_VALUE FROM TABLE(ms_apps_utilities.parse_string (lc_all_section_ids ,',')))
                                                      start with decode(qst_parent_type,'SEC',NULL,QST_SECTION_FK) is null
                                                      CONNECT BY PRIOR QST_ID_PK = QST_SECTION_FK
                LOOP
                    ln_instance_rec_num:=ln_instance_rec_num+1;    
                    lx_child_xml := lx_child_xml_template; 
                    l_qst_order := l_qst_order+1;
                    l_check_resp :=NULL;
                    L_HAS_SUB_QST :=null;
                    l_check_resp_disp :=NULL;
                            
    --                IF qst_multirow_rec.QST_PARENT_TYPE = 'SEC' THEN
    --                            
    --                    SELECT MS_CONCAT(QST_ID_PK)-- DECODE(COUNT(1),0,'no','yes') 
    --                    INTO l_has_sub_qst
    --                    FROM MS_QSM_QUESTION 
    --                    WHERE QST_SECTION_FK =  qst_multirow_rec.QST_ID_PK;
    --                            
    --                ELSIF qst_multirow_rec.QST_PARENT_TYPE = 'QST' THEN 
    --                            
    --                    IF qst_multirow_rec.PARENT_RESPONSE_TYPE IN ('1','3') THEN
    --                                
    --                        l_check_resp := qst_multirow_rec.QST_BASED_ON_RESPONSE||'~'||qst_multirow_rec.QST_BASED_ON_NUMBER;
    --                                
    --                    ELSIF qst_multirow_rec.PARENT_RESPONSE_TYPE IN ('4','6','7') THEN
    --                                
    --                        l_check_resp := '5'||'~'||qst_multirow_rec.QST_BASED_ON_RESPONSE;
    --                                    
    --                    END IF;
    --                            
    --                END IF;   
                     
                                                
                    l_resp_sprd :=NULL;
                    l_resp_req_approval :=NULL;
                    l_resp_req_action :=NULL;
                    L_QST_JSON_VALUE :=NULL;
                    l_excel_response_val :=NULL;
                    
                    SELECT METRIC_ID 
                    INTO l_resp_sprd_metric_id
                    FROM SI_METRICS_T 
                    WHERE METRIC_NAME = (SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='RESSPR' AND IS_ACTIVE='Y');
                    
                    IF qst_multirow_rec.qst_response_type IN ('4', '7','6','10','11')
                           THEN                                   
                        

                        SELECT MS_CONCAT((SELECT DISTINCT A.STORED_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING(QST_MULTIROW_REC.RESP_REQ_ACTION,L_DELIMETER)) B 
                              where b.column_value=a.display_value)),
                              MS_CONCAT((SELECT DISTINCT A.STORED_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING(QST_MULTIROW_REC.RESP_REQ_APPROVAL,L_DELIMETER)) B 
                              WHERE B.COLUMN_VALUE=A.DISPLAY_VALUE))
--                        MS_CONCAT(DECODE(INSTR(L_DELIMETER||QST_MULTIROW_REC.RESP_REQ_ACTION||L_DELIMETER,L_DELIMETER||A.DISPLAY_VALUE||L_DELIMETER,1),0,'',A.STORED_VALUE)),
--                        MS_CONCAT(DECODE(INSTR(L_DELIMETER||QST_MULTIROW_REC.RESP_REQ_APPROVAL||L_DELIMETER,L_DELIMETER||a.DISPLAY_VALUE||L_DELIMETER,1),0,'',a.STORED_VALUE))
                        --MS_CONCAT(A.DISPLAY_VALUE)                            
--                         REPLACE( REPLACE(MS_CONCAT(REPLACE(A.DISPLAY_VALUE,',','$_$')),',',L_DELIMETER),'$_$',',')
                        INTO L_RESP_REQ_ACTION,l_resp_req_approval--,l_excel_response_val
                        FROM MS_QSM_QST_LOV_DATA A
                        WHERE A.QUESTION_ID = QST_MULTIROW_REC.QST_ID_PK;
                        
                        SELECT REPLACE( REPLACE(MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('A.QUESTION_ID = '''||QST_MULTIROW_REC.QST_ID_PK||'''','REPLACE(A.DISPLAY_VALUE,'','',''$_$'')','MS_QSM_QST_LOV_DATA A'),',',L_DELIMETER),'$_$',',')
                        INTO l_excel_response_val
                        FROM DUAL;
                        
                              
                    END IF;
  /*                  
                    BEGIN
                       IF qst_multirow_rec.qst_response_type IN ('4', '7','6')
                       THEN                                                -- respType 4-lov 7--dd
                          SELECT ms_concat (A.STORED_VALUE)
                            INTO l_resp_req_approval
                            FROM MS_QSM_QST_LOV_DATA a, (SELECT COLUMN_VALUE FROM TABLE(ms_apps_utilities.parse_string (qst_multirow_rec.RESP_REQ_APPROVAL ,l_delimeter))) b --MS_QSM_QUESTION_RAP b
                           WHERE     A.QUESTION_ID = qst_multirow_rec.qst_id_pk
    --                                     AND A.QUESTION_ID = B.QST_ID_PK
                                 AND A.DISPLAY_VALUE = B.COLUMN_VALUE;
    --                           ELSIF qst_multirow_rec.qst_response_type IN ('6')
    --                           THEN                                               --respType 6--radio, Y/N
    --                              SELECT ms_concat (RESP_REQ_APPROVAL)
    --                                INTO l_resp_req_approval
    --                                FROM MS_QSM_QUESTION_RAP
    --                               WHERE QST_ID_PK = qst_multirow_rec.qst_id_pk;
                       END IF;
                    EXCEPTION
                       WHEN NO_DATA_FOUND
                       THEN
                          l_resp_req_approval := NULL;
                    END;                

                            -- GET RESPONSE REQUIRED ACTION VALUE FOR A QUESTION
                    BEGIN
                       IF qst_multirow_rec.qst_response_type IN ('4', '7','6')
                       THEN                                                -- respType 4-lov 7--dd
                          SELECT ms_concat (A.STORED_VALUE)
                            INTO l_resp_req_action
                            FROM MS_QSM_QST_LOV_DATA a,  (SELECT COLUMN_VALUE FROM TABLE(ms_apps_utilities.parse_string (qst_multirow_rec.RESP_REQ_ACTION,l_delimeter))) b-- MS_QSM_QUESTION_RAC b
                           WHERE     A.QUESTION_ID = qst_multirow_rec.qst_id_pk
        --                                     AND A.QUESTION_ID = B.QST_ID_PK
                                 AND A.DISPLAY_VALUE = B.COLUMN_VALUE;
        --                           ELSIF qst_multirow_rec.qst_response_type IN ('6')
        --                           THEN                                               --respType 6--radio, Y/N
        --                              SELECT ms_concat (RESP_REQ_ACTION)
        --                                INTO l_resp_req_action
        --                                FROM MS_QSM_QUESTION_RAC
        --                               WHERE QST_ID_PK = qst_multirow_rec.qst_id_pk;
                       END IF;
                    EXCEPTION
                       WHEN NO_DATA_FOUND
                       THEN
                          l_resp_req_action := NULL;
                    END; */
                            
                    --Get Spreadsheet Teamplate dispaly label
                    BEGIN
                       IF qst_multirow_rec.qst_response_type IN ('9')
                       THEN
                          SELECT SPRD_SHEET_LINK
                            INTO l_resp_sprd
                            FROM MS_QSM_SPREADSHEET
                           WHERE SPRD_SHEET_INTERNAL_ID = qst_multirow_rec.qst_sprdsheet_template;
                       END IF;
                    EXCEPTION
                       WHEN NO_DATA_FOUND
                       THEN
                          l_resp_sprd := NULL;
                    END;
                          
  /*                  select REPLACE(REPLACE(MS_CONCAT(REPLACE(display_value,',','#_#')),',','|'),'#_#',',') list_of_values
                    into lv_list_of_values
                    from MS_QSM_QST_LOV_DATA 
                    where question_id=qst_multirow_rec.qst_id_pk
                    ORDER BY TO_NUMBER(SUBSTR(STORED_VALUE,4)); */
                    
  --                  lv_list_of_values:= MS_QSM_UTILITIES.GET_CONCAT_LIST_OF_VALUES(qst_multirow_rec.qst_id_pk,NULL);
                          
                    --set the value in JSON format
                    /*l_qst_json_value := '{';
                    l_qst_json_value := l_qst_json_value || '"RESP_SPRD_METRIC_ID"' || ':' || '"' || l_resp_sprd_metric_id || '"';
                    l_qst_json_value := l_qst_json_value || ',' ||'"SPREADSHEET_ID"' || ':' || '"' || qst_multirow_rec.qst_sprdsheet_template || '"';
                    L_QST_JSON_VALUE := L_QST_JSON_VALUE || ',' ||'"DELIMETER"' || ':' || '"' || L_DELIMETER || '"';
                    L_QST_JSON_VALUE := L_QST_JSON_VALUE || ',' ||'"SPRD_LINK"' || ':' || '"' || l_resp_sprd || '"';
                    l_st_json_value := l_qst_json_value || '}';                */
                    
                     L_QST_JSON_VALUE := '{';
                        l_qst_json_value := l_qst_json_value || '"RESP_SPRD_METRIC_ID"' || ':' || '"' || l_resp_sprd_metric_id || '"';
                        l_qst_json_value := l_qst_json_value || ',' ||'"SPREADSHEET_ID"' || ':' || '"' || qst_multirow_rec.qst_sprdsheet_template || '"';
                        L_QST_JSON_VALUE := L_QST_JSON_VALUE || ',' ||'"DELIMETER"' || ':' || '"' || L_DELIMETER || '"';  
                        L_QST_JSON_VALUE := L_QST_JSON_VALUE || ',' ||'"SPRD_LINK"' || ':' || '"' || l_resp_sprd || '"';
                        l_qst_json_value := l_qst_json_value || '}';


                    IF qst_multirow_rec.QST_PARENT_TYPE = 'SEC' THEN
                        --raghu            
                        /*SELECT MS_CONCAT(QST_ID_PK)-- DECODE(COUNT(1),0,'no','yes') 
                        INTO l_has_sub_qst
                        FROM MS_QSM_QUESTION 
                        WHERE QST_SECTION_FK =  qst_multirow_rec.QST_ID_PK;*/
						
                        SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('QST_SECTION_FK = '''||qst_multirow_rec.QST_ID_PK||'''','QST_ID_PK','MS_QSM_QUESTION')
                        INTO l_has_sub_qst
                        FROM DUAl;
                                                
                    ELSIF qst_multirow_rec.QST_PARENT_TYPE = 'QST' THEN 

                        BEGIN
                                                                        
                            SELECT A.STORED_VALUE 
                            INTO l_stored_val 
                            FROM MS_QSM_QST_LOV_DATA a
                            WHERE 
    --                                A.QUESTIONNAIRE_ID = schedule_rec.questionnaire_id AND
                            A.QUESTION_ID = qst_multirow_rec.QST_SECTION_FK  -- It should be PK for parent question
                            AND A.DISPLAY_VALUE = qst_multirow_rec.QST_BASED_ON_RESPONSE
                            AND ROWNUM <=1;
                                        
                        EXCEPTION
                            WHEN OTHERS THEN
                                  l_stored_val:=NULL;                                    
                        END;  
                                    
                        IF qst_multirow_rec.PARENT_RESPONSE_TYPE IN ('1','3') THEN  --respType 1--Amount, 3--number
                                        
                            L_CHECK_RESP := QST_MULTIROW_REC.QST_BASED_ON_RESPONSE||'~'||QST_MULTIROW_REC.QST_BASED_ON_NUMBER;
                            l_check_resp_disp :=qst_multirow_rec.QST_BASED_ON_RESPONSE||'~'||qst_multirow_rec.QST_BASED_ON_NUMBER;
                                        
                        ELSIF qst_multirow_rec.PARENT_RESPONSE_TYPE IN ('4','7','6','10','11') THEN   -- respType 4-lov 7--dd
                                        
                            L_CHECK_RESP := '5'||'~'||L_STORED_VAL;
                            l_check_resp_disp := '5'||'~'||qst_multirow_rec.QST_BASED_ON_RESPONSE;
                                        
    --                            ELSIF  qst_multirow_rec.PARENT_RESPONSE_TYPE IN ('6') THEN     --respType 6--radio, Y/N
    --                                                  
    --                                 l_check_resp := '5'||'~'||qst_multirow_rec.QST_BASED_ON_RESPONSE;    
                                        
                        END IF;

                    END IF; 

                    
                    
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_name'),qst_multirow_rec.QST_NAME);   
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_type'),qst_multirow_rec.QST_TYPE);   
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','qst_parent_type'),qst_multirow_rec.QST_PARENT_TYPE);   
                    ms_qsm_utilities.update_xml(lx_child_xml,replace(lv_child_path,'$','question_sec_id'),qst_multirow_rec.qst_section_id);   
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_fk'),qst_multirow_rec.QST_SECTION_FK);   
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_id'),qst_multirow_rec.QST_ID);   
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_pk'),qst_multirow_rec.QST_ID_PK);   
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','qst_weightage'),qst_multirow_rec.QST_WEIGHTAGE);   
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','response_type'),qst_multirow_rec.QST_RESPONSE_TYPE);     
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','resp_target'),qst_multirow_rec.QST_TARGET);                                                                                                                                                                                                                           
                    ms_qsm_utilities.update_xml(lx_child_xml,replace(lv_child_path,'$','qst_optional'),nvl(qst_multirow_rec.qst_optional,'no')); 
                    LX_CHILD_XML :=MS_QSM_UTILITIES.INSERT_XML(LX_CHILD_XML,'row/qst_optional',XMLTYPE('<msa:excel_resp_values xmlns:msa="http://www.metricstream.com/appstudio/msa">'||htf.escape_sc(L_EXCEL_RESPONSE_VAL)||'</msa:excel_resp_values>'),'A');
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','qst_mlov_scoring'),NVL(qst_multirow_rec.QST_MLOV_SCORING,'1'));    
                    
                     MS_QSM_UTILITIES.UPDATE_XML(LX_CHILD_XML,replace(LV_CHILD_PATH,'$','qst_infolet_scoring'),QST_MULTIROW_REC.QST_INFOLET_SCORING); 
                     
                      --added by nagesh
                         LX_CHILD_XML :=MS_QSM_UTILITIES.INSERT_XML(LX_CHILD_XML,'row/check_response',xmltype('<msa:check_response_disp xmlns:msa="http://www.metricstream.com/appstudio/msa">'||htf.ESCAPE_SC(L_CHECK_RESP_DISP)||'</msa:check_response_disp>'),'A');
                       --end by nagesh
                    
                                                                                                                                                                                                                                               
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','check_response'),l_check_resp); 
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','has_sub_questions'),l_has_sub_qst); 
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','question_description'),SUBSTR(qst_multirow_rec.QST_DESCRIPTION,1,300)); 
                    ms_qsm_utilities.update_xml(lx_child_xml,replace(lv_child_path,'$','instance_rec_num'),ln_instance_rec_num); 
                    MS_QSM_UTILITIES.UPDATE_XML(LX_CHILD_XML,replace(LV_CHILD_PATH,'$','qst_triger_scr_infolet'),TO_CHAR(l_qst_order)); 
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','resp_score'),qst_multirow_rec.QST_DEFAULT_SCORE); 
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','default_score'),qst_multirow_rec.QST_DEFAULT_SCORE); 
                    
                    -- ADDED by munesh for SP1 changes
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','resp_req_approval'),l_resp_req_approval); 
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','resp_req_action'),l_resp_req_action); 
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','qst_json_value'),l_qst_json_value); 
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','resp_sprd'),l_resp_sprd);
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','resp_action_plan'),qst_multirow_rec.qst_action_plan); 
  --                  ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','list_of_values_hidden'),lv_list_of_values);  
                            
                     DBMS_LOB.APPEND (lc_child_xml_clob,lx_child_xml.getclobval());
                            
                END LOOP;   
                        
                ms_qsm_utilities.get_multirow_template (p_multirow => lx_child_xml_template, p_metric_id => ln_response_metric_id,p_region_name=>'grd', p_full_blown => 'N');
                        
                DBMS_LOB.APPEND (lc_child_xml_clob,'</msa:qst>');
                                                              
                lx_response_xml := MS_QSM_UTILITIES.INSERT_XML(lx_response_xml,'datapacket/data/nonmultirow',XMLTYPE(lc_child_xml_clob),'A');
                        
                lc_child_xml_clob:='<msa:grd xmlns:msa="http://www.metricstream.com/appstudio/msa">';
                        
                FOR grd_multirow_rec IN (SELECT *  FROM MS_QSM_GRADE WHERE GRD_QUESTNR_FK = schedule_rec.QUESTIONNAIRE_ID )
                LOOP
                    ln_instance_rec_num:=ln_instance_rec_num+1;    
                    lx_child_xml := lx_child_xml_template; 
                            
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','grd_questnr_fk'),grd_multirow_rec.GRD_QUESTNR_FK);  
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','grd_value_2'),grd_multirow_rec.GRD_VALUE_2);  
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','grd_value_1'),grd_multirow_rec.GRD_VALUE_1);  
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','grd_grade'),grd_multirow_rec.GRD_GRADE);  
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','grd_scoring_pk'),grd_multirow_rec.GRD_SCORING_PK);  
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','grd_scoring_rule'),grd_multirow_rec.GRD_SCORING_RULE);  
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','instance_rec_num'),ln_instance_rec_num);  
                            
                     DBMS_LOB.APPEND (lc_child_xml_clob,lx_child_xml.getclobval()); 
                                                                       
                END LOOP;   
                        
                ms_qsm_utilities.get_multirow_template (p_multirow => lx_child_xml_template, p_metric_id => ln_response_metric_id,p_region_name=>'scr', p_full_blown => 'N');
                        
                DBMS_LOB.APPEND (lc_child_xml_clob,'</msa:grd>');
                        
                lx_response_xml := MS_QSM_UTILITIES.INSERT_XML(lx_response_xml,'datapacket/data/nonmultirow',XMLTYPE(lc_child_xml_clob),'A');
                        
                lc_child_xml_clob:='<msa:scr xmlns:msa="http://www.metricstream.com/appstudio/msa">';
                        
    --            FOR scr_multirow_rec IN (SELECT *  FROM MS_QSM_SCORING WHERE SCR_QST_FK IN (SELECT COLUMN_VALUE FROM TABLE(ms_apps_utilities.parse_string (lc_all_questions_id ,','))))
                FOR scr_multirow_rec IN (SELECT *  FROM MS_QSM_SCORING WHERE SCR_QST_FK IN (SELECT QST_ID_PK  FROM MS_QSM_QUESTION WHERE QST_SECTION_ID IN  (SELECT COLUMN_VALUE FROM TABLE(ms_apps_utilities.parse_string (lc_all_section_ids ,','))) ))
                LOOP
                    ln_instance_rec_num:=ln_instance_rec_num+1;    
                    lx_child_xml := lx_child_xml_template; 
                    
                    
                     BEGIN
                                                                    
                        SELECT A.STORED_VALUE 
                        INTO l_stored_val 
                        FROM MS_QSM_QST_LOV_DATA a
                        WHERE 
                    --                                A.QUESTIONNAIRE_ID = schedule_rec.questionnaire_id AND
                        A.QUESTION_ID = scr_multirow_rec.SCR_QST_FK  -- It should be PK for parent question
                        AND A.DISPLAY_VALUE = scr_multirow_rec.SCR_VALUE_1_1
                        AND ROWNUM <=1;
                                                            
                    EXCEPTION
                        WHEN OTHERS THEN
                              l_stored_val:=NULL;                                    
                    END; 
                             
                           
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_qst_fk'),scr_multirow_rec.SCR_QST_FK);  
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_id_pk'),scr_multirow_rec.SCR_ID_PK);  
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_score'),scr_multirow_rec.SCR_SCORE);  
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_grade'),scr_multirow_rec.SCR_GRADE);  
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_value_1_1'),l_stored_val);  
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_value_2'),scr_multirow_rec.SCR_VALUE_2);  
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_value_1'),scr_multirow_rec.SCR_VALUE_1);  
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','scr_scoring_rule'),scr_multirow_rec.SCR_SCORING_RULE);  
                    ms_qsm_utilities.update_xml(lx_child_xml,REPLACE(lv_child_path,'$','instance_rec_num'),ln_instance_rec_num);                  
                                    
                     DBMS_LOB.APPEND (lc_child_xml_clob,lx_child_xml.getclobval()); 
                                                     
                END LOOP;   
                                           
                DBMS_LOB.APPEND (lc_child_xml_clob,'</msa:scr>');    
                        
                lx_response_xml := MS_QSM_UTILITIES.INSERT_XML(lx_response_xml,'datapacket/data/nonmultirow',XMLTYPE(lc_child_xml_clob),'A');
                        
                lc_child_xml_clob:=lx_response_xml.getclobval();
                        
                lx_response_xml :=XMLTYPE(lc_child_xml_clob);

                ms_qsm_utilities.process_multirow(lx_response_xml,'sec,grd,qst,scr','section_id,grd_scoring_pk,question_pk,scr_id_pk');       
                
                                        ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                        pn_error_sequence    => xn_error_seq,
                                        pc_error_type        => 'I',
                                        pc_error_text        => 'VALUES'||schedule_rec.SURVEY_SCOPE_SELECTION|| schedule_rec.que_applies_to);   
--                dbms_output.put_line('line no 892'); 
--                dbms_output.put_line('SURVEY_SCOPE_SELECTION '||schedule_rec.SURVEY_SCOPE_SELECTION); 
--                dbms_output.put_line('que_applies_to '||schedule_rec.que_applies_to); 
                
                IF TRIM(schedule_rec.SURVEY_SCOPE_SELECTION) = '1' OR (TRIM(schedule_rec.SURVEY_SCOPE_SELECTION)='2' AND schedule_rec.que_applies_to ='1')   THEN -- Select from a Filtered List (Better for Large Surveys) OR 
    --                                                                                                        If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys)  AND  Applies TO objects is Adhoc
                   --dbms_output.put_line('line no 895');    
                                             
                   
                    --lv_param_flag :=  '{"SCORING":"'||schedule_rec.display_scoring||'","COLLABORATION":"'||schedule_rec.COLLABORATIVE_RESPONSE||'"}';   
                     LV_PARAM_FLAG :=  '{"SCORING":"'||LV_DISPLAY_SCORING||'","COLLABORATION":"'||SCHEDULE_REC.COLLABORATIVE_RESPONSE||'","REQUIRE_ALL_USER_APPROVAL":"'||SCHEDULE_REC.ALL_USER_APPROVAL||'"}'; 
                                             
                    ms_qsm_utilities.update_xml_clob(lx_response_xml, REPLACE(lv_path_clob,'$','temp_config_flag'),lv_param_flag);   -- Contains the Scoring Flag Yes or No , Collaboration flag         
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','app_based_on_resp'),schedule_rec.approval_based_on_response);            
					--raghu
                    /*SELECT MS_CONCAT(SEND_USER_ROLE)
                    INTO  lc_send_user_role
                    FROM MS_QSM_INIT_QUESTNR_USR
                    WHERE QUE_REQUEST_ID = schedule_rec.SCH_REQ_ID;*/
					
                    SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('QUE_REQUEST_ID = '''||schedule_rec.SCH_REQ_ID||'''','SEND_USER_ROLE','MS_QSM_INIT_QUESTNR_USR')
                    INTO lc_send_user_role
                    FROM DUAl;
                            
                    IF schedule_rec.QUE_APPLIES_TO = '10' THEN
                       --   dbms_output.put_line('line no 910');     
                        --raghu
						/*select ms_concat(a.org_entity_id)
                        into lc_org
                        from si_org_entities a,si_org_hierarchy_levels b,MS_QSM_INIT_QUESTNR_FOL c
                        where A.ORG_HIERARCHY_ID = B.ORG_HIERARCHY_ID
                        AND B.ORG_HIERARCHY_ID=C.FLTR_ORG_LEVEL
                        and c.QUE_REQUEST_ID = schedule_rec.SCH_REQ_ID;*/
						
                        SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('A.ORG_HIERARCHY_ID = B.ORG_HIERARCHY_ID
                                              AND B.ORG_HIERARCHY_ID=C.FLTR_ORG_LEVEL
                                              and c.QUE_REQUEST_ID = '''||schedule_rec.SCH_REQ_ID||'''','a.org_entity_id','si_org_entities a,si_org_hierarchy_levels b,MS_QSM_INIT_QUESTNR_FOL c')
                        INTO lc_org
                        FROM DUAl;
                        
                        /*SELECT MS_CONCAT(A.ORG_HIERARCHY_NAME)
                        INTO lv_org_desc
                        FROM si_org_hierarchy_levels a,MS_QSM_INIT_QUESTNR_FOL b
                        WHERE A.ORG_HIERARCHY_ID = B.FLTR_ORG_LEVEL
                        and b.QUE_REQUEST_ID = schedule_rec.SCH_REQ_ID;*/
						
                        SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('A.ORG_HIERARCHY_ID = B.FLTR_ORG_LEVEL
                                              and b.QUE_REQUEST_ID = '''||schedule_rec.SCH_REQ_ID||'''','A.ORG_HIERARCHY_NAME','si_org_hierarchy_levels a,MS_QSM_INIT_QUESTNR_FOL b')
                        INTO lv_org_desc
                        FROM DUAl;
                    
                     ELSIF schedule_rec.QUE_APPLIES_TO = '1' THEN -- Adhoc
                     --dbms_output.put_line('line no 925');  
                            --RAGHU
                            /*SELECT MS_CONCAT(ORG_ENTITY_ID)
                            INTO lc_org
                            FROM SI_ORG_ENTITIES;*/
							
                            SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('1=1','ORG_ENTITY_ID','SI_ORG_ENTITIES')
                            INTO lc_org
                            FROM DUAl;
                            
							
                            lv_org_desc := NULL;                        
                                
                    ELSE
                    
                      if NVL(schedule_rec.FIILTER_LEVEL,'1') = '1' THEN
						--raghu
	
                          /*SELECT MS_CONCAT(FLTR_OWNER_ORG)
                          INTO lc_org
                          FROM MS_QSM_INIT_QUESTNR_FOO
                          WHERE QUE_REQUEST_ID = schedule_rec.SCH_REQ_ID;      */
						  
                          SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('QUE_REQUEST_ID = '''||schedule_rec.SCH_REQ_ID||'''','FLTR_OWNER_ORG','MS_QSM_INIT_QUESTNR_FOO')
                          INTO lc_org
                          FROM DUAl;
                          
                          /*select ms_concat(ORG_ENTITY_NAME)
                          into lv_org_desc
                          from si_org_entities
                          WHERE TO_CHAR(ORG_ENTITY_ID) IN  (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (LC_ORG ,',')));    */
						  
                          SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('TO_CHAR(ORG_ENTITY_ID) IN  (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||LC_ORG||''' ,'','')))','ORG_ENTITY_NAME','si_org_entities')
                          INTO lv_org_desc
                          FROM DUAl;
                          
                       END IF;         
                       
                    END IF;                           


                    --  dbms_output.put_line('line no 955');       
                    MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object'),LV_ORG_DESC);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown                                       
                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to_object_code'),lc_org);
                    
                            
                    If Nvl(Trim(Schedule_Rec.Send_Option),'2')='2' Then -- Send Seperate Copy
                          --  dbms_output.put_line('line no 973');                    
                        IF schedule_rec.QUE_SEND_TO = '4' THEN -- que_send_to => 1 - All Control Owners , 2- All Process Owners , 3- Roles , 4 - Users
                                    
                            FOR user_rec IN (SELECT COLUMN_VALUE
                                                         FROM 
                                                         TABLE(MS_APPS_UTILITIES.SPLIT_STRING(lc_send_user_role,',')))
                            LOOP
                            
                                IF NVL(schedule_rec.FIILTER_LEVEL,'1')='2' THEN
                                  
                                    L_OBJECT_NAME:= SUBSTR(user_rec.COLUMN_VALUE,INSTR(user_rec.COLUMN_VALUE,' [',1)+2,((INSTR(user_rec.COLUMN_VALUE,']',1))-(INSTR(user_rec.COLUMN_VALUE,' [',1)+2)));
                                    
                                    L_OBJECT_ID:= ms_qsm_utilities.get_applies_to_object_code(i_object_id=>schedule_rec.QUE_APPLIES_TO,i_object_desc=>L_OBJECT_NAME);
                                                                      
                                    lc_respondents := SUBSTR(user_rec.COLUMN_VALUE,1,(INSTR(user_rec.COLUMN_VALUE,' [',1)-1));
                                    
                                    INSERT INTO MS_QSM_OBJECT_USER_MAPPING
                                    (QUE_REQUEST_ID,QUE_APPLIES_TO,OBJECT_ID,OBJECT_NAME,USER_TYPE,USER_NAME)
                                    VALUES(schedule_rec.QUE_REQUEST_ID,schedule_rec.QUE_APPLIES_TO,L_OBJECT_ID,L_OBJECT_NAME,'R',LC_RESPONDENTS);
                                    
                                    
                                    IF schedule_rec.RESPONSE_APPROVER IS NOT NULL THEN
                                       
                                       L_RESPONSE_APPROVER := '';
                                       
                                       IF schedule_rec.SEND_TO_APPROVAL = '4' THEN
                                       
                                          L_RESPONSE_APPROVER := schedule_rec.RESPONSE_APPROVER;
                                       
                                           /*FOR approver_rec IN (SELECT COLUMN_VALUE
                                                                 FROM 
                                                                 TABLE(MS_APPS_UTILITIES.SPLIT_STRING(schedule_rec.RESPONSE_APPROVER ,',')))LOOP
                                                                 
                                              IF INSTR(approver_rec.COLUMN_VALUE,'['||L_OBJECT_NAME||']',1)>0 THEN
                                              
                                                  
                                                 SELECT NVL2(L_RESPONSE_APPROVER,L_RESPONSE_APPROVER||',','')||SUBSTR(APPROVER_REC.COLUMN_VALUE,1,(INSTR(USER_REC.COLUMN_VALUE,' [',1)-1))
                                                 INTO L_RESPONSE_APPROVER
                                                 FROM DUAL;
                                                
                                              END IF;                   
                                           END LOOP;  */
                                       --raghu
                                       ELSIF schedule_rec.SEND_TO_APPROVAL = '3' THEN
										--raghu	
                                          /*SELECT MS_CONCAT(USER_NAME)
                                          INTO L_RESPONSE_APPROVER
                                          FROM
                                              (select distinct user_name                                          
                                              FROM MS_QSM_ORG_FLOW_V FDO
                                              where 
                                              --USER_NAME IN (SELECT USER_NAME FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(schedule_rec.QUE_APPLIES_TO||'~'||L_OBJECT_ID)))
                                              --and 
                                              ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (l_approver_organization,','))) AND
                                              ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (schedule_rec.RESPONSE_APPROVER ,',')))
                                              AND ACTIVITY_NAME='QSM - Approve Response') A;*/
											  
                                            SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('1=1','USER_NAME','(select distinct user_name                                          
                                                                    FROM MS_QSM_ORG_FLOW_V FDO
                                                                    where 
                                                                    ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||l_approver_organization||''','',''))) AND
                                                                    ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||schedule_rec.RESPONSE_APPROVER||''','','')))
                                                                    AND ACTIVITY_NAME=''QSM - Approve Response'') A')
                                            INTO L_RESPONSE_APPROVER
                                            FROM DUAl;	  
                                       
                                       END IF;
                                       
                                      INSERT INTO MS_QSM_OBJECT_USER_MAPPING
                                      (QUE_REQUEST_ID,QUE_APPLIES_TO,OBJECT_ID,OBJECT_NAME,USER_TYPE,USER_NAME)
                                      VALUES(schedule_rec.QUE_REQUEST_ID,schedule_rec.QUE_APPLIES_TO,L_OBJECT_ID,L_OBJECT_NAME,'A',L_RESPONSE_APPROVER);
                                      
                                    END IF;
                                    
                                    MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object'),L_OBJECT_NAME);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown       
                                    MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object_code'),L_OBJECT_ID);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown                                                               
                                    MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','response_approver'),L_RESPONSE_APPROVER);
 
                                ELSE
                                
                                  lc_respondents   := user_rec.COLUMN_VALUE;
                                  
                                  L_RESPONSE_APPROVER := '';
                                      
                                  IF schedule_rec.RESPONSE_APPROVER IS NOT NULL THEN
                                      
                                      IF schedule_rec.SEND_TO_APPROVAL = '4' THEN
                                      
                                          L_RESPONSE_APPROVER := schedule_rec.RESPONSE_APPROVER; 
                                          
                                      ELSIF  schedule_rec.SEND_TO_APPROVAL = '3' THEN
                                          --raghu
                                          /*SELECT MS_CONCAT(USER_NAME) 
                                          INTO L_RESPONSE_APPROVER
                                          FROM (
                                                select distinct user_name
                                                FROM MS_QSM_ORG_FLOW_V FDO
                                                where 
                                                --ORG_ENTITY_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR(LC_ORG) ,',')))
                                                --AND 
                                                ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (l_approver_organization,','))) AND
                                                ROLE_ID IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR(schedule_rec.RESPONSE_APPROVER) ,',')))
                                                AND ACTIVITY_NAME='QSM - Approve Response') A;*/
												
                                            SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('1=1','USER_NAME','(select distinct user_name                                          
                                                                    FROM MS_QSM_ORG_FLOW_V FDO
                                                                    where 
                                                                    ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||l_approver_organization||''','',''))) AND
                                                                    ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||schedule_rec.RESPONSE_APPROVER||''','','')))
                                                                    AND ACTIVITY_NAME=''QSM - Approve Response'') A')
                                            INTO L_RESPONSE_APPROVER
                                            FROM DUAl;				
                                          
                                     END IF;
                                     
                                      MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','response_approver'),L_RESPONSE_APPROVER);
                                     
                                  END IF;         
                                                                           
                                END IF;                                  
                                        
                                l_triggered_flag := false;
                                
                                IF l_triggered_count > 0 THEN
                                   check_response_triggerd (ip_respondent => lc_respondents,
                                                             ip_que_request_id => schedule_rec.sch_req_id,
                                                             ip_indv_item_pk  =>NULL,
                                                             op_triggered_flag => l_triggered_flag);
                                END IF;
                                
                                
                                IF NOT l_triggered_flag THEN
                                
                                  ms_qsm_is_user_subscribed(p_recepient => lc_respondents,
                                             p_type =>schedule_rec.SEND_OPTION);
                                             
                                
                                  if length(TRIM(LC_RESPONDENTS))>0 then
                                --   DBMS_OUTPUT.PUT_LINE('line no 1092');
                                   
                                              
                                   l_enriched_xml:=LX_RESPONSE_XML;
                                                                     
                                                       MS_QSM_UTILITIES.PREPOPULATE_SURVEY_RESPONSE ( 
                                                                                        P_RESPONDENTS 	   => LC_RESPONDENTS ,     
                                                                                        P_RESPONSE_XML	   => l_enriched_xml,    
                                                                                        p_que_request_id   => schedule_rec.sch_req_id,   
                                                                                        p_prepopulate      => schedule_rec.resp_prepopulate,
                                                                                        p_metric_id        => ln_response_metric_id ,
                                                                                        p_questionnaire_id => schedule_rec.questionnaire_id,
                                                                                        P_SCH_FREQUENCY    => SCHEDULE_REC.SCH_FREQUENCY,
                                                                                        p_lv_path   		 => lv_path
                                                                            );
                                  if schedule_rec.sch_frequency = 3 then
                                  
                                      select count(1) into l_schd_cnt 
                                      from ms_qsm_scheduler_details
                                      Where Sch_Req_Id=Schedule_Rec.Sch_Req_Id
                                      and   Indiviudal_Respondenet=to_char(lc_respondents);
                                      
                                      if  l_schd_cnt = 0 then
                                                    
                                            BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = schedule_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                           
                                                    MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                                             ip_response_xml => l_enriched_xml  ,
                                                                                             ip_que_request_id => schedule_rec.SCH_REQ_ID,
                                                                                             ip_excel_based=>schedule_rec.excel_based,
                                                                                             ip_iteration_number=>l_sch_iteration,
                                                                                             xn_error_handle_id =>ln_error_handle_id ,
                                                                                             xn_error_seq =>ln_error_seq ,
                                                                                             xn_error_code =>o_error_code  ,
                                                                                             Xn_Error_Message =>O_Error_Message );
                                     
                                      end if; 
                                  else
                                  
                                           BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = schedule_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                               
                                                        MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                                                 ip_response_xml => l_enriched_xml  ,
                                                                                                 ip_que_request_id => schedule_rec.SCH_REQ_ID,
                                                                                                 ip_excel_based=>schedule_rec.excel_based,
                                                                                                 ip_iteration_number=>l_sch_iteration,
                                                                                                 xn_error_handle_id =>ln_error_handle_id ,
                                                                                                 xn_error_seq =>ln_error_seq ,
                                                                                                 xn_error_code =>o_error_code  ,
                                                                                                 Xn_Error_Message =>O_Error_Message );
                                                       -- lx_response_xml:=null;
                                  end if;
                                               
                                  END IF;
                                END IF;            
                            END LOOP;         
                                    
                        ELSIF schedule_rec.QUE_SEND_TO = '3' THEN
                          IF NVL(schedule_rec.FIILTER_LEVEL,'1')='1' THEN  
                          
                            FOR user_rec IN (SELECT DISTINCT USER_NAME,ORG_ENTITY_ID
                                                            FROM MS_QSM_ORG_FLOW_V fdo
                                                            WHERE ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (lc_org ,',')))
                                                            AND role_id IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (lc_send_user_role ,',')))
                                                            AND ACTIVITY_NAME='QSM - Respond to Surveys')
                                   
                            LOOP
                            
                            
                                IF schedule_rec.RESPONSE_APPROVER IS NOT NULL THEN
                                       
                                    L_RESPONSE_APPROVER := '';
                                    
                                    IF schedule_rec.SEND_TO_APPROVAL = '4' THEN
                                      
                                          L_RESPONSE_APPROVER := schedule_rec.RESPONSE_APPROVER; 
                                          
                                    ELSIF  SCHEDULE_REC.SEND_TO_APPROVAL = '3' THEN
                                    --raghu
                                          /*SELECT MS_CONCAT(USER_NAME)
                                          INTO L_RESPONSE_APPROVER
                                          FROM 
                                            (SELECT DISTINCT USER_NAME
                                            FROM MS_QSM_ORG_FLOW_V FDO
                                            WHERE 
                                            --ORG_ENTITY_ID = USER_REC.ORG_ENTITY_ID 
                                            --AND 
                                            ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (l_approver_organization,','))) AND
                                            ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (schedule_rec.RESPONSE_APPROVER ,',')))
                                            AND ACTIVITY_NAME='QSM - Approve Response')A;*/
											
                                            SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('1=1','USER_NAME','(select distinct user_name                                          
                                                                  FROM MS_QSM_ORG_FLOW_V FDO
                                                                  where 
                                                                  ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||l_approver_organization||''','',''))) AND
                                                                  ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||schedule_rec.RESPONSE_APPROVER||''','','')))
                                                                  AND ACTIVITY_NAME=''QSM - Approve Response'') A')
                                            INTO L_RESPONSE_APPROVER
                                            FROM DUAl;
                                     
                                    END IF;                                           
                                
                                END IF;
                                        
                                lc_respondents   := user_rec.USER_NAME;
                                
                                l_triggered_flag := false;
                                
                                IF l_triggered_count > 0 THEN
                                   check_response_triggerd (ip_respondent => lc_respondents,
                                                             ip_que_request_id => schedule_rec.sch_req_id,
                                                             ip_indv_item_pk  =>NULL,
                                                             op_triggered_flag => l_triggered_flag);
                                END IF;
                                
                                
                                IF NOT l_triggered_flag THEN
                                
                                                                        
                                    ms_qsm_is_user_subscribed(p_recepient => lc_respondents,
                                                                              p_type =>schedule_rec.SEND_OPTION);
                                     
                                    IF SCHEDULE_REC.que_applies_to = '10' THEN -- Organizations
 
                                        SELECT ORG_HIERARCHY_NAME,B.ORG_HIERARCHY_ID
                                        INTO L_object_name,l_object_id 
                                        FROM  SI_ORG_HIERARCHY_LEVELS B,SI_ORG_ENTITIES A
                                        WHERE A.ORG_HIERARCHY_ID = B.ORG_HIERARCHY_ID
                                        AND A.ORG_ENTITY_ID = USER_REC.ORG_ENTITY_ID;
                                     
                                     ELSIF SCHEDULE_REC.que_applies_to <> '1' THEN
                                        
                                        select ORG_ENTITY_NAME,ORG_ENTITY_ID
                                        INTO L_object_name,l_object_id
                                        FROM SI_ORG_ENTITIES
                                        WHERE TO_CHAR(ORG_ENTITY_ID) = USER_REC.ORG_ENTITY_ID;
                                     
                                     END IF;
                     
                                                                                
                                      MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object'),L_OBJECT_NAME);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown       
                                      MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object_code'),L_OBJECT_ID);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown                                                               
                                      MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','response_approver'),L_RESPONSE_APPROVER);
                                           
                                                                                    
                                    if length(TRIM(LC_RESPONDENTS))>0 then
                                    -- DBMS_OUTPUT.PUT_LINE('line no 1219');
                                     
                                        l_enriched_xml:=LX_RESPONSE_XML;
                                        MS_QSM_UTILITIES.PREPOPULATE_SURVEY_RESPONSE ( 
                                                                                        P_RESPONDENTS 	   => LC_RESPONDENTS ,     
                                                                                        P_RESPONSE_XML	   => l_enriched_xml,    
                                                                                        p_que_request_id   => schedule_rec.sch_req_id,   
                                                                                        p_prepopulate      => schedule_rec.resp_prepopulate,
                                                                                        p_metric_id        => ln_response_metric_id ,
                                                                                        p_questionnaire_id => schedule_rec.questionnaire_id,
                                                                                        P_SCH_FREQUENCY    => SCHEDULE_REC.SCH_FREQUENCY,
                                                                                        p_lv_path   		 => lv_path
                                                                            );                                        
                                  IF schedule_rec.sch_frequency = 3 THEN
                                       select count(1) into l_schd_cnt 
                                            from ms_qsm_scheduler_details
                                            Where Sch_Req_Id=Schedule_Rec.Sch_Req_Id
                                            AND    Indiviudal_Respondenet=to_char(LC_RESPONDENTS);
                                           
                                          IF      l_schd_cnt = 0 THEN
                                              
                                            BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = schedule_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                              
                                                        MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                                                 ip_response_xml => l_enriched_xml  ,
                                                                                                 ip_que_request_id => schedule_rec.SCH_REQ_ID,
                                                                                                 ip_excel_based=>schedule_rec.excel_based,
                                                                                                 ip_iteration_number=>l_sch_iteration,
                                                                                                 xn_error_handle_id =>ln_error_handle_id ,
                                                                                                 xn_error_seq =>ln_error_seq ,
                                                                                                 xn_error_code =>o_error_code  ,
                                                                                                 Xn_Error_Message =>O_Error_Message ); 
--                                               
                                          end if; 
                                  else
                                  
                                            BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = schedule_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                               
                                                        MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                                                 ip_response_xml => l_enriched_xml  ,
                                                                                                 ip_que_request_id => schedule_rec.SCH_REQ_ID,
                                                                                                 ip_excel_based=>schedule_rec.excel_based,
                                                                                                 ip_iteration_number=>l_sch_iteration,
                                                                                                 xn_error_handle_id =>ln_error_handle_id ,
                                                                                                 xn_error_seq =>ln_error_seq ,
                                                                                                 xn_error_code =>o_error_code  ,
                                                                                                 Xn_Error_Message =>O_Error_Message );
                                                        --  lx_response_xml:=null;
                                  end if;       
                                                                                   
                                    END IF;
                                END IF;         
                            END LOOP;  
                          ELSE
                          
                            FOR USER_REC IN (SELECT DISTINCT B.USER_NAME,B.OBJECT_ID
                                                                  FROM (SELECT DISTINCT USER_NAME
                                                                        FROM MS_QSM_ORG_FLOW_V FDO
                                                                        WHERE ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (LC_SEND_USER_ROLE ,',')))
                                                                        AND ACTIVITY_NAME='QSM - Respond to Surveys') A, 
                                                                        (SELECT USER_NAME,OBJECT_ID
                                                                        FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(SCHEDULE_REC.QUE_APPLIES_TO||'~'||l_APPLIES_TO_ITEMS))) B
                                                                  WHERE A.USER_NAME = B.USER_NAME)
                                 
                                   LOOP
                                
                                        IF SCHEDULE_REC.RESPONSE_APPROVER IS NOT NULL THEN
                                         
                                            L_RESPONSE_APPROVER := '';
                                            
                                            IF SCHEDULE_REC.SEND_TO_APPROVAL = '4' THEN
                                              
                                                  L_RESPONSE_APPROVER := SCHEDULE_REC.RESPONSE_APPROVER; 
                                                  
                                            ELSIF  SCHEDULE_REC.SEND_TO_APPROVAL = '3' THEN
                                                --raghu
                                                /*SELECT MS_CONCAT(USER_NAME)
                                                INTO L_RESPONSE_APPROVER
                                                FROM
                                                  (SELECT DISTINCT USER_NAME
                                                  FROM MS_QSM_ORG_FLOW_V FDO
                                                  WHERE 
                                                  --USER_NAME IN (SELECT USER_NAME FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(SCHEDULE_REC.QUE_APPLIES_TO||'~'||USER_REC.OBJECT_ID)))
                                                  --AND 
                                                  ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (l_approver_organization,','))) AND
                                                  ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (SCHEDULE_REC.RESPONSE_APPROVER ,',')))
                                                  AND ACTIVITY_NAME='QSM - Approve Response')A;*/
												  
                                                  SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('1=1','USER_NAME','(select distinct user_name                                          
                                                                    FROM MS_QSM_ORG_FLOW_V FDO
                                                                    where 
                                                                    ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||l_approver_organization||''','',''))) AND
                                                                    ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||schedule_rec.RESPONSE_APPROVER||''','','')))
                                                                    AND ACTIVITY_NAME=''QSM - Approve Response'') A')
                                                  INTO L_RESPONSE_APPROVER
                                                  FROM DUAl;
                                            
                                            END IF; 
                                                                                
                                        END IF;
                                      
                                        lc_respondents   := user_rec.USER_NAME;
  
                                        l_triggered_flag := False;
                                          
                                        l_triggered_flag := false;
                                
                                        IF l_triggered_count > 0 THEN
                                           check_response_triggerd (ip_respondent => lc_respondents,
                                                                     ip_que_request_id => schedule_rec.sch_req_id,
                                                                     ip_indv_item_pk  =>NULL,
                                                                     op_triggered_flag => l_triggered_flag);
                                        END IF;
                                                               
                                        IF NOT l_triggered_flag THEN    
                                        
                                        
                                          L_OBJECT_NAME := ms_qsm_utilities.get_applies_to_object_desc(SCHEDULE_REC.que_applies_to,USER_REC.OBJECT_ID,SCHEDULE_REC.dd_current_user_name);
                                        
                                          MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object'),L_OBJECT_NAME);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown       
                                          MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object_code'),USER_REC.OBJECT_ID);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown                                                               
                                          MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','response_approver'),L_RESPONSE_APPROVER);
                                                                       
                                                                            
                                           ms_qsm_is_user_subscribed(p_recepient => lc_respondents,
                                                                              p_type =>schedule_rec.SEND_OPTION);
                                            
                                                                                    
                                            if length(TRIM(LC_RESPONDENTS))>0 then
                                            
                                           --  DBMS_OUTPUT.PUT_LINE('line no 1342');
                                             
                                                l_enriched_xml:=LX_RESPONSE_XML;  
                                               MS_QSM_UTILITIES.PREPOPULATE_SURVEY_RESPONSE ( 
                                                                                        P_RESPONDENTS 	   => LC_RESPONDENTS ,     
                                                                                        P_RESPONSE_XML	   => l_enriched_xml,    
                                                                                        p_que_request_id   => schedule_rec.sch_req_id,   
                                                                                        p_prepopulate      => schedule_rec.resp_prepopulate,
                                                                                        p_metric_id        => ln_response_metric_id ,
                                                                                        p_questionnaire_id => schedule_rec.questionnaire_id,
                                                                                        P_SCH_FREQUENCY    => SCHEDULE_REC.SCH_FREQUENCY,
                                                                                        p_lv_path   		 => lv_path
                                                                            );
                                  if schedule_rec.sch_frequency = 3 then
                                       select count(1) into l_schd_cnt 
                                            from ms_qsm_scheduler_details
                                            Where Sch_Req_Id=Schedule_Rec.Sch_Req_Id
                                            and   Indiviudal_Respondenet=to_char(lc_respondents);
                                          if      l_schd_cnt = 0 then
                                                        
                                           BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = schedule_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                               
                                                        MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                                                 ip_response_xml => l_enriched_xml  ,
                                                                                                 ip_que_request_id => schedule_rec.SCH_REQ_ID,
                                                                                                 ip_excel_based=>schedule_rec.excel_based,
                                                                                                 ip_iteration_number=>l_sch_iteration,
                                                                                                 xn_error_handle_id =>ln_error_handle_id ,
                                                                                                 xn_error_seq =>ln_error_seq ,
                                                                                                 xn_error_code =>o_error_code  ,
                                                                                                 Xn_Error_Message =>O_Error_Message );   
--                                          
                                          end if; 
                                  else
                                           BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = schedule_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                                        MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                                                 ip_response_xml => l_enriched_xml  ,
                                                                                                 ip_que_request_id => schedule_rec.SCH_REQ_ID,
                                                                                                 ip_excel_based=>schedule_rec.excel_based,
                                                                                                 ip_iteration_number=>l_sch_iteration,
                                                                                                 xn_error_handle_id =>ln_error_handle_id ,
                                                                                                 xn_error_seq =>ln_error_seq ,
                                                                                                 xn_error_code =>o_error_code  ,
                                                                                                 Xn_Error_Message =>O_Error_Message );
                                                      --  lx_response_xml:=null;
                                  end if;          
                                                                                   
                                            END IF;
                                            
                                        END IF;
                                                              
                                   END LOOP;
                              
                          END IF;
                          
                        ELSIF schedule_rec.QUE_SEND_TO = '1' OR schedule_rec.QUE_SEND_TO = '2'   THEN      -- '1' - All Control Owners , '2' - All Process Owners
                                                                     
                                    
                            FOR user_rec IN (SELECT USER_NAME,ORG_ENTITY_ID 
                                                    FROM MS_QSM_ORG_FLOW_V fdo
                                                    WHERE 
                                                     ((NVL(schedule_rec.FIILTER_LEVEL,'1')='1' AND ORG_ENTITY_ID IN (SELECT COLUMN_VALUE 
                                                                                                                        FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (LC_ORG ,',')))) 
                                                                      OR (NVL(schedule_rec.FIILTER_LEVEL,'1')='2' AND L_CONTACT_USER_AVAILABLE='Y' AND USER_NAME IN (SELECT USER_NAME
                                                                                                                                        FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(schedule_rec.QUE_APPLIES_TO||'~'||l_APPLIES_TO_ITEMS)))))                                                        
                                                    AND ACTIVITY_NAME =  'QSM - Respond to Surveys'
                                                    INTERSECT
                                                    SELECT USER_NAME,ORG_ENTITY_ID 
                                                    FROM MS_QSM_ORG_FLOW_V fdo
                                                    WHERE ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (lc_org ,',')))
                                                    AND ACTIVITY_NAME = DECODE(schedule_rec.QUE_SEND_TO ,'1','QSM-Control Owner','2','QSM-Process Owner')
                                                    )
                                                                                            
                            LOOP
                            
                            IF schedule_rec.RESPONSE_APPROVER IS NOT NULL THEN
                                   
                                    L_RESPONSE_APPROVER := '';
                                      
                                    IF schedule_rec.SEND_TO_APPROVAL = '4' THEN
                                        
                                       L_RESPONSE_APPROVER := schedule_rec.RESPONSE_APPROVER; 
                                            
                                     ELSIF  schedule_rec.SEND_TO_APPROVAL = '3' THEN
                                     --raghu
                                         /* SELECT MS_CONCAT(USER_NAME)
                                          INTO L_RESPONSE_APPROVER
                                          FROM
                                            (SELECT DISTINCT USER_NAME
                                            FROM MS_QSM_ORG_FLOW_V FDO
                                            where 
                                            --ORG_ENTITY_ID = user_rec.ORG_ENTITY_ID 
                                            --AND
                                            ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (l_approver_organization,','))) AND
                                            ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (schedule_rec.RESPONSE_APPROVER ,',')))
                                            AND ACTIVITY_NAME='QSM - Approve Response')A;*/
											
                                            SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('1=1','USER_NAME','(select distinct user_name                                          
                                                                    FROM MS_QSM_ORG_FLOW_V FDO
                                                                    where 
                                                                    ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||l_approver_organization||''','',''))) AND
                                                                    ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||schedule_rec.RESPONSE_APPROVER||''','','')))
                                                                    AND ACTIVITY_NAME=''QSM - Approve Response'') A')
                                            INTO L_RESPONSE_APPROVER
                                            FROM DUAl;	
                                     
                                     END IF;
                                     
                                     MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','response_approver'),L_RESPONSE_APPROVER);
                                     
                                END IF;     
                                        
                                LC_RESPONDENTS   := USER_REC.USER_NAME;
                                
                                l_triggered_flag := false;
                                
                                IF l_triggered_count > 0 THEN
                                   check_response_triggerd (ip_respondent => lc_respondents,
                                                             ip_que_request_id => schedule_rec.sch_req_id,
                                                             ip_indv_item_pk  =>NULL,
                                                             op_triggered_flag => l_triggered_flag);
                                END IF;
                                
                                
                                IF NOT l_triggered_flag THEN
                                
                                                                        
                                    ms_qsm_is_user_subscribed(p_recepient => lc_respondents,
                                                                              p_type =>schedule_rec.SEND_OPTION);
                                                                                      
                                 if length(TRIM(LC_RESPONDENTS))>0 then
                                   --  DBMS_OUTPUT.PUT_LINE('line no 1468');
                                     
                                        l_enriched_xml:=LX_RESPONSE_XML; 
                                        MS_QSM_UTILITIES.PREPOPULATE_SURVEY_RESPONSE ( 
                                                                                        P_RESPONDENTS 	   => LC_RESPONDENTS ,     
                                                                                        P_RESPONSE_XML	   => l_enriched_xml,    
                                                                                        p_que_request_id   => schedule_rec.sch_req_id,   
                                                                                        p_prepopulate      => schedule_rec.resp_prepopulate,
                                                                                        p_metric_id        => ln_response_metric_id ,
                                                                                        p_questionnaire_id => schedule_rec.questionnaire_id,
                                                                                        P_SCH_FREQUENCY    => SCHEDULE_REC.SCH_FREQUENCY,
                                                                                        p_lv_path   		 => lv_path
                                                                            );                                        
                                  if schedule_rec.sch_frequency = 3 then
                                       select count(1) into l_schd_cnt 
                                            from ms_qsm_scheduler_details
                                            Where Sch_Req_Id=Schedule_Rec.Sch_Req_Id
                                            and   Indiviudal_Respondenet=to_char(LC_RESPONDENTS);
                                          if      l_schd_cnt = 0 then
                                                      
                                                      
                                            BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = schedule_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                               
                                                        MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                                                 ip_response_xml => l_enriched_xml  ,
                                                                                                 ip_que_request_id => schedule_rec.SCH_REQ_ID,
                                                                                                 ip_excel_based=>schedule_rec.excel_based,
                                                                                                 ip_iteration_number=>l_sch_iteration,
                                                                                                 xn_error_handle_id =>ln_error_handle_id ,
                                                                                                 xn_error_seq =>ln_error_seq ,
                                                                                                 xn_error_code =>o_error_code  ,
                                                                                                 XN_ERROR_MESSAGE =>O_ERROR_MESSAGE );
--                                          
                                          end if; 
                                  else
                                               
                                             BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = schedule_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                               
                                               
                                                        MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                                                 ip_response_xml => l_enriched_xml  ,
                                                                                                 ip_que_request_id => schedule_rec.SCH_REQ_ID,
                                                                                                 ip_excel_based=>schedule_rec.excel_based,
                                                                                                 ip_iteration_number=>l_sch_iteration,
                                                                                                 xn_error_handle_id =>ln_error_handle_id ,
                                                                                                 xn_error_seq =>ln_error_seq ,
                                                                                                 xn_error_code =>o_error_code  ,
                                                                                                 Xn_Error_Message =>O_Error_Message );
                                                     -- lx_response_xml:=null;
                                  end if;        
                                                                                   
                                 END IF;      
                                    
                                END IF;                           
                                                                                            
                            END LOOP;                                                                                                
                                               
                        end if;

                    elsif trim(schedule_rec.send_option)='1' and schedule_rec.que_send_to = '3' then -- Send Same Copy to user Roles
                        
                         IF schedule_rec.RESPONSE_APPROVER IS NOT NULL THEN
                                     
                             L_RESPONSE_APPROVER := '';
                                        
                             IF schedule_rec.SEND_TO_APPROVAL = '4' THEN
                                          
                                L_RESPONSE_APPROVER := schedule_rec.RESPONSE_APPROVER; 
                                              
                             ELSIF  schedule_rec.SEND_TO_APPROVAL = '3' THEN
                                  --raghu                         
                                  /*SELECT MS_CONCAT(USER_NAME)
                                  INTO L_RESPONSE_APPROVER
                                  FROM 
                                    (select distinct user_name
                                    FROM MS_QSM_ORG_FLOW_V FDO
                                    where  
                                    --((NVL(schedule_rec.FIILTER_LEVEL,'1')='1' AND ORG_ENTITY_ID IN (SELECT COLUMN_VALUE 
                                    --                                                                          from table (ms_apps_utilities.parse_string (lc_org ,',')))) 
                                    --                        OR (NVL(SCHEDULE_REC.FIILTER_LEVEL,'1')='2' AND L_CONTACT_USER_AVAILABLE='Y' AND USER_NAME IN (SELECT USER_NAME
                                    --                                                                                          FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(schedule_rec.QUE_APPLIES_TO||'~'||l_APPLIES_TO_ITEMS)))))                                                                                                                                                                        
                                    --and 
                                    ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (l_approver_organization,','))) AND
                                    ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (schedule_rec.RESPONSE_APPROVER ,',')))
                                    AND ACTIVITY_NAME='QSM - Approve Response')A;*/
									
                                    SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('1=1','USER_NAME','(select distinct user_name                                          
                                                              FROM MS_QSM_ORG_FLOW_V FDO
                                                              where 
                                                              ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||l_approver_organization||''','',''))) AND
                                                              ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||schedule_rec.RESPONSE_APPROVER||''','','')))
                                                              AND ACTIVITY_NAME=''QSM - Approve Response'') A')
                                    INTO L_RESPONSE_APPROVER
                                    FROM DUAl;
                                       
                             END IF;
                                       
                             MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','response_approver'),L_RESPONSE_APPROVER);
                                       
                          END IF;     
                        
                        
                        IF SCHEDULE_REC.FIILTER_LEVEL='1' THEN                        
							--raghu	
                            /*SELECT MS_CONCAT(USER_NAME)
                            into lc_respondents                            
                            FROM(SELECT DISTINCT USER_NAME USER_NAME
                            from ms_qsm_org_flow_v fdo
                            WHERE 
                             org_entity_id in (select column_value 
                                               FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (LC_ORG ,','))) 
                           AND role_id IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (lc_send_user_role ,',')))
                            AND ACTIVITY_NAME='QSM - Respond to Surveys') A;      */
							
                            SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('1=1','USER_NAME','(select distinct user_name                                          
                                                          FROM MS_QSM_ORG_FLOW_V FDO
                                                          where 
                                                          ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||LC_ORG||''','',''))) AND
                                                          ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||lc_send_user_role||''','','')))
                                                          AND ACTIVITY_NAME=''QSM - Respond to Surveys'') A')
                            INTO lc_respondents
                            FROM DUAl;
                            
                         
                          l_triggered_flag := false;
                                
                          IF l_triggered_count > 0 THEN
                             check_response_triggerd (ip_respondent => lc_respondents,
                                                       ip_que_request_id => schedule_rec.sch_req_id,
                                                       ip_indv_item_pk  =>NULL,
                                                       ip_send_option => schedule_rec.send_option,
                                                       op_triggered_flag => l_triggered_flag);
                          END IF;
                        
                                
                          IF NOT l_triggered_flag THEN
                                        
                                                                          
                            ms_qsm_is_user_subscribed(p_recepient => lc_respondents,
                                                                      p_type =>schedule_rec.SEND_OPTION);
                                                                                      
                            if length(TRIM(LC_RESPONDENTS))>0 then
                            -- dbms_output.put_line('line no 1593');
                            
                                        l_enriched_xml:=LX_RESPONSE_XML;    
                                        MS_QSM_UTILITIES.PREPOPULATE_SURVEY_RESPONSE ( 
                                                                                        P_RESPONDENTS 	   => LC_RESPONDENTS ,     
                                                                                        P_RESPONSE_XML	   => l_enriched_xml,    
                                                                                        p_que_request_id   => schedule_rec.sch_req_id,   
                                                                                        p_prepopulate      => schedule_rec.resp_prepopulate,
                                                                                        p_metric_id        => ln_response_metric_id ,
                                                                                        p_questionnaire_id => schedule_rec.questionnaire_id,
                                                                                        P_SCH_FREQUENCY    => SCHEDULE_REC.SCH_FREQUENCY,
                                                                                        p_lv_path   		 => lv_path
                                                                            );    
                                  if schedule_rec.sch_frequency = 3 then
                                       select count(1) into l_schd_cnt 
                                            from ms_qsm_scheduler_details
                                            Where Sch_Req_Id=Schedule_Rec.Sch_Req_Id
                                            and   Indiviudal_Respondenet=to_char(lc_respondents);
                                          if      l_schd_cnt = 0 then
                                          
                                           BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = schedule_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                               
                                                        MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                                                 ip_response_xml => l_enriched_xml  ,
                                                                                                 ip_que_request_id => schedule_rec.SCH_REQ_ID,
                                                                                                 ip_excel_based=>schedule_rec.excel_based,
                                                                                                 ip_iteration_number=>l_sch_iteration,
                                                                                                 xn_error_handle_id =>ln_error_handle_id ,
                                                                                                 xn_error_seq =>ln_error_seq ,
                                                                                                 xn_error_code =>o_error_code  ,
                                                                                                 Xn_Error_Message =>O_Error_Message );  
--                                         
                                          end if; 
                                  else
                                  
                                          BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = schedule_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                               
                                                        MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                                                 ip_response_xml => l_enriched_xml  ,
                                                                                                 ip_que_request_id => schedule_rec.SCH_REQ_ID,
                                                                                                 ip_excel_based=>schedule_rec.excel_based,
                                                                                                 ip_iteration_number=>l_sch_iteration,
                                                                                                 xn_error_handle_id =>ln_error_handle_id ,
                                                                                                 xn_error_seq =>ln_error_seq ,
                                                                                                 xn_error_code =>o_error_code  ,
                                                                                                 Xn_Error_Message =>O_Error_Message );
                                                      --  lx_response_xml:=null;
                                  end if;
    
                            end if;
                        END IF; 
                      
                      else
                        
                        for user_rec in 
                           (select ms_concat(c.user_name) user_name,c.object_id object_id                            
                            from(select distinct a.user_name user_name,b.object_id
                            from ms_qsm_org_flow_v a,(select user_name,object_id from table(ms_qsm_utilities.module_object_contact_list(schedule_rec.que_applies_to||'~'||l_APPLIES_TO_ITEMS))) b
                            where a.user_name = b.user_name
                            and role_id in (select column_value from table (ms_apps_utilities.parse_string (lc_send_user_role ,',')))
                            and activity_name='QSM - Respond to Surveys') c
                            group by c.object_id)    loop 
                            
                          lc_respondents := user_rec.user_name;
                          
                          l_object_name := ms_qsm_utilities.get_applies_to_object_desc(schedule_rec.que_applies_to,user_rec.object_id,schedule_rec.dd_current_user_name);
                               
                          ms_qsm_utilities.update_xml(lx_response_xml, replace(lv_path,'$','applies_to_object'),l_object_name);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown       
                          ms_qsm_utilities.update_xml(lx_response_xml, replace(lv_path,'$','applies_to_object_code'),user_rec.object_id);  -- If  survey_scope_selection is Select from a Filtered List (Better for Large Surveys) Then Applies TO objects are Organization or Levels Depends of the Applies to Dropdown                                                                                                                                                                          
    
                          
                          l_triggered_flag := false;
                                
                          IF l_triggered_count > 0 THEN
                             check_response_triggerd (ip_respondent => lc_respondents,
                                                       ip_que_request_id => schedule_rec.sch_req_id,
                                                       ip_indv_item_pk  =>NULL,
                                                       ip_send_option => schedule_rec.send_option,
                                                       op_triggered_flag => l_triggered_flag);
                          END IF;
                        
                                
                          IF NOT l_triggered_flag THEN
                                        
                                                                          
                            ms_qsm_is_user_subscribed(p_recepient => lc_respondents,
                                                                      p_type =>schedule_rec.SEND_OPTION);
                                                                                      
                            if length(TRIM(LC_RESPONDENTS))>0 then
                             --  DBMS_OUTPUT.PUT_LINE('line no 1685');
                               
                                        l_enriched_xml:=LX_RESPONSE_XML;                                
                                        MS_QSM_UTILITIES.PREPOPULATE_SURVEY_RESPONSE ( 
                                                                                        P_RESPONDENTS 	   => LC_RESPONDENTS ,     
                                                                                        P_RESPONSE_XML	   => l_enriched_xml,    
                                                                                        p_que_request_id   => schedule_rec.sch_req_id,   
                                                                                        p_prepopulate      => schedule_rec.resp_prepopulate,
                                                                                        p_metric_id        => ln_response_metric_id ,
                                                                                        p_questionnaire_id => schedule_rec.questionnaire_id,
                                                                                        P_SCH_FREQUENCY    => SCHEDULE_REC.SCH_FREQUENCY,
                                                                                        p_lv_path   		 => lv_path
                                                                            );
                                  if schedule_rec.sch_frequency = 3 then
                                       select count(1) into l_schd_cnt 
                                            from ms_qsm_scheduler_details
                                            Where Sch_Req_Id=Schedule_Rec.Sch_Req_Id
                                            and   Indiviudal_Respondenet=to_char(lc_respondents);
                                          if      l_schd_cnt = 0 then
                                          
                                                 BEGIN
                                                  
                                                    SELECT OBJECT_NAME
                                                    INTO lv_applies_to_name
                                                    FROM MS_QSM_APPLIES_TO
                                                    WHERE OBJECT_ID = schedule_rec.que_applies_to
                                                    AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                                    WHERE A.LOCALE=B.LOCALE_STRING
                                                                    AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                                    
                                                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                                    
                                                  EXCEPTION WHEN OTHERS THEN
                                                    NULL;
                                                  END;
                                               
                                                        MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                                                 ip_response_xml => l_enriched_xml  ,
                                                                                                 ip_que_request_id => schedule_rec.SCH_REQ_ID,
                                                                                                 ip_excel_based=>schedule_rec.excel_based,
                                                                                                 ip_iteration_number=>l_sch_iteration,
                                                                                                 xn_error_handle_id =>ln_error_handle_id ,
                                                                                                 xn_error_seq =>ln_error_seq ,
                                                                                                 xn_error_code =>o_error_code  ,
                                                                                                 xn_error_message =>o_error_message );  
--                                                  
                                          end if; 
                                  else
                                  
                                              BEGIN
                                                
                                                  SELECT OBJECT_NAME
                                                  INTO lv_applies_to_name
                                                  FROM MS_QSM_APPLIES_TO
                                                  WHERE OBJECT_ID = schedule_rec.que_applies_to
                                                  AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                                  WHERE A.LOCALE=B.LOCALE_STRING
                                                                  AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                                  
                                                  ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                                  
                                                EXCEPTION WHEN OTHERS THEN
                                                  NULL;
                                                END;
                                                   
                                                        MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                                                 ip_response_xml => l_enriched_xml  ,
                                                                                                 ip_que_request_id => schedule_rec.SCH_REQ_ID,
                                                                                                 ip_excel_based=>schedule_rec.excel_based,
                                                                                                 ip_iteration_number=>l_sch_iteration,
                                                                                                 xn_error_handle_id =>ln_error_handle_id ,
                                                                                                 xn_error_seq =>ln_error_seq ,
                                                                                                 xn_error_code =>o_error_code  ,
                                                                                                 Xn_Error_Message =>O_Error_Message );
                                                      --  lx_response_xml:=null;
                                  end if;                                                                                   
    
                            end if;
                          END IF; 
                          
                        
                        end loop;     
                        
                      end if;
                      
                    END IF ;
                    --  dbms_output.put_line('line no 1502');      
                ELSIF  TRIM(schedule_rec.SURVEY_SCOPE_SELECTION) = '2' AND schedule_rec.que_applies_to <>'1'  THEN  -- Select One or More Individual Items  and applies to Adhoc
               -- dbms_output.put_line('line no 1504');
                 ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                        pn_error_sequence    => xn_error_seq,
                                        pc_error_type        => 'I',
                                        pc_error_text        => 'INSIDE INDV');   
                                        

                    FOR indv_item_rec IN (SELECT INDV_ITEM_PK,
                                                                  INDV_ITEM_FIELD_1,
                                                                  INDV_ITEM_FIELD_2,
                                                                  INDV_ITEM_FIELD_3,
                                                                  INDV_QUE_SEND_TO,
                                                                  INDV_SEND_OPTION,
                                                                  QUE_REQUEST_ID,
                                                                  INDV_COLLBORTIV_RESP,
                                                                  INDV_RESP_APPROVER,
                                                                  INDV_APPR_BASED_ON_RESPONSE,
                                                                  ITEM_RELTD_COLLABORATOR,
                                                                  ITEM_RELTD_RESPONDENT,
                                                                  INDV_SEND_TO_APPROVAL,
                                                                  INDV_ALL_USER_APPROVAL
                                                     FROM MS_QSM_INIT_QUESTNR_IND
                                                     WHERE QUE_REQUEST_ID = schedule_rec.SCH_REQ_ID)
                    LOOP
                            
                         select value
                         into lv_delimeter
                         from MS_QSM_PARAMS
                         where parameter='QUESTION_LOV_DELIMETER'
                         and ENABLED ='Y';
                               
                         lv_applies_to_object := ms_qsm_utilities.get_applies_to_object_desc(schedule_rec.QUE_APPLIES_TO,indv_item_rec.INDV_ITEM_FIELD_1,schedule_rec.DD_CREATED_BY);
                                 
                         MS_QSM_UTILITIES.UPDATE_XML(LX_RESPONSE_XML, REPLACE(LV_PATH,'$','applies_to_object'),LV_APPLIES_TO_OBJECT);
                         ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to_object_code'),indv_item_rec.INDV_ITEM_FIELD_1); 
                         
                        IF UPPER(indv_item_rec. ITEM_RELTD_COLLABORATOR) = 'YES' THEN
                            ms_qsm_utilities.update_xml(lx_response_xml,REPLACE(lv_path,'$', 'del_config_flag'),schedule_rec.que_applies_to||'~'||indv_item_rec.INDV_ITEM_FIELD_1); 
                        END IF;              
                         
                        --lv_param_flag :=  '{"SCORING":"'||schedule_rec.display_scoring||'","COLLABORATION":"'||indv_item_rec.indv_collbortiv_resp||'"}';  
                        LV_PARAM_FLAG :=  '{"SCORING":"'||LV_DISPLAY_SCORING||'","COLLABORATION":"'||INDV_ITEM_REC.INDV_COLLBORTIV_RESP||'","DELIMETER":"'||LV_DELIMETER||'","REQUIRE_ALL_USER_APPROVAL":"'||INDV_ITEM_REC.INDV_ALL_USER_APPROVAL||'"}'; 
                        
                                                                             
                        MS_QSM_UTILITIES.UPDATE_XML_CLOB(LX_RESPONSE_XML, REPLACE(LV_PATH_CLOB,'$','temp_config_flag'),LV_PARAM_FLAG);   -- Contains the Scoring Flag Yes or No , Collaboration flag         
                        --ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','response_approver'),indv_item_rec.indv_resp_approver);
                        ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','app_based_on_resp'),indv_item_rec.indv_appr_based_on_response);
                        --raghu
                        /*SELECT MS_CONCAT(SEND_TO_ASSESSOR_ORG)
                        INTO l_send_to_assessor_org
                        FROM MS_QSM_INIT_QUESTNR_SAO  
                        WHERE INDV_ITEM_PK = indv_item_rec.INDV_ITEM_PK
                        AND QUE_REQUEST_ID = schedule_rec.SCH_REQ_ID;*/
						
                        SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('INDV_ITEM_PK = '''||indv_item_rec.INDV_ITEM_PK||'''
                                              AND QUE_REQUEST_ID = '''||schedule_rec.SCH_REQ_ID||'''','SEND_TO_ASSESSOR_ORG','MS_QSM_INIT_QUESTNR_SAO')
                        INTO l_send_to_assessor_org
                        FROM DUAl;
                                
                        /*SELECT MS_CONCAT(SEND_TO_ASSESSOR)
                        INTO l_send_to_assessors
                        FROM MS_QSM_INIT_QUESTNR_STA
                        WHERE INDV_ITEM_PK =  indv_item_rec.INDV_ITEM_PK
                        AND QUE_REQUEST_ID = schedule_rec.SCH_REQ_ID;*/
						
                        SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('INDV_ITEM_PK =  '''||indv_item_rec.INDV_ITEM_PK||'''
                                              AND QUE_REQUEST_ID = '''||schedule_rec.SCH_REQ_ID||'''','SEND_TO_ASSESSOR','MS_QSM_INIT_QUESTNR_STA')
                        INTO l_send_to_assessors
                        FROM DUAl;
                        
                        --raghu
                        /*SELECT MS_CONCAT(INDV_APPROVER_ORGANIZATION)
                        INTO l_indv_approver_organization
                        FROM MS_QSM_INIT_QUESTNR_IAO
                        WHERE INDV_ITEM_PK = indv_item_rec.INDV_ITEM_PK
                        AND QUE_REQUEST_ID = schedule_rec.SCH_REQ_ID;*/
						
                        SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('INDV_ITEM_PK = '''||indv_item_rec.INDV_ITEM_PK||'''
                                              AND QUE_REQUEST_ID = '''||schedule_rec.SCH_REQ_ID||'''','INDV_APPROVER_ORGANIZATION','MS_QSM_INIT_QUESTNR_IAO')
                        INTO l_indv_approver_organization
                        FROM DUAl;
                        
                         IF indv_item_rec.INDV_RESP_APPROVER IS NOT NULL THEN
                                       
                              L_RESPONSE_APPROVER := '';
                                    
                              IF indv_item_rec.INDV_SEND_TO_APPROVAL = '4' THEN
                                
                                    L_RESPONSE_APPROVER := indv_item_rec.INDV_RESP_APPROVER; 
                                    
                              ELSIF  indv_item_rec.INDV_SEND_TO_APPROVAL = '3' THEN
                                 --raghu 
                                  /*SELECT MS_CONCAT(USER_NAME)
                                  INTO L_RESPONSE_APPROVER
                                  FROM 
                                    (select distinct user_name
                                    FROM MS_QSM_ORG_FLOW_V FDO
                                    where 
                                    ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (nvl(l_indv_approver_organization,ORG_ENTITY_ID),','))) AND
                                    --AND (indv_item_rec.item_reltd_respondent='no' OR 
                                      --                                  (INDV_ITEM_REC.ITEM_RELTD_RESPONDENT='yes' AND USER_NAME IN (SELECT USER_NAME 
                                      --                                                                                                FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(schedule_rec.QUE_APPLIES_TO||'~'||INDV_ITEM_REC.INDV_ITEM_FIELD_1)))))
                                      --                             
                                    --and 
                                    ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (INDV_ITEM_REC.INDV_RESP_APPROVER ,',')))
                                    AND ACTIVITY_NAME='QSM - Approve Response')A;*/
									
                                    SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('1=1','USER_NAME','(select distinct user_name
                                                                    FROM MS_QSM_ORG_FLOW_V FDO
                                                                    where 
                                                                    ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING (nvl('''||l_indv_approver_organization||''',ORG_ENTITY_ID),'',''))) AND
                                                                    ROLE_ID IN (SELECT COLUMN_VALUE FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING ('''||INDV_ITEM_REC.INDV_RESP_APPROVER||''','','')))
                                                                    AND ACTIVITY_NAME=''QSM - Approve Response'')A')
                                    INTO L_RESPONSE_APPROVER
                                    FROM DUAl;
                              
                              END IF; 
                        
                            ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','response_approver'),L_RESPONSE_APPROVER);
                                                                        
                        END IF;
                                
                        if NVL(TRIM(INDV_ITEM_REC.INDV_SEND_OPTION),'2')='2' then -- Send Seperate Copy
                          -- dbms_output.put_line('line no 1852 '||INDV_ITEM_REC.INDV_SEND_OPTION);
                                            
                            IF indv_item_rec.INDV_QUE_SEND_TO = '4' THEN -- que_send_to => 1 - All Control Owners , 2- All Process Owners , 3- Roles , 4 - Users
                                        
                                FOR user_rec IN (SELECT COLUMN_VALUE
                                                             FROM 
                                                             TABLE(MS_APPS_UTILITIES.SPLIT_STRING(l_send_to_assessors,',')))
                                LOOP
                                            
                                    lc_respondents   := user_rec.COLUMN_VALUE;
                                    
                                    l_triggered_flag := False;
                                        
                                    IF l_triggered_count >0 THEN
                                    
                                        check_response_triggerd (ip_respondent => lc_respondents,
                                                             ip_que_request_id => schedule_rec.sch_req_id,
                                                             ip_indv_item_pk  =>indv_item_rec.indv_item_pk,
                                                             op_triggered_flag => l_triggered_flag);
                                    END IF;
                                                             
                                    IF NOT l_triggered_flag THEN  
                                --    dbms_output.put_line('line no 1617');
                                            
                                        ms_qsm_is_user_subscribed(p_recepient => lc_respondents,
                                                                                 p_type =>indv_item_rec.INDV_SEND_OPTION);
                                                
                                        if length(TRIM(LC_RESPONDENTS))>0 then
   -- DBMS_OUTPUT.PUT_LINE('line no 1622 '||LC_RESPONDENTS);
                                            
                                           l_enriched_xml:=LX_RESPONSE_XML;
                                          
                                            MS_QSM_UTILITIES.PREPOPULATE_SURVEY_RESPONSE ( 
                                                                                        P_RESPONDENTS 	   => LC_RESPONDENTS ,     
                                                                                        P_RESPONSE_XML	   => l_enriched_xml,    
                                                                                        p_que_request_id   => schedule_rec.sch_req_id,   
                                                                                        p_prepopulate      => schedule_rec.resp_prepopulate,
                                                                                        p_metric_id        => ln_response_metric_id ,
                                                                                        p_questionnaire_id => schedule_rec.questionnaire_id,
                                                                                        P_SCH_FREQUENCY    => SCHEDULE_REC.SCH_FREQUENCY,
                                                                                        p_lv_path   		 => lv_path
                                                                            );
                                        
                                  if schedule_rec.sch_frequency = 3 then
                                       select count(1) into l_schd_cnt 
                                            from ms_qsm_scheduler_details
                                            Where Sch_Req_Id=Schedule_Rec.Sch_Req_Id
                                            and Indiviudal_Respondenet=to_char(lc_respondents);
                                          if      l_schd_cnt = 0 then
                                          
                                                   BEGIN
                                                    
                                                      SELECT OBJECT_NAME
                                                      INTO lv_applies_to_name
                                                      FROM MS_QSM_APPLIES_TO
                                                      WHERE OBJECT_ID = schedule_rec.que_applies_to
                                                      AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                                      WHERE A.LOCALE=B.LOCALE_STRING
                                                                      AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                                      
                                                      ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                                      
                                                    EXCEPTION WHEN OTHERS THEN
                                                      NULL;
                                                    END;
                                               
                                                        ms_qsm_utilities.initiate_response_flow (ip_respondents => lc_respondents ,
                                                                                                 ip_response_xml => l_enriched_xml  ,
                                                                                                 ip_que_request_id => schedule_rec.SCH_REQ_ID,
                                                                                                 ip_excel_based=>schedule_rec.excel_based,
                                                                                                 ip_iteration_number=>l_sch_iteration,
                                                                                                 xn_error_handle_id =>ln_error_handle_id ,
                                                                                                 xn_error_seq =>ln_error_seq ,
                                                                                                 xn_error_code =>o_error_code  ,
                                                                                                 Xn_Error_Message =>O_Error_Message );
--                                            
                                          end if; 
                                  else
                                               
                                               
                                                BEGIN
                                                  
                                                    SELECT OBJECT_NAME
                                                    INTO lv_applies_to_name
                                                    FROM MS_QSM_APPLIES_TO
                                                    WHERE OBJECT_ID = schedule_rec.que_applies_to
                                                    AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                                    WHERE A.LOCALE=B.LOCALE_STRING
                                                                    AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                                    
                                                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                                    
                                                  EXCEPTION WHEN OTHERS THEN
                                                    NULL;
                                                  END;
                                                  
                                               
                                                        MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                                                 ip_response_xml => l_enriched_xml  ,
                                                                                                 ip_que_request_id => schedule_rec.SCH_REQ_ID,
                                                                                                 ip_excel_based=>schedule_rec.excel_based,
                                                                                                 ip_iteration_number=>l_sch_iteration,
                                                                                                 xn_error_handle_id =>ln_error_handle_id ,
                                                                                                 xn_error_seq =>ln_error_seq ,
                                                                                                 xn_error_code =>o_error_code  ,
                                                                                                 Xn_Error_Message =>O_Error_Message );
                                                       
                                  end if;                                                    
    
                                        END IF;
                                     END IF;               
                                END LOOP;         
                                        
                            ELSIF indv_item_rec.INDV_QUE_SEND_TO = '3' THEN
                                         
                                FOR user_rec IN (SELECT DISTINCT USER_NAME
                                                                FROM MS_QSM_ORG_FLOW_V fdo
                                                                where ((ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (L_SEND_TO_ASSESSOR_ORG ,','))) AND INDV_ITEM_REC.ITEM_RELTD_RESPONDENT='no') OR (INDV_ITEM_REC.ITEM_RELTD_RESPONDENT='yes'))
                                                                AND (indv_item_rec.item_reltd_respondent='no' OR 
                                                                        (INDV_ITEM_REC.ITEM_RELTD_RESPONDENT='yes' AND USER_NAME IN (SELECT USER_NAME 
                                                                                                                                      FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(schedule_rec.que_applies_to||'~'||indv_item_rec.indv_item_field_1)))))
                                                                AND role_id IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (l_send_to_assessors ,',')))
                                                                AND ACTIVITY_NAME='QSM - Respond to Surveys')
                                       
                                LOOP
                                            
                                    lc_respondents   := user_rec.USER_NAME;
                                    
                                    l_triggered_flag := False;
                                        
                                    IF l_triggered_count >0 THEN
                                    
                                        check_response_triggerd (ip_respondent => lc_respondents,
                                                             ip_que_request_id => schedule_rec.sch_req_id,
                                                             ip_indv_item_pk  =>indv_item_rec.indv_item_pk,
                                                             op_triggered_flag => l_triggered_flag);
                                    END IF;
                                                             
                                    IF NOT l_triggered_flag THEN  
                                            
                                                                            
                                        ms_qsm_is_user_subscribed(p_recepient => lc_respondents,
                                                                                  p_type =>indv_item_rec.INDV_SEND_OPTION);
                                                                                          
                                        if length(TRIM(LC_RESPONDENTS))>0 then
                                              --     DBMS_OUTPUT.PUT_LINE('line no 1671');
                                                   
                                           l_enriched_xml:=LX_RESPONSE_XML;
                                            
                                            MS_QSM_UTILITIES.PREPOPULATE_SURVEY_RESPONSE ( 
                                                                                        P_RESPONDENTS 	   => LC_RESPONDENTS ,     
                                                                                        P_RESPONSE_XML	   => l_enriched_xml,    
                                                                                        p_que_request_id   => schedule_rec.sch_req_id,   
                                                                                        p_prepopulate      => schedule_rec.resp_prepopulate,
                                                                                        p_metric_id        => ln_response_metric_id ,
                                                                                        p_questionnaire_id => schedule_rec.questionnaire_id,
                                                                                        P_SCH_FREQUENCY    => SCHEDULE_REC.SCH_FREQUENCY,
                                                                                        p_lv_path   		 => lv_path
                                                                            );       
                                              if schedule_rec.sch_frequency = 3 then
                                                   select count(1) into l_schd_cnt 
                                                        from ms_qsm_scheduler_details
                                                        Where Sch_Req_Id=Schedule_Rec.Sch_Req_Id
                                                        and Indiviudal_Respondenet=to_char(lc_respondents);
                                                      if      l_schd_cnt = 0 then
                                                      
                                                                    
                                                                     BEGIN
                                            
                                                                        SELECT OBJECT_NAME
                                                                        INTO lv_applies_to_name
                                                                        FROM MS_QSM_APPLIES_TO
                                                                        WHERE OBJECT_ID = schedule_rec.que_applies_to
                                                                        AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                                                        WHERE A.LOCALE=B.LOCALE_STRING
                                                                                        AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                                                        
                                                                        ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                                                        
                                                                      EXCEPTION WHEN OTHERS THEN
                                                                        NULL;
                                                                      END;
                                                           
                                                                    MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                                                             ip_response_xml => l_enriched_xml  ,
                                                                                                             ip_que_request_id => schedule_rec.SCH_REQ_ID,
                                                                                                             ip_excel_based=>schedule_rec.excel_based,
                                                                                                             ip_iteration_number=>l_sch_iteration,
                                                                                                             xn_error_handle_id =>ln_error_handle_id ,
                                                                                                             xn_error_seq =>ln_error_seq ,
                                                                                                             xn_error_code =>o_error_code  ,
                                                                                                             xn_error_message =>o_error_message );
            --                                           
                                                      end if; 
                                              else
                                              
                                                     BEGIN
                                                  
                                                        SELECT OBJECT_NAME
                                                        INTO lv_applies_to_name
                                                        FROM MS_QSM_APPLIES_TO
                                                        WHERE OBJECT_ID = schedule_rec.que_applies_to
                                                        AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                                        WHERE A.LOCALE=B.LOCALE_STRING
                                                                        AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                                        
                                                        ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                                        
                                                      EXCEPTION WHEN OTHERS THEN
                                                        NULL;
                                                      END;
                                                           
                                                                    MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                                                             ip_response_xml => l_enriched_xml  ,
                                                                                                             ip_que_request_id => schedule_rec.SCH_REQ_ID,
                                                                                                             ip_excel_based=>schedule_rec.excel_based,
                                                                                                             ip_iteration_number=>l_sch_iteration,
                                                                                                             xn_error_handle_id =>ln_error_handle_id ,
                                                                                                             xn_error_seq =>ln_error_seq ,
                                                                                                             xn_error_code =>o_error_code  ,
                                                                                                             Xn_Error_Message =>O_Error_Message );
                                                                 -- lx_response_xml:=null;
                                              end if;                
                                                                                                   
                                        END IF;
                                     END IF;       
                                END LOOP;                                                                        
                                               
                            END IF;

                        ELSIF TRIM(INDV_ITEM_REC.INDV_SEND_OPTION)='1' and INDV_ITEM_REC.INDV_QUE_SEND_TO = '3' then -- Send Same Copy to user Roles
                            --  DBMS_OUTPUT.PUT_LINE('LINE NO 2028 '||INDV_ITEM_REC.INDV_SEND_OPTION||'  '||INDV_ITEM_REC.INDV_QUE_SEND_TO);      
                            --raghu
							/*SELECT MS_CONCAT(USER_NAME)
                            INTO lc_respondents
                            FROM 
                            (SELECT DISTINCT USER_NAME
                            from ms_qsm_org_flow_v fdo
                            WHERE ((ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (l_send_to_assessor_org ,','))) AND INDV_ITEM_REC.ITEM_RELTD_RESPONDENT='no') OR (INDV_ITEM_REC.ITEM_RELTD_RESPONDENT='yes'))
                            AND role_id IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (l_send_to_assessors ,',')))
                            AND ACTIVITY_NAME='QSM - Respond to Surveys'
                            AND (indv_item_rec.item_reltd_respondent='no' OR 
                                                                        (INDV_ITEM_REC.ITEM_RELTD_RESPONDENT='yes' AND USER_NAME IN (SELECT USER_NAME 
                                                                                                                                      FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST(schedule_rec.QUE_APPLIES_TO||'~'||INDV_ITEM_REC.INDV_ITEM_FIELD_1))))))
                               ;      */
							   
                            SELECT MS_QSM_UTILITIES.FN_GET_MLOV_VALUES('1=1','USER_NAME','(SELECT DISTINCT USER_NAME
                                                            from ms_qsm_org_flow_v fdo
                                                            WHERE ORG_ENTITY_ID IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string ('''||l_send_to_assessor_org||''' ,'','')))  AND role_id IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string ('''||l_send_to_assessors||''' ,'','')))
                                                            AND ACTIVITY_NAME=''QSM - Respond to Surveys''
                                                            AND ('''||indv_item_rec.item_reltd_respondent||'''=''no'' OR 
                                                                                  ('''||INDV_ITEM_REC.ITEM_RELTD_RESPONDENT||'''=''yes'' AND USER_NAME IN (SELECT USER_NAME 
                                                                                                                  FROM TABLE(MS_QSM_UTILITIES.MODULE_OBJECT_CONTACT_LIST('''||schedule_rec.QUE_APPLIES_TO||'''||''~''||'''||INDV_ITEM_REC.INDV_ITEM_FIELD_1||'''))))))')
                            INTO lc_respondents
                            FROM DUAl;	
                                    
                            l_triggered_flag := False;
                                        
                            IF l_triggered_count >0 THEN
                            
                                check_response_triggerd (ip_respondent => lc_respondents,
                                                     ip_que_request_id => schedule_rec.sch_req_id,
                                                     ip_indv_item_pk  =>indv_item_rec.indv_item_pk,
                                                     ip_send_option => indv_item_rec.indv_send_option,
                                                     op_triggered_flag => l_triggered_flag);
                            END IF;
                                                     
                            IF NOT l_triggered_flag THEN                                                                                                                      
                                                                        
                                ms_qsm_is_user_subscribed(p_recepient => lc_respondents,
                                                                          p_type =>indv_item_rec.INDV_SEND_OPTION);
                                                                                      
                                if length(TRIM(LC_RESPONDENTS))>0 then
                                      --  dbms_output.put_line('line no 1721');
 
                                        l_enriched_xml:=LX_RESPONSE_XML;
                                        MS_QSM_UTILITIES.PREPOPULATE_RESPONSE_ONE_COPY ( 
                                                                                        P_RESPONDENTS 	   => LC_RESPONDENTS ,     
                                                                                        P_RESPONSE_XML	   => l_enriched_xml,    
                                                                                        p_que_request_id   => schedule_rec.sch_req_id,   
                                                                                        p_prepopulate      => schedule_rec.resp_prepopulate,
                                                                                        p_metric_id        => ln_response_metric_id ,
                                                                                        p_questionnaire_id => schedule_rec.questionnaire_id,
                                                                                        P_SCH_FREQUENCY    => SCHEDULE_REC.SCH_FREQUENCY,
                                                                                        p_lv_path   		 => lv_path
                                                                            );
                                  if schedule_rec.sch_frequency = 3 then
                                       select count(1) into l_schd_cnt 
                                            from ms_qsm_scheduler_details
                                            Where Sch_Req_Id=Schedule_Rec.Sch_Req_Id
                                            and Indiviudal_Respondenet=to_char(lc_respondents);
                                          if      l_schd_cnt = 0 then
                                               
                                               
                                                BEGIN
                                                  
                                                    SELECT OBJECT_NAME
                                                    INTO lv_applies_to_name
                                                    FROM MS_QSM_APPLIES_TO
                                                    WHERE OBJECT_ID = schedule_rec.que_applies_to
                                                    AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                                    WHERE A.LOCALE=B.LOCALE_STRING
                                                                    AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                                    
                                                    ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                                    
                                                  EXCEPTION WHEN OTHERS THEN
                                                    NULL;
                                                  END;
                                            
                                                        ms_qsm_utilities.initiate_response_flow (ip_respondents => lc_respondents ,
                                                                                                 ip_response_xml => l_enriched_xml  ,
                                                                                                 ip_que_request_id => schedule_rec.SCH_REQ_ID,
                                                                                                 ip_excel_based=>schedule_rec.excel_based,
                                                                                                 ip_iteration_number=>l_sch_iteration,
                                                                                                 xn_error_handle_id =>ln_error_handle_id ,
                                                                                                 xn_error_seq =>ln_error_seq ,
                                                                                                 xn_error_code =>o_error_code  ,
                                                                                                 Xn_Error_Message =>O_Error_Message ); 
--                                             
                                          end if; 
                                  else
                                  
                                         BEGIN
                                            
                                              SELECT OBJECT_NAME
                                              INTO lv_applies_to_name
                                              FROM MS_QSM_APPLIES_TO
                                              WHERE OBJECT_ID = schedule_rec.que_applies_to
                                              AND LOCALE_ID=(SELECT LOCALE_ID FROM SI_USERS_T A, SI_LOCALES B
                                                              WHERE A.LOCALE=B.LOCALE_STRING
                                                              AND A.USER_NAME=TO_CHAR(lc_respondents));
                                                              
                                              ms_qsm_utilities.update_xml(lx_response_xml, REPLACE(lv_path,'$','applies_to'),lv_applies_to_name);
                                              
                                            EXCEPTION WHEN OTHERS THEN
                                              NULL;
                                            END;
                                               
                                                        MS_QSM_UTILITIES.INITIATE_RESPONSE_FLOW (ip_respondents => lc_respondents ,
                                                                                                 ip_response_xml => l_enriched_xml  ,
                                                                                                 ip_que_request_id => schedule_rec.SCH_REQ_ID,
                                                                                                 ip_excel_based=>schedule_rec.excel_based,
                                                                                                 ip_iteration_number=>l_sch_iteration,
                                                                                                 xn_error_handle_id =>ln_error_handle_id ,
                                                                                                 xn_error_seq =>ln_error_seq ,
                                                                                                 xn_error_code =>o_error_code  ,
                                                                                                 Xn_Error_Message =>O_Error_Message );
                                                       -- lx_response_xml:=null;
                                  end if;                                               
    
                                END IF;
                             END IF;       
                        END IF ;
                        
                       l_sequence_no := l_sequence_no+1;
                        
                    END LOOP;
                                                                                    
                END IF;        
                
                L_Next_Date:=Ms_Qsm_Utilities.Fn_Derive_Schedule_Date(Schedule_Rec.Sch_Frequency,'MS_QSM_Frequency',Schedule_Rec.Sch_Next_Date);
              --  dbms_output.put_line('L_Next_Date -'||L_Next_Date);
                
                UPDATE MS_QSM_QUESTNR_SCH
                SET SCH_NEXT_DATE = l_next_date,
                 DD_STATUS_FLAG = DECODE(schedule_rec.SCH_FREQUENCY,'6','N','8','N','3','N','Y')
                WHERE SCH_REQ_ID = schedule_rec.SCH_REQ_ID;
                                
                UPDATE MS_QSM_SCHEDULER_MASTER
                SET TRIGGER_COUNT=TRIGGER_COUNT+1
                where SCH_REQ_ID = SCHEDULE_REC.SCH_REQ_ID;
                ms_qsm_log_activity('','During first response in scheduler'||'@'||'p_metric_id'||'@'||'l_resp_pid'||'@'||'l_resp_iid',LX_RESPONSE_XML.getclobval());
                                                              
                MS_QSM_UTILITIES.UPDATE_METRIC_TABLE(ip_metric_id =>l_init_metric_id,
                                  ip_metric_columns=>'SCH_NEXT_DATE',
                                  ip_modified_value =>TO_CHAR(TRUNC(l_next_date),'MM/DD/YYYY'),
                                  ip_column_type =>'D',
                                  ip_pid =>schedule_rec.PROCESS_INSTANCE_ID,
                                  xn_error_handle_id =>xn_error_handle_id ,
                                  xn_error_seq =>xn_error_seq,
                                  xn_error_code => o_error_code, 
                                  xn_error_message =>o_error_message);
                                  
                MS_QSM_UTILITIES.UPDATE_METRIC_TABLE(ip_metric_id =>l_init_metric_id,
                  ip_metric_columns=>'SCH_NEXT_DATE',
                  ip_modified_value =>TO_CHAR(TRUNC(l_next_date),'MM/DD/YYYY'),
                  ip_column_type =>'D',
                  ip_pid =>schedule_rec.REINIT_PID,
                  xn_error_handle_id =>xn_error_handle_id ,
                  xn_error_seq =>xn_error_seq,
                  xn_error_code => o_error_code, 
                  xn_error_message =>o_error_message);                                  
                                                 
                                                                  
                    IF o_error_code = 1 THEN   
                                                        
                        ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                        pn_error_sequence    => xn_error_seq,
                        pc_error_type        => 'E',
                        pc_error_text        => 'Error in the ms_QSM_SCHEDULER While Updating the View' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM); 
                                                        
                    END IF;   
                
                
            EXCEPTION
                WHEN OTHERS THEN
                     ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                     pn_error_sequence    => xn_error_seq,
                     pc_error_type        => 'E',
                     pc_error_text        => 'Error While Triggering the Response Form from Scheduler' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);                                  
                
            END;
        END LOOP;                                                   
        
        COMMIT;
            
    EXCEPTION
        WHEN OTHERS THEN 
                     ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                     pn_error_sequence    => xn_error_seq,
                     pc_error_type        => 'E',
                     PC_ERROR_TEXT        => 'Fatal Error in the ms_QSM_SCHEDULER ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || '~' || SQLERRM);    
    END ; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_SCORING_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_SCORING_O
    Creation Time : 2012-DEC-31 17:00:41.762985000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_SCORING_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_SCR_ID_PK                           IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_SCR_ID_PK                           IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_SCORING_O ;
  
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_SCORING_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_SCR_ID_PK                           IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_SCORING', 'D');

        UPDATE MS_QSM_SCORING
           SET DD_EDIT_FLAG = 'N'
         WHERE SCR_ID_PK                                = iop_SCR_ID_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_SCR_ID_PK                           IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_SCORING', 'D');

        UPDATE MS_QSM_SCORING
           SET DD_EDIT_FLAG = 'Y'
         WHERE SCR_ID_PK                                = iop_SCR_ID_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_SCORING_O; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_SECTION_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_SECTION_O
    Creation Time : 2012-DEC-31 17:00:37.102621000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_SECTION_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_SECTION_ID_PK                       IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_SECTION_ID_PK                       IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_SECTION_O ;
  
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_SECTION_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_SECTION_ID_PK                       IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_SECTION', 'D');

        UPDATE MS_QSM_SECTION
           SET DD_EDIT_FLAG = 'N'
         WHERE SECTION_ID_PK                            = iop_SECTION_ID_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_SECTION_ID_PK                       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_SECTION', 'D');

        UPDATE MS_QSM_SECTION
           SET DD_EDIT_FLAG = 'Y'
         WHERE SECTION_ID_PK                            = iop_SECTION_ID_PK;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_SECTION_O; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_SECURITY_PKG" AS 
   ERROR_CODE NUMBER;
    ERROR_MESSAGE VARCHAR2(4000);
    CODE_POS NUMBER;

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
  
      FUNCTION CHECK_RESPONSE_FORM_ACCESS
        (
            ip_pushform_id                         IN            NUMBER,
            ip_process_instance_id                 IN            NUMBER,
            ip_user_name                           IN            VARCHAR2
        )    RETURN NUMBER;

      FUNCTION CHECK_QUESTNR_FORM_ACCESS(
                           IP_PUSHFORM_ID         in number,
                           IP_PROCESS_INSTANCE_ID in number,
                           IP_USER_NAME           in varchar2 
                           ) return number;
     FUNCTION CHECK_INITIATE_FORM_ACCESS(
                           IP_PUSHFORM_ID         in number,
                           IP_PROCESS_INSTANCE_ID in number,
                           IP_USER_NAME           in varchar2 
                           ) RETURN NUMBER;
     FUNCTION CHECK_SUMMARY_REPORT_ACCESS
        (
            ip_user_name                           IN            VARCHAR2
        )
    RETURN NUMBER;                           
    /* FUNCTION CHECK_SPREADSHEET_FORM_ACCESS(
                           IP_PUSHFORM_ID         in number,
                           IP_PROCESS_INSTANCE_ID in number,
                           IP_USER_NAME           in varchar2 
                           ) RETURN NUMBER;*/
END MS_QSM_SECURITY_PKG; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_SECURITY_PKG" AS


      FUNCTION checkUserActivity (p_user_name       IN VARCHAR2,
                                p_activity_name   IN VARCHAR2)
        RETURN PLS_INTEGER
        RESULT_CACHE
    IS
        v_return_int   PLS_INTEGER := 0;
    BEGIN
        
        SELECT COUNT (1)
          INTO v_return_int
          FROM si_users e,
               si_user_org_roles d,
               si_org_roles a,
               si_org_entities b,
               si_roles c,
               si_role_activities f,
               si_activities g
         WHERE e.user_name = p_user_name
           AND e.user_id = d.user_id
           AND d.org_role_id = a.org_role_id
           AND a.org_entity_id = b.org_entity_id
           AND NVL (TRUNC (b.end_date), TRUNC (SYSDATE)) >= TRUNC (SYSDATE)
           AND a.role_id = c.role_id
           AND b.enterprise_id = c.enterprise_id
           AND NVL (TRUNC (c.end_date), TRUNC (SYSDATE)) >= TRUNC (SYSDATE)
           AND c.role_id = f.role_id
           AND f.activity_id = g.activity_id
           AND g.activity_name = p_activity_name
           AND NVL (TRUNC (g.end_date), TRUNC (SYSDATE)) >= TRUNC (SYSDATE);
        
        RETURN v_return_int;
    EXCEPTION
        WHEN OTHERS
        THEN
            v_return_int := 0;
            dbms_output.put_line('[checkUserActivity] (Error) End:'||to_char (SYSTIMESTAMP, 'mm/dd/yyyy hh24:mi:ss.ff3'));
            RETURN v_return_int;
    END;
    
    
     FUNCTION checkEventAssignment (p_user_name       IN VARCHAR2,
                                    pid         IN  NUMBER,
                                    ip_pushform_id IN NUMBER )
        RETURN PLS_INTEGER
        RESULT_CACHE
    IS
        v_return_int   PLS_INTEGER := 0;
    BEGIN
    
                SELECT COUNT(1)
                INTO v_return_int
                FROM SI_EVENT_ASSIGNMENTS A
               WHERE A.INFOLET_ID = ip_pushform_id
                 AND A.PROCESS_INSTANCE_ID = pid
                 and exists (select 1 from si_users b where b.user_id = a.user_id
                            AND b.user_name=p_user_name)  ;        
--                 AND EXISTS (SELECT 1 FROM MS_QMS_FLOW_DOWN_ORG_V 
--                            WHERE USER_NAME=p_user_name
--                            AND ACTIVITY_NAME IN ('QSM - View Response','QSM - Respond to Surveys'));
--                  AND EXISTS (SELECT 1
--                    FROM si_users e,
--                         si_user_org_roles d,
--                         si_org_roles a,
--                         si_org_entities b,
--                         si_roles c,
--                         si_role_activities f,
--                         si_activities g
--                   WHERE e.user_name = p_user_name
--                     AND e.user_id = d.user_id
--                     AND d.org_role_id = a.org_role_id
--                     AND a.org_entity_id = b.org_entity_id
--                     AND NVL (TRUNC (b.end_date), TRUNC (SYSDATE)) >= TRUNC (SYSDATE)
--                     AND a.role_id = c.role_id
--                     AND b.enterprise_id = c.enterprise_id
--                     AND NVL (TRUNC (c.end_date), TRUNC (SYSDATE)) >= TRUNC (SYSDATE)
--                     AND c.role_id = f.role_id
--                     AND f.activity_id = g.activity_id
--                     AND g.activity_name in ('QSM - View Response','QSM - Respond to Surveys')
--                     AND NVL (TRUNC (g.end_date), TRUNC (SYSDATE)) >= TRUNC (SYSDATE));

        
        RETURN v_return_int;
    EXCEPTION
        WHEN OTHERS
        THEN
            v_return_int := 0;
            dbms_output.put_line('[checkUserActivity] (Error) End:'||to_char (SYSTIMESTAMP, 'mm/dd/yyyy hh24:mi:ss.ff3'));
            RETURN v_return_int;
    END;



    FUNCTION CHECK_RESPONSE_FORM_ACCESS
        (
            ip_pushform_id                         IN            NUMBER,
            ip_process_instance_id                 IN            NUMBER,
            ip_user_name                           IN            VARCHAR2
        )
    RETURN NUMBER
    AS
        lv_count number;
        lv_event_count number;
        lv_approve_count number;
        LV_sql_stmt VARCHAR(32767);
        LV_object_type VARCHAR2(100);
        LV_restrict_access_to VARCHAR2(100);
        LV_owner_organizations VARCHAR2(4000);
        LV_action VARCHAR2(100);

        LV_security_all  VARCHAR2(100);
        LV_org_list      VARCHAR_TBL_TYPE;
        LV_cntr          NUMBER;
        LV_org_found     BOOLEAN;

        LV_restriction   VARCHAR2(30);
        LV_ownership     VARCHAR2(30);
        xn_error_handle_id  NUMBER;
        xn_error_seq  NUMBER;
        
    BEGIN


        LV_action := 'EDIT';
        
--            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
--                     pn_error_sequence    => xn_error_seq,
--                     pc_error_type        => 'E',
--                     pc_error_text        => 'INSIDE SECURITY:'||ip_pushform_id||':'||ip_process_instance_id||':'||ip_user_name);                                                      
--        
--        
        CODE_POS := 1;
        
        lv_count:=checkUserActivity(ip_user_name,'QSM - View All Response');
        
        IF LV_count > 0 THEN
        
            CODE_POS := 3;
            RETURN 1;

        else  
          lv_count:=checkUserActivity(ip_user_name,'QSM - View Response');
          lv_event_count:=checkEventAssignment(ip_user_name,ip_process_instance_id,ip_pushform_id);
        
          IF LV_count > 0 AND lv_event_count >0 THEN
                  CODE_POS := 3;
                  return 1;
          else 
              lv_count:=checkuseractivity(ip_user_name,'QSM - Approve Response');
              lv_event_count:=checkeventassignment(ip_user_name,ip_process_instance_id,ip_pushform_id);
              
              IF LV_count > 0 AND lv_event_count >0 THEN
                  code_pos := 3;
                  return 1;
              END IF;
          END IF; 
        END IF; 
          
        RETURN 0;
       
    EXCEPTION
        WHEN OTHERS THEN
            ERROR_CODE := SQLCODE;
            ERROR_MESSAGE := SUBSTR(SQLERRM, 1, 4000);
            RETURN 0;
    END CHECK_RESPONSE_FORM_ACCESS;
    
    
    /*FUNCTION CHECK_RESPONSE_FORM_ACCESS
        (
            ip_pushform_id                         IN            NUMBER,
            ip_process_instance_id                 IN            NUMBER,
            ip_user_name                           IN            VARCHAR2
        )
    RETURN NUMBER
    AS
        LV_count NUMBER;
        LV_sql_stmt VARCHAR(32767);
        LV_object_type VARCHAR2(100);
        LV_restrict_access_to VARCHAR2(100);
        LV_owner_organizations VARCHAR2(4000);
        LV_action VARCHAR2(100);

        LV_security_all  VARCHAR2(100);
        LV_org_list      VARCHAR_TBL_TYPE;
        LV_cntr          NUMBER;
        LV_org_found     BOOLEAN;

        LV_restriction   VARCHAR2(30);
        LV_ownership     VARCHAR2(30);
        xn_error_handle_id  NUMBER;
        xn_error_seq  NUMBER;
        
    BEGIN


        LV_action := 'EDIT';

        CODE_POS := 1;
        SELECT COUNT(1)
          INTO LV_count
          FROM SI_EVENT_ASSIGNMENTS
         WHERE INFOLET_ID = ip_pushform_id
           AND PROCESS_INSTANCE_ID = ip_process_instance_id
           AND USER_ID = 
                    (
                        SELECT USER_ID 
                          FROM SI_USERS 
                         WHERE UPPER(USER_NAME) = UPPER(ip_user_name)
                    )
          AND EXISTS (SELECT 1 FROM MS_QMS_FLOW_DOWN_ORG_V 
                      WHERE ACTIVITY_NAME IN ('QSM - View Response','QSM - Respond to Surveys')
                      AND USER_NAME=ip_user_name );                    

        CODE_POS := 2;
       

        IF LV_count > 0 THEN
            CODE_POS := 3;
            RETURN 1;
        ELSE
            
            CODE_POS := 3;
             
            LV_count:=0;  
              
            SELECT COUNT(1)
            INTO LV_count
            FROM MS_QMS_FLOW_DOWN_ORG_V
            WHERE ACTIVITY_NAME ='QSM - View All Response'
            AND USER_NAME = ip_user_name;
            
            IF LV_count > 0 THEN
              CODE_POS := 3;
              RETURN 1;
            END IF;  
            
         END IF; 
          
        RETURN 0;
        
    EXCEPTION
        WHEN OTHERS THEN
            ERROR_CODE := SQLCODE;
            ERROR_MESSAGE := SUBSTR(SQLERRM, 1, 4000);
            RETURN 0;
    end CHECK_RESPONSE_FORM_ACCESS; */
    
    FUNCTION CHECK_QUESTNR_FORM_ACCESS
        (
            ip_pushform_id                         IN            NUMBER,
            ip_process_instance_id                 IN            NUMBER,
            ip_user_name                           IN            VARCHAR2
        )
    RETURN NUMBER
    AS
        LV_count NUMBER;
        LV_sql_stmt VARCHAR(32767);
        LV_object_type VARCHAR2(100);
        LV_restrict_access_to VARCHAR2(100);
        LV_owner_organizations VARCHAR2(4000);
        LV_action VARCHAR2(100);

        LV_security_all  VARCHAR2(100);
        LV_org_list      VARCHAR_TBL_TYPE;
        LV_cntr          NUMBER;
        LV_org_found     BOOLEAN;

        LV_restriction   VARCHAR2(30);
        LV_ownership     VARCHAR2(30);
        xn_error_handle_id  NUMBER;
        xn_error_seq  NUMBER;
        
    BEGIN


        LV_action := 'EDIT';
        /*
            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                     pn_error_sequence    => xn_error_seq,
                     pc_error_type        => 'E',
                     pc_error_text        => 'INSIDE SECURITY:'||ip_pushform_id||':'||ip_process_instance_id||':'||ip_user_name);   */                                                     
        
        
        CODE_POS := 1;
        SELECT COUNT(1)
          INTO LV_count
          FROM SI_EVENT_ASSIGNMENTS
         WHERE INFOLET_ID = ip_pushform_id
           AND PROCESS_INSTANCE_ID = ip_process_instance_id
           AND USER_ID = 
                    (
                        SELECT USER_ID 
                          FROM SI_USERS 
                         WHERE UPPER(USER_NAME) = UPPER(ip_user_name)
                    )
          AND EXISTS (SELECT 1 FROM MS_QMS_FLOW_DOWN_ORG_V 
                      WHERE ACTIVITY_NAME IN ('QSM - Setup Questionnaire','QSM - View Questionnaire','QSM - Manage Questionnaires','QSM - Manage All Questionnaires')
                      AND USER_NAME=ip_user_name );                    

        CODE_POS := 2;
       

        IF LV_count > 0 THEN
            CODE_POS := 3;
            RETURN 1;
        ELSE
            
            CODE_POS := 3;
             
            LV_count:=0;  
              
            SELECT COUNT(1)
            INTO LV_count
            FROM MS_QMS_FLOW_DOWN_ORG_V
            WHERE ACTIVITY_NAME ='QSM - View All Questionnaire'
            AND USER_NAME = ip_user_name;
            
            IF LV_count > 0 THEN
              CODE_POS := 3;
              RETURN 1;
            END IF;  
            
         END IF; 
          
        RETURN 0;
        
    EXCEPTION
        WHEN OTHERS THEN
            ERROR_CODE := SQLCODE;
            ERROR_MESSAGE := SUBSTR(SQLERRM, 1, 4000);
            return 0;
    end CHECK_QUESTNR_FORM_ACCESS;
    
    FUNCTION CHECK_INITIATE_FORM_ACCESS
        (
            ip_pushform_id                         IN            NUMBER,
            ip_process_instance_id                 IN            NUMBER,
            ip_user_name                           IN            VARCHAR2
        )
    RETURN NUMBER
    AS
        LV_count NUMBER;
        LV_sql_stmt VARCHAR(32767);
        LV_object_type VARCHAR2(100);
        LV_restrict_access_to VARCHAR2(100);
        LV_owner_organizations VARCHAR2(4000);
        LV_action VARCHAR2(100);

        LV_security_all  VARCHAR2(100);
        LV_org_list      VARCHAR_TBL_TYPE;
        LV_cntr          NUMBER;
        LV_org_found     BOOLEAN;

        LV_restriction   VARCHAR2(30);
        LV_ownership     VARCHAR2(30);
        xn_error_handle_id  NUMBER;
        xn_error_seq  NUMBER;
        
    BEGIN


        LV_action := 'EDIT';
        /*
            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                     pn_error_sequence    => xn_error_seq,
                     pc_error_type        => 'E',
                     pc_error_text        => 'INSIDE SECURITY:'||ip_pushform_id||':'||ip_process_instance_id||':'||ip_user_name);   */                                                     
        
        
        CODE_POS := 1;
        SELECT COUNT(1)
          INTO LV_count
          FROM SI_EVENT_ASSIGNMENTS
         WHERE INFOLET_ID = ip_pushform_id
           AND PROCESS_INSTANCE_ID = ip_process_instance_id
           AND USER_ID = 
                    (
                        SELECT USER_ID 
                          FROM SI_USERS 
                         WHERE UPPER(USER_NAME) = UPPER(ip_user_name)
                    )
          AND EXISTS (SELECT 1 FROM MS_QMS_FLOW_DOWN_ORG_V 
                      WHERE ACTIVITY_NAME IN ('QSM - Setup Surveys','QSM - Manage Surveys','QSM - Manage All Surveys')
                      AND USER_NAME=ip_user_name );                    

        CODE_POS := 2;
       

        IF LV_count > 0 THEN
            CODE_POS := 3;
            RETURN 1;
        ELSE
            
            CODE_POS := 3;
             
            LV_count:=0;  
              
            SELECT COUNT(1)
            INTO LV_count
            FROM MS_QMS_FLOW_DOWN_ORG_V
            WHERE ACTIVITY_NAME ='QSM - View All Surveys'--'QSM - Setup Surveys'
            AND USER_NAME = ip_user_name;
            
            IF LV_count > 0 THEN
              CODE_POS := 3;
              RETURN 1;
            END IF;  
            
         END IF; 
          
        RETURN 0;
        
    EXCEPTION
        WHEN OTHERS THEN
            ERROR_CODE := SQLCODE;
            ERROR_MESSAGE := SUBSTR(SQLERRM, 1, 4000);
            return 0;
    END CHECK_INITIATE_FORM_ACCESS;
    
    FUNCTION CHECK_SUMMARY_REPORT_ACCESS
        (
            ip_user_name                           IN            VARCHAR2
        )
    RETURN NUMBER
    AS
        LV_count NUMBER;
        LV_sql_stmt VARCHAR(32767);
        LV_object_type VARCHAR2(100);
        LV_restrict_access_to VARCHAR2(100);
        LV_owner_organizations VARCHAR2(4000);
        LV_action VARCHAR2(100);

        LV_security_all  VARCHAR2(100);
        LV_org_list      VARCHAR_TBL_TYPE;
        LV_cntr          NUMBER;
        LV_org_found     BOOLEAN;

        LV_restriction   VARCHAR2(30);
        LV_ownership     VARCHAR2(30);
        xn_error_handle_id  NUMBER;
        xn_error_seq  NUMBER;
    BEGIN
        LV_action := 'EDIT';
        SELECT COUNT(1)
            INTO LV_count
            FROM MS_QMS_FLOW_DOWN_ORG_V
            WHERE ACTIVITY_NAME ='QSM - View All Surveys'
            AND USER_NAME = ip_user_name;
            
        if Lv_count > 0 then
        ms_apps_mdf_errors_pkg.insert_log
                                          (pn_error_handle_id => xn_error_handle_id,
                                           pn_error_sequence => xn_error_seq,
                                           pc_error_type => 'I',
                                           pc_error_text => 'Inside Security');
          return 1;
        else
        ms_apps_mdf_errors_pkg.insert_log
                                          (pn_error_handle_id => xn_error_handle_id,
                                           pn_error_sequence => xn_error_seq,
                                           pc_error_type => 'I',
                                           pc_error_text => 'Inside Security');
          return 0;
        end if;
      
    EXCEPTION
        WHEN OTHERS THEN
            ERROR_CODE := SQLCODE;
            ERROR_MESSAGE := SUBSTR(SQLERRM, 1, 4000);
            return 0;
    END CHECK_SUMMARY_REPORT_ACCESS;
    
 /*   FUNCTION CHECK_SPREADSHEET_FORM_ACCESS
        (
            ip_pushform_id                         IN            NUMBER,
            ip_process_instance_id                 IN            NUMBER,
            ip_user_name                           IN            VARCHAR2
        )
    RETURN NUMBER
    AS
        LV_count NUMBER;
        LV_sql_stmt VARCHAR(32767);
        LV_object_type VARCHAR2(100);
        LV_restrict_access_to VARCHAR2(100);
        LV_owner_organizations VARCHAR2(4000);
        LV_action VARCHAR2(100);

        LV_security_all  VARCHAR2(100);
        LV_org_list      VARCHAR_TBL_TYPE;
        LV_cntr          NUMBER;
        LV_org_found     BOOLEAN;

        LV_restriction   VARCHAR2(30);
        LV_ownership     VARCHAR2(30);
        xn_error_handle_id  NUMBER;
        xn_error_seq  NUMBER;
        
    BEGIN


        LV_action := 'EDIT';
--        
--            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
--                     pn_error_sequence    => xn_error_seq,
--                     pc_error_type        => 'E',
--                     pc_error_text        => 'INSIDE SECURITY:'||ip_pushform_id||':'||ip_process_instance_id||':'||ip_user_name);                                                        
        
        
        CODE_POS := 1;
        SELECT COUNT(1)
          INTO LV_count
          FROM SI_EVENT_ASSIGNMENTS
         WHERE INFOLET_ID = ip_pushform_id
           AND PROCESS_INSTANCE_ID = ip_process_instance_id
           AND USER_ID = 
                    (
                        SELECT USER_ID 
                          FROM SI_USERS 
                         WHERE UPPER(USER_NAME) = UPPER(ip_user_name)
                    )
          AND EXISTS (SELECT 1 FROM MS_QMS_FLOW_DOWN_ORG_V 
                      WHERE ACTIVITY_NAME IN ('QSM - Setup Questionnaire','QSM - View Questionnaire')
                      AND USER_NAME=ip_user_name );                    

        CODE_POS := 2;
       

        IF LV_count > 0 THEN
            CODE_POS := 3;
            RETURN 1;
        ELSE
            
            CODE_POS := 3;
             
            LV_count:=0;  
              
            SELECT COUNT(1)
            INTO LV_count
            FROM MS_QMS_FLOW_DOWN_ORG_V
            WHERE ACTIVITY_NAME ='QSM - View All Questionnaire'
            AND USER_NAME = ip_user_name;
            
            IF LV_count > 0 THEN
              CODE_POS := 3;
              RETURN 1;
            END IF;  
            
         END IF; 
          
        RETURN 0;
        
    EXCEPTION
        WHEN OTHERS THEN
            ERROR_CODE := SQLCODE;
            ERROR_MESSAGE := SUBSTR(SQLERRM, 1, 4000);
            return 0;
    END CHECK_SPREADSHEET_FORM_ACCESS; */

END MS_QSM_SECURITY_PKG; 
 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_SPRD_DATA_ROW" 
is OBJECT (ROW_NUMBER NUMBER,FIELD_1 VARCHAR2(4000),FIELD_2 VARCHAR2(4000),FIELD_3 VARCHAR2(4000),FIELD_4 VARCHAR2(4000),FIELD_5 VARCHAR2(4000),FIELD_6 VARCHAR2(4000),FIELD_7 VARCHAR2(4000),
FIELD_8 VARCHAR2(4000),FIELD_9 VARCHAR2(4000),FIELD_10 VARCHAR2(4000),FIELD_11 VARCHAR2(4000),FIELD_12 VARCHAR2(4000),FIELD_13 VARCHAR2(4000),FIELD_14 VARCHAR2(4000),
FIELD_15 VARCHAR2(4000),FIELD_16 VARCHAR2(4000),FIELD_17 VARCHAR2(4000),FIELD_18 VARCHAR2(4000),FIELD_19 VARCHAR2(4000),FIELD_20 VARCHAR2(4000)); 

 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_SPRD_DATA_TAB" as table of ms_qsm_sprd_data_row;  

 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_SPREADSHEET_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_SPREADSHEET_O
    Creation Time : 2013-SEP-24 12:54:11.365529000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_SPREADSHEET_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_SPRD_SHEET_INTERNAL_ID              IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_SPRD_SHEET_INTERNAL_ID              IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_SPREADSHEET_O ; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_SPREADSHEET_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_SPRD_SHEET_INTERNAL_ID              IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_SPREADSHEET', 'D');

        UPDATE MS_QSM_SPREADSHEET
           SET DD_EDIT_FLAG = 'N'
         WHERE SPRD_SHEET_INTERNAL_ID                   = iop_SPRD_SHEET_INTERNAL_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_SPRD_SHEET_INTERNAL_ID              IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_SPREADSHEET', 'D');

        UPDATE MS_QSM_SPREADSHEET
           SET DD_EDIT_FLAG = 'Y'
         WHERE SPRD_SHEET_INTERNAL_ID                   = iop_SPRD_SHEET_INTERNAL_ID;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_SPREADSHEET_O; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_SPREADSHEET_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_SPREADSHEET_P
    Creation Time : 2013-SEP-24 13:01:55.091298000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_SPREADSHEET_P';
    GV_program_name VARCHAR2(100);
    --GV_ETL_PLSQL_DATA_TYPE ;

/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        );
/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY     CLOB,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2,
            iop_error_seq         IN     OUT                NUMBER,
            ip_pid                IN                        NUMBER
        );

END MS_QSM_SPREADSHEET_P ; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_SPREADSHEET_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Body.
    Author : Data Designer ETL Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------------
    GENERATE_UPDATE_HIERARCHY : Procedure to get the update the xml data hierarchy
   ------------------------------------------------------------------------------ */

    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        );
    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER           
        )
    AS
        LV_error_code               NUMBER;
        LV_error_message            VARCHAR2(1000);
        UPDATE_HIERARCHY_EXCEP      EXCEPTION;
        LV_xml                      XMLTYPE := iop_xml;
        LV_namespace                varchar2(4000) := 'xmlns="http://www.metricstream.com/appstudio/msa"';
        lv_program_name             VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UPDATE_HIERARCHY';


/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);

        SELECT DELETEXML(LV_XML,'datapacket/data/fld/row/fld_sprd_sheet_internal_id',LV_namespace)
       INTO LV_XML
       FROM DUAL;




        FOR rec in (SELECT  DISTINCT 
                                      sprd_sheet_internal_id
                    FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
                                 'msa:datapacket/msa:data/msa:nonmultirow'
                                 PASSING LV_xml
                                 COLUMNS
                                 sprd_sheet_internal_id              VARCHAR2(4000)    PATH     'msa:sprd_sheet_internal_id'
                   ))
       LOOP
             SELECT INSERTCHILDXML(LV_XML,'datapacket/data/fld/row','fld_sprd_sheet_internal_id',XMLTYPE('<fld_sprd_sheet_internal_id '||'xmlns="http://www.metricstream.com/appstudio/msa"'||'>'||rec.sprd_sheet_internal_id||'</fld_sprd_sheet_internal_id>'),LV_namespace)
              INTO LV_XML
              FROM DUAL;
       END LOOP;
       iop_xml := LV_xml;
    
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_pid);
    EXCEPTION
        WHEN UPDATE_HIERARCHY_EXCEP THEN
            
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE_HIERARCHY_EXCEP Exception Raised ', ip_pid);       
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);         
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);          
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            ROLLBACK TO  MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            ROLLBACK TO MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
        LV_error_code NUMBER;
        LV_error_message VARCHAR2(1000);
        NEXT_ID_GEN_EXCEPTION EXCEPTION;
        lv_program_name VARCHAR2(100);
        ln_error_seq NUMBER:=1;

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'GET_NEXT_ID';

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_process_instance_id);


    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_process_instance_id);
    EXCEPTION
        WHEN NEXT_ID_GEN_EXCEPTION THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] NEXT_ID_GEN_EXCEPTION Exception Raised ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] WHEN OTHERS ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END GET_NEXT_ID;

/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY         CLOB,
            iop_log_no            IN     OUT                    NUMBER,
            op_error_code                OUT                    NUMBER,
            op_error_message             OUT                    VARCHAR2,
            iop_error_seq         IN     OUT                    NUMBER,
            ip_pid                IN                            NUMBER
            
        )
    AS

/* --------------------------------------------------------------------------
     ETL procedure created by the ETL Engine of APP BUILDER.
     The procedure takes care of loading the data that is sent
     by the FLOW BUILDER and store the same in MS TABLES.
     Data is already processed and stored accordingly in the iop_data
     object structure. The object can have one or more records.
     The ETL is designed to take care of one or more records.
     If the data has to be manipulated before populating the main
     MS TABLES, please use the HOOKS that are generated by the
     FLOW BUILDER.
   -------------------------------------------------------------------------- */
        LV_progress VARCHAR2(3) := NULL;
        LV_cntr_1   NUMBER      := NULL;
        LV_cntr_2   NUMBER      := NULL;
        LV_debug    BOOLEAN     := FALSE;
        LV_XML      XMLTYPE     := XMLTYPE(iop_xml_data);
        LV_err_code NUMBER      := NULL;
        LV_err_msg  VARCHAR2(4000);
        lV_program_name VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
              AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;

    BEGIN

/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------
    Note: Defining SAVEPOINT TO ROLLBACK transactions done by ETL.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        LV_progress := '001';
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'CALL_ETL';


/* -------------------------------------------------------------------------- 
/* -------------------------------------------------------------------------- 
    Note: Default DEBUG FLAG is set to FALSE to avoid unneccessary logging of data.
            If any issues found in ETL, to understand what goes into the ETL
            then set this variable to TRUE and run the ETL in the flow.
            It allows to log the entire relevant data set.
   -------------------------------------------------------------------------- */
        LV_debug := FALSE;

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);        UPDATE_HIERARCHY
        (
           iop_log_no          => LV_log_no.APP_LOG_NO,
           iop_xml             => LV_XML,
           op_error_code       => LV_err_code,
           op_error_message    => LV_err_msg,
           iop_error_sequence  => iop_error_seq,
           ip_pid              => ip_pid
        );

        IF(LV_err_code !=0) THEN
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'W','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Failed while updating Hierarchy ', ip_pid);
        END IF;

        LV_cntr_1 := 0;

/* --------------------------------------------------------------------------
        Cursor to fetch non multirow details from XML
   -------------------------------------------------------------------------- */
        FOR iop_data in ( SELECT  INSTANCE_ID
                                 ,METRIC_ID
                                 ,TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_RUN_DATE
                                 ,TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
                                 ,LATEST_FLAG
                                 ,CREATED_BY
                                 ,TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE
                                 ,PROCESS_FLOW_STATUS
                                 ,PROCESS_INSTANCE_ID
                                 ,ELECTRONICALLY_SIGNED
                                 ,INSTANCE_REC_NUM
                                 ,DATA_PRE_POPULATION
                                 ,DD_EVENT_USER_NAME
                                 ,DD_CURRENT_USER_NAME
                                 ,DD_OBJECT_TYPE
                                 ,DD_PROCESS_CODE
                                 ,DEL_CONFIG_FLAG
                                 ,ENABLE_DATA_PRE_POPULATION
                                 ,OWNERS
                                 ,OWNER_ORGANIZATION
                                 ,QUE_NAME_VALID_CHECK
                                 ,REINIT_PID
                                 ,RESTRICT_ACCESS_TO
                                 ,SPRD_SHEET_DESC
                                 ,SPRD_SHEET_ID
                                 ,SPRD_SHEET_INTERNAL_ID
                                 ,SPRD_SHEET_LINK
                                 ,SPRD_SHEET_NAME
                                 ,SUBMIT_ACTION
                                 ,TEMP_PK_ID
                                 ,VERSION_NO
                          FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
                                       'msa:datapacket/msa:data/msa:nonmultirow'
                                       PASSING LV_XML
                                       COLUMNS
                                        INSTANCE_ID                      NUMBER          PATH  'msa:instance_id'
                                       ,METRIC_ID                        NUMBER          PATH  'msa:metric_id'
                                       ,METRIC_RUN_DATE                  VARCHAR2(40)    PATH  'msa:metric_run_date'
                                       ,METRIC_COMPLETED_DATE            VARCHAR2(40)    PATH  'msa:metric_completed_date'
                                       ,LATEST_FLAG                      VARCHAR2(1)     PATH  'msa:latest_flag'
                                       ,CREATED_BY                       NUMBER          PATH  'msa:created_by'
                                       ,CREATION_DATE                    VARCHAR2(40)    PATH  'msa:creation_date'
                                       ,PROCESS_FLOW_STATUS              NUMBER          PATH  'msa:process_flow_status'
                                       ,PROCESS_INSTANCE_ID              NUMBER          PATH  'msa:process_instance_id'
                                       ,ELECTRONICALLY_SIGNED            NUMBER          PATH  'msa:electronically_signed'
                                       ,INSTANCE_REC_NUM                 NUMBER          PATH  'msa:instance_rec_num'
                                       ,DATA_PRE_POPULATION              VARCHAR2(4000)  PATH  'msa:data_pre_population'
                                       ,DD_EVENT_USER_NAME               VARCHAR2(4000)  PATH  'msa:dd_event_user_name'
                                       ,DD_CURRENT_USER_NAME             VARCHAR2(4000)  PATH  'msa:dd_current_user_name'
                                       ,DD_OBJECT_TYPE                   VARCHAR2(4000)  PATH  'msa:dd_object_type'
                                       ,DD_PROCESS_CODE                  VARCHAR2(4000)  PATH  'msa:dd_process_code'
                                       ,DEL_CONFIG_FLAG                  VARCHAR2(4000)  PATH  'msa:del_config_flag'
                                       ,ENABLE_DATA_PRE_POPULATION       VARCHAR2(4000)  PATH  'msa:enable_data_pre_population'
                                       ,OWNERS                           VARCHAR2(4000)  PATH  'msa:owners'
                                       ,OWNER_ORGANIZATION               VARCHAR2(4000)  PATH  'msa:owner_organization'
                                       ,QUE_NAME_VALID_CHECK             VARCHAR2(4000)  PATH  'msa:que_name_valid_check'
                                       ,REINIT_PID                       NUMBER          PATH  'msa:reinit_pid'
                                       ,RESTRICT_ACCESS_TO               VARCHAR2(4000)  PATH  'msa:restrict_access_to'
                                       ,SPRD_SHEET_DESC                  VARCHAR2(4000)  PATH  'msa:sprd_sheet_desc'
                                       ,SPRD_SHEET_ID                    VARCHAR2(4000)  PATH  'msa:sprd_sheet_id'
                                       ,SPRD_SHEET_INTERNAL_ID           VARCHAR2(4000)  PATH  'msa:sprd_sheet_internal_id'
                                       ,SPRD_SHEET_LINK                  VARCHAR2(4000)  PATH  'msa:sprd_sheet_link'
                                       ,SPRD_SHEET_NAME                  VARCHAR2(4000)  PATH  'msa:sprd_sheet_name'
                                       ,SUBMIT_ACTION                    VARCHAR2(4000)  PATH  'msa:submit_action'
                                       ,TEMP_PK_ID                       VARCHAR2(4000)  PATH  'msa:temp_pk_id'
                                       ,VERSION_NO                       VARCHAR2(4000)  PATH  'msa:version_no'
                        ))
        LOOP
           LV_cntr_1 := LV_cntr_1 + 1;
           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Data Found in iop_data. ', ip_pid);
           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ')', ip_pid);

     /* --------------------------------------------------------------------------
           Loop through the data object to load the data into MS tables.
            Header info is being loaded into the system.
      -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
   -------------------------------------------------------------------------- */
           IF LV_debug THEN
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.TEMP_PK_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.QUE_NAME_VALID_CHECK, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DEL_CONFIG_FLAG, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_OBJECT_TYPE, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_PROCESS_CODE, ip_pid);

           END IF;

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);

           MERGE
            INTO MS_QSM_CONTROL_OBJECT T 
           USING 
               (
                   SELECT 
                          iop_data.TEMP_PK_ID                                         AS TEMP_PK_ID
                        , iop_data.QUE_NAME_VALID_CHECK                               AS QUE_NAME_VALID_CHECK
                        , iop_data.DEL_CONFIG_FLAG                                    AS DEL_CONFIG_FLAG
                        , iop_data.DD_OBJECT_TYPE                                     AS DD_OBJECT_TYPE
                        , iop_data.DD_EVENT_USER_NAME                                 AS DD_CREATED_BY
                        , iop_data.DD_CURRENT_USER_NAME                               AS DD_MODIFIED_BY
                        , iop_data.PROCESS_INSTANCE_ID                                AS DD_PROCESS_INSTANCE_ID
                        , iop_data.INSTANCE_ID                                        AS DD_INSTANCE_ID
                        , iop_data.DD_PROCESS_CODE                                    AS DD_PROCESS_CODE
                     FROM DUAL
               ) V
              ON
               (
                            T.TEMP_PK_ID                             = V.TEMP_PK_ID
               )
            WHEN
               MATCHED THEN
                   UPDATE SET  DD_STATUS_FLAG                         = 'Y'
                           , T.QUE_NAME_VALID_CHECK                   = V.QUE_NAME_VALID_CHECK
                           , T.DEL_CONFIG_FLAG                        = V.DEL_CONFIG_FLAG
                           , T.DD_OBJECT_TYPE                         = V.DD_OBJECT_TYPE
                           , T.DD_MODIFIED_BY                         = V.DD_MODIFIED_BY
                           , T.DD_MODIFIED_ON                         = SYSDATE
                           , T.DD_PROCESS_INSTANCE_ID                 = V.DD_PROCESS_INSTANCE_ID
                           , T.DD_INSTANCE_ID                         = V.DD_INSTANCE_ID
                           , T.DD_PROCESS_CODE                        = V.DD_PROCESS_CODE
            WHEN
               NOT MATCHED THEN
                   INSERT
                       (DD_STATUS_FLAG
                      , T.TEMP_PK_ID
                      , T.QUE_NAME_VALID_CHECK
                      , T.DEL_CONFIG_FLAG
                      , T.DD_OBJECT_TYPE
                      , T.DD_CREATED_BY
                      , T.DD_CREATED_ON
                      , T.DD_PROCESS_INSTANCE_ID
                      , T.DD_INSTANCE_ID
                      , T.DD_PROCESS_CODE
                       )
                   VALUES 
                       ('Y'
                      , V.TEMP_PK_ID
                      , V.QUE_NAME_VALID_CHECK
                      , V.DEL_CONFIG_FLAG
                      , V.DD_OBJECT_TYPE
                      , V.DD_CREATED_BY
                            , SYSDATE
                      , V.DD_PROCESS_INSTANCE_ID
                      , V.DD_INSTANCE_ID
                      , V.DD_PROCESS_CODE
                       );

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);

     /* --------------------------------------------------------------------------
           Loop through the data object to load the data into MS tables.
            Header info is being loaded into the system.
      -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
   -------------------------------------------------------------------------- */
           IF LV_debug THEN
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SPRD_SHEET_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SPRD_SHEET_INTERNAL_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SPRD_SHEET_NAME, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SPRD_SHEET_DESC, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.VERSION_NO, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.RESTRICT_ACCESS_TO, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SUBMIT_ACTION, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.SPRD_SHEET_LINK, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.REINIT_PID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.ENABLE_DATA_PRE_POPULATION, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DATA_PRE_POPULATION, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_OBJECT_TYPE, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_EVENT_USER_NAME, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.DD_CURRENT_USER_NAME, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.PROCESS_INSTANCE_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] '|| iop_data.INSTANCE_ID, ip_pid);
               MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data.DD_PROCESS_CODE, ip_pid);

           END IF;

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);

           MERGE
            INTO MS_QSM_SPREADSHEET T 
           USING 
               (
                   SELECT 
                          iop_data.SPRD_SHEET_ID                                      AS SPRD_SHEET_ID
                        , iop_data.SPRD_SHEET_INTERNAL_ID                             AS SPRD_SHEET_INTERNAL_ID
                        , iop_data.SPRD_SHEET_NAME                                    AS SPRD_SHEET_NAME
                        , iop_data.SPRD_SHEET_DESC                                    AS SPRD_SHEET_DESC
                        , iop_data.VERSION_NO                                         AS VERSION_NO
                        , iop_data.RESTRICT_ACCESS_TO                                 AS RESTRICT_ACCESS_TO
                        , iop_data.SUBMIT_ACTION                                      AS SUBMIT_ACTION
                        , iop_data.SPRD_SHEET_LINK                                    AS SPRD_SHEET_LINK
                        , iop_data.REINIT_PID                                         AS REINIT_PID
                        , iop_data.ENABLE_DATA_PRE_POPULATION                         AS ENABLE_DATA_PRE_POPULATION
                        , iop_data.DATA_PRE_POPULATION                                AS DATA_PRE_POPULATION
                        , iop_data.DD_OBJECT_TYPE                                     AS DD_OBJECT_TYPE
                        , iop_data.DD_EVENT_USER_NAME                                 AS DD_CREATED_BY
                        , iop_data.DD_CURRENT_USER_NAME                               AS DD_MODIFIED_BY
                        , iop_data.PROCESS_INSTANCE_ID                                AS DD_PROCESS_INSTANCE_ID
                        , iop_data.INSTANCE_ID                                        AS DD_INSTANCE_ID
                        , iop_data.DD_PROCESS_CODE                                    AS DD_PROCESS_CODE
                     FROM DUAL
               ) V
              ON
               (
                            T.SPRD_SHEET_INTERNAL_ID                 = V.SPRD_SHEET_INTERNAL_ID
               )
            WHEN
               MATCHED THEN
                   UPDATE SET  DD_STATUS_FLAG                         = 'Y'
                           , T.SPRD_SHEET_ID                          = V.SPRD_SHEET_ID
                           , T.SPRD_SHEET_NAME                        = V.SPRD_SHEET_NAME
                           , T.SPRD_SHEET_DESC                        = V.SPRD_SHEET_DESC
                           , T.VERSION_NO                             = V.VERSION_NO
                           , T.RESTRICT_ACCESS_TO                     = V.RESTRICT_ACCESS_TO
                           , T.SUBMIT_ACTION                          = V.SUBMIT_ACTION
                           , T.SPRD_SHEET_LINK                        = V.SPRD_SHEET_LINK
                           , T.REINIT_PID                             = V.REINIT_PID
                           , T.ENABLE_DATA_PRE_POPULATION             = V.ENABLE_DATA_PRE_POPULATION
                           , T.DATA_PRE_POPULATION                    = V.DATA_PRE_POPULATION
                           , T.DD_OBJECT_TYPE                         = V.DD_OBJECT_TYPE
                           , T.DD_MODIFIED_BY                         = V.DD_MODIFIED_BY
                           , T.DD_MODIFIED_ON                         = SYSDATE
                           , T.DD_PROCESS_INSTANCE_ID                 = V.DD_PROCESS_INSTANCE_ID
                           , T.DD_INSTANCE_ID                         = V.DD_INSTANCE_ID
                           , T.DD_PROCESS_CODE                        = V.DD_PROCESS_CODE
            WHEN
               NOT MATCHED THEN
                   INSERT
                       (DD_STATUS_FLAG
                      , T.SPRD_SHEET_ID
                      , T.SPRD_SHEET_INTERNAL_ID
                      , T.SPRD_SHEET_NAME
                      , T.SPRD_SHEET_DESC
                      , T.VERSION_NO
                      , T.RESTRICT_ACCESS_TO
                      , T.SUBMIT_ACTION
                      , T.SPRD_SHEET_LINK
                      , T.REINIT_PID
                      , T.ENABLE_DATA_PRE_POPULATION
                      , T.DATA_PRE_POPULATION
                      , T.DD_OBJECT_TYPE
                      , T.DD_CREATED_BY
                      , T.DD_CREATED_ON
                      , T.DD_PROCESS_INSTANCE_ID
                      , T.DD_INSTANCE_ID
                      , T.DD_PROCESS_CODE
                       )
                   VALUES 
                       ('Y'
                      , V.SPRD_SHEET_ID
                      , V.SPRD_SHEET_INTERNAL_ID
                      , V.SPRD_SHEET_NAME
                      , V.SPRD_SHEET_DESC
                      , V.VERSION_NO
                      , V.RESTRICT_ACCESS_TO
                      , V.SUBMIT_ACTION
                      , V.SPRD_SHEET_LINK
                      , V.REINIT_PID
                      , V.ENABLE_DATA_PRE_POPULATION
                      , V.DATA_PRE_POPULATION
                      , V.DD_OBJECT_TYPE
                      , V.DD_CREATED_BY
                            , SYSDATE
                      , V.DD_PROCESS_INSTANCE_ID
                      , V.DD_INSTANCE_ID
                      , V.DD_PROCESS_CODE
                       );

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);

           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);

           DELETE MS_QSM_SPREADSHEET_OWO
           WHERE 
                   SPRD_SHEET_INTERNAL_ID                   = iop_data.SPRD_SHEET_INTERNAL_ID;

           MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

           MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');

           IF length(iop_data.OWNER_ORGANIZATION )  > 0 THEN
           
           INSERT INTO MS_QSM_SPREADSHEET_OWO
           (
                 SPRD_SHEET_INTERNAL_ID
                ,OWNER_ORGANIZATION
           )
           SELECT 
                 iop_data.SPRD_SHEET_INTERNAL_ID
                ,COLUMN_VALUE
           FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.OWNER_ORGANIZATION,','));
           END IF;
           DELETE MS_QSM_SPREADSHEET_OWS
           WHERE 
                   SPRD_SHEET_INTERNAL_ID                   = iop_data.SPRD_SHEET_INTERNAL_ID;

           MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE COMPLETED AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

           MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total No of Records Deleted : ' ||SQL%ROWCOUNT, 'D');

           IF length(iop_data.OWNERS )  > 0 THEN
           
           INSERT INTO MS_QSM_SPREADSHEET_OWS
           (
                 SPRD_SHEET_INTERNAL_ID
                ,OWNERS
           )
           SELECT 
                 iop_data.SPRD_SHEET_INTERNAL_ID
                ,COLUMN_VALUE
           FROM TABLE(MS_APPS_UTILITIES.SPLIT_STRING(iop_data.OWNERS,','));
           END IF;
           MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING UPDATE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

           UPDATE MS_QSM_SPREADSHEET_FLD
           SET DD_STATUS_FLAG                     = 'N'
            WHERE SPRD_SHEET_INTERNAL_ID          = iop_data.SPRD_SHEET_INTERNAL_ID;

           MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in UPDATE : ' || SQL%ROWCOUNT, 'D');

           MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

              LV_cntr_2 := 0;

              FOR iop_data_FLD_table IN (SELECT 
                                           ALLOW_PAST_DATE
                                          ,ALLOW_UNVALIDATE_DATA
                                          ,FIELD_NAME
                                          ,FIELD_TYPE
                                          ,FIELD_VALUE
                                          ,FLD_DISPLAY_VALUE
                                          ,FLD_ID_PK
                                          ,FLD_INFOLET
                                          ,FLD_PARAMETER
                                          ,FLD_PARAMETER_FIELDS
                                          ,FLD_STORED_VALUE
                                          ,LOWER_LIMIT
                                          ,FLD_SPRD_SHEET_INTERNAL_ID
                                          ,TMP_INFO_PARAM_LINK
                                          ,UPPER_LIMIT
                                         FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as "msa"),
                                                       'msa:datapacket/msa:data/msa:fld/msa:row'
                                                       PASSING LV_xml
                                                       COLUMNS
                                                       ALLOW_PAST_DATE                  VARCHAR2(4000)  PATH  'msa:allow_past_date'
                                                      ,ALLOW_UNVALIDATE_DATA            VARCHAR2(4000)  PATH  'msa:allow_unvalidate_data'
                                                      ,FIELD_NAME                       VARCHAR2(4000)  PATH  'msa:field_name'
                                                      ,FIELD_TYPE                       VARCHAR2(4000)  PATH  'msa:field_type'
                                                      ,FIELD_VALUE                      VARCHAR2(4000)  PATH  'msa:field_value'
                                                      ,FLD_DISPLAY_VALUE                VARCHAR2(4000)  PATH  'msa:fld_display_value'
                                                      ,FLD_ID_PK                        VARCHAR2(4000)  PATH  'msa:fld_id_pk'
                                                      ,FLD_INFOLET                      VARCHAR2(4000)  PATH  'msa:fld_infolet'
                                                      ,FLD_PARAMETER                    VARCHAR2(4000)  PATH  'msa:fld_parameter'
                                                      ,FLD_PARAMETER_FIELDS             VARCHAR2(4000)  PATH  'msa:fld_parameter_fields'
                                                      ,FLD_STORED_VALUE                 VARCHAR2(4000)  PATH  'msa:fld_stored_value'
                                                      ,LOWER_LIMIT                      NUMBER          PATH  'msa:lower_limit'
                                                      ,FLD_SPRD_SHEET_INTERNAL_ID       VARCHAR2(4000)  PATH  'msa:fld_sprd_sheet_internal_id'
                                                      ,TMP_INFO_PARAM_LINK              VARCHAR2(4000)  PATH  'msa:tmp_info_param_link'
                                                      ,UPPER_LIMIT                      NUMBER          PATH  'msa:upper_limit'
                                        ))
               LOOP
                    LV_cntr_2 := LV_cntr_2 + 1;

/* --------------------------------------------------------------------------
    To enable debugging on the PL/SQL data structure, set the LV_debug to TRUE.
   -------------------------------------------------------------------------- */

                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Processing Record : iop_data(' || LV_cntr_1 || ').FLD_TABLE(' || LV_cntr_2 || ')', ip_pid);
                    IF LV_debug THEN
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_FLD_TABLE.FIELD_NAME, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_FLD_TABLE.FIELD_TYPE, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_FLD_TABLE.LOWER_LIMIT, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_FLD_TABLE.UPPER_LIMIT, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_FLD_TABLE.FIELD_VALUE, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_FLD_TABLE.FLD_INFOLET, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_FLD_TABLE.FLD_PARAMETER, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_FLD_TABLE.FLD_ID_PK, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_FLD_TABLE.ALLOW_PAST_DATE, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_FLD_TABLE.FLD_PARAMETER_FIELDS, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_FLD_TABLE.FLD_DISPLAY_VALUE, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_FLD_TABLE.FLD_STORED_VALUE, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_FLD_TABLE.ALLOW_UNVALIDATE_DATA, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_FLD_TABLE.TMP_INFO_PARAM_LINK, ip_pid);
                        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ' || iop_data_FLD_TABLE.FLD_SPRD_SHEET_INTERNAL_ID, ip_pid);
                    END IF;

                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING MERGE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);

                    MERGE
                     INTO MS_QSM_SPREADSHEET_FLD T 
                    USING 
                        (
                            SELECT 
                                   iop_data_FLD_TABLE.FIELD_NAME                                         AS FIELD_NAME
                                 , iop_data_FLD_TABLE.FIELD_TYPE                                         AS FIELD_TYPE
                                 , iop_data_FLD_TABLE.LOWER_LIMIT                                        AS LOWER_LIMIT
                                 , iop_data_FLD_TABLE.UPPER_LIMIT                                        AS UPPER_LIMIT
                                 , iop_data_FLD_TABLE.FIELD_VALUE                                        AS FIELD_VALUE
                                 , iop_data_FLD_TABLE.FLD_INFOLET                                        AS FLD_INFOLET
                                 , iop_data_FLD_TABLE.FLD_PARAMETER                                      AS FLD_PARAMETER
                                 , iop_data_FLD_TABLE.FLD_ID_PK                                          AS FLD_ID_PK
                                 , iop_data_FLD_TABLE.ALLOW_PAST_DATE                                    AS ALLOW_PAST_DATE
                                 , iop_data_FLD_TABLE.FLD_PARAMETER_FIELDS                               AS FLD_PARAMETER_FIELDS
                                 , iop_data_FLD_TABLE.FLD_DISPLAY_VALUE                                  AS FLD_DISPLAY_VALUE
                                 , iop_data_FLD_TABLE.FLD_STORED_VALUE                                   AS FLD_STORED_VALUE
                                 , iop_data_FLD_TABLE.ALLOW_UNVALIDATE_DATA                              AS ALLOW_UNVALIDATE_DATA
                                 , iop_data_FLD_TABLE.TMP_INFO_PARAM_LINK                                AS TMP_INFO_PARAM_LINK
                                 , iop_data_FLD_TABLE.FLD_SPRD_SHEET_INTERNAL_ID                         AS SPRD_SHEET_INTERNAL_ID
                              FROM DUAL
                        ) V
                       ON
                        (
                                     T.FLD_ID_PK                              = V.FLD_ID_PK
                                 AND T.SPRD_SHEET_INTERNAL_ID                 = V.SPRD_SHEET_INTERNAL_ID
                        )
                     WHEN
                        MATCHED THEN
                            UPDATE SET  DD_STATUS_FLAG                         = 'Y'
                                    , T.FIELD_NAME                             = V.FIELD_NAME
                                    , T.FIELD_TYPE                             = V.FIELD_TYPE
                                    , T.LOWER_LIMIT                            = V.LOWER_LIMIT
                                    , T.UPPER_LIMIT                            = V.UPPER_LIMIT
                                    , T.FIELD_VALUE                            = V.FIELD_VALUE
                                    , T.FLD_INFOLET                            = V.FLD_INFOLET
                                    , T.FLD_PARAMETER                          = V.FLD_PARAMETER
                                    , T.ALLOW_PAST_DATE                        = V.ALLOW_PAST_DATE
                                    , T.FLD_PARAMETER_FIELDS                   = V.FLD_PARAMETER_FIELDS
                                    , T.FLD_DISPLAY_VALUE                      = V.FLD_DISPLAY_VALUE
                                    , T.FLD_STORED_VALUE                       = V.FLD_STORED_VALUE
                                    , T.ALLOW_UNVALIDATE_DATA                  = V.ALLOW_UNVALIDATE_DATA
                                    , T.TMP_INFO_PARAM_LINK                    = V.TMP_INFO_PARAM_LINK
                     WHEN
                        NOT MATCHED THEN
                            INSERT
                                (DD_STATUS_FLAG
                               , T.FIELD_NAME
                               , T.FIELD_TYPE
                               , T.LOWER_LIMIT
                               , T.UPPER_LIMIT
                               , T.FIELD_VALUE
                               , T.FLD_INFOLET
                               , T.FLD_PARAMETER
                               , T.FLD_ID_PK
                               , T.ALLOW_PAST_DATE
                               , T.FLD_PARAMETER_FIELDS
                               , T.FLD_DISPLAY_VALUE
                               , T.FLD_STORED_VALUE
                               , T.ALLOW_UNVALIDATE_DATA
                               , T.TMP_INFO_PARAM_LINK
                               , T.SPRD_SHEET_INTERNAL_ID
                                )
                            VALUES 
                                ('Y'
                               , V.FIELD_NAME
                               , V.FIELD_TYPE
                               , V.LOWER_LIMIT
                               , V.UPPER_LIMIT
                               , V.FIELD_VALUE
                               , V.FLD_INFOLET
                               , V.FLD_PARAMETER
                               , V.FLD_ID_PK
                               , V.ALLOW_PAST_DATE
                               , V.FLD_PARAMETER_FIELDS
                               , V.FLD_DISPLAY_VALUE
                               , V.FLD_STORED_VALUE
                               , V.ALLOW_UNVALIDATE_DATA
                               , V.TMP_INFO_PARAM_LINK
                               , V.SPRD_SHEET_INTERNAL_ID
                                );

                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in MERGE : ' || SQL%ROWCOUNT, ip_pid);

                    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] MERGE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);

               END LOOP;

               MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] CALLING DELETE AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

               DELETE MS_QSM_SPREADSHEET_FLD
                WHERE SPRD_SHEET_INTERNAL_ID          = iop_data.SPRD_SHEET_INTERNAL_ID
                  AND DD_STATUS_FLAG                  = 'N';

               MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Number of records affected in DELETE : ' || SQL%ROWCOUNT, 'D');

               MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] DELETE END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), 'D');

        END LOOP;

        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ETL END AT : ' || TO_CHAR(SYSTIMESTAMP, 'YYYY-MON-DD HH24:MI:SSxFF'), ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] END ', ip_pid);
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END CALL_ETL;

END MS_QSM_SPREADSHEET_P; 
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_SPRSHT_SPRSHT_PROD" (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN OUT CLOB,
                                                                       lt_out_data          IN OUT CLOB,
                                                                       pc_process_code      IN     VARCHAR2,
                                                                       lc_from_stage        IN     VARCHAR2,
                                                                       lc_to_stage          IN     VARCHAR2,
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
                        AS
                        
                        l_out_xml                                   XMLTYPE:=NULL; 
                        l_spreadsheet_id                        VARCHAR2(100);
                        l_internal_spreadsheet_id            VARCHAR2(100);
                        ln_new_pid                                NUMBER;
                        ln_new_iid                                 NUMBER;
                        l_metric_id                                 NUMBER;
                        l_error_message                        VARCHAR2(4000);
                        l_lov_delimeter                         VARCHAR2(100);
                        l_version                               VARCHAR2(100);
                        l_created_by                            NUMBER;
                               
                        BEGIN
                                   l_out_xml := xmltype (lt_in_data);
                                    
                                    IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0)  THEN
                                        ms_qsm_utilities.initialize_metric_maint ('QSM');
                                    END IF;
                                    
                                    l_internal_spreadsheet_id := MS_QSM_SPREADSHEET_ID_S.NEXTVAL;
                                    
                                    ms_qsm_utilities.update_xml (l_out_xml,'datapacket/data/nonmultirow/sprd_sheet_internal_id/text()',l_internal_spreadsheet_id);
                                    
                                    ms_qsm_utilities.update_xml (l_out_xml,'datapacket/data/fld/row/sprd_sheet_internal_id/text()',l_internal_spreadsheet_id);
                                    
                                    l_spreadsheet_id := ms_qsm_utilities.get_tag_value(l_out_xml,'datapacket/data/nonmultirow/sprd_sheet_id/text()');
                                    l_metric_id:=ms_qsm_utilities.get_tag_value(l_out_xml,'datapacket/data/nonmultirow/metric_id/text()');
                                    l_version := ms_qsm_utilities.get_tag_value(l_out_xml,'datapacket/data/nonmultirow/version_no/text()');
                                    l_created_by := ms_qsm_utilities.get_tag_value(l_out_xml,'datapacket/data/nonmultirow/created_by/text()');
                                    
                                    If trim(l_spreadsheet_id) is null THEN
                                      ms_qsm_utilities.update_xml (l_out_xml,'datapacket/data/nonmultirow/sprd_sheet_id/text()',l_internal_spreadsheet_id);
                                    END IF;
                                    
                                    --iNSERT lov DATA into intermedaite table
                                     FOR fld_rec
                                        IN ( SELECT fld_id_pk,field_value,field_type
                                            FROM XMLTABLE (
                                                     xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:fld/msa:row'
                                                     PASSING l_out_xml
                                                    COLUMNS fld_id_pk    VARCHAR2 (1000) PATH 'msa:fld_id_pk',
                                                            field_value VARCHAR2(4000) PATH 'msa:field_value',
                                                            field_type   VARCHAR2(1000) PATH 'msa:field_type'))
                                    Loop
                                    
                                        IF  fld_rec.field_type IN ('3') THEN                                        
                                            DELETE FROM MS_QSM_SPRD_LOV_DATA
                                            WHERE SPREADSHEET_ID = l_internal_spreadsheet_id
                                            AND COLUMN_ID = fld_rec.fld_id_pk;
                                            
                                            SELECT VALUE
                                              INTO l_lov_delimeter
                                              FROM ms_qsm_params
                                             WHERE     PARAM_GROUP = 'QSM_PARAMS'
                                                   AND PARAMETER = 'QUESTION_LOV_DELIMETER'
                                                   AND ENABLED = 'Y';
                                            
                                            FOR Insert_rec IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string (fld_rec.field_value,l_lov_delimeter)))
                                            LOOP
                                                INSERT INTO MS_QSM_SPRD_LOV_DATA 
                                                    (CREATION_DATE,LAST_UPDATE_DATE,CREATED_BY,LAST_UPDATED_BY,LOCALE_ID
                                                    ,STORED_VALUE,VERSION,SPREADSHEET_ID,COLUMN_ID,DISPLAY_VALUE)
                                                VALUES
                                                    (SYSDATE,SYSDATE,l_created_by,l_created_by,(SELECT LOCALE_ID FROM SI_LOCALES WHERE LOCALE_STRING='en_US'),
                                                    Insert_rec.COLUMN_VALUE,l_version, l_internal_spreadsheet_id,fld_rec.fld_id_pk,Insert_rec.COLUMN_VALUE);
                                                                                
                                            END LOOP;
                                            
                                        END IF;  
                                    END LOOP;
--                                   MS_QSM_UTILITIES.UPDATE_INOUT_DATA(l_out_xml,lt_in_data,lt_out_data);
                                    
                                    ln_new_pid := si_process_instance_id_s.NEXTVAL;
                                    ln_new_iid := si_metric_results_s.NEXTVAL;
                                    
                                    ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/nonmultirow/reinit_pid/text()',ln_new_pid);
                                    
                                    MS_QSM_UTILITIES.UPDATE_INOUT_DATA(l_out_xml,lt_in_data,lt_out_data);      
                                   
                                    ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/nonmultirow/instance_id/text()',ln_new_iid); 
                                    
                                    ms_qsm_utilities.update_xml(l_out_xml, 'datapacket/data/nonmultirow/process_instance_id/text()',ln_new_pid);
                                                    
                                    l_error_message:=ms_apps_mdf_infoletoutput_pkg.insert_xml(MS_QSM_UTILITIES.g_tbl_metric_maintenance('SPRSHT')||'_V',
                                                                                    l_metric_id,
                                                                                    ln_new_pid,
                                                                                    ln_new_iid,
                                                                                    l_out_xml.getclobval());    
                                                                                                                                                                    
                                    IF l_error_message != 'SUCCESS' OR l_error_message IS NULL THEN
                                        ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                        pn_error_sequence    => xn_error_seq,
                                        pc_error_type        => 'E',
                                        pc_error_text        => 'Error While Inserting XML into spreadsheet View in the ms_QSM_SPRSHT_SPRSHT_PROD '||l_error_message || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);   
                                    END IF;                                                                                    
                                                                                    
                        EXCEPTION
                            WHEN OTHERS THEN
                                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                                         pn_error_sequence    => xn_error_seq,
                                         pc_error_type        => 'E',
                                         pc_error_text        => 'Fatal Error in the ms_QSM_SPRSHT_SPRSHT_PROD ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);                                      
                                    
                        END; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_STAGE_PARAMETRS" 
AS

-------------------------------------------------------------------------------
-- Name: editor_ownership_check
-- Desc: Returns one of the below
--       OWNER : If the user making the edit is the owner of the object
--       NOT_OWNER : If user is not a owner, and there are other owners
--       NO_USERS : There are no owners for this object
-------------------------------------------------------------------------------
FUNCTION editor_ownership_check(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER )
  RETURN VARCHAR2;



-------------------------------------------------------------------------------
-- Name: get_users
-- Desc: Returns one of the below:
--       List of owners, if available
--       List of users assigned to the Edit Object activity in any of the owner orgs
--       List of users assigned to the Edit All Objects activity in any of the owner orgs
-------------------------------------------------------------------------------
FUNCTION GET_USERS(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER )
  RETURN VARCHAR2;

-------------------------------------------------------------------------------
-- Name: get_initiator
-- Desc: Returns Initiator of the flow
-------------------------------------------------------------------------------

FUNCTION GET_INITIATOR(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER )
  RETURN VARCHAR2;

-------------------------------------------------------------------------------
-- Name: get_initiator_name
-- Desc: Returns Initiator of the flow
-------------------------------------------------------------------------------

FUNCTION GET_INITIATOR_NAME(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER )
  RETURN VARCHAR2;

-------------------------------------------------------------------------------
-- Name: get_current_user_name
-- Desc: Returns current user who submitted the form
-------------------------------------------------------------------------------
FUNCTION GET_CURRENT_USER_NAME(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER )
  RETURN VARCHAR2;

-------------------------------------------------------------------------------
-- Name: get_objectname
-- Desc: Returns name of the object
-------------------------------------------------------------------------------
FUNCTION GET_OBJECT_NAME(
    pc_flow_code  VARCHAR2)
  return varchar2;
  
 

-------------------------------------------------------------------------------
-- Name: get_form_name
-- Desc: Returns name of the form
-------------------------------------------------------------------------------
FUNCTION GET_FORM_NAME(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER )
  RETURN VARCHAR2;


-------------------------------------------------------------------------------
-- Name: get_current_user_name
-- Desc: Returns current user who submitted the form
-------------------------------------------------------------------------------
FUNCTION GET_NAME(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER )
  RETURN VARCHAR2;
  
    -------------------------------------------------------------------------------
-- Name: get_users
-- Desc: Returns the owners if available, otherwise returns the list of users
--       associated with Edit Object or Edit All Objects activity
-------------------------------------------------------------------------------
     
FUNCTION KPI_KRI_get_users (
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
   )
    RETURN VARCHAR2;


 -------------------------------------------------------------------------------
-- Function to check if the editor is the owner of the object
-- If so, return the value OWNER else return NOT_OWNER
-- This value will be used in one of the rules in the process flow
-- to determine whom to make the next assignment to
-- If OWNER, then assignment will be made to L1 Approver / L2 Approver / Publish
-- If NOT_OWNER, then it is sent to the owners of the object
-------------------------------------------------------------------------------
 FUNCTION KPI_KRI_editor_ownership_check (
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
   )
      RETURN VARCHAR2;
 
 
 -------------------------------------------------------------------------------
-- Name: GET_KRI_KPI_DATA_APPR_EXISTS
-- Desc: Returns whether data approver exist or not
-------------------------------------------------------------------------------
FUNCTION GET_KRI_KPI_DATA_APPR_EXISTS(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER )
  RETURN VARCHAR2;


-------------------------------------------------------------------------------
-- Name: GET_KRI_KPI_APPROVE_ALL_FLAG
-- Desc: Returns whether get approver all flag is yes or no
-------------------------------------------------------------------------------
FUNCTION GET_KRI_KPI_APPROVE_ALL_FLAG(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER )
  RETURN VARCHAR2;

-------------------------------------------------------------------------------
-- Name: GET_KRI_KPI_ID
-- Desc: Returns whether get approver all flag is yes or no
-------------------------------------------------------------------------------
FUNCTION GET_KRI_KPI_ID(
    pc_flow_code  VARCHAR2 ,
    pc_view_name  VARCHAR2 ,  
    pn_pid        NUMBER ,
    pn_id         NUMBER )
  RETURN VARCHAR2;

-------------------------------------------------------------------------------
-- Name: GET_KPI_KRI_R_T_U FLAG
-- Desc: Returns Re assign to user flag 
-------------------------------------------------------------------------------
    
FUNCTION GET_KPI_KRI_R_T_U_FLAG(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER ) RETURN VARCHAR2;
     
-------------------------------------------------------------------------------
-- Name: GET_KPI_KRI_OWNERS_FOR_DE
-- Desc: Returns owners from data definition
-------------------------------------------------------------------------------
         
FUNCTION GET_KPI_KRI_OWNERS_FOR_DE(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER,
    pc_activity_list VARCHAR2 default 'GRC - Provide KPI-KRI Data Entry',
    return_only_owners VARCHAR2 default 'No'
     ) RETURN VARCHAR2;


-------------------------------------------------------------------------------
-- Name: GET_KPI_KRI_DEFINITION_INITIATOR
-- Desc: Returns initiator of current definition initiator
-------------------------------------------------------------------------------
         
FUNCTION GET_KPI_KRI_DEF_INITIATOR(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER ) RETURN VARCHAR2;


-------------------------------------------------------------------------------
-- Name: GET_KPI_KRI_DEFINITION_OWNERS
-- Desc: Returns initiator of current definition owners
-------------------------------------------------------------------------------
         
FUNCTION GET_KPI_KRI_DEF_OWNERS(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER ) RETURN VARCHAR2;

-------------------------------------------------------------------------------
-- Name: GET_KPI_KRI_DEFINITION_INIT_N_OWNERS
-- Desc: Returns initiator of current definition owners
-------------------------------------------------------------------------------
         
FUNCTION GET_KPI_KRI_DEF_INIT_N_OWNERS(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER ) RETURN VARCHAR2;

--global parameter for holding log id of the call
GN_LOG_KEY NUMBER := NULL;
gn_log_seq number := null;
gn_log_id number := null;

FUNCTION get_Auto_Approve_Value (
       p_flow_code       in varchar2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
   )
      RETURN VARCHAR2;

/*FUNCTION CHK_WF_USR_AVLBLTY (
    iuser_name  VARCHAR2,
    iwf_stage  VARCHAR2,
    iwf_action VARCHAR2,
    idd_obj_type VARCHAR2 ,
    iobj_id VARCHAR2, 
    iorg_entity  IN VARCHAR2
)
RETURN NUMBER;*/


 function fn_get_ms_qsm_status (
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER 
   ) return VARCHAR2;
   
   function fn_get_ms_qsm_comments (
     pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER 
   )
      RETURN VARCHAR2;

/*================================================================================
Function Name: fn_chk_valid_usr_avlblty 
Purpose:  To check validity and availability of users in workflow.       
================================================================================*/
FUNCTION FN_CHK_VALID_USR_AVLBLTY (
    PV_USER_NAME      VARCHAR2,
    PV_CUR_STAGE      VARCHAR2,
    PV_ACTION         VARCHAR2,
    PV_OBJECT_TYPE    VARCHAR2 ,
    PV_OBJECT_ID      VARCHAR2 ,
    pv_org_entity_ID  VARCHAR2
      )
RETURN NUMBER RESULT_CACHE;
 procedure search_que_report_mv ( o_error_code      OUT   NUMBER,
   o_error_message   OUT   VARCHAR2);
   
FUNCTION get_applies_to_details (
   p_obj_seq_id        IN NUMBER,
   p_labels_required      VARCHAR2 DEFAULT 'N',
   p_field_key            VARCHAR2 DEFAULT NULL,
   p_parameter            VARCHAR2 DEFAULT NULL)
   RETURN ms_qsm_applies_to_table PIPELINED;

FUNCTION is_questionnaire_name_valid (in_que_name VARCHAR2,
                                       ip_process_inst_id varchar2)
   RETURN VARCHAR2; 

 
 
FUNCTION is_spreadsheet_name_valid (in_que_name VARCHAR2,
                                       ip_process_inst_id varchar2)
   RETURN VARCHAR2;
     
   FUNCTION get_response_approver (
   p_pid        IN NUMBER)
   RETURN VARCHAR2;
   
    FUNCTION is_questnr_req_name_valid (ip_que_req_name VARCHAR2,
                                       ip_process_inst_id number)
   RETURN VARCHAR2;
  
   FUNCTION get_view_edit_url (
      i_metric_id             IN   NUMBER,
      i_process_instance_id   IN   NUMBER,
      i_hyper_text            IN   VARCHAR2 DEFAULT NULL
   )  RETURN VARCHAR2;
 FUNCTION comments_not_null_check (
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
   )
      RETURN VARCHAR2;
FUNCTION check_collaborator (
    pc_flow_code    VARCHAR2,
    pc_stage_code   VARCHAR2,
    pn_pid          NUMBER,
    pn_id           NUMBER
    )
    RETURN VARCHAR2;
    
        FUNCTION trigger_live_survey (
    pc_flow_code    VARCHAR2,
    pc_stage_code   VARCHAR2,
    pn_pid          NUMBER,
    pn_id           NUMBER
    )
    RETURN VARCHAR2;
    
 FUNCTION get_response_actions (
   p_pid        IN NUMBER)
   RETURN VARCHAR2;

    FUNCTION FN_CUSTOM_RULE_1 (
        PC_FLOW_CODE  VARCHAR2 ,
        PC_STAGE_CODE VARCHAR2 ,
        PN_PID        NUMBER ,
        PN_ID         NUMBER 
        )
    RETURN varchar2;
    
 function CUSTOM_RULE2( 
            PC_FLOW_CODE  VARCHAR2 ,
            PC_STAGE_CODE VARCHAR2 ,
            PN_PID        NUMBER ,
            PN_ID         NUMBER )   
    RETURN VARCHAR2;
    
  FUNCTION ALL_USERS_APPROVED( 
                              PC_FLOW_CODE  VARCHAR2 ,
                              PC_STAGE_CODE VARCHAR2 ,
                              PN_PID        NUMBER ,
                              PN_ID         NUMBER ) 
  RETURN VARCHAR2;

END MS_QSM_STAGE_PARAMETRS; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_STAGE_PARAMETRS" 
IS
/*====================================================+
 |               Copyright (c) 2011 - MetricStream, Inc.        |
 |                       All rights reserved.                                |
 +====================================================*/
/*===============================================
FILENAME:       MS_GRC_FLOW_USER_CHECK_BKP.pls
SUMMARY:        Returns the event_user_name, current_user, owner_orgs and owners
--       from the SI table corresponding to the current instance_id
-- Function to check if the editor is the owner of the object
-- If so, return the value OWNER else return NOT_OWNER
-- This value will be used in one of the rules in the process flow
-- to determine whom to make the next assignment to
-- If OWNER, then assignment will be made to L1 Approver / L2 Approver / Publish
-- If NOT_OWNER, then it is sent to the owners of the object
Revision History:
Date      Name                Revision Description
========= ============ ==============================
<Currnet date>  <User Name >       Created by 
<Currnet date>  <User Name>     Included newly added columns in SELECT
====================================================*/

-------------------------------------------------------------------------------
-- Name: message_log
-- Desc: Returns SI table view associated with the flow
-------------------------------------------------------------------------------
 g_error_handle_id   NUMBER                                          := 999;
 g_error_sequence    NUMBER                                          := 999;

PROCEDURE message_log
(
     p_log_id            IN OUT NUMBER,
     p_error_code         VARCHAR2,
     p_error_message      VARCHAR2,
     P_PROGRAM_NAME       MS_APPS_MESSAGE_LOG.PROGRAM_NAME%TYPE,
     p_line_location      NUMBER
)
is
begin
         ms_apps_product_error_log_pkg.message_log(
                P_LOG_KEY       => p_log_id,
                p_log_sequence  => gn_log_seq,
                P_MODULE        => 'QSM',
                p_error_code    => NULL,
                P_ERROR_MESSAGE => p_error_message,
                p_program_name  => P_PROGRAM_NAME,
                p_line_location => p_line_location,
                p_log_type      => p_error_code);  
                     

END;



-------------------------------------------------------------------------------
-- Name: get_flow_view_name
-- Desc: Returns SI table view associated with the flow
-------------------------------------------------------------------------------
   FUNCTION get_flow_view_name (pc_flow_code VARCHAR2,pc_view_type varchar2 default 'V' )
      RETURN VARCHAR2
   IS
      lc_namespace         VARCHAR2 (100)
                       := 'xmlns="http://www.metricstream.com/appstudio/mdf"';      
      lv_flow              XMLTYPE;
      lv_view_name         VARCHAR2 (400);
   BEGIN
      --
      -- From the flow code, extract the name of the View
      -- TODO : Need to add the version number here later once versioning is implemented
      --
      BEGIN
      
      SELECT XMLTYPE (flow_xml)
           INTO lv_flow
           FROM ms_apps_mdf_flow_xml
          WHERE flow_code = pc_flow_code;
      
      if pc_view_type='V' then

   
         DBMS_OUTPUT.PUT_LINE('3 '  );
         SELECT stages.EXTRACT ('stage/view/text()', lc_namespace).getstringval
                                                                           ()
                                                                    view_name
           INTO lv_view_name
           FROM TABLE
                   (XMLSEQUENCE
                       ((SELECT lv_flow.EXTRACT
                                            ('process/stages/stage[enabled="Y"]',
                                             lc_namespace
                                            )
                           FROM DUAL)
                       )
                   ) stages
          WHERE ROWNUM = 1;
          DBMS_OUTPUT.PUT_LINE('4 '  );         
        else
        SELECT stages.EXTRACT ('stage/displayview/text()', lc_namespace).getstringval
                                                                           ()
                                                                    view_name
           INTO lv_view_name
           FROM TABLE
                   (XMLSEQUENCE
                       ((SELECT lv_flow.EXTRACT
                                            ('process/stages/stage[enabled="Y"]',
                                             lc_namespace
                                            )
                           FROM DUAL)
                       )
                   ) stages
          WHERE ROWNUM = 1;
        end if;  
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN            
                                
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => SQLERRM,
                                   p_program_name       => $$PLSQL_UNIT,
                                   P_LINE_LOCATION      => $$PLSQL_LINE
                                  );                
              ROLLBACK;
            RETURN NULL;
      END;

      RETURN lv_view_name;
   END get_flow_view_name;

-------------------------------------------------------------------------------
-- Name: get_object_name
-- Desc: Returns SI table view associated with the flow
-------------------------------------------------------------------------------
   FUNCTION get_object_name (pc_flow_code VARCHAR2)
      RETURN VARCHAR2
   IS
      lc_namespace         VARCHAR2 (100)
                       := 'xmlns="http://www.metricstream.com/appstudio/mdf"';
      lv_flow              XMLTYPE;
      lv_object_name       VARCHAR2 (400);
   BEGIN
      --
      -- From the flow code, extract the name of the View
      -- TODO : Need to add the version number here later once versioning is implemented
      --
      BEGIN
         SELECT XMLTYPE (flow_xml)
           INTO lv_flow
           FROM ms_apps_mdf_flow_xml
          WHERE flow_code = pc_flow_code;

         --
         -- From the first stage, extract then name of the object view
         --
         SELECT stages.EXTRACT ('stage/object/text()', lc_namespace).getstringval
                                                                           ()
                                                                    view_name
           INTO lv_object_name
           FROM TABLE
                   (XMLSEQUENCE
                       ((SELECT lv_flow.EXTRACT
                                            ('process/stages/stage[enabled="Y"]',
                                             lc_namespace
                                            )
                           FROM DUAL)
                       )
                   ) stages
          WHERE ROWNUM = 1;
      EXCEPTION
         WHEN OTHERS
         THEN
            message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
            ROLLBACK;                      
            RETURN NULL;
      END;

      RETURN lv_object_name;
   END get_object_name;

-------------------------------------------------------------------------------
-- Name: get_flow_values
-- Desc: Returns the event_user_name, current_user, owner_orgs and owners
--       from the SI table corresponding to the current instance_id
--       Assumption: All the GRC Core Objects will have the same field names
-------------------------------------------------------------------------------
   PROCEDURE get_flow_values (
      pc_view_name    IN       VARCHAR2,
      pc_inst_id      IN       VARCHAR2,
      pv_evt_user     OUT      VARCHAR2,
      pv_cur_user     OUT      VARCHAR2,
      pv_owner_orgs   OUT      VARCHAR2,
      pv_owners       OUT      VARCHAR2
   )
   IS
   lv_exec_imd          VARCHAR2(4000);      
   BEGIN
       --
      -- Get the owner organizations from the pushform view
      --
      lv_exec_imd := 'SELECT DD_CURRENT_USER_NAME, DD_EVENT_USER_NAME, OWNER_ORGANIZATIONS, OWNERS FROM '
                           || pc_view_name
                           || ' WHERE instance_id = :1'
                           || ' AND /*instance_rec_num = 1*/ rownum = 1';
      BEGIN
        
        /*ms_apps_product_error_log_pkg.message_log(
                P_LOG_KEY       => gn_log_key,
                p_log_sequence  => gn_log_seq,
                p_module        => 'GRC',
                p_error_code    => null,
                P_ERROR_MESSAGE => 'Executing SELECT for retrieving DD_CURRENT_USER_NAME, DD_EVENT_USER_NAME, OWNER_ORGANIZATIONS, OWNERS: '||lv_exec_imd,
                p_program_name  => $$plsql_unit,
                P_LINE_LOCATION => $$PLSQL_LINE,
                p_log_type      => 'LOG');*/
                
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Executing SELECT for retrieving DD_CURRENT_USER_NAME, DD_EVENT_USER_NAME, OWNER_ORGANIZATIONS, OWNERS: '||lv_exec_imd,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                     
         execute immediate  lv_exec_imd  
                      INTO pv_cur_user, pv_evt_user, pv_owner_orgs, pv_owners using pc_inst_id;

         
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'retrieving DD_CURRENT_USER_NAME, DD_EVENT_USER_NAME, OWNER_ORGANIZATIONS, OWNERS: '||pv_cur_user || pv_evt_user|| pv_owner_orgs|| pv_owners,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         
      EXCEPTION
         WHEN OTHERS
         THEN
            message_log (p_log_id          => gn_log_id,
                                   p_error_code         => SUBSTR (SQLCODE,1,9),
                                   p_error_message      => SUBSTR (SQLERRM,1,3999),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  ); 
            RAISE;
        ROLLBACK;
      END;
   END get_flow_values;

-------------------------------------------------------------------------------
-- Name: get_flow_alues
-- Desc: Returns the event_user_name, current_user, owner_orgs and owners
--       from the SI table corresponding to the current instance_id
--       Assumption: All the GRC Core Objects will have the same field names
-------------------------------------------------------------------------------
   PROCEDURE get_flow_values_for_initiator (
      pc_view_name    IN       VARCHAR2,
      pc_inst_id      IN       VARCHAR2,
      pv_evt_user     OUT      VARCHAR2,
      pv_cur_user     OUT      VARCHAR2,
      pv_owner_orgs   OUT      VARCHAR2,
      pv_owners       OUT      VARCHAR2
   )
   IS
      lv_exec_imd          VARCHAR2(4000);
   BEGIN
       --
      -- Get the owner organizations from the pushform view
      --
      lv_Exec_imd := '
    SELECT DD_CURRENT_USER_NAME, DD_EVENT_USER_NAME, OWNER_ORGANIZATIONS, OWNERS FROM '
      || pc_view_name
      || ' A
    where process_instance_id = (SELECT min(process_instance_id) from '
      || pc_view_name
      || ' where object_id = (SELECT distinct object_id from '
      || pc_view_name
      || ' where instance_id = :1'
      || '))
    and instance_id = (SELECT min(instance_id) from '
      || pc_view_name
      || ' where process_instance_id = a.PROCESS_INSTANCE_ID) and instance_rec_num=1 and rownum = 1';
      
      BEGIN
         
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before executing ' ||lv_Exec_imd,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                  
         EXECUTE IMMEDIATE  lv_Exec_imd INTO pv_cur_user, pv_evt_user, pv_owner_orgs, pv_owners using pc_inst_id;
    
            
      EXCEPTION
         WHEN OTHERS
         THEN
            message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => 'After Executing SELECT for getting initiator values '||SUBSTR (SQLERRM,1,3900),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
            RAISE;
            ROLLBACK;
      END;
   END get_flow_values_for_initiator;

-------------------------------------------------------------------------------
-- Function to check if the editor is the owner of the object
-- If so, return the value OWNER else return NOT_OWNER
-- This value will be used in one of the rules in the process flow
-- to determine whom to make the next assignment to
-- If OWNER, then assignment will be made to L1 Approver / L2 Approver / Publish
-- If NOT_OWNER, then it is sent to the owners of the object
-------------------------------------------------------------------------------
   FUNCTION editor_ownership_check (
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
   )
      RETURN VARCHAR2
   IS
      lv_user_exists_flag    VARCHAR2 (20);
      lv_owner_orgs          VARCHAR2 (4000);
      LV_EVENT_USER_NAME     VARCHAR2 (4000);
      lv_owners              VARCHAR2 (4000);
      LV_CURRENT_USER_NAME   VARCHAR2 (400);
      lv_view_name           VARCHAR2 (400);
      lv_obj_type            VARCHAR2 (400);
      lv_query               VARCHAR2 (400); 
      lv_security_edit        VARCHAR2 (400);
      lv_security_edit_all        VARCHAR2 (400);
      ln_cnt                 NUMBER;
      lv_initiator           VARCHAR2 (80);

   BEGIN
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_view_name in editor_ownership_check with flow code ' ||pc_flow_code,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                      
      lv_view_name := get_flow_view_name (pc_flow_code);
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_view_name in editor_ownership_check. Returned view name ' ||lv_view_name,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_values in editor_ownership_check with view ' ||lv_view_name ||' and process instance id '||pn_id,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );                            
      get_flow_values (lv_view_name,
                       pn_id,
                       lv_event_user_name,
                       lv_current_user_name,
                       lv_owner_orgs,
                       lv_owners
                      );
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_values in editor_ownership_check with event user name: '
                                                           || lv_event_user_name ||'lv_current_user_name: '||
                                                           lv_current_user_name ||' lv_owner_orgs: '||
                                                           lv_owner_orgs|| ' lv_owners: '|| lv_owners   ,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );                
      --
      -- Check if the generator of this event is also a owner
      --
      lv_initiator := GET_INITIATOR(pc_flow_code, pc_stage_code,pn_pid,pn_id);
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_initiator in editor_ownership_check got initiator: '||lv_initiator   ,
                                   p_program_name       => $$PLSQL_UNIT,
                                   P_LINE_LOCATION      => $$PLSQL_LINE
                                  );
                                  
      SELECT USER_NAME
      INTO lv_initiator     
      FROM SI_USERS_T
      WHERE  USER_ID = lv_initiator;                            

      IF INSTR (',' || lv_owners || ',', ',' || lv_initiator || ',') > 0
      THEN
         lv_user_exists_flag := 'OWNER';
      --
      -- Check if there is atleast one owner for this object. If so
      -- the assignment will be sent to those owners
      --
      ELSIF lv_owners IS NOT NULL
      THEN
         lv_user_exists_flag := 'NOT_OWNER';
         
      --
      -- Check if the generator of this event is part of owner organizations, and has edit rights. 
      -- If he has, he will be treated as a owner.
      -- else check if there are other useres with edit rights in the
      -- owner organization. If so, assignment will go to them
      --
      -- If no users are found thus far, return NO_USERS which will make the assignment
      -- back to the initiator of the flow
      --
      ELSE         
         
         BEGIN
           
            lv_obj_type:=get_object_name(pc_flow_code);

--            SELECT   OBJECT_TYPE
--            INTO   lv_obj_type
--            FROM   ms_grc_wf_config
--            WHERE   UPPER(VIEW_NAME) =  UPPER(lv_view_name) ;
            
            SELECT SECURITY_EDIT,SECURITY_EDIT_ALL into lv_security_edit, lv_security_edit_all
            FROM MS_APPS_VISUAL_ENTITY_V
            WHERE VE_PUSHFORM_NAME=lv_obj_type;
         
           SELECT count(1) into ln_cnt
              FROM ms_qsm_flow_down_org_v
             WHERE activity_name IN
                      (lv_security_edit,lv_security_edit_all)
               AND org_entity_id IN (
                      SELECT COLUMN_VALUE
                        FROM TABLE
                                (ms_apps_utilities.parse_string
                                                               (lv_owner_orgs,
                                                                ','
                                                               )
                                ))
               AND user_name =  lv_initiator ;
               
            IF ln_cnt > 0 THEN
                lv_user_exists_flag:= 'OWNER';
            ELSE
       
            SELECT 'NOT_OWNER'
              INTO lv_user_exists_flag
              FROM ms_qsm_flow_down_org_v
             WHERE activity_name IN
                      (lv_security_edit,lv_security_edit_all)
               AND org_entity_id IN (
                      SELECT COLUMN_VALUE
                        FROM TABLE
                                (ms_apps_utilities.parse_string
                                                               (lv_owner_orgs,
                                                                ','
                                                               )
                                ))
               AND ROWNUM = 1;
              END IF;
              
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               lv_user_exists_flag := 'NO_USERS';
               message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After Executing SELECT to find out respective owner orgs does have respective activities. Setting lv_user_exists_flag to NO_USERS',
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
            WHEN OTHERS
            THEN
               LV_USER_EXISTS_FLAG := 'NO_USERS';
               message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After Executing SELECT to find out respective owner orgs does have respective activities. Setting lv_user_exists_flag to NO_USERS ' ||substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );     
                              
--            ROLLBACK;                                       
         END;
      END IF;

      RETURN lv_user_exists_flag;
   EXCEPTION
      WHEN OTHERS
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
--          ROLLBACK;           
               RETURN lv_user_exists_flag;  
    END;

-------------------------------------------------------------------------------
-- Name: get_users
-- Desc: Returns the owners if available, otherwise returns the list of users
--       associated with Edit Object or Edit All Objects activity
-------------------------------------------------------------------------------
   FUNCTION get_users (
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
   )
      RETURN VARCHAR2
   IS
      lv_users_list          VARCHAR2 (4000);
      lv_view_name           VARCHAR2 (400);
      lv_owner_orgs          VARCHAR2 (4000);
      lv_event_user_name     VARCHAR2 (4000);
      lv_owners              VARCHAR2 (4000);
      lv_current_user_name   VARCHAR2 (400);
      lv_obj_type            VARCHAR2 (400);
      lv_security_edit            VARCHAR2 (400);
      lv_security_edit_all        VARCHAR2 (400);   
      

      CURSOR c_select_users_cursor (p_activity_name VARCHAR2)
      IS
         SELECT RTRIM
                   (XMLAGG (XMLELEMENT (c, user_name || ',') ORDER BY user_name).EXTRACT
                                                                   ('//text()'),
                    ','
                   )
           FROM (SELECT DISTINCT user_name
                            FROM ms_qsm_flow_down_org_v
                           WHERE activity_name = p_activity_name
                             AND org_entity_id IN (
                                    SELECT COLUMN_VALUE
                                      FROM TABLE
                                              (ms_apps_utilities.parse_string
                                                               (lv_owner_orgs,
                                                                ','
                                                               )
                                              )));
   BEGIN
   
      
      
    message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_view_name in get_users with flow code ' ||pc_flow_code,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                      
      lv_view_name := get_flow_view_name (pc_flow_code);
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_view_name in get_users. Returned view name ' ||lv_view_name,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_values in get_users with view name ' ||lv_view_name ||' and pid '||pn_pid,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                  
      get_flow_values (lv_view_name,
                       pn_id,
                       lv_event_user_name,
                       lv_current_user_name,
                       lv_owner_orgs,
                       lv_owners
                      );
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_values in get_users with event user name: '
                                                           || lv_event_user_name ||'lv_current_user_name: '||
                                                           lv_current_user_name ||' lv_owner_orgs: '||
                                                           lv_owner_orgs|| ' lv_owners: '|| lv_owners   ,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  ); 
                                  
            message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_values in get_users with view name ' ||lv_view_name ||' and pid '||pn_pid,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );                                    
--            SELECT   OBJECT_TYPE
--            INTO   lv_obj_type
--            FROM   ms_grc_wf_config
--            WHERE   UPPER(VIEW_NAME) =  UPPER(lv_view_name) ;

               lv_obj_type := get_object_name(pc_flow_code);
            
            SELECT 
               SECURITY_EDIT,SECURITY_EDIT_ALL into lv_security_edit, lv_security_edit_all
          FROM MS_APPS_VISUAL_ENTITY_V
         WHERE UPPER(VE_PUSHFORM_NAME) = UPPER( lv_obj_type);                            
                                         
      IF lv_owners IS NOT NULL
      THEN
         lv_users_list := lv_owners;
      ELSE
         OPEN c_SELECT_users_cursor (lv_security_edit);

         FETCH c_SELECT_users_cursor
          INTO lv_users_list;

         CLOSE c_SELECT_users_cursor;

         IF lv_users_list IS NULL
         THEN
            OPEN c_select_users_cursor (lv_security_edit_all);

            FETCH c_select_users_cursor
             INTO lv_users_list;

            CLOSE c_select_users_cursor;
         END IF;
      END IF;

      RETURN lv_users_list;
   EXCEPTION
      WHEN OTHERS
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
            ROLLBACK;
   END get_users;

-------------------------------------------------------------------------------
-- Name: get_initiator
-- Desc: Returns the initiator of the flow (event_user_name)
-------------------------------------------------------------------------------
   FUNCTION get_initiator (
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
   )
      RETURN VARCHAR2
   IS
      lv_view_name            VARCHAR2 (400);
      lv_owner_orgs           VARCHAR2 (4000);
      lv_user_name            VARCHAR2 (4000);
      lv_owners               VARCHAR2 (4000);
      lv_current_user_name    VARCHAR2 (400);
      lsqlstmt                VARCHAR2 (4000);
   BEGIN
   
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_view_name in get_initiator with flow code ' ||pc_flow_code,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                      
      
      lv_view_name := get_flow_view_name (pc_flow_code);
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_view_name in get_initiator. Returned view name ' ||lv_view_name,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );  
      --get_flow_values_for_initiator is changed from get_flow_values inorder to retrieve actual initiator of the object
      --change done on 14-Apr-11 for bug 30720

  /*    get_flow_values_for_initiator (lv_view_name,
                       pn_id,
                       lv_event_user_name,
                       lv_current_user_name,
                       lv_owner_orgs,
                       lv_owners
                      );*/
                      
--       lsqlstmt := 'select nvl(obj_modified_by, obj_Created_by) from ' || lv_view_name ||' where process_instance_id = '||pn_pid ||'
--                   and instance_id = '||pn_id||' and rownum = 1';

       lsqlstmt := 'select u.USER_ID from ' || lv_view_name ||' x,si_users_t u where x.process_instance_id = :1' ||'
                   and x.instance_id =:2 '||' and rownum = 1
                   and x.DD_EVENT_USER_NAME=u.USER_NAME';
       
       message_log (p_log_id          => gn_log_id,
                P_ERROR_CODE         => 'LOG',
                p_error_message      => 'Query to get initiator ' || lsqlstmt ,
                P_PROGRAM_NAME       => $$PLSQL_UNIT,
                P_LINE_LOCATION      => $$PLSQL_LINE );                       
       execute immediate lsqlstmt into lv_user_name                   
       using  pn_pid,pn_id;
  
      RETURN lv_user_name;
   EXCEPTION
      WHEN OTHERS
      THEN
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
DBMS_OUTPUT.PUT_LINE('ERR:'||SQLERRM);
--         ROLLBACK;                         

         RETURN NULL;
   END get_initiator;


-------------------------------------------------------------------------------
-- Name: get_initiator_name
-- Desc: Returns the initiator of the flow (event_user_name)
-------------------------------------------------------------------------------
   FUNCTION get_initiator_name (
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
   )
      RETURN VARCHAR2
   IS
      lv_view_name           VARCHAR2 (400);
      lv_owner_orgs          VARCHAR2 (4000);
      lv_event_user_name     VARCHAR2 (4000);
      lv_owners              VARCHAR2 (4000);
      lv_current_user_name   VARCHAR2 (400);
      lv_initiator           VARCHAR2 (4000);
      lv_initiator_name      VARCHAR2 (4000);
   begin
      /*message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_view_name in get_initiator_name with flow code ' ||pc_flow_code,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );                                      
      
      lv_view_name := get_flow_view_name (pc_flow_code,'D');
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_view_name in get_initiator_name. Returned view name ' ||lv_view_name,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );    
      
      --get_flow_values_for_initiator is changed from get_flow_values inorder to retrieve actual initiator of the object
      --change done on 14-Apr-11 for bug 30720
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_values_for_initiator in get_initiator_name with view name ' ||lv_view_name ||' and pid '||pn_pid,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
      get_flow_values_for_initiator (lv_view_name,
                       pn_id,
                       lv_event_user_name,
                       lv_current_user_name,
                       lv_owner_orgs,
                       lv_owners
                      );
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_values_for_initiator_name in get_initiator with event user name: '
                                                           || lv_event_user_name ||'lv_current_user_name: '||
                                                           lv_current_user_name ||' lv_owner_orgs: '||
                                                           lv_owner_orgs|| ' lv_owners: '|| lv_owners   ,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );                
      return lv_event_user_name;
      */
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_initiator in get_initiator_name with flow code ' ||pc_flow_code,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );     
      lv_initiator := GET_INITIATOR(pc_flow_code, pc_stage_code, pn_pid, pn_id);
     -- lv_initiator_name := ms_apps_utilities.get_user_full_name(lv_initiator) ;
     select USER_NAME
     into lv_initiator_name
     from si_users_t
     where user_id=lv_initiator;
     
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Returning initiator name '||lv_initiator_name,
                                   p_program_name       => $$plsql_unit,
                                   p_line_location      => $$PLSQL_LINE
                                  );     
      
      return lv_initiator_name;
   EXCEPTION
      WHEN OTHERS
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         ROLLBACK;                            
         RETURN NULL;
   END get_initiator_name;

-------------------------------------------------------------------------------
-- Name: get_initiator
-- Desc: Returns the current user who submitted the flow (current_user_name)
-------------------------------------------------------------------------------
   FUNCTION get_current_user_name (
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
   )
      RETURN VARCHAR2
   IS
      lv_view_name           VARCHAR2 (400);
      lv_owner_orgs          VARCHAR2 (4000);
      lv_event_user_name     VARCHAR2 (4000);
      lv_owners              VARCHAR2 (4000);
      lv_current_user_name   VARCHAR2 (400);
   BEGIN
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_view_name in get_current_user_name with flow code ' ||pc_flow_code,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );                                      
      
      lv_view_name := get_flow_view_name (pc_flow_code);
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_view_name in get_current_user_name. Returned view name ' ||lv_view_name,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                    
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_values in get_current_user_name with view name ' ||lv_view_name ||' and pid '||pn_pid,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                  
      get_flow_values (lv_view_name,
                       pn_id,
                       lv_event_user_name,
                       lv_current_user_name,
                       lv_owner_orgs,
                       lv_owners
                      );
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_values in get_current_user_name with event user name: '
                                                           || lv_event_user_name ||'lv_current_user_name: '||
                                                           lv_current_user_name ||' lv_owner_orgs: '||
                                                           lv_owner_orgs|| ' lv_owners: '|| lv_owners   ,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );        
      
      RETURN lv_current_user_name;
   EXCEPTION
      WHEN OTHERS
      THEN
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         ROLLBACK;                         
         RETURN NULL;
   END get_current_user_name;

-------------------------------------------------------------------------------
-- Name: get_form_name
-- Desc: Returns name of the form
-------------------------------------------------------------------------------
   FUNCTION get_form_name (
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
   )
      RETURN VARCHAR2
   IS
      lv_object_name       VARCHAR2 (400);
      lv_form_name         VARCHAR2 (400);
      Lv_kpi_kri           VARCHAR2 (400); 
   BEGIN
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_object_name in get_form_name',
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
      lv_object_name := get_object_name (pc_flow_code);
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'get_form_name returned '||lv_object_name,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );  
      SELECT form_name
        INTO lv_form_name
        FROM si_metrics_t
       WHERE metric_id = (SELECT MAX (metric_id)
                            FROM si_metrics_t
                           WHERE metric_name = lv_object_name);
         
       -- Commented By Jamsheed and Need to Remove                  
--         if lv_object_name = 'MS_GRC_KPI_KRI_DEFINITION' then
--         
--         SELECT KPI_KRI_FLAG into Lv_kpi_kri FROM MS_GRC_KPI_KRI_DEFINITION_V WHERE ROWNUM = 1;
--         if Lv_kpi_kri = 1 then
--            lv_form_name := 'KPI';
--           else
--           lv_form_name := 'KRI';
--         
--           end if;            
--        end if;       

      RETURN lv_form_name;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         RETURN NULL;
      WHEN OTHERS
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         ROLLBACK;                         
         RETURN NULL;   
   END;
   
   -------------------------------------------------------------------------------
-- Name: get_current_user_name
-- Desc: Returns current user who submitted the form
-------------------------------------------------------------------------------
FUNCTION GET_NAME(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER )
  RETURN VARCHAR2 IS
  LV_VIEW_NAME VARCHAR2(100);
  lv_object_name varchar2(32767);
  lv_Exec_imd varchar2(4000);
  BEGIN
  
     message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_view_name in GET_NAME with flow code ' ||pc_flow_code,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );                                      
      
      lv_view_name := get_flow_view_name (pc_flow_code);
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_view_name in GET_NAME. Returned view name ' ||lv_view_name,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
  
    
    lv_exec_imd := 'SELECT DISTINCT OBJECT_NAME FROM '||lv_view_name||' WHERE PROCESS_INSTANCE_ID = 
   (SELECT MAX(PROCESS_INSTANCE_ID) FROM '||LV_VIEW_NAME||' WHERE INSTANCE_ID = :1'||')';
       
   message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before executing '||lv_Exec_imd,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                   
   EXECUTE IMMEDIATE lv_Exec_imd into lv_object_name using pn_id; 
   
   message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After executing object name which obtained is: '||lv_object_name,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
   
   RETURN lv_object_name;
   
   exception
   when others then
   message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
    ROLLBACK;                              
   return 'GRC Object Name';
   
  END;
  
  -------------------------------------------------------------------------------
-- Name: get_users
-- Desc: Returns the owners if available, otherwise returns the list of users
--       associated with Edit Object or Edit All Objects activity
-------------------------------------------------------------------------------
   FUNCTION KPI_KRI_get_users (
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
   )
      RETURN VARCHAR2
   IS
      lv_users_list          VARCHAR2 (4000);
      lv_view_name           VARCHAR2 (400);
      lv_owner_orgs          VARCHAR2 (4000);
      lv_event_user_name     VARCHAR2 (4000);
      lv_owners              VARCHAR2 (4000);
      lv_current_user_name   VARCHAR2 (400);

      CURSOR c_select_users_cursor (p_activity_name VARCHAR2)
      IS
         SELECT RTRIM
                   (XMLAGG (XMLELEMENT (c, user_name || ',') ORDER BY user_name).EXTRACT
                                                                   ('//text()'),
                    ','
                   )
           FROM (SELECT DISTINCT user_name
                            FROM ms_qsm_flow_down_org_v
                           WHERE activity_name = p_activity_name
                             AND org_entity_id IN (
                                    SELECT COLUMN_VALUE
                                      FROM TABLE
                                              (ms_apps_utilities.parse_string
                                                               (lv_owner_orgs,
                                                                ','
                                                               )
                                              )));
    BEGIN
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_view_name in KPI_KRI_get_users with flow code ' ||pc_flow_code,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                      
      lv_view_name := get_flow_view_name (pc_flow_code);
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_view_name in KPI_KRI_get_users. Returned view name ' ||lv_view_name,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
      
       message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_values in KPI_KRI_get_users with view ' ||lv_view_name ||' and process instance id '||pn_id,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                  
      get_flow_values (lv_view_name,
                       pn_id,
                       lv_event_user_name,
                       lv_current_user_name,
                       lv_owner_orgs,
                       lv_owners
                      );
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_values in KPI_KRI_get_users with event user name: '
                                                           || lv_event_user_name ||'lv_current_user_name: '||
                                                           lv_current_user_name ||' lv_owner_orgs: '||
                                                           lv_owner_orgs|| ' lv_owners: '|| lv_owners   ,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  ); 
      IF lv_owners IS NOT NULL
      THEN
         lv_users_list := lv_owners;
      ELSE
         OPEN c_select_users_cursor ('GRC-Edit KPI-KRI Definition');

         FETCH c_select_users_cursor
          INTO lv_users_list;

         CLOSE c_select_users_cursor;

         IF lv_users_list IS NULL
         THEN
            OPEN c_select_users_cursor ('GRC- Edit All KPI-KRI Definitions');

            FETCH c_select_users_cursor
             INTO lv_users_list;

            CLOSE c_select_users_cursor;
         END IF;
      END IF;

      RETURN lv_users_list;
   EXCEPTION
      WHEN OTHERS
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
          ROLLBACK;                        
         RETURN NULL;
   END KPI_KRI_get_users;
   
   -------------------------------------------------------------------------------
-- Function to check if the editor is the owner of the object
-- If so, return the value OWNER else return NOT_OWNER
-- This value will be used in one of the rules in the process flow
-- to determine whom to make the next assignment to
-- If OWNER, then assignment will be made to L1 Approver / L2 Approver / Publish
-- If NOT_OWNER, then it is sent to the owners of the object
-------------------------------------------------------------------------------
 FUNCTION KPI_KRI_editor_ownership_check (
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
   )
      RETURN VARCHAR2
   IS
      lv_user_exists_flag    VARCHAR2 (20);
      lv_owner_orgs          VARCHAR2 (4000);
      lv_event_user_name     VARCHAR2 (4000);
      lv_owners              VARCHAR2 (4000);
      lv_current_user_name   VARCHAR2 (400);
      lv_view_name           VARCHAR2 (400);
      lv_error_handle_id     NUMBER;
      lv_error_sequence      NUMBER;
   BEGIN
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_view_name in KPI_KRI_editor_ownership_check with flow code ' ||pc_flow_code,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                      
      lv_view_name := get_flow_view_name (pc_flow_code);
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_view_name in KPI_KRI_editor_ownership_check. Returned view name ' ||lv_view_name,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
      
       message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_values in KPI_KRI_editor_ownership_check with view ' ||lv_view_name ||' and process instance id '||pn_id,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                  
      get_flow_values (lv_view_name,
                       pn_id,
                       lv_event_user_name,
                       lv_current_user_name,
                       lv_owner_orgs,
                       lv_owners
                      );
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_values in KPI_KRI_editor_ownership_check with event user name: '
                                                           || lv_event_user_name ||'lv_current_user_name: '||
                                                           lv_current_user_name ||' lv_owner_orgs: '||
                                                           lv_owner_orgs|| ' lv_owners: '|| lv_owners   ,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  ); 
      --
      -- Check if the generator of this event is also a owner
      --
      

      IF INSTR (',' || lv_owners || ',', ',' || lv_event_user_name || ',') > 0
      THEN
         lv_user_exists_flag := 'OWNER';
         
      --
      -- Check if there is atleast one owner for this object. If so
      -- the assignment will be sent to those owners
      --
      ELSIF lv_owners IS NOT NULL
      THEN
         lv_user_exists_flag := 'NOT_OWNER';
      --
      -- Check if there are any users with the activity to edit this object in the
      -- owner organization. If so, assignment will go to them
      --
      -- If no users are found thus far, return NO_USERS which will make the assignment
      -- back to the initiator of the flow
      --
      ELSE
         

         BEGIN
            SELECT 'NOT_OWNER'
              INTO lv_user_exists_flag
              FROM ms_qsm_flow_down_org_v
             WHERE activity_name IN
                      ('GRC- Edit All KPI-KRI Definitions','GRC-Edit KPI-KRI Definition')
               AND org_entity_id IN (
                      SELECT COLUMN_VALUE
                        FROM TABLE
                                (ms_apps_utilities.parse_string
                                                               (lv_owner_orgs,
                                                                ','
                                                               )
                                ))
               AND ROWNUM = 1;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               lv_user_exists_flag := 'NO_USERS';
         END;
      END IF;

      RETURN lv_user_exists_flag;
   EXCEPTION
      WHEN OTHERS
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         ROLLBACK;
         RETURN NULL;
   END;
   
 -------------------------------------------------------------------------------
--*** NOT USED
-- Name: get data approver exist
-- Desc: Returns whether data approver exist or not
-------------------------------------------------------------------------------
   FUNCTION get_kri_kpi_data_appr_exists (
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
   )
      RETURN VARCHAR2
   IS
      lv_view_name               VARCHAR2 (400);
      lv_data_appr_exists_flag   VARCHAR2 (1);
      lv_error_handle_id         NUMBER;
      lv_error_sequence          NUMBER;
      lv_exec_imd varchar2(4000);
   BEGIN
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_view_name in get_kri_kpi_data_appr_exists with flow code ' ||pc_flow_code,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                      
      lv_view_name := get_flow_view_name (pc_flow_code);
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_view_name in get_kri_kpi_data_appr_exists. Returned view name ' ||lv_view_name,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                  
      
      lv_exec_imd := 'SELECT case when data_entry_approver is not null then ''N'' else ''Y'' end  FROM '
                        || LV_VIEW_NAME
                        || ' WHERE process_instance_id = :1'
                        || ' AND instance_id =:2 '
                        || ' AND instance_rec_num = 1';

      execute immediate    LV_EXEC_IMD
                   INTO lv_data_appr_exists_flag using pn_pid,pn_id;

      RETURN lv_data_appr_exists_flag;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         =>  'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000)|| ' when executing '||lv_exec_imd,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         RETURN 'N';
      WHEN OTHERS
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000)|| ' when executing '||lv_exec_imd,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         ROLLBACK;                         
         RETURN 'N';
   END get_kri_kpi_data_appr_exists;

 -------------------------------------------------------------------------------
-- Name: get approver all flag is yes or no
-- Desc: Returns whether get approver all flag is yes or no
-------------------------------------------------------------------------------
   FUNCTION get_kri_kpi_approve_all_flag (
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
   )
      RETURN VARCHAR2
   IS      
      lv_error_handle_id     NUMBER;
      lv_error_sequence      NUMBER;
      lv_approver_all_flag   VARCHAR2 (10);
      lv_kpi_kri_id          VARCHAR2 (100);
      lv_view_name           VARCHAR2 (400);
      lv_error_message       VARCHAR2(1000);
   BEGIN
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_view_name in get_kri_kpi_approve_all_flag with flow code ' ||pc_flow_code,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                      
      lv_view_name := get_flow_view_name (pc_flow_code);
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_view_name in get_kri_kpi_approve_all_flag. Returned view name ' ||lv_view_name,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                  
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_kri_kpi_id in get_kri_kpi_approve_all_flag with  pc_flow_code, lv_view_name, pn_pid, pn_id' ||pc_flow_code || lv_view_name || pn_pid || pn_id,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
      lv_kpi_kri_id :=
                    get_kri_kpi_id (pc_flow_code, lv_view_name, pn_pid, pn_id);
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Retrieved KPI KRI ID'||lv_kpi_kri_id,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );              
      

     /*SELECT lovvalue.displayed_value 
            INTO lv_approver_all_flag
      FROM  ms_qs_list_of_values lovvalue,
            ms_grc_kpi_kri_defn,
            ms_qs_lov_names_v lovname
      WHERE lovvalue.lov_id = lovname.lov_id
          AND lovname.lov_name = 'MS GRC KI Approve all Data Entries'
          AND locale_id = 1009
          AND NVL (approve_all_manual_kpi_kri, 2) = lovvalue.stored_value
          AND object_id= lv_kpi_kri_id;     */
          
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Approve all flag is '||lv_approver_all_flag,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  ); 
    RETURN lv_approver_all_flag;     
          
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         RETURN 'No';
      WHEN OTHERS
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         ROLLBACK;                          
         RETURN 'No';
   END get_kri_kpi_approve_all_flag;

-------------------------------------------------------------------------------
-- Name: get kri/kpi id
-- Desc: Returns whether get approver all flag is yes or no
-------------------------------------------------------------------------------
   FUNCTION get_kri_kpi_id (
      pc_flow_code   VARCHAR2,
      pc_view_name   VARCHAR2,
      pn_pid         NUMBER,
      pn_id          NUMBER
   )
      RETURN VARCHAR2
   IS
      kpi_kri_id           VARCHAR2 (100);
      lv_Exec_imd varchar2(4000);
      lv_error_handle_id   NUMBER;
      lv_error_sequence    NUMBER;
   BEGIN
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'In get_kpi_kri_id before executing SELECT: '||lv_Exec_imd,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                  
      LV_EXEC_IMD :='SELECT OBJECT_ID FROM ' || PC_VIEW_NAME
                        || ' WHERE process_instance_id = :1'
                        || ' AND instance_id = :2'
                        || ' AND instance_rec_num = 1';
      execute immediate LV_EXEC_IMD   
                   INTO kpi_kri_id using PN_PID, pn_id;

      RETURN kpi_kri_id;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         RETURN NULL;
      WHEN OTHERS
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         ROLLBACK;                         
         RETURN NULL;
   END get_kri_kpi_id;

-------------------------------------------------------------------------------
--***NOT USED
-- Name: GET_KPI_KRI_R_T_U FLAG
-- Desc: Returns Re assign to user flag
-------------------------------------------------------------------------------
   FUNCTION get_kpi_kri_r_t_u_flag (
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
   )
      RETURN VARCHAR2
   IS
   lv_view_name         VARCHAR2 (400);
   lv_re_assign_to_user_flag varchar2(1);
   lv_Exec_imd varchar2(4000);
   lv_error_handle_id   NUMBER;
   lv_error_sequence    NUMBER;
   BEGIN
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_view_name in get_kpi_kri_r_t_u_flag with flow code ' ||pc_flow_code,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                      
      lv_view_name := get_flow_view_name (pc_flow_code);
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_view_name in get_kpi_kri_r_t_u_flag. Returned view name ' ||lv_view_name,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
      
      lv_Exec_imd := 'SELECT case when object_Action = ''U'' then ''Y'' else ''N'' end FROM '     
                         || lv_view_name
                        || ' 
                        WHERE process_instance_id = :1'
                        || ' AND instance_id = :2'
                        || ' AND instance_rec_num = 1';
                                  
      execute immediate LV_EXEC_IMD
                        INTO lv_re_assign_to_user_flag using pn_pid,pn_id;
EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         RETURN 'N';
      WHEN OTHERS
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         ROLLBACK;                         
         RETURN 'Y';                        
   END get_kpi_kri_r_t_u_flag;  


-------------------------------------------------------------------------------
-- Name: GET_KPI_KRI_OWNERS_FOR_DE
-- Desc: Returns owners from data definition
-------------------------------------------------------------------------------
         
FUNCTION GET_KPI_KRI_OWNERS_FOR_DE(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER ,
    pc_activity_list VARCHAR2 default 'GRC - Provide KPI-KRI Data Entry',
    return_only_owners VARCHAR2 default 'No') 
    RETURN VARCHAR2 is
      lv_error_handle_id        NUMBER;
      lv_error_sequence         NUMBER;
      lv_kpi_kri_id             VARCHAR2 (100);
      lv_view_name              VARCHAR2 (400);
      lv_owner_organizations    VARCHAR2(4000);
      lv_users_list             VARCHAR2(4000);
      lv_orgs_list             VARCHAR2(4000);
      lv_return_user_list       varchar2(4000);
   BEGIN
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_view_name in GET_KPI_KRI_OWNERS_FOR_DE with flow code ' ||pc_flow_code,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                      
      lv_view_name := get_flow_view_name (pc_flow_code);
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_view_name in GET_KPI_KRI_OWNERS_FOR_DE. Returned view name ' ||lv_view_name,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                  
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_kpi_kri_id with pc_flow_code, lv_view_name, pn_pid, pn_id: '||'-' ||pc_flow_code|| '-' ||lv_view_name ||'-' || pn_pid ||'-' || pn_id,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );            
      lv_kpi_kri_id :=
                    get_kri_kpi_id (pc_flow_code, lv_view_name, pn_pid, pn_id);
                    
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_kpi_kri_id with pc_flow_code, lv_view_name, pn_pid, pn_id: '||'-' ||pc_flow_code|| '-' ||lv_view_name ||'-' || pn_pid ||'-' || pn_id,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                        
     /* SELECT owners 
             into
             lv_users_list
        FROM ms_grc_kpi_kri_defn_own
        WHERE object_id = lv_kpi_kri_id;
        
       message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Owners from the definition of kpi kri id: '||lv_kpi_kri_id|| ' are '||lv_users_list,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );*/
                                   
        -- it return the SELECTed users in definition from if any
        if return_only_owners = 'Yes' and lv_users_list is not null then
            return lv_users_list;            
        end if;
        
        --when no users are SELECTed, we get all the users who has provide kpi kri data entry privilege
        if lv_users_list is not null then
        
       for idx in (
              WITH  user_list AS (
              SELECT TRIM(SUBSTR (txt, INSTR (txt, ',', 1, level ) + 1, INSTR (txt, ',', 1, level+1) - INSTR (txt, ',', 1, level) -1)) as user_name
              FROM ( SELECT ','||lv_users_list||',' as TXT from dual )
                CONNECT BY level <= LENGTH(txt)-LENGTH(REPLACE(txt,',',''))-1
            )
            SELECT DISTINCT  fdo.user_name 
            FROM ms_qsm_flow_down_org_v fdo
            WHERE EXISTS ( SELECT 1
              FROM user_list
              WHERE user_list.user_name = fdo.user_name)
              AND ACTIVITY_NAME in (
              WITH activity_list AS
                 (SELECT     TRIM (SUBSTR (txt,
                                           INSTR (txt, ',', 1, LEVEL) + 1,
                                             INSTR (txt, ',', 1, LEVEL + 1)
                                           - INSTR (txt, ',', 1, LEVEL)
                                           - 1
                                          )
                                  ) AS activity_name
                        FROM (SELECT ',' || pc_activity_list || ',' AS txt
                                FROM DUAL)
                  CONNECT BY LEVEL <= LENGTH (txt) - LENGTH (REPLACE (txt, ',', '')) - 1)
            SELECT activity_list.activity_name
              FROM activity_list
              ))
       loop
        if lv_return_user_list is null then
            lv_return_user_list:=idx.user_name;
        else
            lv_return_user_list:=lv_return_user_list||','||idx.user_name;
        end if;
       end loop;
            message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Returning list of owners '||lv_return_user_list,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
            if lv_return_user_list is not null then            
            return lv_return_user_list; 
            end if;
      end if;
      
      --if no users are in SELECTed from owners with provide data entry privilege, it comes into this block
      
      if lv_users_list is null or lv_return_user_list is null then       
      
            message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'No Owners found in definition. Getting from Owner organizations ',
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
       /*     
          SELECT OWNER_ORGANIZATIONS
             into
             lv_orgs_list
        FROM ms_grc_kpi_kri_defn_ogn
        WHERE object_id = lv_kpi_kri_id;*/
        
        
        -- if block to retrieve all the owners in organization with provide data entry priv
        if return_only_owners = 'No' then

        for idx in (
              WITH  orgs_list AS (
              SELECT TRIM(SUBSTR (txt, INSTR (txt, ',', 1, level ) + 1, INSTR (txt, ',', 1, level+1) - INSTR (txt, ',', 1, level) -1)) as org_id
              FROM ( SELECT ','||lv_orgs_list||',' as TXT from dual )
                CONNECT BY level <= LENGTH(txt)-LENGTH(REPLACE(txt,',',''))-1
            )
            SELECT DISTINCT  fdo.user_name 
            FROM ms_qsm_flow_down_org_v fdo
            WHERE EXISTS ( SELECT 1
              FROM orgs_list
              WHERE orgs_list.org_id = fdo.ORG_ENTITY_ID)
              AND ACTIVITY_NAME in (
              WITH activity_list AS
                 (SELECT     TRIM (SUBSTR (txt,
                                           INSTR (txt, ',', 1, LEVEL) + 1,
                                             INSTR (txt, ',', 1, LEVEL + 1)
                                           - INSTR (txt, ',', 1, LEVEL)
                                           - 1
                                          )
                                  ) AS activity_name
                        FROM (SELECT ',' || pc_activity_list || ',' AS txt
                                FROM DUAL)
                  CONNECT BY LEVEL <= LENGTH (txt) - LENGTH (REPLACE (txt, ',', '')) - 1)
            SELECT activity_list.activity_name
              FROM activity_list
              ))
       loop
        if lv_return_user_list is null then
            lv_return_user_list:=idx.user_name;
        else
            lv_return_user_list:=lv_return_user_list||','||idx.user_name;
        end if;
       end loop;
       --elsif to retrieve all the owners from the SELECTed owner organizations without checking for any privleges
       elsif return_only_owners = 'Yes' then
       for idx in (WITH  orgs_list AS (
              SELECT TRIM(SUBSTR (txt, INSTR (txt, ',', 1, level ) + 1, INSTR (txt, ',', 1, level+1) - INSTR (txt, ',', 1, level) -1)) as org_id
              FROM ( SELECT ','||lv_orgs_list||',' as TXT from dual )
                CONNECT BY level <= LENGTH(txt)-LENGTH(REPLACE(txt,',',''))-1
            )
            SELECT DISTINCT  fdo.user_name 
            FROM ms_qsm_flow_down_org_v fdo
            WHERE EXISTS ( SELECT 1
              FROM orgs_list
              WHERE orgs_list.org_id = fdo.ORG_ENTITY_ID))
       loop
        if lv_return_user_list is null then
            lv_return_user_list:=idx.user_name;
        else
            lv_return_user_list:=lv_return_user_list||','||idx.user_name;
        end if;
       end loop;
             
       end if;
       message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Returning list of owners from owner organizations '||lv_return_user_list,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
            return lv_return_user_list;  
      end if;
EXCEPTION
WHEN NO_DATA_FOUND
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         ROLLBACK;                         
         RETURN null;
      WHEN OTHERS
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         ROLLBACK;                         
         RETURN null;                        
end GET_KPI_KRI_OWNERS_FOR_DE;    

-------------------------------------------------------------------------------
-- Name: GET_KPI_KRI_DEFINITION_INITIATOR
-- Desc: Returns initiator of current definition initiator
-------------------------------------------------------------------------------
         
FUNCTION GET_KPI_KRI_DEF_INITIATOR(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER ) RETURN VARCHAR2
is
lv_error_handle_id        NUMBER;
lv_error_sequence         NUMBER;
lv_view_name              VARCHAR2 (400);
lv_def_view_name          VARCHAR2 (400);
lv_kpi_kri_id             VARCHAR2 (20);
lv_def_initiator          varchar2 (100);
begin
      lv_view_name := get_flow_view_name (pc_flow_code);
      ms_apps_mdf_errors_pkg.insert_log
                  (pn_error_handle_id      => ms_apps_mdf_error_handle_id_s.currval,
                   pn_error_sequence       => lv_error_sequence,
                   pc_error_type           => 'MESG',
                   pc_error_text           => 'Calling function to retrieve kpi kri id'
                  );
                  
      lv_kpi_kri_id :=
                    get_kri_kpi_id (pc_flow_code, lv_view_name, pn_pid, pn_id);
                    
      lv_def_view_name := get_flow_view_name ('MS_GRC_KPI_KRI_DEFINITION_WORKFLOW');
      
      
      
      EXECUTE IMMEDIATE 
            'SELECT dd_event_user_name
              FROM '||lv_def_view_name ||' a
              WHERE object_id = '''||lv_kpi_kri_id||'''
               AND process_instance_id = (SELECT MIN (process_instance_id)
                                            FROM '||lv_def_view_name ||'
                                           WHERE object_id = a.object_id)
               AND instance_id =
                      (SELECT MIN (instance_id)
                         FROM '||lv_def_view_name ||'
                        WHERE object_id = a.object_id
                          AND process_instance_id = a.process_instance_id) and instance_rec_num=1' INTO lv_def_initiator;  
      
      return lv_def_initiator;
EXCEPTION      
WHEN NO_DATA_FOUND
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         RETURN null;
      WHEN OTHERS
      THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         ROLLBACK;                         
         RETURN null;                        
end GET_KPI_KRI_DEF_INITIATOR;    

-------------------------------------------------------------------------------
-- Name: GET_KPI_KRI_DEFINITION_OWNERS
-- Desc: Returns initiator of current definition owners
-------------------------------------------------------------------------------
         
FUNCTION GET_KPI_KRI_DEF_OWNERS(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER ) RETURN VARCHAR2 is
lv_error_handle_id        NUMBER;
lv_error_sequence         NUMBER;
lv_data_def_owners              VARCHAR2 (4000);
begin
ms_apps_mdf_errors_pkg.insert_log
               (pn_error_handle_id      => ms_apps_mdf_error_handle_id_s.currval,
                pn_error_sequence       => lv_error_sequence,
                pc_error_type           => 'Mesg',
                pc_error_text           =>    pc_flow_code
                                           || 'Before retrieving  data definition owners'
               );
lv_data_def_owners := GET_KPI_KRI_OWNERS_FOR_DE(
    pc_flow_code  ,
    pc_stage_code ,
    pn_pid         ,
    pn_id          ,
    null,
    'Yes');
ms_apps_mdf_errors_pkg.insert_log
               (pn_error_handle_id      => ms_apps_mdf_error_handle_id_s.currval,
                pn_error_sequence       => lv_error_sequence,
                pc_error_type           => 'Mesg',
                pc_error_text           =>    pc_flow_code
                                           || 'After retrieving  data definition owners' || lv_data_def_owners
               );
return lv_data_def_owners;                                        
exception
WHEN OTHERS
      THEN
message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         ROLLBACK;                         
         RETURN null;   
                    
end GET_KPI_KRI_DEF_OWNERS;    

-------------------------------------------------------------------------------
-- Name: GET_KPI_KRI_DEFINITION_INIT_N_OWNERS
-- Desc: Returns initiator of current definition owners
-------------------------------------------------------------------------------
         
FUNCTION GET_KPI_KRI_DEF_INIT_N_OWNERS(
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER ) RETURN VARCHAR2 is
    lv_error_handle_id        NUMBER;
    lv_error_sequence         NUMBER;
    lv_Data_Def_init varchar2(100);
    lv_data_def_owners varchar2(4000);
BEGIN
ms_apps_mdf_errors_pkg.insert_log
               (pn_error_handle_id      => ms_apps_mdf_error_handle_id_s.currval,
                pn_error_sequence       => lv_error_sequence,
                pc_error_type           => 'Mesg',
                pc_error_text           =>    pc_flow_code
                                           || 'GET_KPI_KRI_DEF_INIT_N_OWNERS Before calling  data definition initiator'
               );
lv_Data_Def_init :=
GET_KPI_KRI_DEF_INITIATOR(
    pc_flow_code  ,
    pc_stage_code ,
    pn_pid        ,
    pn_id         );
ms_apps_mdf_errors_pkg.insert_log
               (pn_error_handle_id      => ms_apps_mdf_error_handle_id_s.currval,
                pn_error_sequence       => lv_error_sequence,
                pc_error_type           => 'Mesg',
                pc_error_text           =>    pc_flow_code
                                           || 'GET_KPI_KRI_DEF_INIT_N_OWNERS Before calling  data definition owners'
               );    
lv_data_def_owners :=    
GET_KPI_KRI_DEF_OWNERS(
    pc_flow_code  ,
    pc_stage_code ,
    pn_pid        ,
    pn_id         );

if length(lv_data_def_owners) + length(lv_Data_Def_init) > 4000 then
return lv_data_def_owners;
else
return lv_data_def_init ||','||lv_data_def_owners;
end if;
exception
WHEN OTHERS
      THEN
message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         ROLLBACK;
         RETURN null; 
    
END GET_KPI_KRI_DEF_INIT_N_OWNERS;   

-------------------------------------------------------------------------------
-- Name: get_Auto_Approve_Value 
-- Desc: Auto Approve workflow
-------------------------------------------------------------------------------
 
FUNCTION get_Auto_Approve_Value (
      p_flow_code       in varchar2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
   )
      RETURN VARCHAR2
   IS
      lv_param_value        VARCHAR2 (1000);
      lv_param_name         VARCHAR2 (1000);
      lv_lov_name       varchar2(1000);
      lv_param_stored_value varchar2(10);
      lv_data_table_param   VARCHAR2 (1000);
   BEGIN
     
         
--        select object_type into lv_param_name from ms_grc_wf_config where flow_code = p_flow_code;

        lv_param_name := get_object_name(p_flow_code);
        
        DBMS_OUTPUT.put_line ('1lv_exec_imd = ' || lv_param_name);

      
        
        SELECT NVL (ms_apps_utilities.get_parameter_value (1,
                                                         'MS_QSM_Enable Auto-Approval',
                                                         lv_param_name 
                                                        ), 'N') into lv_param_value
              From  DUAL;
              
        DBMS_OUTPUT.put_line ('3lv_exec_imd111 = ' || lv_param_value);      
              
       /*   select lov_name into lv_lov_name from ms_qs_lov_names where lov_name='MS_GRC_AUTO_APPROVE_OBJ';
         DBMS_OUTPUT.put_line ('3lv_exec_imd111 = ' || lv_lov_name);  
         
              select ms_apps_utilities.get_stored_value(100000,lv_lov_name,lv_param_value) into lv_param_stored_value from dual; 
            --  RETURN lv_param_stored_value;
            
           DBMS_OUTPUT.put_line ('6lv_exec_imd11 = ' || lv_param_stored_value);*/
         
           
         RETURN     lv_param_value;
         
        exception
         WHEN OTHERS
         THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
         ROLLBACK;                         
         RETURN NULL;
         
     --RETURN  lv_param_value;
     
   END get_Auto_Approve_Value; 
   
    function fn_get_ms_qsm_status (
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER 
    )
    RETURN VARCHAR2
    IS
    pc_view_name           VARCHAR2 (400);
    lv_status              varchar2(100);
    lv_Exec_imd             varchar2(1000);
    lv_status_id          varchar2(100);
    
    BEGIN                                
      
        pc_view_name:= get_flow_view_name (pc_flow_code);
      
        lv_Exec_imd := ' SELECT STATUS FROM '|| pc_view_name|| ' where process_instance_id = :1 '||' AND instance_id= :2'|| ' and  rownum = 1';
         
        EXECUTE IMMEDIATE  lv_Exec_imd INTO lv_status_id using pn_pid,pn_id;   

        SELECT   status_name 
        INTO lv_status
        FROM   ms_qsm_status
        WHERE   locale_id = 1009 AND STATUS_ID = lv_status_id;      

        RETURN lv_status;     
      
    EXCEPTION
        WHEN OTHERS THEN
                message_log ( p_log_id          => gn_log_id,
                                       p_error_code         => 'ERR',
                                       p_error_message      => substr(sqlerrm,1,3000),
                                       p_program_name       => $$PLSQL_UNIT,
                                       p_line_location      => $$PLSQL_LINE
                                      );                 

        RETURN NULL;
        
    END fn_get_ms_qsm_status ;
   
   FUNCTION fn_get_ms_qsm_comments (
    pc_flow_code  VARCHAR2 ,
    pc_stage_code VARCHAR2 ,
    pn_pid        NUMBER ,
    pn_id         NUMBER 
)
   RETURN VARCHAR2
    IS
       lv_comments   VARCHAR2 (4000);
    BEGIN
        SELECT a.comments
        INTO lv_comments
        FROM MS_QSM_COMMENTS_LOG a
        WHERE a.process_instance_id = pn_pid
        AND ROWNUM = 1
        AND instance_id = (SELECT MAX (instance_id)
                                    FROM MS_QSM_COMMENTS_LOG
                                    WHERE a.process_instance_id = process_instance_id);

        RETURN lv_comments;
        
    EXCEPTION
        WHEN OTHERS THEN
        
        message_log (p_log_id          => gn_log_id,
                                       p_error_code         => 'ERR',
                                       p_error_message      => substr(sqlerrm,1,3000),
                                       p_program_name       => $$PLSQL_UNIT,
                                       p_line_location      => $$PLSQL_LINE
                                      );
        RETURN NULL;
        
    END fn_get_ms_qsm_comments;  

FUNCTION FN_CHK_VALID_USR_AVLBLTY (
    PV_USER_NAME      VARCHAR2,
    PV_CUR_STAGE      VARCHAR2,
    PV_ACTION         VARCHAR2,
    PV_OBJECT_TYPE    VARCHAR2 ,
    PV_OBJECT_ID      VARCHAR2 ,
    pv_org_entity_ID  VARCHAR2
      )
RETURN NUMBER RESULT_CACHE
IS
/*================================================================================
Function Name: fn_chk_valid_usr_avlblty 
Purpose:  To check validity and availability of users in workflow. 
This function will be called on submit of form
Inputs: PV_USER_NAME - User login name of current logged in user
        PV_CUR_STAGE
        PV_ACTION
        PV_OBJECT_TYPE
        PV_OBJECT_TYPE
        PV_OBJECT_ID
        pv_org_entity_ID
Outputs: 1: Success
        -1: No Owners exist in the system
        -2: Initiator or Re-initiator does not exist in the system.
         0: No output could be determined.
*================================================================================*/

lusers                NUMBER;
LDBNAME               VARCHAR2(100);
LSQLSTMT              VARCHAR2(4000);
LN_EDIT_COUNT         NUMBER;
LV_OWNER_EXISTS       varchar2(20);
LV_user_EXISTS       VARCHAR2(20);
LV_SECURIT_EDIT       MS_APPS_VISUAL_ENTITY_V.SECURITY_EDIT%TYPE;
lv_security_edit_all  ms_apps_visual_entity_v.security_edit_all%TYPE;
lv_view_name          VARCHAR2(200);
ln_process_instance_id NUMBER;
LV_USER_NAME          VARCHAR2(200);
LV_LOG_KEY            NUMBER;
LV_LOG_SEQ            number :=1;
GN_LOG_SEQ            number;
gn_log_id             number;


BEGIN  
   message_log (p_log_id          => gn_log_id,
                P_ERROR_CODE         => 'LOG',
                p_error_message      => 'Entered FN_CHK_VALID_USR_AVLBLTY with inputs  PV_USER_NAME:' || PV_USER_NAME|| ',PV_CUR_STAGE:'|| PV_CUR_STAGE||',PV_ACTION:'||PV_ACTION||',PV_OBJECT_TYPE:'||PV_OBJECT_TYPE||',PV_OBJECT_ID'||PV_OBJECT_ID||',pv_org_entity_ID:'||pv_org_entity_ID,
                P_PROGRAM_NAME       => $$PLSQL_UNIT,
                P_LINE_LOCATION      => $$PLSQL_LINE );   
  SELECT security_edit , security_edit_all 
    INTO  LV_SECURIT_EDIT, LV_SECURITY_EDIT_ALL
    FROM ms_apps_visual_entity_v
   WHERE ve_pushform_name = PV_OBJECT_TYPE;
  
   message_log (p_log_id          => gn_log_id,
                P_ERROR_CODE         => 'LOG',
                p_error_message      => 'Edit rights for the form  ' || LV_SECURIT_EDIT || ','|| LV_SECURITY_EDIT_ALL,
                P_PROGRAM_NAME       => $$PLSQL_UNIT,
                P_LINE_LOCATION      => $$PLSQL_LINE );       
  
  -- Check if there exists any user in the owner organizations that has edit activities and is currently active.
  lsqlstmt := 'SELECT COUNT(1) 
   FROM dual 
   WHERE EXISTS(
    SELECT 1
    from MS_QMS_FLOW_DOWN_ORG_V M, SI_USERS_T U
   where M.USER_NAME = U.USER_NAME
    AND  org_entity_id IN ('||pv_org_entity_ID||')
    and ACTIVITY_NAME in ('''||LV_SECURIT_EDIT ||''','''||LV_SECURITY_EDIT_ALL||''')
    and (U.END_DATE is null or END_DATE >= TRUNC(sysdate)))';
    message_log (p_log_id          => gn_log_id,
                P_ERROR_CODE         => 'LOG',
                p_error_message      => 'Query to find if owner exists ' || lsqlstmt,
                P_PROGRAM_NAME       => $$PLSQL_UNIT,
                P_LINE_LOCATION      => $$PLSQL_LINE );  
   execute immediate lsqlstmt INTO LV_OWNER_EXISTS ;
        
   message_log (p_log_id          => gn_log_id,
                P_ERROR_CODE         => 'LOG',
                p_error_message      => 'Found owner flag ' || LV_OWNER_EXISTS,
                p_program_name       => $$PLSQL_UNIT,
                P_LINE_LOCATION      => $$PLSQL_LINE );          
  IF PV_CUR_STAGE = 'CREATE_EDIT' AND (PV_ACTION IN ('SND_APP','SUB_CLR')) THEN
  BEGIN 

    IF LV_OWNER_EXISTS > 0 THEN
       RETURN 1;
    ELSE
       RETURN -1;
    END IF ;
  END;
  
  ELSE IF PV_ACTION ='REQ_CLR' THEN  
    if PV_CUR_STAGE='OBJECT_EDITORS' THEN
      BEGIN
       --Check if the initiator or re-initiator exists in the system
       SELECT db_table_name , view_name 
         into ldbname , lv_view_name 
       from ms_grc_wf_config
       where PV_OBJECT_TYPE= OBJECT_TYPE ;
      message_log (p_log_id          => gn_log_id,
                P_ERROR_CODE         => 'LOG',
                p_error_message      => 'Found db_table_name ' || ldbname ||';view_name '||lv_view_name,
                P_PROGRAM_NAME       => $$PLSQL_UNIT,
                P_LINE_LOCATION      => $$PLSQL_LINE );   
       --Fetch process_instance_id from MS table since it will have the latest PID for which flow is in progress
       lsqlstmt := 'select dd_process_instance_id from '||LDBNAME||' where object_id = :1'||'''' ;        
       message_log (p_log_id          => gn_log_id,
                P_ERROR_CODE         => 'LOG',
                p_error_message      => 'Query to get process instance id ' || lsqlstmt ,
                P_PROGRAM_NAME       => $$PLSQL_UNIT,
                P_LINE_LOCATION      => $$PLSQL_LINE );          
       BEGIN
       
        EXECUTE IMMEDIATE lsqlstmt INTO ln_process_instance_id using PV_OBJECT_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            --If the object has not been publised yet, fetch process instance id from view
            lsqlstmt := 'SELECT MAX(process_instance_id) FROM '||lv_view_name||' WHERE object_id = '''||pv_object_id||'''' ;        
            message_log (p_log_id          => gn_log_id,
                p_error_code         => 'LOG',
                p_error_message      => 'Query to get process instance id from view ' || lsqlstmt ,
                p_program_name       => $$plsql_unit,
                P_LINE_LOCATION      => $$PLSQL_LINE );                      
            execute immediate LSQLSTMT into LN_PROCESS_INSTANCE_ID;
        end;
        --Get the initiator or re-initiator user
       lsqlstmt := 'select nvl(obj_modified_by, obj_Created_by) from ' || lv_view_name ||' where object_id =''' ||PV_OBJECT_ID|| '''
                   and process_instance_id = '||ln_process_instance_id ||'
                   and instance_id = (select max(instance_id) from '||lv_view_name ||' where object_id = ''' ||PV_OBJECT_ID|| 
                    ''' and process_instance_id = '||LN_PROCESS_INSTANCE_ID ||') and rownum = 1';
       
       message_log (p_log_id          => gn_log_id,
                P_ERROR_CODE         => 'LOG',
                p_error_message      => 'Query to get initiator ' || lsqlstmt ,
                P_PROGRAM_NAME       => $$PLSQL_UNIT,
                P_LINE_LOCATION      => $$PLSQL_LINE );                       
       EXECUTE IMMEDIATE lsqlstmt into lv_user_name ;                   
                    
          message_log (p_log_id          => gn_log_id,
                P_ERROR_CODE         => 'LOG',
                p_error_message      => 'Found initiator ' || lv_user_name ,
                P_PROGRAM_NAME       => $$PLSQL_UNIT,
                P_LINE_LOCATION      => $$PLSQL_LINE );      
        --Check if user has activities in the organization and is active
       select count(1) into LV_user_EXISTS 
         from MS_Qsm_FLOW_DOWN_ORG_V M, SI_USERS_T U
        where M.USER_NAME = LV_USER_NAME
          and M.USER_NAME = U.USER_NAME
          and M.ORG_ENTITY_ID in (SELECT COLUMN_VALUE FROM TABLE(ms_apps_utilities.parse_string(PV_ORG_ENTITY_ID,',')))
          and M.ACTIVITY_NAME in (LV_SECURIT_EDIT,LV_SECURITY_EDIT_ALL)
          and (U.END_DATE is null or END_DATE >= TRUNC(sysdate));
          
       message_log (p_log_id          => gn_log_id,
                P_ERROR_CODE         => 'LOG',
                p_error_message      => 'Initiator exists flag ' || LV_user_EXISTS ,
                P_PROGRAM_NAME       => $$PLSQL_UNIT,
                P_LINE_LOCATION      => $$PLSQL_LINE );                       
        
        IF LV_user_EXISTS > 0THEN
         RETURN 1;
        else
         RETURN -2;
        END IF ;
      END ;
      else
    --Request clarification from L1 or L2 stage - check if any valid owner exists
      BEGIN
       message_log (p_log_id          => gn_log_id,
                P_ERROR_CODE         => 'LOG',
                p_error_message      => 'Request clarification for L1 or L2 approver ' || lv_owner_exists ,
                P_PROGRAM_NAME       => $$PLSQL_UNIT,
                P_LINE_LOCATION      => $$PLSQL_LINE );    
        IF lv_owner_exists >0 THEN
          RETURN 1;
        else
          RETURN -1;
        END IF ;
      END ;
      END IF;
    ELSE 
      RETURN 1;
    END IF; 

  END IF;  

   exception
   WHEN OTHERS 
   then
                
    message_log (p_log_id          => gn_log_id,
                P_ERROR_CODE         => 'ERR',
                p_error_message      => SQLERRM,
                P_PROGRAM_NAME       => $$PLSQL_UNIT,
                P_LINE_LOCATION      => $$PLSQL_LINE );                 
      RETURN 0;
   END fn_chk_valid_usr_avlblty ;   
procedure search_que_report_mv( o_error_code      OUT   NUMBER,
   o_error_message   OUT   VARCHAR2)
is
 l_result_table_name SI_METRICS_T.RESULT_TABLE_NAME%TYPE;
 l_ret varchar2(100);
begin
    execute immediate 'truncate table MS_QSM_SEARCH_RPT_MV';
    
    l_ret:=MS_QSM_EXECUTE_DDL(p_str=>
    q'#insert into MS_QSM_SEARCH_RPT_MV 
    (SELECT COLUMN_VALUE org_entity_id,
                  g.role_id,
                  e.user_id,
                  f.user_name,
                  h.org_entity_name,
                  h.enterprise_id
             FROM si_org_entities h,
                  si_org_roles g,
                  si_users f,
                  si_user_org_roles e,
                  TABLE (CAST ( (SELECT ms_apps_utilities.get_child_orgs (f.enterprise_id, g.org_entity_id) FROM DUAL) AS ms_varchar2_array)) tab
            WHERE     COLUMN_VALUE IS NOT NULL
                  AND h.org_entity_id = COLUMN_VALUE
                  AND h.enterprise_id = f.enterprise_id
                  AND NVL (h.end_date, SYSDATE) >= SYSDATE
                  AND NVL (f.end_date, SYSDATE) >= SYSDATE
                  AND f.user_id = e.user_id
                  AND g.org_role_id = e.org_role_id)#',p_drop_flag=>'Y');
                  
select result_table_name into l_result_table_name  from si_metrics_t where metric_name='MS_QSM_SEARCH_REP_MV';

execute immediate 'delete from '||l_result_table_name;                  

commit;     
o_error_code := 0;
o_error_message := 'Successfully Completed';             
EXCEPTION
   WHEN OTHERS
   THEN
      commit;            
      ms_apps_mdf_errors_pkg.insert_log
               (pn_error_handle_id      => g_error_handle_id,
                pn_error_sequence       => g_error_sequence,
                pc_error_type           => 'ERROR',
                pc_error_text           =>    'Problem Inserting Data in MS_QSM_SEARCH_REP_MV'
                                           || DBMS_UTILITY.format_error_backtrace
                                           || '~'
                                           || SQLERRM
               );                     
end search_que_report_mv;     


FUNCTION get_applies_to_details (
   p_obj_seq_id        IN NUMBER,
   p_labels_required      VARCHAR2 DEFAULT 'N',
   p_field_key            VARCHAR2 DEFAULT NULL,
   p_parameter            VARCHAR2 DEFAULT NULL)
   RETURN ms_qsm_applies_to_table
   PIPELINED
IS
   l_sql_query     VARCHAR2 (4000) := NULL;
   l_labels        VARCHAR2 (4000);
   l_param_count   PLS_INTEGER := 0;



   TYPE ty_applies_to IS RECORD (
      object_id       VARCHAR2 (400),
      object_name     VARCHAR2 (4000),
      object_labels   VARCHAR2 (4000),
      locale_id NUMBER
   );

   l_applies_to    ty_applies_to;

   TYPE ty_applies_to_tab IS TABLE OF ty_applies_to
                                INDEX BY PLS_INTEGER;

   l_applies_tab   ty_applies_to_tab;
BEGIN
   IF p_labels_required = 'N'
   THEN
      SELECT field_sql
        INTO l_sql_query
        from MS_QSM_APPLIES_TO_FLDS
       WHERE object_seq_id = p_obj_seq_id AND field_key = p_field_key;

      /*the count here may be more than one so the sql in the table needs to reflect the same*/

      SELECT COUNT (1)
        INTO l_param_count
        FROM ms_qsm_applies_to_params
       WHERE src_object_seq_id = p_obj_seq_id AND field_key = p_field_key;

      IF l_param_count = 0
      then
         EXECUTE IMMEDIATE l_sql_query BULK COLLECT INTO l_applies_tab  ;
      ELSE
         /*based on the assumption that only one parameter is there*/
         EXECUTE IMMEDIATE l_sql_query
            BULK COLLECT INTO l_applies_tab
            USING p_parameter;
      END IF;

      IF  l_applies_tab.COUNT >0 THEN
      
          FOR i IN l_applies_tab.FIRST .. l_applies_tab.LAST
          LOOP
             PIPE ROW (ms_qsm_applies_to_object (l_applies_tab (i).object_id,
                                                 l_applies_tab (i).object_name,
                                                 l_applies_tab (i).object_labels,
                                                 l_applies_tab (i).locale_id));
          END LOOP;
          
        END IF;
                  
   ELSIF p_labels_required = 'Y'
   THEN
      dbms_output.put_line('came ehre');
--      SELECT wm_concat (field_label)||'|'||wm_concat(field_key)
--        INTO l_labels,
--        FROM ms_qsm_applies_to_flds a,ms_qsm_applies_to_flds_tl b
--       WHERE a.object_seq_id = p_obj_seq_id
--       AND A.OBJECT_SEQ_ID =B.OBJECT_SEQ_ID (+);

       SELECT NULL,NULL, MS_CONCAT(NVL2(Y.FIELD_LABEL,Y.FIELD_LABEL,X.LABEL))||'|'||X.FIELD_KEY,X.lOCALE_ID
       BULK COLLECT INTO l_applies_tab FROM
      (SELECT ms_concat (a.field_label) label,c.locale_id,a.object_seq_id,MS_CONCAT(A.FIELD_KEY) FIELD_KEY
                FROM ms_qsm_applies_to_flds a,SI_ENABLED_LOCALES c --ms_qsm_applies_to_flds_tl b
       WHERE a.object_seq_id = p_obj_seq_id
       group by a.object_seq_id,c.locale_id) X,ms_qsm_applies_to_flds_tl Y
       WHERE  X.object_seq_id = p_obj_seq_id
       AND X.object_seq_id=Y.object_seq_id(+)
       AND X.locale_id=Y.LOCALE_ID(+)
       GROUP BY X.lOCALE_ID,X.FIELD_KEY;

      IF  l_applies_tab.COUNT >0 THEN
      
          FOR i IN l_applies_tab.FIRST .. l_applies_tab.LAST
          LOOP
             PIPE ROW (ms_qsm_applies_to_object (l_applies_tab (i).object_id,
                                                 l_applies_tab (i).object_name,
                                                 l_applies_tab (i).object_labels,
                                                 l_applies_tab (i).locale_id));
          END LOOP;
          
        END IF;
       
--             dbms_output.put_line(l_labels);
--
--      PIPE ROW (ms_qsm_applies_to_object ('', '', l_labels));
   END IF;

   RETURN;
EXCEPTION
  when others then
    RETURN;   
END get_applies_to_details;   
FUNCTION is_questionnaire_name_valid (in_que_name VARCHAR2,
                                       ip_process_inst_id varchar2)
   RETURN VARCHAR2
IS
   lv_view_name   VARCHAR2 (100);
   lv_validity    VARCHAR2 (100);
   lv_stmt        VARCHAR2 (1000);
   lv_pid          number;
   pragma autonomous_transaction;
BEGIN
   SELECT METRIC_NAME ||'_V'
     INTO lv_view_name
     FROM MS_QSM_METRIC_MAINT
    WHERE guid = 'CREQSM' AND is_active = 'Y';
    
    select TO_NUMBER(substr(ip_process_inst_id,1,decode(instr(ip_process_inst_id,'~')-1,-1,length(ip_process_inst_id),instr(ip_process_inst_id,'~')-1)))
    into lv_pid
    from dual;
    
--    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   =>99,
--                     pn_error_sequence    => gn_log_id,
--                     pc_error_type        => 'E',
--                     PC_ERROR_TEXT        =>  'select  DECODE (COUNT (QUE_NAME), 0, ''VALID'', ''INVALID'') 
--from ' 
--                    || LV_VIEW_NAME
--                    || ' A 
--where UPPER(QUE_NAME) = UPPER(:1)  and process_instance_id <> NVL2(:2,:3,process_instance_id)
--AND INSTANCE_ID = (SELECT MAX(INSTANCE_ID) FROM '||lv_view_name||' B WHERE B.process_instance_id=A.process_instance_id) 
--AND A.QUE_ACTION <>''CANCEL'''||'@'||in_que_name||'@'||lv_pid);  
                 

/*EXECUTE IMMEDIATE 'select  DECODE (COUNT (QUE_NAME), 0, ''VALID'', ''INVALID'') 
from ' 
                    || LV_VIEW_NAME
                    || ' A 
where UPPER(QUE_NAME) = UPPER(:1)  and process_instance_id <> NVL2(:2,:3,process_instance_id)
AND INSTANCE_ID = (SELECT MAX(INSTANCE_ID) FROM '||lv_view_name||' B WHERE B.process_instance_id=A.process_instance_id) 
AND A.QUE_ACTION <>''CANCEL'''
INTO lv_validity
USING in_que_name,lv_pid,lv_pid;*/

EXECUTE IMMEDIATE 'select  DECODE (COUNT (QUE_NAME), 0, ''VALID'', ''INVALID'') 
from ' 
                    || LV_VIEW_NAME
                    || ' A 
where UPPER(QUE_NAME) = UPPER(:1)  and (:2 IS NULL OR (:3 IS NOT NULL AND a.PROCESS_INSTANCE_ID <> :4))
AND INSTANCE_ID = (SELECT MAX(INSTANCE_ID) FROM '||lv_view_name||' B WHERE B.process_instance_id=A.process_instance_id) 
AND NVL(A.QUE_ACTION,''X'') <>''CANCEL'''
INTO lv_validity
USING in_que_name,lv_pid,lv_pid,lv_pid;

/*IF lv_validity = 'INVALID' AND lv_pid=0 THEN
lv_validity := NULL;
END IF;*/

 
--    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   =>99,
--                     pn_error_sequence    => gn_log_id,
--                     pc_error_type        => 'E',
--                     PC_ERROR_TEXT        =>  'lv_validity'||lv_validity);

   RETURN lv_validity;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 'INVALID';
END is_questionnaire_name_valid;

FUNCTION is_spreadsheet_name_valid (in_que_name VARCHAR2,
                                       ip_process_inst_id varchar2)
   RETURN VARCHAR2
IS
   lv_view_name   VARCHAR2 (100);
   lv_validity    VARCHAR2 (100);
   lv_stmt        VARCHAR2 (1000);
   lv_pid          number;
   pragma autonomous_transaction;
begin
  /* SELECT METRIC_NAME || '_V'
     INTO lv_view_name
     FROM MS_QSM_METRIC_MAINT
    WHERE guid = 'SPRSHT' AND is_active = 'Y'; */
    
    /*
    
    select TO_NUMBER(substr(ip_process_inst_id,1,decode(instr(ip_process_inst_id,'~')-1,-1,length(ip_process_inst_id),instr(ip_process_inst_id,'~')-1)))
    into lv_pid
    from dual; */

  /* EXECUTE IMMEDIATE 'select  DECODE (COUNT (SPRD_SHEET_NAME), 0, ''VALID'', ''INVALID'') 
   from ' 
                    || lv_view_name
                    || '
   where UPPER(SPRD_SHEET_NAME) = UPPER(:1) and QUE_Action !=''CANCEL'' and (:2 IS NULL OR(:2 IS NOT NULL AND process_instance_id <> :2)'
      INTO lv_validity
      USING in_que_name,lv_pid;*/
      
      select decode (count (sprd_sheet_name), 0, 'VALID', 'INVALID')
      INTO lv_validity
      from ms_qsm_spreadsheet where upper(sprd_sheet_name)=upper(in_que_name);
      /*
        execute immediate 'select  DECODE (COUNT (SPRD_SHEET_NAME), 0, ''VALID'', ''INVALID'') 
   from MS_QSM_SPREADSHEET where UPPER(SPRD_SHEET_NAME) = UPPER(:1)'
      INTO lv_validity
      USING in_que_name,lv_pid;*/

   RETURN lv_validity;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 'INVALID';
END is_spreadsheet_name_valid;

   FUNCTION get_response_approver (
   p_pid        IN NUMBER)
   RETURN VARCHAR2
   IS 
   l_response_approver  VARCHAR2(4000);
   l_sql_string                 VARCHAR2(4000);
   BEGIN
        
        IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0)  THEN
            ms_qsm_utilities.initialize_metric_maint ('QSM');
        END IF;
    
        l_sql_string :='SELECT DISTINCT RESPONSE_APPROVER FROM '||MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM')||'_V  WHERE PROCESS_INSTANCE_ID =:1';
        
        EXECUTE IMMEDIATE l_sql_string INTO l_response_approver using p_pid;
        
        RETURN l_response_approver;
        
   EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
            
   END;
        
   FUNCTION is_questnr_req_name_valid (ip_que_req_name VARCHAR2,
                                       ip_process_inst_id number)
   RETURN VARCHAR2
IS
   lv_view_name   VARCHAR2 (100);
   lv_validity    VARCHAR2 (100);
   lv_stmt        VARCHAR2 (1000);
   pragma autonomous_transaction;
BEGIN
   SELECT METRIC_NAME || '_V'
     INTO lv_view_name
     FROM MS_QSM_METRIC_MAINT
    WHERE guid = 'INIQSM' AND is_active = 'Y';


   EXECUTE IMMEDIATE 'select  DECODE (COUNT (QUE_REQUEST_NAME), 0, ''VALID'', ''INVALID'') 
   from ' 
                    || lv_view_name
                    || '
   where UPPER(QUE_REQUEST_NAME) = UPPER(:1) and process_instance_id <> :2'
      INTO lv_validity
      USING ip_que_req_name,ip_process_inst_id;

   RETURN lv_validity;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 'INVALID';
END is_questnr_req_name_valid;
   
   FUNCTION get_view_edit_url (
      i_metric_id             IN   NUMBER,
      i_process_instance_id   IN   NUMBER,
      i_hyper_text            IN   VARCHAR2 DEFAULT NULL
   )
      RETURN VARCHAR2
   IS
      x_url   VARCHAR2 (1000);
   BEGIN
      x_url :=
            '<a href=JavaScript:viewlink_function(''Fastform?id='
         || i_metric_id
         || CHR (38)
         || 'proc='
         || i_process_instance_id
         || CHR (38)
         || 'flag=1'
         || CHR (38)
         || 'wrapper=no'
         || CHR (38)
         || 'emd=3'')>
      <FONT color=#0000FF>'
         || i_hyper_text
         || '</FONT>'
         || '</a>';
      RETURN x_url;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
   END get_view_edit_url;

   FUNCTION comments_not_null_check (
      pc_flow_code    VARCHAR2,
      pc_stage_code   VARCHAR2,
      pn_pid          NUMBER,
      pn_id           NUMBER
   )
      RETURN VARCHAR2
   IS
      lv_value_exists_flag   VARCHAR2 (20);    
      lv_view_name           VARCHAR2 (400);
      lv_obj_type            VARCHAR2 (400);
      lv_RESP_COMMENTS         CLOB;
      lv_RESP_DESCRIPTION      CLOB;
      lv_exec_imd            VARCHAR2(4000);  
      

   BEGIN
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'Before calling get_flow_view_name in comments_not_null_check with flow code ' ||pc_flow_code,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
                                      
      lv_view_name := get_flow_view_name (pc_flow_code);
      
      message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After calling get_flow_view_name in comments_not_null_check. Returned view name ' ||lv_view_name,
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
       lv_exec_imd := 'SELECT RESP_COMMENTS,RESP_DESCRIPTION FROM '
                           || LV_VIEW_NAME
                           || ' WHERE instance_id = :1'
                           || ' AND PROCESS_INSTANCE_ID=:2'
                           || ' AND /*instance_rec_num = 1*/ rownum = 1';
        BEGIN
     
           
            execute immediate  LV_EXEC_IMD
                INTO lv_RESP_COMMENTS,lv_RESP_DESCRIPTION using PN_ID,pn_pid ;
               
            IF LENGTH(TRIM(lv_RESP_COMMENTS))<=0 AND LENGTH(TRIM(lv_RESP_DESCRIPTION))<=0 THEN
                lv_value_exists_flag:= 'INVALID';
            ELSE
                lv_value_exists_flag:= 'VALID';            
            END IF;
            
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               lv_value_exists_flag := 'NO_DATA';
               message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After Executing SELECT to find out respective Response Comments value is null or not. Setting lv_value_exists_flag to NO_DATA',
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
            WHEN OTHERS
            THEN
               lv_value_exists_flag := 'NO_USERS';
               message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After Executing SELECT to find out respective Response Comments value is null or not. Setting lv_value_exists_flag to NO_DATA ' ||substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );     
                              
            ROLLBACK;                                       
         END;
        RETURN lv_value_exists_flag;
      EXCEPTION
      WHEN OTHERS
            THEN
         message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'ERR',
                                   p_error_message      => substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );
          ROLLBACK;                        
    END comments_not_null_check;

FUNCTION check_collaborator (
    pc_flow_code    VARCHAR2,
    pc_stage_code   VARCHAR2,
    pn_pid          NUMBER,
    pn_id           NUMBER
    )
    RETURN VARCHAR2
    IS
      lv_view_name           VARCHAR2 (400);
      lv_exec_imd            VARCHAR2(4000); 
      l_dd_current_user_name  VARCHAR2(255);
      l_respondent   VARCHAR2(255);
      l_return  VARCHAR2(20);
         
        BEGIN
            
                 lv_view_name := get_flow_view_name (pc_flow_code);
                 
                
                 lv_exec_imd := 'SELECT DISTINCT DD_CURRENT_USER_NAME,RESPONDENT FROM '||lv_view_name||' WHERE PROCESS_INSTANCE_ID=:1'||' AND INSTANCE_ID=:2';
                 
--                                       ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   =>99,
--                     pn_error_sequence    => gn_log_id,
--                     pc_error_type        => 'E',
--                     pc_error_text        =>  'COLLABORATOR :'||l_return||l_dd_current_user_name||l_respondent||lv_exec_imd);  
                 
                 EXECUTE IMMEDIATE  lv_exec_imd INTO l_dd_current_user_name,l_respondent using pn_pid,pn_id;
                 
                 IF TRIM(l_dd_current_user_name) = TRIM(l_respondent) THEN
                    l_return := 'RESPONDENT';
                 ELSE
                    l_return := 'COLLABORATED';
                 END IF;
                 


                RETURN   l_return;
                
        EXCEPTION
            WHEN OTHERS THEN 
                           message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After Executing SELECT to find out respective Response Comments value is null or not. Setting lv_value_exists_flag to NO_DATA ' ||substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );     
                                  
             RETURN NULL;
        END ;       
    
    
    FUNCTION trigger_live_survey (
    pc_flow_code    VARCHAR2,
    pc_stage_code   VARCHAR2,
    pn_pid          NUMBER,
    pn_id           NUMBER
    )
    RETURN VARCHAR2
    IS
      lv_view_name           VARCHAR2 (400);
      lv_exec_imd            VARCHAR2(4000); 
      l_que_request_id  VARCHAR2(255);
      l_sch_end_by  DATE;
      l_sch_frequency   VARCHAR2(255);
      l_return  varchar2(20);
      l_req_clar_count  NUMBER;
         
        BEGIN
            
                 lv_view_name := get_flow_view_name (pc_flow_code);
                                
                 lv_exec_imd := 'SELECT DISTINCT QUE_REQUEST_ID FROM '||lv_view_name||' WHERE PROCESS_INSTANCE_ID=:1'||' AND INSTANCE_ID=:2';
                              
                 EXECUTE IMMEDIATE  lv_exec_imd INTO l_que_request_id using pn_pid,pn_id ;
                 
                 lv_exec_imd := 'SELECT COUNT(1) FROM '||lv_view_name||' WHERE PROCESS_INSTANCE_ID=:3'||' 
                 AND submit_action=''REQ_CLR''';
                 
                   EXECUTE IMMEDIATE  lv_exec_imd INTO l_req_clar_count using pn_pid;
                
                 SELECT SCH_FREQUENCY,SCH_END_BY
                 INTO l_sch_frequency,l_sch_end_by
                 FROM MS_QSM_QUESTNR_SCH
                 WHERE SCH_REQ_ID = l_que_request_id;        
                 
                 IF TRIM(l_sch_frequency) ='3' AND TRUNC(l_sch_end_by) >= TRUNC(SYSDATE) AND l_req_clar_count <=0 THEN
                     l_return := 'yes';
                 ELSE
                     l_return := 'no';   
                 END IF;     
                                 
                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   =>99,
                pn_error_sequence    => gn_log_id,
                pc_error_type        => 'D',
                pc_error_text        =>  'LIVE :'||l_return||lv_exec_imd);  

                RETURN   l_return;
                
        EXCEPTION
            WHEN OTHERS THEN 
                           message_log (p_log_id          => gn_log_id,
                                   p_error_code         => 'LOG',
                                   p_error_message      => 'After Executing SELECT to find out respective Response Comments value is null or not. Setting lv_value_exists_flag to NO_DATA ' ||substr(sqlerrm,1,3000),
                                   p_program_name       => $$PLSQL_UNIT,
                                   p_line_location      => $$PLSQL_LINE
                                  );     
                                  
             RETURN NULL;
        END trigger_live_survey ;       
        
 FUNCTION get_response_actions (
   p_pid        IN NUMBER)
   RETURN VARCHAR2
   is 
   l_response_approver  VARCHAR2(4000);
   l_sql_string                 varchar2(4000);
   l_que_request_id         VARCHAR2(4000);
   l_actions                    varchar2(4000);
   l_temp_pk_id              varchar2(4000);
   l_collaborative_response VARCHAR2(4000);
   
   BEGIN
   
   
        
        IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0)  THEN
            ms_qsm_utilities.initialize_metric_maint ('QSM');
        END IF;
    
        l_sql_string :='SELECT DISTINCT RESPONSE_APPROVER,dbms_xmlgen.convert(TEMP_CONFIG_FLAG,1) FROM '||MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM')||'_V  WHERE PROCESS_INSTANCE_ID =:1';
        
      
        
       
        
        EXECUTE IMMEDIATE l_sql_string INTO l_response_approver,l_temp_pk_id using p_pid;
        
     -- l_response_approver   := NULL;
               
        IF l_response_approver IS NULL THEN
            
            l_actions := 'TSK_CMPL';
            
         ELSE 
            
             l_actions := 'TSK_CMPL';
             
         END IF;
         
       L_COLLABORATIVE_RESPONSE:= SUBSTR(L_TEMP_PK_ID,INSTR(L_TEMP_PK_ID,'"COLLABORATION":',1)+17);
       
       L_COLLABORATIVE_RESPONSE:= SUBSTR(L_COLLABORATIVE_RESPONSE,1,INSTR(L_COLLABORATIVE_RESPONSE,'"',1)-1);

         
         IF l_collaborative_response ='1' THEN 
            l_actions := l_actions||','||'COLABORATE';
          END IF;
          
          --  l_actions :=l_actions||l_sql_string;
        
        RETURN l_actions;
        
   EXCEPTION
        WHEN OTHERS THEN
        message_log (p_log_id          => gn_log_id,
                                       p_error_code         => 'ERR',
                                       p_error_message      => substr(sqlerrm,1,3000),
                                       p_program_name       => $$PLSQL_UNIT,
                                       p_line_location      => $$PLSQL_LINE
                                      );
      
            RETURN NULL;
            
   END get_response_actions;
   
       
    FUNCTION FN_CUSTOM_RULE_1 (
        PC_FLOW_CODE  VARCHAR2 ,
        PC_STAGE_CODE VARCHAR2 ,
        PN_PID        NUMBER ,
        PN_ID         NUMBER 
        )
    RETURN varchar2
    is
     lv_return varchar2(400);
     lv_count number;
     lv_pushform_view varchar2(400);
     LV_STRING VARCHAR2(4000);
    
    BEGIN
        -- take pushform view name dynamically for response pushform
        SELECT metric_name ||'_V'
        INTO lv_pushform_view
          FROM ms_qsm_metric_maint
         WHERE guid = 'RESQSM' AND is_active = 'Y';
        
   -- LV_STRING := 'SELECT COUNT (1) FROM '|| lv_pushform_view || ' WHERE cond_app_req_flag = ''1''
    --                       AND instance_id = :1 AND process_instance_id = :2';
    
   /* LV_STRING:='SELECT COUNT(1)
                             from MS_QSM_QUESTNR_RESP_DUP_V
                             where PROCESS_INSTANCE_ID= :1
                             and INSTANCE_ID =:2
                             and ((NVL(RESPONSE_UPLOAD,''N'') = ''N'' and COND_APP_REQ_FLAG = ''1'') 
                                  or (NVL(RESPONSE_UPLOAD,''N'') = ''Y'' and RESP_REQ_APPROVAL IN (SELECT STORED_VALUE 
                                                                                      from MS_QSM_QST_LOV_DATA 
                                                                                      where QUESTION_ID = QUESTION_PK
                                                                                      and INSTR('',''||DECODE(RESPONSE_TYPE,''4'',RESP_MLOV,''6'',RESP_RADIO,''7'',RESP_DD,''10'',RESP_RADIO_B,''11'',CHECKBOX_HIDDEN_VALUE)||'','','',''||DISPLAY_VALUE||'','',1,1)>0)))
                             AND RESPONSE_TYPE IN (''4'',''6'',''7'',''10'',''11'')';
    */
    
    LV_STRING:= 'SELECT COUNT(1)
                             from MS_QSM_QUESTNR_RESP_DUP_V
                             where PROCESS_INSTANCE_ID= :1
                             and INSTANCE_ID =:2
                             and ((--NVL(RESPONSE_UPLOAD,''N'') = ''N'' and 
                                    COND_APP_REQ_FLAG = ''1'') 
                                  or (NVL(RESPONSE_UPLOAD,''N'') = ''Y'' and exists (SELECT 1 
                                                                                      from MS_QSM_QST_LOV_DATA 
                                                                                      where QUESTION_ID = QUESTION_PK
                                                                                      and (instr('',''||RESP_REQ_APPROVAL||'','','',''||STORED_VALUE||'','',1,1)>0)
                                                                                      and INSTR('',''||DECODE(RESPONSE_TYPE,''4'',RESP_MLOV,''6'',RESP_RADIO,''7'',RESP_DD,''10'',RESP_RADIO_B,''11'',CHECKBOX_HIDDEN_VALUE)||'','','',''||DISPLAY_VALUE||'','',1,1)>0)))
                             AND RESPONSE_TYPE IN (''4'',''6'',''7'',''10'',''11'')';
    
    EXECUTE IMMEDIATE LV_STRING
                            into LV_COUNT 
                            using pn_pid,pn_id;
    
--     ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => gn_log_id,
--                     PN_ERROR_SEQUENCE    => gn_log_id,
--                     PC_ERROR_TYPE        => 'E',
--                     PC_ERROR_TEXT        => 'CUSTOM COUNT:'||LV_COUNT);
    

    IF lv_count = 0 THEN
        return 'FALSE';
    ELSE
        return 'TRUE';
    END IF;
     
    EXCEPTION
        WHEN OTHERS THEN
        
        message_log (p_log_id          => gn_log_id,
                                       p_error_code         => 'ERR',
                                       p_error_message      => substr(sqlerrm,1,3000),
                                       p_program_name       => $$PLSQL_UNIT,
                                       p_line_location      => $$PLSQL_LINE
                                      );
      
                                              
        RETURN NULL;
         
    END FN_CUSTOM_RULE_1;
   
   function CUSTOM_RULE2( 
            PC_FLOW_CODE  VARCHAR2 ,
            PC_STAGE_CODE VARCHAR2 ,
            PN_PID        NUMBER ,
            PN_ID         NUMBER )   
    return varchar2
    is
        lv_return varchar2(400);
        lv_count number;
        lv_que_request_id varchar2(400);
        lv_pushform_view varchar2(400);
        LV_STRING VARCHAR2(4000);
        
    Begin

         -- take pushform view name dynamically for response pushform
        SELECT metric_name ||'_V'
        INTO lv_pushform_view
        FROM ms_qsm_metric_maint
        WHERE guid = 'RESQSM' AND is_active = 'Y';
        
        LV_STRING := 'SELECT QUE_REQUEST_ID FROM '|| lv_pushform_view || 
                     ' WHERE instance_id = :1 AND process_instance_id = :2 AND INSTANCE_REC_NUM = 1';
      
     EXECUTE IMMEDIATE LV_STRING
                                INTO lv_que_request_id 
                                using pn_id,pn_pid;

        select count(OVERALL_APPROVER)
        into lv_count
        from MS_QSM_INIT_QUESTNR
        where que_request_id=lv_que_request_id;
                                                          
       IF lv_count = 0 THEN
            return 'FALSE';
        ELSE
            return 'TRUE';
        END IF;
     
      EXCEPTION
            WHEN OTHERS THEN
            
            message_log (p_log_id          => gn_log_id,
                                           p_error_code         => 'ERR',
                                           p_error_message      => 'CUSTOM_RULE2 '||substr(sqlerrm,1,3000),
                                           p_program_name       => $$PLSQL_UNIT,
                                           p_line_location      => $$PLSQL_LINE
                                          );
           RETURN NULL;
           
    end CUSTOM_RULE2;
    
      FUNCTION ALL_USERS_APPROVED( 
                              PC_FLOW_CODE  VARCHAR2 ,
                              PC_STAGE_CODE VARCHAR2 ,
                              PN_PID        NUMBER ,
                              PN_ID         NUMBER ) 
      RETURN VARCHAR2
      IS
        lv_return varchar2(400);
        lv_count number;
        lv_que_request_id varchar2(400);
        LV_PUSHFORM_VIEW VARCHAR2(400);
        LV_STRING VARCHAR2(4000);
        LV_TEMP_CONFIG_FLAG VARCHAR2(4000);
        LV_REQ_ALL_USER_APPROVAL  VARCHAR2(10);
        LV_APPROVED_USERS VARCHAR2(4000);
        LV_RESPONSE_APPROVER VARCHAR2(4000);
        LV_CURRENT_USER VARCHAR2(4000);
      
      BEGIN
      
        SELECT metric_name ||'_V'
        INTO lv_pushform_view
        FROM ms_qsm_metric_maint
        WHERE guid = 'RESQSM' AND is_active = 'Y';
        
        LV_STRING := 'SELECT temp_config_flag,APPROVAL_PENDING_USERS,RESPONSE_APPROVER,DD_CURRENT_USER_NAME FROM '|| lv_pushform_view || 
                     ' WHERE instance_id = :1 AND process_instance_id = :2 AND INSTANCE_REC_NUM = 1';
        
        EXECUTE IMMEDIATE LV_STRING
                                INTO lv_temp_config_flag,lv_approved_users,lv_response_approver,lv_current_user 
                                USING PN_ID,PN_PID;
                                
        LV_REQ_ALL_USER_APPROVAL :=  SUBSTR(SUBSTR(LV_TEMP_CONFIG_FLAG,INSTR(LV_TEMP_CONFIG_FLAG,'"REQUIRE_ALL_USER_APPROVAL":',1)+29),1,
                                    (INSTR(SUBSTR(LV_TEMP_CONFIG_FLAG,INSTR(LV_TEMP_CONFIG_FLAG,'"REQUIRE_ALL_USER_APPROVAL":',1)+29),'"',1)-1));
                                    
        SELECT DECODE(LV_APPROVED_USERS,'',LV_CURRENT_USER,LV_APPROVED_USERS||','||LV_CURRENT_USER)
        INTO LV_APPROVED_USERS
        FROM DUAL;
      
        lv_return :='TRUE';
        
        SELECT COUNT(1)
        INTO LV_COUNT
        FROM TABLE (MS_APPS_UTILITIES.PARSE_STRING(LV_RESPONSE_APPROVER,',')) A
        WHERE INSTR(','||lv_approved_users||',',','||COLUMN_VALUE||',',1)<1;
       
        IF UPPER(LV_REQ_ALL_USER_APPROVAL) = '1' AND LV_COUNT >0 THEN -- TRIM(lv_approved_users) <> TRIM(lv_response_approver) Then
      
          lv_return :='FALSE';
        
       END IF;
      
      --ms_qsm_log_activity ('', 'ALL_USERS_APPROVED~'||lv_return||':'||LV_RESPONSE_APPROVER||':'||lv_approved_users||':'||LV_REQ_ALL_USER_APPROVAL,'');
        
      RETURN lv_return;
         
      EXCEPTION
        WHEN OTHERS THEN
          message_log (p_log_id          => gn_log_id,
                                             p_error_code         => 'ERR',
                                             p_error_message      => substr(sqlerrm,1,3000),
                                             p_program_name       => $$PLSQL_UNIT,
                                             p_line_location      => $$PLSQL_LINE
                                            );
             RETURN NULL;
            
      END;
      


END MS_QSM_STAGE_PARAMETRS; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_SUMMARY_REPORT_O" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name : MS_QSM_SUMMARY_REPORT_O
    Creation Time : 2015-JAN-21 22:33:18.451389000
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_SUMMARY_REPORT_O';
    GV_program_name VARCHAR2(100);
/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_FILTER_TYPE                         IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_FILTER_TYPE                         IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        );
END MS_QSM_SUMMARY_REPORT_O ; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_SUMMARY_REPORT_O" IS

/* --------------------------------------------------------------------------
    This Package generated by the Data Designer Engine.
    Package Body.
    Author : Data Designer Engine
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    LOCK_ENTRY : Procedure to lock the object in order to stop
                    any other transitions happening on the same object.
                    This routine will set the DD_EDIT_FLAG to N.
   -------------------------------------------------------------------------- */

    PROCEDURE LOCK_ENTRY
        (
            iop_FILTER_TYPE                         IN                        VARCHAR2,
            iop_log_no                              IN     OUT                NUMBER,
            op_error_code                                  OUT                NUMBER,
            op_error_message                               OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT ms_apps_mdf_error_handle_id_s.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure LOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_LOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'LOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure LOCK_ENTRY is to lock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'N' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to N of MS_QSM_SUMMARY_REPORT', 'D');

        UPDATE MS_QSM_SUMMARY_REPORT
           SET DD_EDIT_FLAG = 'N'
         WHERE FILTER_TYPE                              = iop_FILTER_TYPE;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_LOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END LOCK_ENTRY;

/* --------------------------------------------------------------------------
    UNLOCK_ENTRY : Procedure to unlock the object in order to allow
                    other transitions on the object.
                    This routine will set the DD_EDIT_FLAG to Y.
   -------------------------------------------------------------------------- */

    PROCEDURE UNLOCK_ENTRY
        (
            iop_FILTER_TYPE                         IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT ms_apps_mdf_error_handle_id_s.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
        lV_program_name VARCHAR2(100);
    BEGIN
/* --------------------------------------------------------------------------
    Start of the Procedure UNLOCK_ENTRY
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_DO_UNLOCK_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UNLOCK_ENTRY';
        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start', 'I');

/* --------------------------------------------------------------------------
   Procedure UNLOCK_ENTRY is to unlock the entries of all Data Objects
   that are part of the Data Form.
   It sets the DD_EDIT_FLAG = 'Y' for the given PROCESS_INSTANCE_ID
   -------------------------------------------------------------------------- */

        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;


        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Setting DD_EDIT_FLAG to Y of MS_QSM_SUMMARY_REPORT', 'D');

        UPDATE MS_QSM_SUMMARY_REPORT
           SET DD_EDIT_FLAG = 'Y'
         WHERE FILTER_TYPE                              = iop_FILTER_TYPE;

        MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Total Updates : ' || SQL%ROWCOUNT, 'D');

    MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End', 'I');
    EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR', 'C');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , 'E');
            MS_APPS_APP_BUILDER_PKG.LOG_ACTIVITY(LV_log_no.APP_LOG_NO, '[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback' , 'I');
            ROLLBACK TO MS_APPS_DO_UNLOCK_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UNLOCK_ENTRY;

END MS_QSM_SUMMARY_REPORT_O; 
 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_SURVEY_SUMMARY_REPORT_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Specification.
    Author : Data Designer ETL Engine
    Package Name  : MS_QSM_SURVEY_SUMMARY_REPORT_P
    Creation Time : Thu Jan 22 21:13:37 IST 2015
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
   IMPORTANT NOTE:
   ---------------
   PLEASE DO NOT ALTER THIS PACKAGE. IT IS AUTO GENERATED BY THE ETL ENGINE.
   FOR ANY CUSTOMIZATION, CODE THE NEEDED FUNCTIONALITY AND PLUG IT IN THE
   HOOKS PACKAGE PROVIDED BY THE APP STUDIO PROCESS DESIGNER.
   INTEGRITY OF THE APP STUDIO DATA DESIGNER ETL ENGINE CANNOT BE GUARANTEED
   IF THIS AUTO GENERATED CODE IS CUSTOMIZED.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Defining Global Variables
   -------------------------------------------------------------------------- */
    GC_package_name CONSTANT VARCHAR2(100) := 'MS_QSM_SURVEY_SUMMARY_REPORT_P' ;
    GV_program_name VARCHAR2(100);
   
   
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id  IN                      NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id         IN                      VARCHAR2,
            iop_log_no              IN   OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        );

/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY     CLOB,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2,
            iop_error_seq         IN     OUT                NUMBER,
            ip_pid                IN                        NUMBER
        );
   


END MS_QSM_SURVEY_SUMMARY_REPORT_P ;
 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_SURVEY_SUMMARY_REPORT_P" IS

/* --------------------------------------------------------------------------
    ETL Package generated by the Data Designer ETL Engine.
    Package Body.
    Author : Data Designer ETL Engine
   -------------------------------------------------------------------------- */
   
   
/* --------------------------------------------------------------------------------
    GENERATE_UPDATE_HIERARCHY : Procedure to get the update the xml data hierarchy
   ------------------------------------------------------------------------------ */

    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        );
        
    PROCEDURE UPDATE_HIERARCHY
        (
           iop_log_no          IN   OUT             NUMBER,
           iop_xml             IN   OUT    NOCOPY   XMLTYPE,
           op_error_code            OUT             NUMBER,
           op_error_message         OUT             VARCHAR2,
           iop_error_sequence  IN   OUT             NUMBER,
           ip_pid              IN                   NUMBER
        )
    AS
        LV_error_code               NUMBER;
        LV_error_message            VARCHAR2(1000);
        UPDATE_HIERARCHY_EXCEP      EXCEPTION;
        LV_xml                      XMLTYPE := iop_xml;
		LV_namespace                varchar2(100) := 'xmlns="http://www.metricstream.com/appstudio/msa"';
        lv_program_name             VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_UPDATE_HIERARCHY;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'UPDATE_HIERARCHY';


/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        
      MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
      
    		iop_xml := LV_xml;
    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_pid);
    EXCEPTION
        WHEN UPDATE_HIERARCHY_EXCEP THEN

            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] UPDATE_HIERARCHY_EXCEP Exception Raised ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO  MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'C','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'E','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
			MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_sequence,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in update hier ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_UPDATE_HIERARCHY;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END UPDATE_HIERARCHY;
/* --------------------------------------------------------------------------
    GET_NEXT_ID : Procedure to get the NEXT_ID of the Apps Infra ID
   -------------------------------------------------------------------------- */

    PROCEDURE GET_NEXT_ID
        (
            ip_process_instance_id IN                       NUMBER,
            op_id                        OUT                VARCHAR2,
            ip_attribute_id       IN                        VARCHAR2,
            iop_log_no            IN     OUT                NUMBER,
            op_error_code                OUT                NUMBER,
            op_error_message             OUT                VARCHAR2
        )
    AS
        LV_error_code NUMBER;
        LV_error_message VARCHAR2(1000);
        NEXT_ID_GEN_EXCEPTION EXCEPTION;
        lv_program_name VARCHAR2(100);
        ln_error_seq NUMBER:=1;

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
            AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
    BEGIN
/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------
    Setting Savepoint.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'GET_NEXT_ID';

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;

    MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_process_instance_id);
      
             
 MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] End ', ip_process_instance_id);
    EXCEPTION
        WHEN NEXT_ID_GEN_EXCEPTION THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] NEXT_ID_GEN_EXCEPTION Exception Raised ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := LV_error_message;
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] WHEN OTHERS ERROR ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900), ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_process_instance_id);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,ln_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in Generating Next ID ' || dbms_utility.format_error_backtrace, ip_process_instance_id);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END GET_NEXT_ID;


 

  	    	 
  	    	 
  	    	              
/* --------------------------------------------------------------------------
    CALL_ETL : ETL Procedure, responsible to load the MS tables
                with the data got from Process Designer DS.
   -------------------------------------------------------------------------- */

    PROCEDURE CALL_ETL
        (
            iop_xml_data          IN     OUT     NOCOPY         CLOB,
            iop_log_no            IN     OUT                    NUMBER,
            op_error_code                OUT                    NUMBER,
            op_error_message             OUT                    VARCHAR2,
            iop_error_seq         IN     OUT                    NUMBER,
            ip_pid                IN                            NUMBER

        )
    AS

/* --------------------------------------------------------------------------
     ETL procedure created by the ETL Engine of APP BUILDER.
     The procedure takes care of loading the data that is sent
     by the FLOW BUILDER and store the same in MS TABLES.
     Data is already processed and stored accordingly in the iop_data
     object structure. The object can have one or more records.
     The ETL is designed to take care of one or more records.
     If the data has to be manipulated before populating the main
     MS TABLES, please use the HOOKS that are generated by the
     FLOW BUILDER.
   -------------------------------------------------------------------------- */
        LV_progress VARCHAR2(3) := NULL;
        LV_cntr_1   NUMBER      := NULL;
        LV_cntr_2   NUMBER      := NULL;
        LV_debug    BOOLEAN     := FALSE;
        LV_XML      XMLTYPE     := XMLTYPE(iop_xml_data);
        LV_err_code NUMBER      := NULL;
        LV_err_msg  VARCHAR2(4000);
        lV_program_name VARCHAR2(100);

/* --------------------------------------------------------------------------
    CURSOR to get the next log no to log all the activities done
    by the ETL procedure.
   -------------------------------------------------------------------------- */
        CURSOR LC_get_app_log_no IS
            SELECT MS_APPS_MDF_DEPLOYMENT_ID_S.NEXTVAL --Log#1
            --MS_APPS_APP_BUILDER_LOG_NO.NEXTVAL
              AS APP_LOG_NO
              FROM DUAL;
        LV_log_no LC_get_app_log_no%ROWTYPE;
      
    /************* Add the cursors for all the regions ******************/
      
            
   /************* End of cursors for all the regions ******************/
    
   /************ Add the cursors for all object relationships *****************************/
    	  		      BEGIN

/* --------------------------------------------------------------------------
    Start of the procedure.
   -------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------
    Note: Defining SAVEPOINT TO ROLLBACK transactions done by ETL.
   -------------------------------------------------------------------------- */
        SAVEPOINT MS_APPS_ETL_SAVEPOINT;

/* --------------------------------------------------------------------------
    Note: MS_APPS_MDF_ERRORS_PKG.INSERT_LOG will be called to log
            the activity performed by this routine
   -------------------------------------------------------------------------- */
        LV_progress := '001';
        op_error_code := 0;
        op_error_message := '';
        lV_program_name := 'CALL_ETL';


/* --------------------------------------------------------------------------
    Note: Default DEBUG FLAG is set to FALSE to avoid unneccessary logging of data.
            If any issues found in ETL, to understand what goes into the ETL
            then set this variable to TRUE and run the ETL in the flow.
            It allows to log the entire relevant data set.
   -------------------------------------------------------------------------- */
        LV_debug := FALSE;

/* --------------------------------------------------------------------------
        Fetch the App log seq no to log activities.
   -------------------------------------------------------------------------- */
        IF iop_log_no IS NULL THEN
            OPEN LC_get_app_log_no;
            FETCH LC_get_app_log_no INTO LV_log_no;
            CLOSE LC_get_app_log_no;
            iop_log_no := LV_log_no.APP_LOG_NO;
        ELSE
            LV_log_no.APP_LOG_NO := iop_log_no;
        END IF;
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Start ', ip_pid);
        MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  ']  Updating Hierarchy ', ip_pid);
        
        UPDATE_HIERARCHY
        (
           iop_log_no          => LV_log_no.APP_LOG_NO,
           iop_xml             => LV_XML,
           op_error_code       => LV_err_code,
           op_error_message    => LV_err_msg,
           iop_error_sequence  => iop_error_seq,
           ip_pid              => ip_pid
        );

        IF(LV_err_code !=0) THEN
          MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'W','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Failed while updating Hierarchy ', ip_pid);
        END IF;
        
        /* capture all cursors here */
		
		
        LV_cntr_1 := 0;
      
/* --------------------------------------------------------------------------
        Cursor to fetch non multirow details from XML
   -------------------------------------------------------------------------- */
		        FOR iop_data in ( SELECT  INSTANCE_ID
                                 ,METRIC_ID
                                 ,TO_DATE(METRIC_RUN_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_RUN_DATE
                                 ,TO_DATE(METRIC_COMPLETED_DATE,'MM/dd/yyyy HH24:mi:ss') AS METRIC_COMPLETED_DATE
                                 ,LATEST_FLAG
                                 ,CREATED_BY
                                 ,TO_DATE(CREATION_DATE,'MM/dd/yyyy HH24:mi:ss') AS CREATION_DATE
                                 ,PROCESS_FLOW_STATUS
                                 ,PROCESS_INSTANCE_ID
                                 ,ELECTRONICALLY_SIGNED
	                             ,INSTANCE_REC_NUM
											 					   	  , DD_EVENT_USER_NAME
					    											 					   	  , DD_CURRENT_USER_NAME
					    										FROM XMLTABLE(XMLNAMESPACES(  'http://www.metricstream.com/appstudio/msa'  as "msa"),
                                'msa:datapacket/msa:data/msa:nonmultirow' 
                               PASSING LV_XML
                               COLUMNS
                                INSTANCE_ID                      NUMBER          PATH  'msa:instance_id'
                               ,METRIC_ID                        NUMBER          PATH  'msa:metric_id'
                               ,METRIC_RUN_DATE                  VARCHAR2(40)    PATH  'msa:metric_run_date'
                               ,METRIC_COMPLETED_DATE            VARCHAR2(40)    PATH  'msa:metric_completed_date'
                               ,LATEST_FLAG                      VARCHAR2(1)     PATH  'msa:latest_flag'
                               ,CREATED_BY                       NUMBER          PATH  'msa:created_by'
                               ,CREATION_DATE                    VARCHAR2(40)    PATH  'msa:creation_date'
                               ,PROCESS_FLOW_STATUS              NUMBER          PATH  'msa:process_flow_status'
                               ,PROCESS_INSTANCE_ID              NUMBER          PATH  'msa:process_instance_id'
                               ,ELECTRONICALLY_SIGNED            NUMBER          PATH  'msa:electronically_signed'
                               ,INSTANCE_REC_NUM                 NUMBER          PATH  'msa:instance_rec_num'    
														, DD_EVENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_event_user_name'
																						, DD_CURRENT_USER_NAME  VARCHAR2(4000) PATH 'msa:dd_current_user_name'
																			))      
					
				LOOP
			           LV_cntr_1 := LV_cntr_1 + 1;
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Data Found in iop_data. ', ip_pid);
			           MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'D','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Processing Record : iop_data(' || LV_cntr_1 || ')', ip_pid);
    

		 /* --------------------------------------------------------------------------
		       Loop through the data object to load the data into MS tables.
		        Header info is being loaded into the system.
		  -------------------------------------------------------------------------- */ 
 			           
          			                    
          									  
				   			   		
    END LOOP;	 
        EXCEPTION
        WHEN OTHERS THEN
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'C','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] ERROR ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLCODE : ' || SQLCODE , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'E','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] SQLERRM : ' || SUBSTR(SQLERRM, 1, 3900) , ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[ ' || GC_package_name || '.' || LV_PROGRAM_NAME ||  '] Calling Rollback ', ip_pid);
            MS_APPS_MDF_ERRORS_PKG.INSERT_LOG(LV_log_no.APP_LOG_NO,iop_error_seq,SYSDATE,'I','[' || GC_package_name || '.' || LV_PROGRAM_NAME || '] Error in call ETL ' || dbms_utility.format_error_backtrace, ip_pid);
            ROLLBACK TO MS_APPS_ETL_SAVEPOINT;
            op_error_code := -1;
            op_error_message := GC_package_name || '.' || lv_program_name || ' - (' || SQLCODE || ') - (' || SUBSTR(SQLERRM, 1, 255) || ')';
    END CALL_ETL;        

END MS_QSM_SURVEY_SUMMARY_REPORT_P ;   
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_TEST_POST_HOOK" (lt_in_data_orig      IN     CLOB,
                                                                       lt_in_data           IN  CLOB,
                                                                       Pc_Process_Code      In     Varchar2,
                                                                       Ln_Orig_Process_Instance_Id In Number,
                                                                       ln_process_instance_id  IN OUT NUMBER,                        
                                                                       xn_error_handle_id   IN OUT NUMBER,
                                                                       xn_error_seq         IN OUT NUMBER,
                                                                       xn_error_code           OUT VARCHAR2)
AS
 lc_out_xml                                                     XMLTYPE:=NULL;
 l_error_code                                                NUMBER;
 L_Error_Message                                          Varchar2 (4000);
 x_Process_Inst_Id  Number;
 X_User_Id Number;
 X_Org_Id Number;
 X_Send_To Number;
 X_Send_To_Assessor Varchar2(4000);
 X_Send_To_Assessor_Org varchar2(4000);
 X_Job_Title Varchar2(4000);
 X_Survey_Id Varchar2(100);
 X_Inst_Id Number;
 X_User_Name Varchar2(100);
 X_Full_Name Varchar2(100);
X_Org_Name Varchar2(100);
X_Roles Varchar2(4000);
x_record_exists number;
  begin
  
  Lc_Out_Xml := Xmltype(Lt_In_Data);
  Insert Into Xml_Log Values(Lc_Out_Xml);
   Select Xmltype(Lt_In_Data).Extract('datapacket/data/nonmultirow/que_request_id/text()', 'xmlns="http://www.metricstream.com/appstudio/msa"').Getstringval() Into X_Survey_Id From Dual;
  Select Xmltype(Lt_In_Data).Extract('datapacket/data/nonmultirow/process_instance_id/text()', 'xmlns="http://www.metricstream.com/appstudio/msa"').Getnumberval() Into X_Process_Inst_Id From Dual;
  Select Xmltype(Lt_In_Data).Extract('datapacket/data/nonmultirow/instance_id/text()', 'xmlns="http://www.metricstream.com/appstudio/msa"').Getnumberval() Into X_Inst_Id From Dual;
       FOR i IN (SELECT Send_To_Assessor, INSTANCE_REC_NUM,Send_To_Assessor_Org
                        FROM XMLTABLE(XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' as
                                                    "msa"),
                                      'msa:datapacket/msa:data/msa:ind/msa:row'
                                      Passing Lc_Out_Xml Columns Send_To_Assessor
                                      Varchar2(4000) Path 'msa:send_to_assessor',
									  Send_To_Assessor_Org VARCHAR2(4000) PATH 'msa:send_to_assessor_org',
                                      Instance_Rec_Num Number Path
                                      'msa:instance_rec_num',
                                      indv_send_option number PATH 'msa:indv_send_option')) 
									  Loop
      X_Send_To_Assessor := I.Send_To_Assessor;
      X_Send_To_Assessor_Org := I.Send_To_Assessor_Org;
     --  If i.indv_send_option = 2 
      -- Then
      Delete From Ms_Qsm_Report_User_History_Tbl Where  Pid = x_Process_Inst_Id;
       For Org_Rec In (Select Column_Value As Org_Id From Table(Ms_Apps_Utilities.Split_String(X_Send_To_Assessor_Org,',')))
      Loop
           For User_Rec In (Select Column_Value As User_Name From Table(Ms_Apps_Utilities.Split_String(X_Send_To_Assessor,',')))
           Loop
                    Begin
                        begin
                          Select Profile_Value Into X_Job_Title From Si_User_Profiles  Where Profile_Id = 100002 And User_Id = (Select User_Id From Si_Users_T Where User_Name = User_Rec.User_Name);
                        Exception
                        when others then x_job_title := '';
                        End;
                        
                        Select distinct f.Org_Entity_Id, f.Org_Entity_Name, 
                         F.User_Name, (Select First_Name||' '||Last_Name From Si_Users_T Where User_Name = F.User_Name)
                         Into
                        X_Org_Id,
                        x_org_name,
                        X_User_Name,
                        X_Full_Name
                        From Ms_Qsm_Org_Flow_V F
                         Where F.Org_Entity_Id = Org_Rec.Org_Id
                         And F.User_Name=User_Rec.User_Name;
                         
                     Select Ms_Concat(R1)
                      Into X_Roles
                      from (select distinct role_name as r1 
                      From Ms_Qsm_Org_Flow_V F
                         Where F.Org_Entity_Id = 100001
                         And F.User_Name='QSM_Admin');
                     
                     begin
                        select count(1) 
                        into x_record_exists
                        from Ms_Qsm_Report_User_History_Tbl
                        where org_id = org_rec.org_id
                        And User_Name=User_Rec.User_Name
                        and pid = x_Process_Inst_Id;
                    exception when others then
                      X_Record_Exists:=0;
                    end;  
                    
                    If X_Record_Exists >=1 Then
                        insert into Error_tbl values('inside if1');
                        Update Ms_Qsm_Report_User_History_Tbl Set 
                        Pid = X_Process_Inst_Id,
                        Inst_Id = X_Inst_Id,
                        survey_id = x_survey_id,
                        Org_Id = X_Org_Id,
                        Org_Name = X_Org_Name,
                        User_Name = X_User_Name,
                        Full_Name = X_Full_Name,
                        Roles = X_Roles,
                        Job_Title = X_Job_Title
                        Where 
                        Org_Id = Org_Rec.Org_Id
                        And User_Name = User_Rec.User_Name
                        And pid = x_Process_Inst_Id;
                    
                    Else
                      insert into Error_tbl values('inside if2');
                        Insert Into Ms_Qsm_Report_User_History_Tbl Values
                        (
                        X_Process_Inst_Id,
                        X_Inst_Id,
                        X_Survey_Id,
                        X_Org_Id,
                        X_Org_Name,
                        X_User_Name,
                        X_Full_Name,
                        X_Roles,
                        X_Job_Title
                        );
                    end if;
                     exception when others then
                    null;
                    End;
                              
     
           end loop;
       End Loop; 
    --   end if;
      End Loop;
      
      
                   MS_QSM_REMINDER_EMAIL_PROC(
                                                                    O_ERROR_CODE => l_error_code,
                                                                    O_ERROR_MESSAGE => l_error_message
                                                                   );
 
	  exception
	  When Others Then 
    
	  ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                     pn_error_sequence    => xn_error_seq,
                     pc_error_type        => 'E',
                     Pc_Error_Text        => 'Fatal Error in the ms_QSM_INIQSM_POST_HOOK ' || Dbms_Utility.Format_Error_Backtrace || '~' || Sqlerrm);  
    end;
 
/
  CREATE OR REPLACE PROCEDURE "NOVT_DEV"."MS_QSM_TRIGGER_FINDINGS" (ip_in_response_id          IN   VARCHAR2,
                                                                                               ip_test_execution_id IN VARCHAR2,
                                                                                               ip_in_pid    IN NUMBER
)
AS
   l_params          ms_param_tbl := ms_param_tbl ();
   l_event_log_id    NUMBER;
   l_error_code      VARCHAR2 (100);
   l_error_message   VARCHAR2 (1000);
   l_ism_template    CLOB;
   l_ism_xml            XMLTYPE:=NULL;
   lv_path               VARCHAR2(4000):='/datapacket/data/nonmultirow/$/text()';
   lv_clob_path        VARCHAR2(4000) :='/datapacket/data/nonmultirow/$';
   lv_action_string    CLOB:= NULL;
   ln_action_rec_num   NUMBER:=1;
   ln_error_handle_id   NUMBER :=888;
   ln_error_seq         NUMBER :=888;
   ln_iap_multirow_id  NUMBER;
   l_que_request_name   VARCHAR2(4000);
    L_CREATED_BY  NUMBER;
    LV_OBJECT_STRING  VARCHAR2(4000);
    LN_ICO_MULTIROW_ID  NUMBER;
    L_OBJECT_CODE  VARCHAR2(4000);
    l_applies_to  VARCHAR2(255);    
	LV_ATC_STRING CLOB;
    LV_IAC_STRING CLOB;
    LV_IAO_STRING CLOB;
    LV_IAR_STRING CLOB;
    lv_ico_string clob;
    l_scope_selection varchar2(4000);
    l_filter_type VARCHAR2(4000);

BEGIN

             ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => ln_error_handle_id,
             pn_error_sequence    => ln_error_seq,
             pc_error_type        => 'E',
             pc_error_text        => 'INSIDE MS_QSM_TRIGGER_FINDINGS'||ip_in_pid||'~'||ip_in_response_id);    
             
    IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0)  THEN
        MS_QSM_UTILITIES.INITIALIZE_METRIC_MAINT ('QSM');
    END IF;             

    select que_request_id,que_applies_to,survey_scope_selection,fiilter_level --QUE_REQUEST_NAME
    INTO l_que_request_name,l_applies_to,l_scope_selection,l_filter_type
    FROM MS_QSM_INIT_QUESTNR
    WHERE QUE_REQUEST_ID = ip_test_execution_id;
    
--    FOR issues_rec IN (SELECT  issue_approver
--                                            ,issue_approver_org
--                                            ,issue_due_date
--                                            ,issue_owner
--                                            ,issue_owner_org
--                                            ,issue_recomendations
--                                            ,issue_recomendations_htm
--                                            ,issue_disposition
--                                            ,issue_type
--                                            ,issue_rating
--                                            ,issue_details
--                                            ,issue_details_htm
--                                            ,issue_title
--                                            ,finding_fk
--                                            ,finding_id
--                                FROM 
--                                XMLTABLE(xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:iss/msa:row'
--                                PASSING ip_in_data
--                                COLUMNS  issue_approver VARCHAR2(100) PATH 'msa:issue_approver'
--                                            ,issue_approver_org VARCHAR2(100) PATH 'msa:issue_approver_org'
--                                            ,issue_due_date VARCHAR2(100) PATH 'msa:issue_due_date'
--                                            ,issue_owner VARCHAR2(100) PATH 'msa:issue_owner'
--                                            ,issue_owner_org VARCHAR2(100) PATH 'msa:issue_owner_org'
--                                            ,issue_recomendations CLOB PATH 'msa:issue_recomendations'
--                                            ,issue_recomendations_htm CLOB PATH 'msa:issue_recomendations_htm'
--                                            ,issue_disposition VARCHAR2(100) PATH 'msa:issue_disposition'
--                                            ,issue_type  VARCHAR2(100) PATH 'msa:issue_type'
--                                            ,issue_rating VARCHAR2(100) PATH 'msa:issue_rating'
--                                            ,issue_details CLOB PATH 'msa:issue_details'
--                                            ,issue_details_htm CLOB PATH 'msa:issue_details_htm'
--                                            ,issue_title VARCHAR2(255) PATH 'msa:issue_title'
--                                            ,finding_fk VARCHAR2(100) PATH 'msa:finding_fk'
--                                            ,finding_id  VARCHAR2(100) PATH 'msa:finding_id') )
--                                            
                                            
     FOR issues_rec IN (/*SELECT  ISSUE_APPROVER issue_approver
                                            ,ISSUE_APPROVER_ORG issue_approver_org
                                            ,TO_CHAR(ISSUE_DUE_DATE,'MM/DD/YY HH24:MI:SS') issue_due_date
                                            ,ISSUE_OWNER issue_owner
                                            ,ISSUE_OWNER_ORG issue_owner_org
                                            ,ISSUE_RECOMENDATIONS issue_recomendations
                                            ,ISSUE_RECOMENDATIONS issue_recomendations_htm
                                            ,ISSUE_DISPOSITION issue_disposition
                                            ,ISSUE_TYPE issue_type
                                            ,ISSUE_RATING issue_rating
                                            ,ISSUE_DETAILS issue_details
                                            ,ISSUE_DETAILS issue_details_htm
                                            ,ISSUE_TITLE issue_title
                                            ,FINDING_FK finding_fk
                                            ,FINDING_ID finding_id
                                FROM MS_QSM_RESP_ISSUE 
                                WHERE FINDING_FK = ip_in_response_id
                                AND DD_PROCESS_INSTANCE_ID = ip_in_pid
                                AND  ISSUE_DISPOSITION = '1'*/
                                SELECT  a.ISSUE_APPROVER issue_approver
                                            ,a.ISSUE_APPROVER_ORG issue_approver_org
                                            ,TO_CHAR(a.ISSUE_DUE_DATE,'MM/DD/YYYY HH24:MI:SS') issue_due_date
                                            ,a.ISSUE_OWNER issue_owner
                                            ,a.ISSUE_OWNER_ORG issue_owner_org
                                            ,a.ISSUE_RECOMENDATIONS issue_recomendations
                                            ,a.ISSUE_RECOMENDATIONS issue_recomendations_htm
                                            ,a.ISSUE_DISPOSITION issue_disposition
                                            ,a.ISSUE_TYPE issue_type
                                            ,a.ISSUE_RATING issue_rating
                                            ,a.ISSUE_DETAILS issue_details
                                            ,a.ISSUE_DETAILS issue_details_htm
                                            ,a.ISSUE_TITLE issue_title
                                            ,a.FINDING_FK finding_fk
                                            ,a.FINDING_ID finding_id
                                            ,A.DD_CREATED_BY  DD_CURRENT_USER_NAME
                                FROM MS_QSM_RESP_ISSUE a,MS_QSM_FINDING_ISSUES_NEW_V b
                                WHERE a.finding_id=b.finding_id
                                AND a.FINDING_FK = ip_in_response_id
                               AND a.DD_PROCESS_INSTANCE_ID = ip_in_pid
                               AND b.instance_id = (SELECT MAX (instance_id)
                            FROM MS_QSM_FINDING_ISSUES_NEW_V
                           WHERE PROCESS_INSTANCE_ID = ip_in_pid
                           --AND instance_rec_num = 1
                           )                             
                                AND a. ISSUE_DISPOSITION = '1')
    LOOP       
    if issues_rec.issue_disposition=1 then              
        BEGIN
                                                           
            l_params.EXTEND;
            l_params (1) :=  ms_param_obj (param_name     => 'GET_ISM_TEMPLATE',
                                                            param_type     => ms_apps_constants.g_parameter_type_reference,
                                                            data_type      => ms_apps_constants.g_data_type_text,
                                                            mandatory      => ms_apps_constants.g_no,
                                                            text_value     => NULL,
                                                            number_value   => NULL,
                                                            date_value     => NULL,
                                                            clob_value     => NULL,
                                                            blob_value     => NULL,
                                                            bfile_value    => NULL);
            ms_apps_businessevents.raise_business_event (i_event_name            => 'GET_ISM_TEMPLATE',
                                                        i_parent_event_log_id   => NULL,
                                                        i_parameter_tab         => l_params,
                                                        i_registration_name     => NULL,
                                                        i_commit_flag           => TRUE,
                                                        o_event_log_id          => l_event_log_id,
                                                        o_error_code            => l_error_code,
                                                        o_error_message         => l_error_message);

             l_created_by := MS_APPS_UTILITIES.GET_USER_ID(issues_rec.dd_current_user_name);  
             
            SELECT clob_value
            INTO l_ism_template
            FROM ms_apps_event_param_logs
            WHERE event_log_id = l_event_log_id;
                    
            l_ism_xml := XMLTYPE(l_ism_template) ;
            
            --        MS_QSM_UTILITIES.UPDATE_XML
                    
            --Place Holder Starts
            --<Enrich the l_ism_template>
            --Place Holder Ends
            
            -- for getiing the iap multiregion id
           /*Select Mct_Table.Extract('row/multirow_region_id/text()',
                                    'http://www.metricstream.com/appstudio/msa') .Getstringval()
           Into   ln_iap_multirow_id
           From   Table(Xmlsequence((Select l_ism_xml.Extract('/datapacket/data/iap/row',
                                                              'http://www.metricstream.com/appstudio/msa')
                                    From   Dual))) Mct_Table
           Where  Rownum = 1;  */     
           
           Select Multirow_Region_Id
            Into   ln_iap_multirow_id
            From   Xmltable(Xmlnamespaces('http://www.metricstream.com/appstudio/msa' As
							  "msa"),
				'msa:datapacket/msa:data/msa:iap/msa:row' Passing l_ism_xml
				Columns Multirow_Region_Id Varchar2(100) Path
				'msa:multirow_region_id')
                where     Rownum = 1; 
                
            Select Multirow_Region_Id
            Into   ln_ico_multirow_id
            From   Xmltable(Xmlnamespaces('http://www.metricstream.com/appstudio/msa' As
							  "msa"),
				'msa:datapacket/msa:data/msa:ico/msa:row' Passing l_ism_xml
				Columns Multirow_Region_Id Varchar2(100) Path
				'msa:multirow_region_id')
                where     Rownum = 1; 
                
               
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','created_by'),l_created_by);       
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','creation_date'),''); 
            MS_QSM_UTILITIES.UPDATE_XML_CLOB(l_ism_xml,REPLACE(lv_clob_path,'$','issue_details'),issues_rec.issue_details); 
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','issue_due_date'),issues_rec.issue_due_date); 
            
            --MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','dd_current_user_name'),issues_rec.issue_owner);       
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','dd_current_user_name'),issues_rec.dd_current_user_name);
            
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','dd_event_user_name'),issues_rec.dd_current_user_name); 
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','issue_source_type'),'4');        -- Need to modify for Surveys
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','issue_risk_rating'),issues_rec.issue_rating); 
--            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','issue_source_ref'),ip_test_execution_id); 
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','issue_source_ref'),ip_in_response_id); 
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','issue_source'),l_que_request_name);   
           -- MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','issue_initiator'),issues_rec.issue_owner);           
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','issue_initiator'),issues_rec.dd_current_user_name);
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','issue_owner'),issues_rec.issue_owner);           
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','issue_approver'),issues_rec.issue_approver); 
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','issue_approverorg'),issues_rec.issue_approver_org);       
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','issue_ownerorg'),issues_rec.issue_owner_org);   
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','assign_to'),'');       
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','issue_title'),issues_rec.issue_title);   
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','orig_issue_due_dt'),issues_rec.issue_due_date);           
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','instance_rec_num'),'1');           
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','issue_type'),issues_rec.issue_type); 
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','type_of_execution'),'');       
            MS_QSM_UTILITIES.UPDATE_XML(l_ism_xml,REPLACE(lv_path,'$','f_created_by'),issues_rec.dd_current_user_name); 
                          
--            FOR actions_rec IN (SELECT action_due_date 
--                                                     ,action_priority
--                                                     ,action_owner
--                                                     ,action_description
--                                                     ,action_description_htm
--                                                     ,action_title
--                                                     ,ac_issue_title
--                                                     ,action_fk
--                                                     ,action_id                                               
--                                          FROM
--                                          XMLTABLE(
--                                          XMLNAMESPACES('http://www.metricstream.com/appstudio/msa' AS "msa"),'msa:datapacket/msa:data/msa:act/msa:row'
--                                          PASSING ip_in_data 
--                                          COLUMNS action_due_date VARCHAR2(100) PATH 'msa:action_due_date'
--                                                     ,action_priority VARCHAR2(100) PATH 'msa:action_priority'
--                                                     ,action_owner VARCHAR2(255) PATH 'msa:action_owner'
--                                                     ,action_description CLOB PATH 'msa:action_description'
--                                                     ,action_description_htm CLOB PATH 'msa:action_description_htm'
--                                                     ,action_title VARCHAR2(255) PATH 'msa:action_title'
--                                                     ,ac_issue_title VARCHAR2(255) PATH 'msa:ac_issue_title'
--                                                     ,action_fk VARCHAR2(100) PATH 'msa:action_fk'
--                                                     ,action_id VARCHAR2(100) PATH 'msa:action_id')
--                                          WHERE action_fk = issues_rec.finding_id)
                                          
            lv_action_string := null;
            lv_iao_string := null;
            lv_atc_string := null;
            lv_iar_string := null;
            lv_ico_string := null;
            lv_iac_string := null;
                                                     
            FOR actions_rec IN (SELECT TO_CHAR(ACTION_DUE_DATE,'MM/DD/YYYY HH24:MI:SS') action_due_date 
                                                     ,ACTION_PRIORITY action_priority
                                                     ,ACTION_OWNER action_owner
                                                     ,ACTION_DESCRIPTION action_description
                                                     ,ACTION_DESCRIPTION action_description_htm
                                                     ,ACTION_TITLE action_title
                                                     ,AC_ISSUE_TITLE ac_issue_title
                                                     ,ACTION_FK action_fk
                                                     ,ACTION_ID action_id      
            FROM MS_QSM_RESP_ACTION
            WHERE ACTION_FK =  issues_rec.finding_id)       
            LOOP                              
                ln_action_rec_num := ln_action_rec_num +1;
                
                lv_action_string := lv_action_string|| '<msa:row>
                                                                            <msa:action_title>'||actions_rec.action_title||'</msa:action_title>
                                                                            <msa:action_owner>'||actions_rec.action_owner ||'</msa:action_owner>
                                                                            <msa:action_start_date>'||''||'</msa:action_start_date>
                                                                            <msa:action_due_date>'||actions_rec.action_due_date||'</msa:action_due_date>
                                                                            <msa:action_priority>'||actions_rec.action_priority||'</msa:action_priority>
                                                                            <msa:action_description>'||actions_rec.action_description ||'</msa:action_description>
                                                                            <msa:issue_action_id>'||actions_rec.action_id ||'</msa:issue_action_id>
                                                                            <msa:instance_rec_num>'||ln_action_rec_num||'</msa:instance_rec_num>
                                                                            <msa:multirow_region_id>'||ln_iap_multirow_id||'</msa:multirow_region_id>
                                                                        </msa:row>'; 
                
                
              --  ln_action_rec_num := ln_action_rec_num +1; adde above after loop
                
            END LOOP;
            
            BEGIN
            
              EXECUTE IMMEDIATE 'SELECT APPLIES_TO_OBJECT_CODE FROM '||ms_qsm_utilities.g_tbl_metric_maintenance ('RESQSM')||'_V'||' WHERE QST_RESPONSE_ID = :1 AND ROWNUM<=1'
              INTO L_OBJECT_CODE USING IP_IN_RESPONSE_ID;
            EXCEPTION
              WHEN OTHERS THEN
              L_OBJECT_CODE := NULL;
            END;
            
            
            
          /*  lv_object_string :='<msa:iap xmlns:msa="http://www.metricstream.com/appstudio/msa"><msa:row>
                                                         <msa:ico_comments/>
                                                         <msa:ico_title>'||l_object_code|| '</msa:ico_title>
                                                        <msa:ico_org/>
                                                        <msa:ico_issue_id/>
                                                        <msa:multirow_region_id>'||ln_ico_multirow_id||'</msa:multirow_region_id>
                                                        <msa:instance_rec_num>'||ln_action_rec_num||'</msa:instance_rec_num>
                                                        </msa:row></msa:iap>';*/
		FOR APPLIES_TO_REC IN (SELECT COLUMN_VALUE FROM TABLE 
            (MS_APPS_UTILITIES.PARSE_STRING (TO_CHAR(L_OBJECT_CODE) ,','))) LOOP
            
              LN_ACTION_REC_NUM := LN_ACTION_REC_NUM+1;
           
              IF L_APPLIES_TO = '10' OR (l_scope_selection='1' AND NVL(l_filter_type,'1') = '1') THEN
              
                  lv_iao_string := lv_iao_string||'<msa:row>
                                                        <msa:iao_org/>
                                                        <msa:iao_title>'||APPLIES_TO_REC.COLUMN_VALUE||'</msa:iao_title>
                                                        <msa:iao_comments/>
                                                        <msa:iao_issue_id/>
                                                        <msa:multirow_region_id/>
                                                        <msa:instance_rec_num>'||LN_ACTION_REC_NUM||'</msa:instance_rec_num>
                                                    </msa:row>';
              
--                   MS_QSM_UTILITIES.UPDATE_XML (L_ISM_XML, 'datapacket/data/iao/row/iao_title/text()',L_OBJECT_CODE); 
--                   MS_QSM_UTILITIES.UPDATE_XML (L_ISM_XML, 'datapacket/data/iao/row/instance_rec_num/text()',LN_ACTION_REC_NUM); 


              
			   elsif l_applies_to= '2' then
					lv_atc_string := lv_atc_string||'<msa:row>
															  <msa:atc_org/>
															  <msa:atc_title>'||APPLIES_TO_REC.COLUMN_VALUE||'</msa:atc_title>
															  <msa:atc_comments/>
															  <msa:atc_issue_id/>
															  <msa:multirow_region_id/>
															  <msa:instance_rec_num>'||LN_ACTION_REC_NUM||'</msa:instance_rec_num>
														  </msa:row>';
				ELSIF L_APPLIES_TO= '12' THEN
              
                    lv_iar_string := lv_iar_string||'<msa:row>
                                                  <msa:iar_org/>
                                                  <msa:iar_title>'||APPLIES_TO_REC.COLUMN_VALUE||'</msa:iar_title>
                                                  <msa:iar_comments/>
                                                  <msa:iar_issue_id/>
                                                  <msa:multirow_region_id/>
                                                  <msa:instance_rec_num>'||LN_ACTION_REC_NUM||'</msa:instance_rec_num>
                                              </msa:row>';
				
				ELSIF L_APPLIES_TO= '7' THEN
              
                    lv_iac_string := lv_iac_string||'<msa:row>
                                                  <msa:iac_org/>
                                                  <msa:iac_title>'||APPLIES_TO_REC.COLUMN_VALUE||'</msa:iac_title>
                                                  <msa:iac_comments/>
                                                  <msa:iac_issue_id/>
                                                  <msa:multirow_region_id/>
                                                  <msa:instance_rec_num>'||LN_ACTION_REC_NUM||'</msa:instance_rec_num>
                                              </msa:row>';
				
				ELSIF L_APPLIES_TO <> '1' THEN
              
                        lv_ico_string := lv_ico_string||'<msa:row>
                                                  <msa:ico_org/>
                                                  <msa:ico_title>'||APPLIES_TO_REC.COLUMN_VALUE||'</msa:ico_title>
                                                  <msa:ico_comments/>
                                                  <msa:ico_issue_id/>
                                                  <msa:multirow_region_id/>
                                                  <msa:instance_rec_num>'||LN_ACTION_REC_NUM||'</msa:instance_rec_num>
                                              </msa:row>';
				END IF;
		END LOOP;
       
              
              ms_qsm_utilities.process_multirow (l_ism_xml, 'iap,atc,ico,iao,iar,iac', 'action_title,atc_title,ico_title,iao_title,iar_title,iac_title');
			  IF L_APPLIES_TO = '10' THEN
             
                L_ISM_XML := MS_QSM_UTILITIES.INSERT_XML(L_ISM_XML,'datapacket/data/nonmultirow',XMLTYPE('<msa:iao xmlns:msa="http://www.metricstream.com/appstudio/msa">'||LV_iao_STRING||'</msa:iao>'),'A');
             
             elsif l_applies_to = '2' then
             
                l_ism_xml := ms_qsm_utilities.insert_xml(l_ism_xml,'datapacket/data/nonmultirow',xmltype('<msa:atc xmlns:msa="http://www.metricstream.com/appstudio/msa">'||lv_atc_string||'</msa:atc>'),'A');
             
             ELSif l_applies_to = '12' then
             
                l_ism_xml := ms_qsm_utilities.insert_xml(l_ism_xml,'datapacket/data/nonmultirow',xmltype('<msa:iar xmlns:msa="http://www.metricstream.com/appstudio/msa">'||lv_iar_string||'</msa:iar>'),'A');
             
             ELSif l_applies_to = '7' then
             
                l_ism_xml := ms_qsm_utilities.insert_xml(l_ism_xml,'datapacket/data/nonmultirow',xmltype('<msa:iac xmlns:msa="http://www.metricstream.com/appstudio/msa">'||lv_iac_string||'</msa:iac>'),'A');
             
             ELSIF L_APPLIES_TO <> '1' THEN
             
                l_ism_xml := ms_qsm_utilities.insert_xml(l_ism_xml,'datapacket/data/nonmultirow',xmltype('<msa:ico xmlns:msa="http://www.metricstream.com/appstudio/msa">'||lv_ico_string||'</msa:ico>'),'A');
             
             END IF;	
             
             L_ISM_XML := MS_QSM_UTILITIES.INSERT_XML(L_ISM_XML,'datapacket/data/nonmultirow',XMLTYPE('<msa:iap xmlns:msa="http://www.metricstream.com/appstudio/msa">'||LV_ACTION_STRING||'</msa:iap>'),'A');
             
           /*  l_ism_xml := MS_QSM_UTILITIES.INSERT_XML(l_ism_xml,'datapacket/data/nonmultirow',XMLTYPE(lv_object_string),'A');*/

              
--            INSERT INTO MS_QSM_FLOW_LOG VALUES ('','ISSUE XML',SYSDATE,l_ism_xml.getclobval());
--            
--            COMMIT;
                                          
            l_params (1) :=
              ms_param_obj (param_name     => 'TRIGGER_ISSUE',
                            param_type     => ms_apps_constants.g_parameter_type_reference,
                            data_type      => ms_apps_constants.g_data_type_text,
                            mandatory      => ms_apps_constants.g_no,
                            text_value     => NULL,
                            number_value   => NULL,
                            date_value     => NULL,
                            clob_value     => l_ism_xml.getclobval(),
                            blob_value     => NULL,
                            bfile_value    => NULL);
            ms_apps_businessevents.raise_business_event (i_event_name            => 'TRIGGER_ISSUE',
                                                        i_parent_event_log_id   => NULL,
                                                        i_parameter_tab         => l_params,
                                                        i_registration_name     => NULL,
                                                        i_commit_flag           => TRUE,
                                                        o_event_log_id          => l_event_log_id,
                                                        o_error_code            => l_error_code,
                                                        o_error_message         => l_error_message);
          
                     ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => ln_error_handle_id,
                     pn_error_sequence    => ln_error_seq,
                     pc_error_type        => 'I',
                     pc_error_text        => 'Success : Finding ID : '|| issues_rec.finding_id||'Log ID:'||l_event_log_id||',Code:'||l_error_code||'MSG:'||l_error_message );                                                     
                                                        
                                                        
        EXCEPTION
            WHEN OTHERS THEN
                     ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => ln_error_handle_id,
                     pn_error_sequence    => ln_error_seq,
                     pc_error_type        => 'E',
                     pc_error_text        => 'Fatal Error while initiating Issue for'|| issues_rec.finding_id|| DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);          
            
        END;
        end if;
        
    END LOOP;             

EXCEPTION
    WHEN OTHERS THEN
             ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => ln_error_handle_id,
             pn_error_sequence    => ln_error_seq,
             pc_error_type        => 'E',
             pc_error_text        => 'Fatal Error in MS_QSM_TRIGGER_FINDINGS'||DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);       
                                           
END; 
 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_USER_LIST" 
AS
  OBJECT
  (
    USER_NAME      VARCHAR2(4000),
    USER_FULL_NAME VARCHAR2(4000),
    OBJECT_ID      VARCHAR2(4000),
    OBJECT_NAME    VARCHAR2(4000) )

 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_USER_LIST_TABLE" 
AS
  TABLE OF MS_QSM_USER_LIST 

 
/
  CREATE OR REPLACE PACKAGE "NOVT_DEV"."MS_QSM_UTILITIES" 
AS
   g_namespace                VARCHAR2 (1000) := 'xmlns="http://www.metricstream.com/appstudio/msa"';

   TYPE ty_tbl_metric_maintenance IS TABLE OF ms_qsm_metric_maint.metric_name%TYPE
                                        INDEX BY VARCHAR2 (225);
    
   g_tbl_metric_maintenance   ty_tbl_metric_maintenance;
   g_module_code              VARCHAR2 (3) := NULL;
   g_debug                    VARCHAR2 (1) := NULL;
   
    TYPE TY_TBL_CONFIG_PARAMS IS TABLE OF ms_qs_parameter_values.PARAMETER_VALUE%TYPE
                                        INDEX BY VARCHAR2 (225);
    g_TBL_CONFIG_PARAMS    TY_TBL_CONFIG_PARAMS;                                 

      PROCEDURE get_qsm_template_4_interface (i_event_log_id         IN            ms_apps_event_logs.event_log_id%TYPE,
                                              i_event_name           IN            ms_apps_events.event_name%TYPE,
                                              i_subscription_name    IN            ms_apps_event_subscriptions.subscription_name%TYPE,
                                              i_status               IN            PLS_INTEGER,
                                              i_action_text          IN            VARCHAR2,
                                              o_close_subscription      OUT NOCOPY VARCHAR2,
                                              o_notify_event_owner      OUT NOCOPY VARCHAR2,
                                              o_error_code              OUT NOCOPY NUMBER,
                                              o_error_message           OUT NOCOPY VARCHAR2);

   FUNCTION get_user_names (p_user_list VARCHAR2)
      RETURN VARCHAR2;

   FUNCTION get_router_suffix (p_flow_code VARCHAR2)
      RETURN VARCHAR2;


 FUNCTION fn_remove_html_tags
  (p_string  IN CLOB)
  RETURN    CLOB;

   PROCEDURE INITIALIZE_METRIC_MAINT (P_MODULE VARCHAR2);
   
   PROCEDURE initialize_perf_config_params;

   PROCEDURE insert_comments (i_process_instance_id    IN            NUMBER,
                              i_instance_id            IN            NUMBER,
                              i_infolet_id             IN            NUMBER,
                              i_user_name              IN            VARCHAR2,
                              i_user_full_name         IN            VARCHAR2,
                              i_comments_column_name   IN            VARCHAR2 DEFAULT NULL,
                              i_comments               IN            VARCHAR2,
                              o_error_code                OUT NOCOPY NUMBER,
                              o_error_message             OUT NOCOPY VARCHAR2);

   PROCEDURE reorder_instance_rec_no (p_src IN OUT NOCOPY XMLTYPE);

   FUNCTION get_status (p_current_stage VARCHAR2, p_previous_stage VARCHAR2, p_action_id VARCHAR2)
      RETURN VARCHAR2;

   PROCEDURE update_xml (p_src       IN OUT NOCOPY XMLTYPE,
                         p_path                    VARCHAR2,
                         p_update                  XMLTYPE,
                         p_namespc                 VARCHAR2 DEFAULT g_namespace);

   PROCEDURE update_xml (p_src       IN OUT NOCOPY XMLTYPE,
                         p_path                    VARCHAR2,
                         p_update                  VARCHAR2,
                         p_namespc                 VARCHAR2 DEFAULT g_namespace);

   PROCEDURE update_xml_clob (p_src       IN OUT NOCOPY XMLTYPE,
                              p_path                    VARCHAR2,
                              p_update                  CLOB,
                              p_namespc                 VARCHAR2 DEFAULT g_namespace);


   --   PROCEDURE generate_issue_id (p_src IN OUT NOCOPY XMLTYPE);

   PROCEDURE generate_questionnaire_id (p_src IN OUT NOCOPY XMLTYPE);

   PROCEDURE generate_section_id (p_src IN OUT NOCOPY XMLTYPE);

   PROCEDURE generate_question_id (p_src IN OUT NOCOPY XMLTYPE);

   PROCEDURE generate_grade_id (p_src IN OUT NOCOPY XMLTYPE);

   PROCEDURE generate_scoring_id (p_src IN OUT NOCOPY XMLTYPE);

   PROCEDURE delete_empty_multirows (p_data IN OUT NOCOPY XMLTYPE, p_multirow VARCHAR2, p_multirow_key VARCHAR2);

   PROCEDURE update_inout_data (p_out_xml       IN OUT NOCOPY XMLTYPE,
                                p_in_data       IN OUT NOCOPY CLOB,
                                p_out_data      IN OUT NOCOPY CLOB,
                                p_only_indata                 VARCHAR2 DEFAULT 'N');

   PROCEDURE process_multirow (p_src             IN OUT NOCOPY XMLTYPE,
                               p_multirows                     VARCHAR2,
                               p_multirow_keys                 VARCHAR2,
                               p_frm_migration                 VARCHAR2 DEFAULT 'N',
                               p_update                        VARCHAR2 DEFAULT NULL);

   --   PROCEDURE generate_action_id (p_src IN OUT NOCOPY XMLTYPE);

   FUNCTION getdocument (p_data CLOB)
      RETURN DBMS_XMLDOM.domdocument;

   FUNCTION get_tag_value (p_xml IN OUT NOCOPY XMLTYPE, p_path VARCHAR2, p_namespace VARCHAR2 DEFAULT g_namespace)
      RETURN VARCHAR2;

   FUNCTION get_tag_clob_value (p_xml IN OUT NOCOPY XMLTYPE, p_path VARCHAR2, p_namespace VARCHAR2 DEFAULT g_namespace)
      RETURN CLOB;

   FUNCTION get_tag (p_xml IN OUT NOCOPY XMLTYPE, p_path VARCHAR2, p_namespace VARCHAR2 DEFAULT g_namespace)
      RETURN XMLTYPE;

   FUNCTION insert_xml (p_xml            IN OUT NOCOPY XMLTYPE,
                        p_path                         VARCHAR2,
                        p_insert                       XMLTYPE,
                        p_before_after                 VARCHAR2,                                                           --(A/B i.e After or Before)
                        p_namespace                    VARCHAR2 DEFAULT g_namespace)
      RETURN XMLTYPE;

   PROCEDURE get_nonmultirow (p_non_multirow          IN OUT NOCOPY XMLTYPE,
                              p_metric_id                           NUMBER,
                              p_process_instance_id                 NUMBER,
                              p_instance_id                         NUMBER,
                              p_namespace                           VARCHAR2 DEFAULT ms_qsm_utilities.g_namespace);

   PROCEDURE get_multirow_template (p_multirow         IN OUT NOCOPY XMLTYPE,
                                    p_metric_id                      NUMBER,
                                    p_region_name                    VARCHAR2 DEFAULT NULL,
                                    p_full_blown                     VARCHAR2 DEFAULT 'N',
                                    p_with_multirows                 VARCHAR2 DEFAULT 'N',
                                    p_namespace                      VARCHAR2 DEFAULT ms_qsm_utilities.g_namespace);

   PROCEDURE pr_update_ts (p_action_id VARCHAR2);

   FUNCTION get_infolet_id (p_metric_name IN VARCHAR2)
      RETURN NUMBER;

   FUNCTION get_flow_code (p_flow_name IN VARCHAR2)
      RETURN VARCHAR2;

   /*The update multirow procedure will only work when the multirow has a value and is not an empty tag*/
   PROCEDURE update_multirow_ids (p_xml IN OUT NOCOPY XMLTYPE, p_metric_id NUMBER, p_namespace VARCHAR2 DEFAULT ms_qsm_utilities.g_namespace);

   FUNCTION GET_FORM_URL (ip_push_infolet_name     IN VARCHAR2,
                          ip_process_instance_id   IN NUMBER,
                          ip_instance_id           IN NUMBER,
                          ip_edit_flag             IN VARCHAR2,
                          ip_hyper_text            IN VARCHAR2 DEFAULT NULL)
      RETURN VARCHAR2;

   PROCEDURE insert_schedule_logs (i_request_id                     IN          VARCHAR2,
                                                      i_respondents                  IN          CLOB,
                                                      i_log_level                       IN          VARCHAR2, -- H - Header , D- Detailed
                                                      i_sequence_no                 IN          NUMBER DEFAULT 1,
                                                      i_process_instance_id       IN          NUMBER DEFAULT NULL,
                                                      i_questionnaire_id            IN          VARCHAR2 DEFAULT NULL,
                                                      i_sch_frequency               IN          VARCHAR2 DEFAULT NULL,
                                                      i_status                           IN          VARCHAR2 DEFAULT NULL,   
                                                      i_send_to                        IN          VARCHAR2  DEFAULT NULL, -- 1 - All Control Owners , 2- All Process Owners , 3- Roles , 4 - Users
                                                      i_indv_item_pk                 in          varchar2 default null, 
                                                      i_response_id in varchar2 default null,
                                                      i_iteration_number in varchar2 default null,
                                                      o_error_code                   OUT NOCOPY NUMBER,
                                                      o_error_message             OUT NOCOPY VARCHAR2);

   FUNCTION get_applies_to_object_desc (i_object_id IN VARCHAR2, i_object_code IN VARCHAR2, i_parameter IN VARCHAR2 DEFAULT NULL,i_seq IN NUMBER DEFAULT 1)
      RETURN VARCHAR2;
      
  FUNCTION GET_APPLIES_TO_OBJECT_CODE (I_OBJECT_ID IN VARCHAR2,
                                                            I_OBJECT_DESC IN VARCHAR2,
                                                             I_PARAMETER IN VARCHAR2 DEFAULT NULL)
      RETURN VARCHAR2 ;     

   FUNCTION GET_SAVED_DATA_FOR_REPORT (i_pid_status IN VARCHAR2, i_user_name IN VARCHAR2)
      RETURN MS_QSM_SAVED_DATA_TABLE
      PIPELINED;

   PROCEDURE LOB_REPLACE (P_LOB IN OUT CLOB, P_WHAT IN VARCHAR2, P_WITH IN VARCHAR2);
   
   PROCEDURE PREPOPULATE_SURVEY_RESPONSE(
                                      P_RESPONDENTS         IN CLOB,
                                      P_RESPONSE_XML        IN OUT XMLTYPE,
                                      P_QUE_REQUEST_ID      IN  VARCHAR2,
                                      P_PREPOPULATE         IN  VARCHAR2,
                                      P_METRIC_ID           IN  VARCHAR2,
                                      P_QUESTIONNAIRE_ID    IN  VARCHAR2,
                                      P_SCH_FREQUENCY       IN  VARCHAR2,
                                      P_LV_PATH             IN  VARCHAR2
                                      );
  
  PROCEDURE PREPOPULATE_RESPONSE_ONE_COPY(
                                      P_RESPONDENTS         IN CLOB,
                                      P_RESPONSE_XML        IN OUT XMLTYPE,
                                      P_QUE_REQUEST_ID      IN  VARCHAR2,
                                      P_PREPOPULATE         IN  VARCHAR2,
                                      P_METRIC_ID           IN  VARCHAR2,
                                      P_QUESTIONNAIRE_ID    IN  VARCHAR2,
                                      P_SCH_FREQUENCY       IN  VARCHAR2,
                                      P_LV_PATH             in  varchar2
                                      );
   
   PROCEDURE  INITIATE_RESPONSE_FLOW  (ip_respondents IN CLOB ,
                                                                 ip_response_xml IN XMLTYPE  ,
                                                                 ip_que_request_id IN  VARCHAR2,
                                                                  IP_SEQUENCE_NO IN  NUMBER DEFAULT 1,
                                                                  ip_excel_based in varchar2 default 'no',
                                                                  ip_iteration_number IN VARCHAR2 DEFAULT 'ITR-1',
                                                                 xn_error_handle_id IN OUT NUMBER ,
                                                                 xn_error_seq IN OUT NUMBER,
                                                                 xn_error_code OUT NOCOPY NUMBER, 
                                                                 xn_error_message OUT NOCOPY VARCHAR2 );   
                                                                 
  FUNCTION FN_DERIVE_SCHEDULE_DATE(p_Frequency                    IN  Ms_Qs_List_Of_Values_t.Stored_Value%Type,
                                                                                            p_Frequency_Lov_Name    IN  Ms_Qs_Lov_Names.Lov_Name%Type Default 'ABC',
                                                                                            p_start_Date                    IN  DATE)
  RETURN DATE;                                                            
 procedure REFRESH_LOV_ORG_TABLE(error_code out varchar2);  
    FUNCTION  GET_FIND_ISS_DATA_FOR_REPORT (p_pid IN NUMBER)
    RETURN MS_QSM_FND_ISS_DATA_TABLE
    PIPELINED;
    FUNCTION get_Issue_Title (p_QUE_RESPONSE_ID IN VARCHAR2)
    RETURN VARCHAR2;
    
    FUNCTION CALCULATE_INFOLET_SCORE(
                                                                 p_question_id VARCHAR2,
                                                                 p_response_val VARCHAR2,
                                                                 p_pid NUMBER DEFAULT NULL,
                                                                 p_iid NUMBER DEFAULT NULL
                                                                )
   RETURN  VARCHAR2;
   
FUNCTION get_config_parameters
RETURN VARCHAR2;

FUNCTION fn_split_lov_values (i_string IN VARCHAR2)
RETURN MS_QSM_VARCHAR2_ARRAY PIPELINED; 

FUNCTION GET_INFOLET_RESULT_DATA(i_infolet_id IN VARCHAR2,
                                            i_instance_id    IN VARCHAR2,
                                            i_column_list IN VARCHAR2)
    RETURN MS_QSM_INFOLET_RESULT_TABLE 
    PIPELINED;
    
FUNCTION GET_SPREADSHEET_JSON (
       i_spread_sheet_id VARCHAR2,
       i_user_name VARCHAR2)
       RETURN CLOB;

PROCEDURE  UPDATE_METRIC_TABLE  (ip_metric_id IN NUMBER ,
                                                              ip_metric_columns IN VARCHAR2  ,
                                                              ip_modified_value IN VARCHAR2,
                                                              ip_column_type IN VARCHAR2,
                                                              ip_pid IN NUMBER,
                                                              xn_error_handle_id IN OUT NUMBER ,
                                                              xn_error_seq IN OUT NUMBER,
                                                              xn_error_code OUT NOCOPY NUMBER, 
                                                              xn_error_message OUT NOCOPY VARCHAR2 );    



FUNCTION MODULE_OBJECT_CONTACT_LIST(i_applies_to_obect IN VARCHAR2)                                                                   
    RETURN MS_QSM_USER_LIST_TABLE 
    PIPELINED ;  
 
FUNCTION GET_CONTACT_USER_AVAILABLE
RETURN VARCHAR2;

FUNCTION GET_CONCAT_LIST_OF_VALUES (i_question_id IN VARCHAR2,
                                    i_locale_id IN NUMBER)
RETURN VARCHAR2;                     


FUNCTION GET_SPRD_SHEET_XML (IP_RESPONSE_ID VARCHAR2,
                                               IP_QUESTIONNAIRE_ID VARCHAR2,
                                               IP_USER_NAME VARCHAR2)

RETURN CLOB;

FUNCTION FN_GET_MLOV_VALUES (
      i_key_col VARCHAR2,
      i_column_name   VARCHAR2,
      i_table_name    VARCHAR2
   )
RETURN CLOB;

FUNCTION get_grc_form_url(pv_object_type VARCHAR2, pv_object_id VARCHAR2)
    return varchar2 result_cache; 

FUNCTION CONVERT (
      i_key_col VARCHAR2
      )
RETURN NUMBER;

FUNCTION dependency_filter_data (ip_main_string   IN VARCHAR2,
                                       lv_query_list    in varchar2_array)
RETURN NUMBER;

PROCEDURE get_sprd_template_4_interface (i_event_log_id         IN            ms_apps_event_logs.event_log_id%TYPE,
                                           i_event_name           IN            ms_apps_events.event_name%TYPE,
                                           i_subscription_name    IN            ms_apps_event_subscriptions.subscription_name%TYPE,
                                           i_status               IN            PLS_INTEGER,
                                           i_action_text          IN            VARCHAR2,
                                           o_close_subscription      OUT NOCOPY VARCHAR2,
                                           o_notify_event_owner      OUT NOCOPY VARCHAR2,
                                           o_error_code              out nocopy number,
                                           o_error_message           OUT NOCOPY VARCHAR2);

function GET_SOUCE_API_NAME(I_SOURCE in  varchar2)
return varchar2;

function fn_response_details_rpt(l_filter_type varchar2,l_section varchar2,l_question varchar2,l_questnr_survey varchar2,l_Respondent varchar2,l_response varchar2) 
return tbl_response_det
PIPELINED;

FUNCTION GET_SPREADSHEET_DATA (i_spreadsheet_id IN VARCHAR2,
                                                 i_question_id    IN VARCHAR2,
                                                 i_response_id    IN VARCHAR2)
    RETURN ms_qsm_sprd_data_tab
    PIPELINED;

FUNCTION CHECK_CONDITIONAL_QUESTION (I_QUESTION_ID IN VARCHAR2,
                                     I_RESPONSE_ID IN VARCHAR2,
                                     I_CHECK_RESPONSE IN  VARCHAR2)
RETURN VARCHAR2;                                     

END ms_qsm_utilities; 
CREATE OR REPLACE PACKAGE BODY "NOVT_DEV"."MS_QSM_UTILITIES" 
AS

   pkg_doc   DBMS_XMLDOM.domdocument;


   FUNCTION get_user_names (p_user_list VARCHAR2)
      RETURN VARCHAR2
   AS
      l_ret   VARCHAR2 (32000);
   BEGIN
      SELECT ms_concat (ms_apps_utilities.get_user_full_name (COLUMN_VALUE))
        INTO l_ret
        FROM (SELECT * FROM TABLE (ms_apps_utilities.split_string (p_user_list, ',')));

      RETURN l_ret;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
   END;

   FUNCTION get_router_suffix (p_flow_code VARCHAR2)
      RETURN VARCHAR2
   IS
      l_router_suffix   VARCHAR2 (100);
   BEGIN
      BEGIN
         SELECT DISTINCT source
           INTO l_router_suffix
           FROM ms_qsm_metric_maint
          WHERE is_active = 'Y' AND source <> 'PROD';
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            l_router_suffix := 'PROD';
      END;

      l_router_suffix := SUBSTR (p_flow_code, 1, 11) || '_' || l_router_suffix;
      RETURN l_router_suffix;

   END;

   PROCEDURE get_qsm_template_4_interface (i_event_log_id         IN            ms_apps_event_logs.event_log_id%TYPE,
                                           i_event_name           IN            ms_apps_events.event_name%TYPE,
                                           i_subscription_name    IN            ms_apps_event_subscriptions.subscription_name%TYPE,
                                           i_status               IN            PLS_INTEGER,
                                           i_action_text          IN            VARCHAR2,
                                           o_close_subscription      OUT NOCOPY VARCHAR2,
                                           o_notify_event_owner      OUT NOCOPY VARCHAR2,
                                           o_error_code              OUT NOCOPY NUMBER,
                                           o_error_message           OUT NOCOPY VARCHAR2)
   AS
      l_qsm_template         XMLTYPE;
      l_qsm_template_clob    CLOB;
      l_survey_metric_id     NUMBER;
      l_error_handle_id      NUMBER:=99;
      l_error_seq            NUMBER:=99;
      l_transform_to_cif_payload  VARCHAR2(10);
      L_XSL            XMLTYPE;
      V_XML_CLOB       CLOB;

   BEGIN
      IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0)
      THEN

         ms_qsm_utilities.initialize_metric_maint ('QSM');

      END IF;

          ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => l_error_handle_id,
                                            pn_error_sequence    => l_error_seq,
                                            pc_error_type        => 'E',
                                            pc_error_text        => 'l_transform_to_cif_payload 1:' || l_transform_to_cif_payload);



      l_survey_metric_id := ms_apps_utilities.get_infolet_id (ms_qsm_utilities.g_tbl_metric_maintenance ('INIQSM'));
      ms_qsm_utilities.get_multirow_template (p_multirow         => l_qsm_template,
                                              p_metric_id        => l_survey_metric_id,
                                              p_full_blown       => 'Y',
                                              p_with_multirows   => 'Y');

      select text_value
      into l_transform_to_cif_payload
      from ms_apps_event_param_logs
      where event_log_id=i_event_log_id;

     /* DELETE FROM ms_apps_event_param_logs
            WHERE parameter_name = 'GET_ISM_TEMPLATE' AND event_log_id <> i_event_log_id;*/

 -- Modify the l_qsm_template to CIF Template section start
     /* check if xml to be modified to support Common Integration Framework */

          ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => l_error_handle_id,
                                            pn_error_sequence    => l_error_seq,
                                            pc_error_type        => 'E',
                                            pc_error_text        => 'l_transform_to_cif_payload :' || l_transform_to_cif_payload);



     if l_transform_to_cif_payload = 'CIF' then
      /*   Get the xml stylesheet for CIF */
        SELECT XMLTYPE(XML)
         INTO L_XSL
        FROM MS_QSM_XML_TEMPLATES
        WHERE KEY='CIF_QSM_TEMPLATE';


      /* Transform the Input XML to CIF-XML format in xmltype variable l_qsm_template */
        SELECT XMLTRANSFORM(l_qsm_template, L_XSL)
          INTO l_qsm_template
        FROM DUAL;

       END IF;

      SELECT XMLSERIALIZE (CONTENT l_qsm_template AS CLOB) INTO l_qsm_template_clob FROM DUAL;

      update ms_apps_event_param_logs a
         set a.clob_value = l_qsm_template_clob
       where a.event_log_id = i_event_log_id;

        ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => l_error_handle_id,
                                            pn_error_sequence    => l_error_seq,
                                            pc_error_type        => 'D',
                                            pc_error_text        => '111111 :' || dbms_utility.format_error_backtrace || ':' || sqlerrm);


   EXCEPTION WHEN OTHERS THEN
    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => l_error_handle_id,
                                            pn_error_sequence    => l_error_seq,
                                            pc_error_type        => 'E',
                                            pc_error_text        => 'Failed in Retreiving the QSM Template :' || DBMS_UTILITY.format_error_backtrace || ':' || SQLERRM);

   END;


   PROCEDURE insert_comments (i_process_instance_id            IN            NUMBER,
                                                i_instance_id                         IN            NUMBER,
                                                i_infolet_id                            IN            NUMBER,
                                                i_user_name                         IN            VARCHAR2,
                                                i_user_full_name                   IN            VARCHAR2,
                                                i_comments_column_name     IN            VARCHAR2 DEFAULT NULL,
                                                i_comments                          IN            VARCHAR2,
                                                o_error_code                        OUT NOCOPY NUMBER,
                                                o_error_message                  OUT NOCOPY VARCHAR2)
   as
   l_count NUMBER:=0;
   BEGIN
      IF (i_comments IS NOT NULL)
      then

        select count(1) into l_count
        from ms_qsm_comments_log where process_instance_id = i_process_instance_id and instance_id =i_instance_id;

        IF l_count <=0 THEN

         insert into ms_qsm_comments_log (process_instance_id,
                            instance_id,
                            infolet_id,
                            comments,
                            user_name,
                            user_full_name,
                            entered_date,
                            comments_column_name)
              VALUES (i_process_instance_id,
                            i_instance_id,
                            i_infolet_id,
                            i_comments,
                            i_user_name,
                            i_user_full_name,
                            SYSDATE,
                            i_comments_column_name);
         END IF;
         /*  merge into ms_qsm_comments_log t
           using (select i_process_instance_id,
                            i_instance_id,
                            i_infolet_id,
                            i_comments,
                            i_user_name,
                            i_user_full_name,
                            sysdate,
                            i_comments_column_name from dual) v
            on (t.process_instance_id=v.i_process_instance_id
                AND t.instance_id=v.i_instance_id)
            when matched then
            UPDATE set t.comments=v.i_comments,
                t.user_name=v.i_user_name,
                t.user_full_name=v.i_user_full_name,
                t.comments_column_name = v.i_comments_column_name,
                t.entered_date = SYSDATE
            when not matched then
            insert(t.process_instance_id,
                   t.instance_id,
                   t.infolet_id,
                   t.comments,
                   t.user_name,
                   t.user_full_name,
                   t.entered_date,
                   t.comments_column_name)
            values (v.i_process_instance_id,
                            v.i_instance_id,
                            v.i_infolet_id,
                            v.i_comments,
                            v.i_user_name,
                            v.i_user_full_name,
                            sysdate,
                            v.i_comments_column_name);*/





      END IF;

      o_error_code := ms_apps_constants.g_success;

   EXCEPTION
      WHEN OTHERS
      THEN
         o_error_code := ms_apps_constants.g_error;
         o_error_message := 'Error Occurred while inserting comments: ' || SQLCODE || ' - ' || SQLERRM || '~' || DBMS_UTILITY.format_error_backtrace;
   END insert_comments;

   PROCEDURE get_multirow_template (p_multirow         IN OUT NOCOPY XMLTYPE,
                                    p_metric_id                      NUMBER,
                                    p_region_name                    VARCHAR2 DEFAULT NULL,
                                    p_full_blown                     VARCHAR2 DEFAULT 'N',
                                    p_with_multirows                 VARCHAR2 DEFAULT 'N',
                                    p_namespace                      VARCHAR2 DEFAULT ms_qsm_utilities.g_namespace)
   IS
      PRAGMA AUTONOMOUS_TRANSACTION;
      l_multirow_id   NUMBER;
      l_sql           VARCHAR2 (4000) := NULL;
      l_ret           XMLTYPE;
      l_count         number;
      l_inst_rec_num  NUMBER;
   BEGIN
      IF p_region_name IS NOT NULL
      THEN
         SELECT multirow_id
           INTO l_multirow_id
           FROM si_metric_columns
          WHERE metric_id = p_metric_id AND multirow_name = UPPER (p_region_name) AND ROWNUM = 1;
      END IF;

      IF (p_full_blown = 'N' AND p_with_multirows = 'N')
      THEN
         l_sql :=
               q'#insert into si_#'
            || p_metric_id
            || q'#_t (process_instance_id,instance_id,instance_rec_num,multirow_region_id) values ('999999999','999999999','1','#'
            || l_multirow_id
            || q'#')#';

         EXECUTE IMMEDIATE l_sql;
      ELSIF (p_full_blown = 'Y' AND p_with_multirows = 'N')
      then
         l_sql := q'#insert into si_#' || p_metric_id || q'#_t (process_instance_id,instance_id,instance_rec_num) values ('999999999','999999999','1')#';

         EXECUTE IMMEDIATE l_sql;
      END IF;

      l_inst_rec_num :=0;

      IF (p_full_blown = 'Y' AND p_with_multirows = 'Y')
      THEN
         FOR x IN (SELECT DISTINCT multirow_id AS multirow_id
                     FROM si_metric_columns
                    WHERE metric_id = p_metric_id)
         loop
            l_inst_rec_num := l_inst_rec_num+1;
             l_sql :=
                  q'#insert into si_#'
               || p_metric_id
               || q'#_t (process_instance_id,instance_id,multirow_region_id,instance_rec_num) values ('999999999','999999999','#'
               || x.multirow_id
               || q'#','#'
               ||l_inst_rec_num
               || q'#')#';

            EXECUTE IMMEDIATE l_sql;
         END LOOP;

         IF l_sql IS NULL
         then
            l_sql := q'#insert into si_#' || p_metric_id || q'#_t (process_instance_id,instance_id,instance_rec_num) values ('999999999','999999999','1')#';

            EXECUTE IMMEDIATE l_sql;
         END IF;
      END IF;

            ms_qsm_log_activity ('', 'LOGGED region xml inside count is ' || l_count, '');
      IF p_full_blown = 'N'
      THEN
         SELECT EXTRACT (xmltype (ms_apps_mdf_infoletoutput_pkg.get_xml (p_metric_id, '999999999', '999999999')),
                         'datapacket/data/' || LOWER (p_region_name) || '/row',
                         p_namespace)
           INTO l_ret
           FROM DUAL;
      ELSIF p_full_blown = 'Y'
      THEN
         SELECT xmltype (ms_apps_mdf_infoletoutput_pkg.get_xml (p_metric_id, '999999999', '999999999')) INTO l_ret FROM DUAL;

         update_xml (l_ret, 'datapacket/data/nonmultirow/instance_id/text()', '');
         update_xml (l_ret, 'datapacket/data/nonmultirow/process_instance_id/text()', '');
      END IF;

           ms_qsm_log_activity ('', 'LOGGED region xml inside ', l_ret.getclobval ());

      p_multirow := l_ret;

            ms_qsm_log_activity ('', 'LOGGED region xml inside Before Rollback', p_multirow.getclobval ());
      ROLLBACK;
   EXCEPTION
      WHEN OTHERS
      THEN
         ms_qsm_log_activity ('', 'LOGGED region xml inside EXCEPTION ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM, '');
         ROLLBACK;
   END;

   PROCEDURE get_nonmultirow (p_non_multirow          IN OUT NOCOPY XMLTYPE,
                              p_metric_id                           NUMBER,
                              p_process_instance_id                 NUMBER,
                              p_instance_id                         NUMBER,
                              p_namespace                           VARCHAR2 DEFAULT ms_qsm_utilities.g_namespace)
   IS
      l_ret   XMLTYPE;
   BEGIN
      SELECT EXTRACT (xmltype (ms_apps_mdf_infoletoutput_pkg.get_xml (p_metric_id, p_process_instance_id, p_instance_id)),
                      'datapacket/data/nonmultirow',
                      p_namespace)
        INTO l_ret
        FROM DUAL;

      p_non_multirow := l_ret;
   END;

   FUNCTION get_tag_value (p_xml IN OUT NOCOPY XMLTYPE, p_path VARCHAR2, p_namespace VARCHAR2 DEFAULT g_namespace)
      RETURN VARCHAR2
   IS
      l_ret   VARCHAR2 (32767);
   BEGIN
      SELECT EXTRACTVALUE (p_xml, p_path, g_namespace) INTO l_ret FROM DUAL;

      RETURN l_ret;
   END;
FUNCTION get_tag_clob_value (p_xml IN OUT NOCOPY XMLTYPE, p_path VARCHAR2, p_namespace VARCHAR2 DEFAULT g_namespace)
      RETURN CLOB
   IS
      l_ret   CLOB;
   BEGIN


      SELECT EXTRACT (p_xml, p_path, g_namespace).getClobval() INTO l_ret FROM DUAL;

      RETURN l_ret;
   EXCEPTION
      WHEN OTHERS
      THEN
         ms_qsm_log_activity ('', 'LOGGED EXCEPTION ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM,p_xml.getClobval());

   END;
--PROCEDURE update_multirow_ids (p_xml IN OUT NOCOPY XMLTYPE, p_metric_id NUMBER, p_namespace VARCHAR2 DEFAULT ms_qsm_utilities.g_namespace)
--AS
--BEGIN
--   FOR x IN (SELECT DISTINCT a.multirow_id, a.multirow_name
--               FROM si_metric_columns a
--              WHERE metric_id = p_metric_id AND TRUNC (multirow_id) IS NOT NULL)
--   LOOP
--      update_xml (p_xml, 'datapacket/data/' || LOWER (x.multirow_name) || '/row/multirow_region_id/text()',x.multirow_id, p_namespace);
--   END LOOP;
--END;
PROCEDURE update_multirow_ids (p_xml IN OUT NOCOPY XMLTYPE, p_metric_id NUMBER, p_namespace VARCHAR2 DEFAULT ms_qsm_utilities.g_namespace)
AS
   l_row_count   NUMBER := 0;
  l_multirow_nodelist   DBMS_XMLDOM.domnodelist;
BEGIN
   FOR x IN (SELECT DISTINCT a.multirow_id, a.multirow_name
               FROM si_metric_columns a
              WHERE metric_id = p_metric_id AND TRUNC (multirow_id) IS NOT NULL)
   LOOP
      l_row_count := 0;
        l_multirow_nodelist := DBMS_XSLPROCESSOR.selectnodes (DBMS_XMLDOM.makenode (pkg_doc), '/datapacket/data/' ||  LOWER (x.multirow_name) || '/row', g_namespace);
       l_row_count :=DBMS_XMLDOM.getlength (l_multirow_nodelist);
       ms_qsm_log_activity('','here--for '||LOWER (x.multirow_name)||'count is '||l_row_count,'');
      for y in 1 .. l_row_count
      loop
                  ms_qsm_utilities.update_xml (p_xml, 'datapacket/data/' || LOWER (x.multirow_name) || '/row[' || y || ']/multirow_region_id/text()', x.multirow_id,p_namespace);
      end loop;
   end loop;
end;

   FUNCTION get_tag (p_xml IN OUT NOCOPY XMLTYPE, p_path VARCHAR2, p_namespace VARCHAR2 DEFAULT g_namespace)
      RETURN XMLTYPE
   IS
      l_ret   XMLTYPE;
   BEGIN
      SELECT EXTRACT (p_xml, p_path, g_namespace) INTO l_ret FROM DUAL;

      RETURN l_ret;
   END;

   FUNCTION insert_xml (p_xml            IN OUT NOCOPY XMLTYPE,
                        p_path                         VARCHAR2,
                        p_insert                       XMLTYPE,
                        p_before_after                 VARCHAR2, --(A/B i.e After or Before)
                        p_namespace                    VARCHAR2 DEFAULT g_namespace)
      RETURN XMLTYPE
   IS
      l_ret   XMLTYPE;
   BEGIN
      ms_qsm_log_activity ('', 'Inside insert xml-->' || p_path, p_xml.getclobval ());

      IF UPPER (p_before_after) = 'A'
      THEN
         SELECT insertxmlafter (p_xml,
                                p_path,
                                p_insert,
                                p_namespace)
           INTO l_ret
           FROM DUAL;
      ELSIF UPPER (p_before_after) = 'B'
      THEN
         SELECT INSERTXMLBEFORE (p_xml,
                                 p_path,
                                 p_insert,
                                 p_namespace)
           INTO l_ret
           FROM DUAL;
      END IF;

      ms_qsm_log_activity ('', 'Inside insert xml Returning-->' || p_path, l_ret.getclobval ());
      RETURN l_ret;
   EXCEPTION
      WHEN OTHERS
      THEN
         ms_qsm_log_activity ('', 'Error in INSERT XML ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM, '');
   END;

 FUNCTION fn_remove_html_tags
  (p_string  IN CLOB)
  RETURN    CLOB
AS
  v_string_in   CLOB := p_string;
  v_string_out  CLOB;
BEGIN
  WHILE INSTR (V_STRING_IN, '>') > 0 LOOP
    IF SUBSTR (V_STRING_IN, 1,4)='<img' THEN
       V_STRING_OUT := V_STRING_OUT||' '||SUBSTR(V_STRING_IN,INSTR(V_STRING_IN,'title="',1)+7,INSTR(SUBSTR(V_STRING_IN,INSTR(V_STRING_IN,'title="',1)+7),'"',1)-1);
       V_STRING_IN:=SUBSTR(SUBSTR(V_STRING_IN,INSTR(V_STRING_IN,'title="',1)+7),INSTR(SUBSTR(V_STRING_IN,INSTR(V_STRING_IN,'title="',1)+7),'>',1)+1);
    ELSE  
      v_string_out := v_string_out
           || SUBSTR (v_string_in, 1, INSTR (v_string_in, '<') - 1);
      V_STRING_IN  := SUBSTR (V_STRING_IN, INSTR (V_STRING_IN, '>') + 1);
  END IF;
  END LOOP;
  v_string_out := v_string_out || v_string_in;
  RETURN v_string_out;
END fn_remove_html_tags;


   PROCEDURE initialize_metric_maint (p_module VARCHAR2)
   AS
   BEGIN
      IF g_tbl_metric_maintenance.COUNT = 0
      THEN
         FOR x IN (SELECT guid, metric_name
                     FROM ms_qsm_metric_maint
                    WHERE module = p_module AND is_active = 'Y')
         LOOP
            g_tbl_metric_maintenance (x.guid) := x.metric_name;
         END LOOP;
      END IF;

      IF g_module_code IS NULL
      THEN
         BEGIN
            SELECT VALUE
              INTO g_module_code
              FROM ms_qsm_params
             WHERE parameter = 'QSM_MODULE_CODE' AND param_group = 'QSM_PARAMS';
         EXCEPTION
            WHEN OTHERS
            THEN
               g_module_code := 'QSM';
         END;
      END IF;
   END;

  PROCEDURE initialize_perf_config_params
   AS
   BEGIN
      IF g_tbl_config_params.COUNT = 0
      THEN
         FOR x IN ( SELECT a.parameter_name,b.parameter_value
                    FROM ms_qs_parameter_names a, ms_qs_parameter_values b, ms_qs_parameter_types c
                    WHERE     a.parameter_id = b.parameter_id
                    AND a.parameter_type_id = b.parameter_type_id
                    AND a.parameter_type_id = c.parameter_type_id
                    AND B.PARAMETER_TYPE_ID = C.PARAMETER_TYPE_ID
                      AND C.PARAMETER_TYPE = 'MS_QSM_Performance_Configuration')
         LOOP
            g_tbl_config_params(x.parameter_name) := x.parameter_value;
         END LOOP;
      END IF;

   END;

   PROCEDURE reorder_instance_rec_no (p_src IN OUT NOCOPY XMLTYPE)
   IS
      CURSOR upd_inst
      IS
                     SELECT instance_rec_num
                       FROM XMLTABLE (xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/*/msa:row'
                                      PASSING p_src
                                      COLUMNS instance_rec_num   NUMBER PATH 'msa:instance_rec_num')
                   ORDER BY instance_rec_num ASC;

      l_row_count   NUMBER;
      l_max_inst    NUMBER;
      l_new_inst    NUMBER := 0;
      l_out_xml     XMLTYPE;
      i             PLS_INTEGER := 1;
   BEGIN
      l_out_xml := p_src;

                  SELECT MAX (instance_rec_num), COUNT (instance_rec_num)
                    INTO l_max_inst, l_row_count
                    FROM XMLTABLE (xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/*/msa:row'
                                   PASSING p_src
                                   COLUMNS instance_rec_num   NUMBER PATH 'msa:instance_rec_num');

      IF l_max_inst <> l_row_count
      THEN
         l_new_inst := 1;

         FOR c_rec IN upd_inst
         LOOP
            SELECT UPDATEXML (l_out_xml,
                              'datapacket/data/*/row[instance_rec_num="' || c_rec.instance_rec_num || '"]/instance_rec_num/text()',
                              l_new_inst,
                              g_namespace)
              INTO l_out_xml
              FROM DUAL;


            l_new_inst := l_new_inst + 1;
         END LOOP;
      END IF;

      p_src := l_out_xml;
   EXCEPTION
      WHEN OTHERS
      THEN
         NULL;
   END reorder_instance_rec_no;

   FUNCTION get_status (p_current_stage VARCHAR2 , p_previous_stage VARCHAR2, p_action_id VARCHAR2)
      RETURN VARCHAR2
   AS
      lv_status   VARCHAR2 (30);
   BEGIN
      SELECT a.status
        INTO lv_status
        from ms_qsm_stage_action_mapping a
       where current_stage = p_current_stage and previous_stage = p_previous_stage and action_id = p_action_id;

      ms_qsm_log_activity('','STATUS:'||lv_status||':'||p_current_stage||':'||p_previous_stage||':'||p_action_id,'');

      RETURN lv_status;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         lv_status := '';
         RETURN lv_status;
      WHEN TOO_MANY_ROWS
      THEN
         lv_status := '';
         RETURN lv_status;
   END get_status;

   PROCEDURE update_xml_clob (p_src       IN OUT NOCOPY XMLTYPE,
                              p_path                    VARCHAR2,
                              p_update                  CLOB,
                              p_namespc                 VARCHAR2 DEFAULT g_namespace)
   IS
      l_error_handle_id   NUMBER := 99;
      l_error_seq         NUMBER := 99;
      l_ret               XMLTYPE;
      l_start_tag         VARCHAR2 (100) := '<msa:$TAG  xmlns:msa="http://www.metricstream.com/appstudio/msa">';
      l_end_tag           VARCHAR2 (100) := '</msa:$TAG>';
      l_tag               VARCHAR2 (100);
      l_final_update      CLOB;
   BEGIN
      ms_qsm_log_activity ('', 'B4update CLOB' || '~' || p_path || '~' || SUBSTR (p_update, 1, 1000), p_src.getclobval ());

      IF NULLIF (LENGTH (p_update), 0) IS NOT NULL
      THEN
         WITH temp AS (SELECT COLUMN_VALUE tag, ROWNUM rnum FROM TABLE (ms_apps_utilities.split_string (p_path, '/')))
         SELECT tag
           INTO l_tag
           FROM temp
          WHERE rnum = (SELECT MAX (rnum) FROM temp);

         l_start_tag := REPLACE (l_start_tag, '$TAG', l_tag);
         l_end_tag := REPLACE (l_end_tag, '$TAG', l_tag);
         l_final_update := l_start_tag;
         DBMS_LOB.append (l_final_update, p_update);
         DBMS_LOB.append (l_final_update, l_end_tag);
         ms_qsm_log_activity ('', 'Final Update', l_final_update);


         SELECT UPDATEXML (p_src,
                           p_path,
                           xmltype (l_final_update),
                           p_namespc)
           INTO l_ret
           FROM DUAL;

         p_src := l_ret;
         ms_qsm_log_activity ('', 'B4update CLOB 2' || '~' || p_path || '~' || SUBSTR (p_update, 1, 1000), p_src.getclobval ());
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         ms_qsm_log_activity ('', 'error' || DBMS_UTILITY.format_error_backtrace || ':' || SQLERRM, '');
         ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => l_error_handle_id,
                                            pn_error_sequence    => l_error_seq,
                                            pc_error_type        => 'E',
                                            pc_error_text        => 'Error in Update XML CLOB :' || DBMS_UTILITY.format_error_backtrace || ':' || SQLERRM);
   END;

   PROCEDURE update_xml (p_src       IN OUT NOCOPY XMLTYPE,
                         p_path                    VARCHAR2,
                         p_update                  XMLTYPE,
                         p_namespc                 VARCHAR2 DEFAULT g_namespace)
   IS
      l_ret               XMLTYPE;
      l_error_handle_id   NUMBER := 99;
      l_error_seq         NUMBER := 99;
   BEGIN
      ms_qsm_log_activity ('', 'B4updateXMLTYPETEMPLATE' || '~' || p_path || '~' || SUBSTR (p_update.getclobval (), 1, 1000), p_src.getclobval ());

      SELECT UPDATEXML (p_src,
                        p_path,
                        p_update,
                        p_namespc)
        INTO l_ret
        FROM DUAL;

      p_src := l_ret;
      ms_qsm_log_activity ('', 'updateXMLTEYPTEMPLATE' || '~' || p_path || '~' || SUBSTR (p_update.getclobval (), 1, 1000), l_ret.getclobval ());
   EXCEPTION
      WHEN OTHERS
      THEN
         ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => l_error_handle_id,
                                            pn_error_sequence    => l_error_seq,
                                            pc_error_type        => 'E',
                                            pc_error_text        => 'Error in Update XML :' || DBMS_UTILITY.format_error_backtrace || ':' || SQLERRM);
   END update_xml;

   PROCEDURE update_xml (p_src       IN OUT NOCOPY XMLTYPE,
                         p_path                    VARCHAR2,
                         p_update                  VARCHAR2,
                         p_namespc                 VARCHAR2 DEFAULT g_namespace)
   IS
      l_ret                XMLTYPE;
      l_tag                VARCHAR2 (100);
      l_error_handle_id    NUMBER := 99;
      l_error_seq          NUMBER := 99;
      l_local_ret_update   VARCHAR2 (32767);
   BEGIN
      ms_qsm_log_activity ('', 'B4updateXMLTEMPLATE' || '~' || p_path || '~' || SUBSTR (p_update, 1, 1000), p_src.getclobval ());

      SELECT UPDATEXML (p_src,
                        p_path,
                        DBMS_XMLGEN.CONVERT(p_update),
                        p_namespc)
        INTO l_ret
        FROM DUAL;

       begin
           SELECT EXTRACTVALUE (l_ret, p_path, p_namespc) INTO l_local_ret_update FROM DUAL;

       exception
        when others then
                 WITH temp AS (SELECT COLUMN_VALUE tag, ROWNUM rnum FROM TABLE (ms_apps_utilities.split_string ( (SUBSTR (p_path, 1, (LENGTH (p_path) - 7))), '/')))
             SELECT tag
               INTO l_tag
               FROM temp
              WHERE rnum = (SELECT MAX (rnum)-1 FROM temp);

              SELECT EXTRACTVALUE (l_ret, REPLACE(p_path,l_tag,l_tag||'[1]'), p_namespc) INTO l_local_ret_update FROM DUAL;

       end;

      ms_qsm_log_activity ('', 'B4updateXMLTEMPLATE' || l_local_ret_update || '~' || SUBSTR (p_update, 1, 1000), '');

      IF NVL (DBMS_XMLGEN.CONVERT(l_local_ret_update,1), '$$') <> NVL (p_update, '##')
      THEN
         WITH temp AS (SELECT COLUMN_VALUE tag, ROWNUM rnum FROM TABLE (ms_apps_utilities.split_string ( (SUBSTR (p_path, 1, (LENGTH (p_path) - 7))), '/')))
         SELECT tag
           INTO l_tag
           FROM temp
          WHERE rnum = (SELECT MAX (rnum) FROM temp);

         update_xml (l_ret,
                     SUBSTR (p_path, 1, (LENGTH (p_path) - 7)),
                     xmltype ('<msa:' || l_tag || ' xmlns:msa="http://www.metricstream.com/appstudio/msa">' || DBMS_XMLGEN.CONVERT(p_update) || '</msa:' || l_tag || '>'));
      END IF;

      p_src := l_ret;
      ms_qsm_log_activity ('', 'updateXMLTEMPLATE' || '~' || p_path || '~' || SUBSTR (p_update, 1, 1000), l_ret.getclobval ());
   EXCEPTION
      WHEN OTHERS
      THEN
         -- ms_qsm_log_activity ('', 'Error in Update XML' || '~' || p_path || '~' || SUBSTR (p_update, 1, 1000), l_ret.getclobval ());
         ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => l_error_handle_id,
                                            pn_error_sequence    => l_error_seq,
                                            pc_error_type        => 'E',
                                            pc_error_text        => 'Error in Update XML :'||p_path|| DBMS_UTILITY.format_error_backtrace || ':' || SQLERRM);
   END update_xml;



--   PROCEDURE generate_issue_id (p_src IN OUT NOCOPY XMLTYPE)
--   IS
--      l_error_handle_id   NUMBER := 99;
--      l_error_seq         NUMBER := 99;
--   BEGIN
--      update_xml (p_src, 'datapacket/data/nonmultirow/issue_id/text()', 'ISSUE - ' || ms_ism_issue_id_s.NEXTVAL);
--   EXCEPTION
--      WHEN OTHERS
--      THEN
--         ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => l_error_handle_id,
--                                            pn_error_sequence    => l_error_seq,
--                                            pc_error_type        => 'E',
--                                            pc_error_text        => 'Error in generate issue id :' || DBMS_UTILITY.format_error_backtrace || ':' || SQLERRM);
--   END generate_issue_id;

   PROCEDURE generate_questionnaire_id (p_src IN OUT NOCOPY XMLTYPE)
   IS
      l_error_handle_id   NUMBER := 99;
      l_error_seq            NUMBER := 99;
      l_internal_questnr_id                 VARCHAR2(255);
      l_que_id                                  VARCHAR2(255);

   BEGIN

      l_internal_questnr_id :=  'Questionnaire-' || ms_qsm_questnr_id_s.NEXTVAL;

      update_xml (p_src, 'datapacket/data/nonmultirow/internal_questnr_id/text()',l_internal_questnr_id);

      update_xml (p_src, 'datapacket/data/nonmultirow/rel_source_object_id/text()',l_internal_questnr_id);

      update_xml (p_src,  'datapacket/data/sec/row/section_questnr_fk/text()',l_internal_questnr_id);

      update_xml (p_src, 'datapacket/data/grd/row/grd_questnr_fk/text()', l_internal_questnr_id);

      l_que_id:=get_tag_value(p_src, 'datapacket/data/nonmultirow/que_id/text()',g_namespace);


      IF TRIM(l_que_id) IS NULL THEN

          update_xml (p_src, 'datapacket/data/nonmultirow/que_id/text()', l_internal_questnr_id);

      END IF;


   EXCEPTION
      WHEN OTHERS
      THEN
         ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => l_error_handle_id,
                                            pn_error_sequence    => l_error_seq,
                                            pc_error_type        => 'E',
                                            pc_error_text        => 'Error in generate issue id :' || DBMS_UTILITY.format_error_backtrace || ':' || SQLERRM);
   END generate_questionnaire_id;

   PROCEDURE generate_section_id (p_src IN OUT NOCOPY XMLTYPE)
   IS
      l_row_counter   NUMBER := 1;
      l_inner_row_counter NUMBER;
      l_js_sec_id       VARCHAR2(255):='';
      l_section_id_pk   VARCHAR2(255);
      l_questionnaire_id VARCHAR2(255);
      l_new_version     VARCHAR2(10);
      l_previous_stage  VARCHAR2(100);
      l_current_stage VARCHAR2(100);
   BEGIN

        l_new_version := get_tag_value(p_src, 'datapacket/data/nonmultirow/new_version/text()',g_namespace);
        l_previous_stage := get_tag_value(p_src, 'datapacket/data/nonmultirow/previous_stage/text()',g_namespace);
        l_current_stage := get_tag_value(p_src, 'datapacket/data/nonmultirow/dd_current_stage/text()',g_namespace);

      FOR sec_rec
         IN ( SELECT section_id_pk,instance_rec_num,section_questnr_fk
                    FROM XMLTABLE (
                             xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:sec/msa:row'
                             PASSING p_src
                            COLUMNS section_id_pk    VARCHAR2 (100) PATH 'msa:section_id_pk',
                            instance_rec_num    NUMBER  PATH 'msa:instance_rec_num',
                            section_questnr_fk VARCHAR2(255) PATH  'msa:section_questnr_fk' )
                            WHERE SUBSTR(section_id_pk,1,3)='SCN'
                           -- OR section_id_pk IS NULL
                            or (l_new_version ='yes' and  l_previous_stage='PUB_QST' and  l_current_stage='CR_ED_QST')
                            order by instance_rec_num
                             )
      LOOP

--            IF SUBSTR(sec_rec.section_id_pk,1,3)='SCN' OR sec_rec.section_id_pk IS NULL OR (l_new_version ='yes' and  l_previous_stage='PUB_QST' AND  l_current_stage='CR_ED_QST') THEN

                l_js_sec_id := sec_rec.section_id_pk;

                l_section_id_pk :='SECTION-' ||ms_qsm_section_id_s.NEXTVAL;

                IF trim(sec_rec.section_questnr_fk) IS NULL THEN
                    l_questionnaire_id := get_tag_value(p_src, 'datapacket/data/nonmultirow/internal_questnr_id/text()',g_namespace);
                    update_xml (p_src, 'datapacket/data/sec/row[instance_rec_num =' || sec_rec.instance_rec_num|| ']/section_questnr_fk/text()',  l_questionnaire_id);
                END IF;

                update_xml (p_src, 'datapacket/data/sec/row[instance_rec_num =' || sec_rec.instance_rec_num|| ']/section_id_pk/text()',  l_section_id_pk);

                update_xml (p_src, 'datapacket/data/sec/row[section_section_id =''' ||l_js_sec_id||''']/section_section_id/text()', l_section_id_pk);

                update_xml (p_src, 'datapacket/data/qst/row[qst_section_fk=''' ||l_js_sec_id||''']/qst_section_fk/text()', l_section_id_pk);
                update_xml (p_src, 'datapacket/data/qst/row[qst_section_id=''' ||l_js_sec_id||''']/qst_section_id/text()', l_section_id_pk);


--            END IF;
      END LOOP;
   END;

  PROCEDURE generate_grade_id (p_src IN OUT NOCOPY XMLTYPE)
   IS
        l_row_counter   NUMBER := 1;
        l_questionnaire_id    VARCHAR2(255);
        l_new_version     VARCHAR2(10);
        l_previous_stage  VARCHAR2(100);
        l_current_stage VARCHAR2(100);

   BEGIN
        l_new_version := get_tag_value(p_src, 'datapacket/data/nonmultirow/new_version/text()',g_namespace);
        l_previous_stage := get_tag_value(p_src, 'datapacket/data/nonmultirow/previous_stage/text()',g_namespace);
        l_current_stage := get_tag_value(p_src, 'datapacket/data/nonmultirow/dd_current_stage/text()',g_namespace);

      FOR grd_rec
         IN (            SELECT grd_scoring_pk,instance_rec_num,grd_questnr_fk
                           FROM XMLTABLE (
                                   xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:grd/msa:row'
                                   PASSING p_src
                                   COLUMNS grd_scoring_pk    VARCHAR2 (100) PATH 'msa:grd_scoring_pk' ,
                                                  instance_rec_num NUMBER  PATH 'msa:instance_rec_num',
                                                  grd_questnr_fk    VARCHAR2(255) PATH 'msa:grd_questnr_fk')
                                  WHERE -- grd_scoring_pk IS NULL OR
                                   substr(grd_scoring_pk,1,3)='GRD' or (l_new_version ='yes' and  l_previous_stage='PUB_QST' and  l_current_stage='CR_ED_QST')
                                   order by instance_rec_num
                                   )
      LOOP

--            IF grd_rec. grd_scoring_pk IS NULL OR  SUBSTR(grd_rec.grd_scoring_pk,1,3)='GRD' OR (l_new_version ='yes' and  l_previous_stage='PUB_QST' AND  l_current_stage='CR_ED_QST') THEN

                update_xml (p_src, 'datapacket/data/grd/row[instance_rec_num='||grd_rec.instance_rec_num ||']/grd_scoring_pk/text()', 'GRADE-' || ms_qsm_grade_id_s.NEXTVAL);

                IF trim(grd_rec.grd_questnr_fk) IS NULL THEN
                    l_questionnaire_id := get_tag_value(p_src, 'datapacket/data/nonmultirow/internal_questnr_id/text()',g_namespace);
                    update_xml (p_src, 'datapacket/data/grd/row[instance_rec_num =' || grd_rec.instance_rec_num|| ']/grd_questnr_fk/text()',  l_questionnaire_id);
                END IF;
--            END IF;
         --   l_row_counter := l_row_counter + 1;

      END LOOP;
   END;


  PROCEDURE generate_question_id (p_src IN OUT NOCOPY XMLTYPE)
   IS
        l_row_counter   NUMBER := 1;
        l_inner_row_counter NUMBER;
        l_js_qst_id       VARCHAR2(255):='';
        l_qst_id_pk   VARCHAR2(255);
        l_new_version     VARCHAR2(10);
        l_previous_stage  VARCHAR2(100);
        l_current_stage VARCHAR2(100);
   BEGIN

        l_new_version := get_tag_value(p_src, 'datapacket/data/nonmultirow/new_version/text()',g_namespace);
        l_previous_stage := get_tag_value(p_src, 'datapacket/data/nonmultirow/previous_stage/text()',g_namespace);
        l_current_stage := get_tag_value(p_src, 'datapacket/data/nonmultirow/dd_current_stage/text()',g_namespace);

      FOR qst_rec
         IN ( SELECT qst_id_pk,instance_rec_num,qst_id
                    FROM XMLTABLE (
                             xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:qst/msa:row'
                             PASSING p_src
                            COLUMNS qst_id_pk    VARCHAR2 (100) PATH 'msa:qst_id_pk',
                                           instance_rec_num NUMBER  PATH 'msa:instance_rec_num',
                                           qst_id VARCHAR2(255) PATH 'msa:qst_id' )
                            WHERE SUBSTR(qst_id_pk,1,3)='QST'
                            --OR qst_id_pk IS NULL
                             OR   (l_new_version ='yes' and  l_previous_stage='PUB_QST' AND  l_current_stage='CR_ED_QST')
                              order by instance_rec_num
                            )
      LOOP
--            IF SUBSTR(qst_rec.qst_id_pk,1,3)='QST' OR qst_rec.qst_id_pk IS NULL  OR   (l_new_version ='yes' and  l_previous_stage='PUB_QST' AND  l_current_stage='CR_ED_QST') THEN
              if  qst_rec.qst_id_pk is not null then  -- added by gaurav to generate id only for the rows which was added by user, otherwise will not generate and will not validate at js level (bug# 71976) - Start
                l_js_qst_id := qst_rec.qst_id_pk;

                l_qst_id_pk :='QUESTION-' ||ms_qsm_question_id_s.NEXTVAL;

                update_xml (p_src, 'datapacket/data/qst/row[instance_rec_num=' || qst_rec.instance_rec_num || ']/qst_id_pk/text()',  l_qst_id_pk);

                IF TRIM(qst_rec.qst_id) IS NULL THEN
                    update_xml (p_src, 'datapacket/data/qst/row[instance_rec_num=' || qst_rec.instance_rec_num || ']/qst_id/text()',  l_qst_id_pk);
                END IF;
                update_xml (p_src, 'datapacket/data/qst/row[qst_section_fk=''' ||l_js_qst_id|| ''']/qst_section_fk/text()', l_qst_id_pk);

--                l_inner_row_counter :=  1;

                update_xml (p_src, 'datapacket/data/scr/row[scr_qst_fk=''' || l_js_qst_id ||''']/scr_qst_fk/text()', l_qst_id_pk);

--                l_row_counter := l_row_counter + 1;
              END IF;
--            END IF;
      END LOOP;
   END;


 PROCEDURE generate_scoring_id (p_src IN OUT NOCOPY XMLTYPE)
   IS
        l_row_counter   NUMBER := 1;
        l_new_version     VARCHAR2(10);
        l_previous_stage  VARCHAR2(100);
        l_current_stage VARCHAR2(100);
   BEGIN

        l_new_version := get_tag_value(p_src, 'datapacket/data/nonmultirow/new_version/text()',g_namespace);
        l_previous_stage := get_tag_value(p_src, 'datapacket/data/nonmultirow/previous_stage/text()',g_namespace);
        l_current_stage := get_tag_value(p_src, 'datapacket/data/nonmultirow/dd_current_stage/text()',g_namespace);

      FOR scr_rec
         IN (            SELECT scr_id_pk,instance_rec_num
                           FROM XMLTABLE (
                                   xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:scr/msa:row'
                                   PASSING p_src
                                   COLUMNS scr_id_pk    VARCHAR2 (100) PATH 'msa:scr_id_pk',
                                                  instance_rec_num NUMBER PATH 'msa:instance_rec_num' )
                                   WHERE
                                   --scr_id_pk IS NULL OR
                                   substr(scr_id_pk,1,3)='SCR'  or  (l_new_version ='yes' and  l_previous_stage='PUB_QST' and  l_current_stage='CR_ED_QST')
                                   order by instance_rec_num
                                   )
      LOOP
--            IF scr_rec.scr_id_pk IS NULL OR SUBSTR(scr_rec.scr_id_pk,1,3)='SCR'  OR  (l_new_version ='yes' and  l_previous_stage='PUB_QST' AND  l_current_stage='CR_ED_QST') THEN
                IF scr_rec.scr_id_pk IS NOT NULL THEN -- added by gaurav to generate id only for the rows which was added by user, otherwise will not generate and will not validate at js level (bug# 71976) - Start
                    update_xml (p_src, 'datapacket/data/scr/row[instance_rec_num=' || scr_rec.instance_rec_num || ']/scr_id_pk/text()', 'SCORING-' || ms_qsm_scoring_id_s.NEXTVAL);
                    l_row_counter := l_row_counter + 1;
                END IF;
--            END IF;
      END LOOP;
   END;



   PROCEDURE delete_empty_multirows (p_data IN OUT NOCOPY XMLTYPE, p_multirow VARCHAR2, p_multirow_key VARCHAR2)
   IS
      l_multirow_nodelist   DBMS_XMLDOM.domnodelist;
      l_multirow_node       DBMS_XMLDOM.domnode;
      l_error_handle_id     NUMBER := 99;
      l_error_seq           NUMBER := 99;
   BEGIN
      l_multirow_nodelist := DBMS_XSLPROCESSOR.selectnodes (DBMS_XMLDOM.makenode (pkg_doc), '/datapacket/data/' || p_multirow || '/row', g_namespace);

      --      ms_qsm_log_activity ('', 'inside Del Multirow~' || DBMS_XMLDOM.getlength (l_multirow_nodelist), '');
      --      ms_qsm_log_activity ('', 'inside Del~' || p_multirow, p_data.getclobval ());
      --      ms_qsm_log_activity ('', 'inside Del~' || p_multirow_key, p_data.getclobval ());

      IF DBMS_XMLDOM.getlength (l_multirow_nodelist) = 1
      THEN
         l_multirow_node := DBMS_XMLDOM.item (l_multirow_nodelist, 0);

         -- ms_qsm_log_activity ('', 'inside Del Multirow~' ||p_multirow||'~'||p_multirow_key||'~' ||NVL ( (DBMS_XSLPROCESSOR.valueof (l_multirow_node,p_multirow_key, g_namespace)), 'null'),'');
         --ms_qsm_log_activity ('', 'inside Del Multirow~' ||p_multirow||'~'||p_multirow_key||'~' ||NVL ( DBMS_XSLPROCESSOR.valueof (l_multirow_node,'msa:action_title'), 'null'),'');
         --         ms_qsm_log_activity ('', 'inside Del COND~' || p_multirow, p_data.getclobval ());
         --         ms_qsm_log_activity ('', 'inside Del COND~' || p_multirow_key, p_data.getclobval ());
         --         ms_qsm_log_activity ('','iside Del COND~' || NVL (TRIM (DBMS_XSLPROCESSOR.valueof (l_multirow_node, p_multirow_key, g_namespace)), 'NULL'), '');

         IF (TRIM (DBMS_XSLPROCESSOR.valueof (l_multirow_node, p_multirow_key, g_namespace)) IS NULL)
         THEN
            SELECT DELETEXML (p_data, 'datapacket/data/' || p_multirow, g_namespace) INTO p_data FROM DUAL;
         --            ms_qsm_log_activity ('', 'inside Deleted~' || p_multirow, p_data.getclobval ());
         --            ms_qsm_log_activity ('', 'inside Del deleted~' || p_multirow_key, p_data.getclobval ());
         END IF;
      ELSIF DBMS_XMLDOM.getlength (l_multirow_nodelist) < 1
      THEN
         SELECT DELETEXML (p_data, 'datapacket/data/' || p_multirow, g_namespace) INTO p_data FROM DUAL;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         ms_apps_mdf_errors_pkg.
         insert_log (pn_error_handle_id   => l_error_handle_id,
                     pn_error_sequence    => l_error_seq,
                     pc_error_type        => 'E',
                     pc_error_text        => 'Error IN delete_empty_multirows :' || DBMS_UTILITY.format_error_backtrace || ':' || SQLERRM);
   END;

   PROCEDURE update_inout_data (p_out_xml       IN OUT NOCOPY XMLTYPE,
                                p_in_data       IN OUT NOCOPY CLOB,
                                p_out_data      IN OUT NOCOPY CLOB,
                                p_only_indata                 VARCHAR2 DEFAULT 'N')
   IS
   BEGIN
      IF p_only_indata = 'N'
      THEN
         SELECT XMLSERIALIZE (CONTENT p_out_xml) AS CLOB, XMLSERIALIZE (CONTENT p_out_xml) AS CLOB
           INTO p_in_data, p_out_data
           FROM DUAL;
      ELSIF p_only_indata = 'Y'
      THEN
         SELECT XMLSERIALIZE (CONTENT p_out_xml) AS CLOB INTO p_in_data FROM DUAL;
      END IF;
   END;

   PROCEDURE process_multirow (p_src             IN OUT NOCOPY XMLTYPE,
                               p_multirows                     VARCHAR2,
                               p_multirow_keys                 VARCHAR2,
                               p_frm_migration                 VARCHAR2 DEFAULT 'N',
                               p_update                        VARCHAR2 DEFAULT NULL)
   IS
      l_issue_action_id   VARCHAR2 (100);
      l_action_title      VARCHAR2 (4000);
      l_ret               XMLTYPE;
      l_error_handle_id   NUMBER := 99;
      l_error_seq         NUMBER := 99;
      l_inst_rec_num      NUMBER := 2;
      l_src_clob          CLOB;
   BEGIN
      --l_ret       := p_src;
      -- ms_qsm_log_activity ('', 'calling Clean multirow', '');
      SELECT XMLSERIALIZE (CONTENT p_src) AS CLOB INTO l_src_clob FROM DUAL;

      pkg_doc := getdocument (l_src_clob);


      FOR x IN (WITH a AS (SELECT ROWNUM rnum, COLUMN_VALUE multirow_key FROM TABLE (ms_apps_utilities.split_string (p_multirow_keys, ',')))
                SELECT a.multirow_key, b.multirow
                  FROM a, (SELECT ROWNUM rnum, COLUMN_VALUE multirow FROM TABLE (ms_apps_utilities.split_string (p_multirows, ','))) b
                 WHERE a.rnum = b.rnum)
      LOOP
         --ms_qsm_log_activity ('', 'Calling Delete Multirow', '');
         delete_empty_multirows (p_src, x.multirow, x.multirow_key);
      END LOOP;

      --ms_qsm_log_activity ('', 'b4 Reorder instance id ', p_src.getclobval ());
      reorder_instance_rec_no (p_src);
   -- ms_qsm_log_activity ('', 'after Reorder instance id ', p_src.getclobval ());
   EXCEPTION
      WHEN OTHERS
      THEN
         ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => l_error_handle_id,
                                            pn_error_sequence    => l_error_seq,
                                            pc_error_type        => 'E',
                                            pc_error_text        => 'Error  update_multirow :' || DBMS_UTILITY.format_error_backtrace || ':' || SQLERRM);
   END;

--   PROCEDURE generate_action_id (p_src IN OUT NOCOPY XMLTYPE)
--   IS
--      l_row_counter   NUMBER := 1;
--   BEGIN
--      FOR iap_rec
--         IN (            SELECT issue_action_id, action_title, instance_rec_num
--                           FROM XMLTABLE (
--                                   xmlnamespaces ('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:iap/msa:row'
--                                   PASSING p_src
--                                   COLUMNS issue_action_id    VARCHAR2 (100) PATH 'msa:issue_action_id',
--                                           action_title       VARCHAR2 (4000) PATH 'msa:action_title',
--                                           instance_rec_num   NUMBER PATH 'msa:instance_rec_num'))
--      LOOP
--         ms_qsm_log_activity ('', 'updating action ids~' || iap_rec.action_title || '~' || iap_rec.issue_action_id, '');
--
--         IF (iap_rec.issue_action_id IS NULL OR iap_rec.issue_action_id = '0') AND iap_rec.action_title IS NOT NULL
--         THEN
--            ms_qsm_log_activity ('', 'updating action ids~' || l_row_counter || '~' || iap_rec.instance_rec_num, '');
--            update_xml (p_src, 'datapacket/data/iap/row[' || l_row_counter || ']/issue_action_id/text()', 'ACTION - ' || ms_ism_action_id_s.NEXTVAL);
--            update_xml (p_src, 'datapacket/data/nonmultirow/action_exist/text()', 'Y');
--            l_row_counter := l_row_counter + 1;
--         END IF;
--      END LOOP;
--   END;

   FUNCTION getdocument (p_data CLOB)
      RETURN DBMS_XMLDOM.domdocument
   IS
      l_parser   DBMS_XMLPARSER.parser;
   BEGIN
      l_parser := DBMS_XMLPARSER.newparser;
      DBMS_XMLPARSER.parseclob (l_parser, p_data);
      RETURN DBMS_XMLPARSER.getdocument (l_parser);
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
   END;

   PROCEDURE pr_update_ts (p_action_id VARCHAR2)
   IS
      l_issue_metric_id   si_metrics_t.metric_id%TYPE;
      l_error_handle_id   NUMBER := 999;
      l_error_sequence    NUMBER := 999;
   BEGIN
      IF NOT (g_tbl_metric_maintenance.COUNT > 0)
      THEN
         initialize_metric_maint ('ISM');
      END IF;

      l_issue_metric_id := ms_apps_utilities.get_infolet_id (ms_qsm_utilities.g_tbl_metric_maintenance ('ISSUE'));

      EXECUTE IMMEDIATE q'#update si_#' || l_issue_metric_id || q'#_ts set action_state = 'CLOSED' WHERE ISSUE_ACTION_ID = '#' || p_action_id || q'#'#';
   EXCEPTION
      WHEN OTHERS
      THEN
         ms_apps_mdf_errors_pkg.
         insert_log (pn_error_handle_id   => l_error_handle_id,
                     pn_error_sequence    => l_error_sequence,
                     pc_error_type        => 'ERROR',
                     pc_error_text        => 'Problem Updating the CLOSED Staus in ts' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
   END;

   FUNCTION get_infolet_id (p_metric_name IN VARCHAR2)
      RETURN NUMBER
   IS
      l_infolet_id   NUMBER;
   BEGIN
      IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0)
      THEN
         ms_qsm_utilities.initialize_metric_maint ('QSM');
      END IF;

      l_infolet_id := ms_apps_utilities.get_infolet_id (ms_qsm_utilities.g_tbl_metric_maintenance (p_metric_name));

      RETURN l_infolet_id;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
   END get_infolet_id;

   FUNCTION get_flow_code (p_flow_name IN VARCHAR2)
      RETURN VARCHAR2
   IS
      l_flow_code         ms_apps_mdf_flow_xml.flow_code%TYPE;
      l_error_handle_id   NUMBER := 999;
      l_error_sequence    NUMBER := 999;
   BEGIN
      SELECT flow_code
        INTO l_flow_code
        FROM ms_apps_mdf_flow_xml
       WHERE flow_name = p_flow_name AND ready_flag = 'Y';

      RETURN l_flow_code;
   EXCEPTION
      WHEN OTHERS
      THEN
         ms_apps_mdf_errors_pkg.
         insert_log (pn_error_handle_id   => l_error_handle_id,
                     pn_error_sequence    => l_error_sequence,
                     pc_error_type        => 'ERROR',
                     pc_error_text        => 'Fatal Error In Obtaining Flow Code ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
         RETURN NULL;
   END;

FUNCTION GET_FORM_URL
        (
            ip_push_infolet_name                   IN     VARCHAR2,
            ip_process_instance_id            IN     NUMBER,
            ip_instance_id                    IN     NUMBER,
            ip_edit_flag                      IN     VARCHAR2,
            ip_hyper_text                     IN     VARCHAR2     DEFAULT NULL
        )
    RETURN VARCHAR2 AS
        lv_return_url   VARCHAR2 (1000);
        lv_metric_id number;
    BEGIN

       select metric_id
       into lv_metric_id
       from si_metrics_T where metric_name=ip_push_infolet_name
       and metric_run_mode=3
       and metric_type=10;
        --This generates URL for editing report output data.
      /*  IF ip_hyper_text IS NULL THEN
            lv_return_url :=
                '<a target="_self" href="javascript:callreportdetails(''Pushinfolet'||CHR(63)||'id='
                    || lv_metric_id
                    || CHR (38)
                    || 'proc='
                    || ip_process_instance_id
                    || CHR(38)
                    || 'instid='
                    || ip_instance_id
                    || CHR(38)
                    || 'edit_flag='
                    || ip_edit_flag
                    || CHR (38)
                    || 'flag=1'
                    || CHR (38)
                    || 'emd=1'')"><img border="0" src="/images/icons/pencil.png"></a>';
        ELSE
            lv_return_url :=
                '<a target="_self" href="javascript:callreportdetails(''Pushinfolet'||CHR(63)||'id='
                    || lv_metric_id
                    || CHR (38)
                    || 'proc='
                    || ip_process_instance_id
                    || CHR(38)
                    || 'instid='
                    || ip_instance_id
                    || CHR(38)
                    || 'edit_flag='
                    || ip_edit_flag
                    || CHR (38)
                    || 'flag=1'
                    || CHR (38)
                    || 'emd=1'')">'
                    || ip_hyper_text
                    || '</a>';
        END IF; */
         IF ip_hyper_text IS NULL THEN
                lv_return_url := '<a target="_blank" href="Fastform'
                                 ||CHR(63)
                                 ||'id='
                                 || lv_metric_id
                                 || CHR (38)
                                 || 'proc='
                                 || ip_process_instance_id
                                 || chr (38)
                                 || 'instid='
                                 ||ip_instance_id
                                 || CHR (38)
                                 || 'edit_flag='
                                 || ip_edit_flag
                                 || CHR (38)
                                 || 'flag=1'
                                 || CHR (38)
                                 || 'wrapper=no'
                                 || CHR (38)
                                 || 'emd=3")><img border="0" src="/images/icons/pencil.png"></a>';

         ELSE
             lv_return_url := '<a target="_blank" href="Fastform'
                                 ||CHR(63)
                                 ||'id='
                                 || lv_metric_id
                                 || CHR (38)
                                 || 'proc='
                                 || ip_process_instance_id
                                 || chr (38)
                                 || 'instid='
                                 ||ip_instance_id
                                 || CHR (38)
                                 || 'edit_flag='
                                 || ip_edit_flag
                                 || CHR (38)
                                 || 'flag=1'
                                 || CHR (38)
                                 || 'wrapper=no'
                                 || CHR (38)
                                 || 'emd=3")>'
                                 || ip_hyper_text
                                 || '</a>';
         END IF;
        RETURN lv_return_url;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END GET_FORM_URL;

   PROCEDURE insert_schedule_logs (i_request_id                     IN          VARCHAR2,
                                                      i_respondents                  IN          CLOB,
                                                      i_log_level                       IN          VARCHAR2, -- H - Header , D- Detailed
                                                      i_sequence_no                 IN          NUMBER DEFAULT 1,
                                                      i_process_instance_id       IN          NUMBER DEFAULT NULL,
                                                      i_questionnaire_id            IN          VARCHAR2 DEFAULT NULL,
                                                      i_sch_frequency               IN          VARCHAR2 DEFAULT NULL,
                                                      i_status                           IN          VARCHAR2 DEFAULT NULL,
                                                      i_send_to                        IN          VARCHAR2  DEFAULT NULL,-- 1 - All Control Owners , 2- All Process Owners , 3- Roles , 4 - Users
                                                      i_indv_item_pk                 IN          VARCHAR2 DEFAULT NULL,
                                                      i_response_id in varchar2 default null,
                                                      i_iteration_number in varchar2 default null,
                                                      o_error_code                   OUT NOCOPY NUMBER,
                                                      o_error_message             OUT NOCOPY VARCHAR2)

   AS
   l_count      NUMBER;
   l_trigger_count NUMBER;
   BEGIN
      SELECT DECODE(i_sch_frequency,'6',1,0)
      INTO l_trigger_count
      FROM DUAL;

      IF TRIM(i_log_level)  = 'H' THEN

        SELECT COUNT(1)
        INTO l_count
        FROM MS_QSM_SCHEDULER_MASTER
        WHERE SCH_REQ_ID = i_request_id
        AND INDV_ITEM_PK = NVL(i_indv_item_pk,INDV_ITEM_PK);

        IF l_count>0 THEN

            UPDATE MS_QSM_SCHEDULER_MASTER
            SET RESPONDENTS_VAL = i_respondents,
                   QUESTIONNAIRE_ID = i_questionnaire_id
            WHERE SCH_REQ_ID = i_request_id
            AND INDV_ITEM_PK = NVL(i_indv_item_pk,INDV_ITEM_PK);

        ELSE

            INSERT INTO  MS_QSM_SCHEDULER_MASTER
                                (SCH_REQ_ID,RESPONDENTS_VAL,PROCESS_INSTANCE_ID,QUESTIONNAIRE_ID,SCH_FREQUENCY,SEND_TO,SEQUENCE_NO,INDV_ITEM_PK,TRIGGER_COUNT)
            VALUES         (i_request_id,i_respondents,i_process_instance_id,i_questionnaire_id,i_sch_frequency,i_send_to,i_sequence_no,i_indv_item_pk,l_trigger_count);

        END IF;
--           MERGE INTO MS_QSM_SCHEDULER_MASTER a
--           USING (SELECT i_request_id,
--                                  i_respondents,
--                                  i_process_instance_id,
--                                  i_questionnaire_id,
--                                  i_sch_frequency,
--                                  i_send_to,
--                                  i_sequence_no,
--                                  i_indv_item_pk
--                       FROM DUAL) b
--            ON ( b.i_request_id = a.SCH_REQ_ID
--                    AND b.i_indv_item_pk = a.INDV_ITEM_PK)
--            WHEN MATCHED THEN
--                UPDATE SET A.RESPONDENTS_VAL = b.i_respondents,
--                               A.QUESTIONNAIRE_ID = b.i_questionnaire_id
--            WHEN NOT MATCHED THEN
--                INSERT(a.SCH_REQ_ID,a.RESPONDENTS_VAL,a.PROCESS_INSTANCE_ID,a.QUESTIONNAIRE_ID,a.SCH_FREQUENCY,a.SEND_TO,a.SEQUENCE_NO,a.INDV_ITEM_PK)
--                VALUES  (b.i_request_id,b.i_respondents,b.i_process_instance_id,b.i_questionnaire_id,b.i_sch_frequency,b.i_send_to,b.i_sequence_no,b.i_indv_item_pk) ;


      ELSIF TRIM(i_log_level)  = 'D' THEN

         INSERT INTO MS_QSM_SCHEDULER_DETAILS
                            (SCH_REQ_ID,INDIVIUDAL_RESPONDENET,STATUS,SENT_OUT_ON,SEQUENCE_NO,PROCESS_INSTANCE_ID,SCH_ITERATION,QUE_RESPONSE_ID)
         VALUES        (i_request_id,SUBSTR(i_respondents,1,100),i_status,SYSDATE,i_sequence_no,i_process_instance_id,i_iteration_number,i_response_id);
      END IF;

      o_error_code := ms_apps_constants.g_success;

   EXCEPTION
      WHEN OTHERS THEN
         o_error_code := ms_apps_constants.g_error;
         o_error_message := 'Error Occurred while inserting schedule log: ' || SQLCODE || ' - ' || SQLERRM || '~' || DBMS_UTILITY.format_error_backtrace;

         ms_apps_mdf_errors_pkg.
         insert_log (pn_error_handle_id   => o_error_code,
                     pn_error_sequence    => o_error_code,
                     pc_error_type        => 'E',
                     pc_error_text        => 'Error Occurred while inserting schedule log: ' || SQLCODE || ' - ' || SQLERRM || '~' || DBMS_UTILITY.format_error_backtrace);

   END insert_schedule_logs;

   FUNCTION get_applies_to_object_desc (i_object_id IN VARCHAR2,
                                                            i_object_code IN VARCHAR2,
                                                             i_parameter IN VARCHAR2 DEFAULT NULL,
                                                             i_seq IN NUMBER DEFAULT 1)
      RETURN VARCHAR2
   IS
      l_field_key           VARCHAR2(6);
      l_object_desc       VARCHAR2(4000);
      l_error_handle_id   NUMBER := 999;
      l_error_sequence    NUMBER := 999;
   BEGIN

        SELECT B.FIELD_KEY
        INTO l_field_key
        FROM MS_QSM_APPLIES_TO_FLDS b
        where B.OBJECT_SEQ_ID = i_object_id
        AND B.COLUMN_SEQ = i_seq;--1;

        select ms_concat(object_name)
        into l_object_desc
        from table (ms_qsm_stage_parametrs.get_applies_to_details(p_obj_seq_id=> i_object_id,p_field_key=>l_field_key,p_parameter=>i_parameter)) A,
        (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string(i_object_code,','))) B
        where A.object_id=B.COLUMN_VALUE;

      RETURN l_object_desc;
   EXCEPTION
      WHEN OTHERS
      THEN
         ms_apps_mdf_errors_pkg.
         insert_log (pn_error_handle_id   => l_error_handle_id,
                     pn_error_sequence    => l_error_sequence,
                     pc_error_type        => 'ERROR',
                     pc_error_text        => 'Fatal Error In Obtaining Applies to Object Desc'||i_object_id||l_field_key ||i_object_code|| DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
         RETURN NULL;
   END;

 FUNCTION get_applies_to_object_code (i_object_id IN VARCHAR2,
                                                            i_object_desc IN VARCHAR2,
                                                             i_parameter IN VARCHAR2 DEFAULT NULL)
      RETURN VARCHAR2
   IS
      l_field_key           VARCHAR2(6);
      l_object_id       VARCHAR2(4000);
      l_error_handle_id   NUMBER := 999;
      l_error_sequence    NUMBER := 999;
   BEGIN

        SELECT B.FIELD_KEY
        INTO l_field_key
        FROM MS_QSM_APPLIES_TO_FLDS b
        where B.OBJECT_SEQ_ID = i_object_id
        AND B.COLUMN_SEQ = 1;

        select ms_concat(object_id)
        into l_object_id
        from table (ms_qsm_stage_parametrs.get_applies_to_details(p_obj_seq_id=> i_object_id,p_field_key=>l_field_key,p_parameter=>i_parameter)) A,
        (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string(i_object_desc,','))) B
        where A.object_name=B.COLUMN_VALUE;

      RETURN l_object_id;
   EXCEPTION
      WHEN OTHERS
      THEN
         ms_apps_mdf_errors_pkg.
         insert_log (pn_error_handle_id   => l_error_handle_id,
                     pn_error_sequence    => l_error_sequence,
                     pc_error_type        => 'ERROR',
                     pc_error_text        => 'Fatal Error In Obtaining Applies to Object Desc'||i_object_id||l_field_key ||i_object_desc|| DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
         RETURN NULL;
   END;


FUNCTION GET_SAVED_DATA_FOR_REPORT(i_pid_status IN VARCHAR2,
                                                                     i_user_name    IN VARCHAR2)
    RETURN MS_QSM_SAVED_DATA_TABLE
    PIPELINED
    IS PRAGMA AUTONOMOUS_TRANSACTION;

    l_sql_string VARCHAR2(4000);
    ln_pid           NUMBER;
    ln_status       NUMBER;
    l_metric_id NUMBER;
    l_error_handle_id   NUMBER := 999;
    l_error_sequence    NUMBER := 999;

    l_locale_id                    NUMBER;
    l_enterprice_id         NUMBER;

    TYPE ty_saved_data IS RECORD (
            SECTION_NAME VARCHAR2(255),
            QUESTION_TEXT VARCHAR2(4000),
            RESPONSE_TYPE VARCHAR2(100),
            RESPONSE_OPTIONS  VARCHAR2(4000));

   l_saved_data    ty_saved_data;

   TYPE ty_saved_data_tab IS TABLE OF ty_saved_data
                                INDEX BY PLS_INTEGER;

   l_saved_data_tab   ty_saved_data_tab;

    BEGIN
                    SELECT METRIC_ID
                    INTO l_metric_id
                    FROM SI_METRICS_T
                    WHERE METRIC_NAME = (SELECT METRIC_NAME FROM MS_QSM_METRIC_MAINT WHERE GUID='CREQSM' AND IS_ACTIVE='Y');

                    SELECT b.LOCALE_ID,a.ENTERPRISE_ID
                    INTO l_locale_id,l_enterprice_id
                    FROM SI_USERS_T a,SI_LOCALES b
                    WHERE USER_NAME =i_user_name
                    AND a.LOCALE = LOCALE_STRING  ;

                    ln_pid := TO_NUMBER(SUBSTR(i_pid_status,1,(INSTR(i_pid_status,'~',1)-1)));




                    ln_status := SUBSTR(i_pid_status,(INSTR(i_pid_status,'~',1)+1));

                                         l_sql_string := 'select  Section_Name, Question_Text,Response_type,Response_Options
                                            FROM
                                            (SELECT  QST_SECTION_FK,qst_id_pk,process_instance_id,
                                            multirow_region_id,Section_Name,qst_name AS Question_Text,
                                            --ms_qsm_email_parameter.get_lov_display_name (QST_RESPONSE_TYPE)
                                            MS_APPS_UTILITIES.get_display_value('||l_enterprice_id||',''MS_QSM_Response_Type'',QST_RESPONSE_TYPE,1,'||l_locale_id||')
                                            AS Response_type,
                        MS_QSM_EMAIL_PARAMETER.get_response_options(QST_RESPONSE_TYPE,SUBSTR(QST_LIST_OF_VALUES,1,3500)) as Response_Options
                        FROM si_'||l_metric_id||'_vs
                         where Process_instance_id ='||ln_pid||'
                          and instance_id=(SELECT MAX (instance_id) AS instid
                                           FROM si_'||l_metric_id||'_vs where  Process_instance_id ='||ln_pid||')
                         and (qst_id_pk is not null or QST_SECTION_FK is not null)
                    UNION
                         SELECT  QST_SECTION_FK,Section_id_pk,process_instance_id,
                           multirow_region_id,Section_Name,qst_name AS Question_Text,
                           --ms_qsm_email_parameter.get_lov_display_name (QST_RESPONSE_TYPE)
                         MS_APPS_UTILITIES.get_display_value('||l_enterprice_id||',''MS_QSM_Response_Type'',QST_RESPONSE_TYPE,1,'||l_locale_id||')
                              AS Response_type,
                         MS_QSM_EMAIL_PARAMETER.get_response_options (QST_RESPONSE_TYPE,SUBSTR(QST_LIST_OF_VALUES,1,3500)) as Response_Options
                         FROM si_'||l_metric_id||'_vs
                         where Process_instance_id ='||ln_pid||'
                               and instance_id=(SELECT MAX (instance_id) AS instid
                                           FROM si_'||l_metric_id||'_vs where  Process_instance_id ='||ln_pid||')
                         and (Section_id_pk is not null))A
                         start with QST_SECTION_FK is null
                     CONNECT BY PRIOR qst_id_pk =QST_SECTION_FK



--                     l_sql_string := 'select  Section_Name, Question_Text,Response_type,Response_Options
--                                            FROM
--                                            (SELECT  QST_SECTION_FK,qst_id_pk,process_instance_id,
--                                            multirow_region_id,Section_Name,qst_name AS Question_Text,
--                                            --ms_qsm_email_parameter.get_lov_display_name (QST_RESPONSE_TYPE)
--                                            MS_APPS_UTILITIES.get_display_value('||l_enterprice_id||',''MS_QSM_Response_Type'',QST_RESPONSE_TYPE,1,'||l_locale_id||')
--                                            AS Response_type,
--                        MS_QSM_EMAIL_PARAMETER.get_response_options(QST_RESPONSE_TYPE,QST_LIST_OF_VALUES ) as Response_Options
--                        FROM si_'||l_metric_id||'_vs
--                         where Process_instance_id ='||ln_pid||'
--                          and instance_id=(SELECT MAX (instance_id) AS instid
--                                           FROM si_'||l_metric_id||'_vs where  Process_instance_id ='||ln_pid||')
--                         and (qst_id_pk is not null or QST_SECTION_FK is not null)
--                    UNION
--                         SELECT  QST_SECTION_FK,Section_id_pk,process_instance_id,
--                           multirow_region_id,Section_Name,qst_name AS Question_Text,
--                           --ms_qsm_email_parameter.get_lov_display_name (QST_RESPONSE_TYPE)
--                         MS_APPS_UTILITIES.get_display_value('||l_enterprice_id||',''MS_QSM_Response_Type'',QST_RESPONSE_TYPE,1,'||l_locale_id||')
--                              AS Response_type,
--                         MS_QSM_EMAIL_PARAMETER.get_response_options (QST_RESPONSE_TYPE,QST_LIST_OF_VALUES) as Response_Options
--                         FROM si_'||l_metric_id||'_vs
--                         where Process_instance_id ='||ln_pid||'
--                               and instance_id=(SELECT MAX (instance_id) AS instid
--                                           FROM si_'||l_metric_id||'_vs where  Process_instance_id ='||ln_pid||')
--                         and (Section_id_pk is not null))A
--                         start with QST_SECTION_FK is null
--                     CONNECT BY PRIOR qst_id_pk =QST_SECTION_FK
--                     ORDER SIBLINGS BY ROWNUM';

                    EXECUTE IMMEDIATE l_sql_string
                    BULK COLLECT INTO l_saved_data_tab;

                   if l_saved_data_tab.count > 0 then
                       FOR i IN l_saved_data_tab.FIRST .. l_saved_data_tab.LAST
                        LOOP
                         PIPE ROW (MS_QSM_SAVED_DATA (l_saved_data_tab (i).SECTION_NAME,
                                                             l_saved_data_tab (i).QUESTION_TEXT,
                                                             l_saved_data_tab (i).RESPONSE_TYPE,
                                                             l_saved_data_tab(i).RESPONSE_OPTIONS));
                        END LOOP;
                   End if;

                    IF ln_status = 0 THEN

                        DELETE FROM SI_EVENT_ASSIGNMENTS
                        WHERE INFOLET_ID = l_metric_id
                        AND USER_ID = ms_apps_utilities.get_user_id(i_user_name)
                        AND PROCESS_INSTANCE_ID = ln_pid;

                    ELSIF ln_status <> 1 THEN

                        UPDATE SI_EVENT_ASSIGNMENTS
                        SET STATUS = ln_status
                        WHERE INFOLET_ID = l_metric_id
                        AND USER_ID = ms_apps_utilities.get_user_id(i_user_name)
                        AND PROCESS_INSTANCE_ID = ln_pid;

                    END IF;

                    COMMIT;
                    RETURN;


    END;

    procedure lob_replace( p_lob in out clob,
                       p_what in varchar2,
                       p_with in varchar2 )
as
    n        number;
    l_offset number := 1;
begin
loop
    n := dbms_lob.instr( p_lob, p_what, l_offset );
    if ( nvl(n,0) > 0 )
    then
        if ( (n+length(p_what)) < dbms_lob.getlength(p_lob) )
        then
           dbms_lob.copy( p_lob,
                          p_lob,
                          dbms_lob.getlength(p_lob),
                          n+length(p_with),
                          n+length(p_what) );
        end if;

        dbms_lob.write( p_lob, length(p_with), n, p_with );
--        if ( length(p_what) > length(p_with) )
--        then
--            dbms_lob.trim( p_lob,
--               dbms_lob.getlength(p_lob)-(length(p_what)-length(p_with)) );
--        end if;
        l_offset := l_offset + length(p_with);
    else
        exit;
    end if;
end loop;
end;
 PROCEDURE PREPOPULATE_SURVEY_RESPONSE(
    p_respondents      IN CLOB,
    p_response_xml     IN OUT XMLTYPE,
    p_que_request_id   IN VARCHAR2,
    p_prepopulate      IN VARCHAR2,
    p_metric_id        IN VARCHAR2,
    p_questionnaire_id IN VARCHAR2,
    p_sch_frequency    IN VARCHAR2,
    p_lv_path          IN VARCHAR2 )
AS
  sch_req_cnt             NUMBER;
  l_resp_pid              NUMBER;
  l_resp_iid              NUMBER;
  xn_error_handle_id      NUMBER;
  xn_error_seq            NUMBER;
  l_period_id             NUMBER;
  l_reporting_period_disp VARCHAR2(4000);
  l_tmp_xml XMLTYPE;
  l_tmp_previous_xml XMLTYPE;
  lx_child_xml XMLTYPE;
  l_temp_config_flag      VARCHAR2(4000);
  l_app_based_on_resp     VARCHAR2(4000);
  l_response_approver     VARCHAR2(4000);
  l_delimeter             VARCHAR2(255);
  L_EXCEL_RESPONSE_VAL    VARCHAR2(4000);
  l_QST_BASED_ON_RESPONSE VARCHAR2(4000);
  l_parent_reponse_type   VARCHAR2(4000);
  l_qsm_based_on_number   VARCHAR2(4000);
  l_check_resp_disp       VARCHAR2(4000);
  l_resp_stored_value     CLOB;
BEGIN
  l_tmp_xml :=NULL;
  l_tmp_xml := p_response_xml;
  
  --ms_qsm_log_activity('','in the begin'||'@'||p_metric_id||'@'||l_resp_pid||'@'||l_resp_iid,l_tmp_xml.getclobval());
 -- l_tmp_xml :=ms_qsm_utilities.insert_xml(l_tmp_xml,'datapacket/data/qst/row[question_pk ="' || qst_rec.question_pk||'"]/qst_optional',xmltype('<msa:excel_resp_values xmlns:msa="http://www.metricstream.com/appstudio/msa">'||'Y'||'</msa:excel_resp_values>'),'A');
 BEGIN
  l_tmp_xml :=ms_qsm_utilities.insert_xml(l_tmp_xml,'datapacket/data/nonmultirow/sec',xmltype('<msa:resp_prepopulate_val xmlns:msa="http://www.metricstream.com/appstudio/msa">'||'N'||'</msa:resp_prepopulate_val>'),'A');
  --lx_response_xml :=ms_qsm_utilities.insert_xml(lx_response_xml,'datapacket/data/nonmultirow/reporting_period',xmltype('<msa:reporting_period_display xmlns:msa="http://www.metricstream.com/appstudio/msa">'||l_reporting_period_disp||'</msa:reporting_period_display>'),'A');
  
  EXCEPTION   
  WHEN OTHERS THEN 
  ms_apps_mdf_errors_pkg.insert_log
                                          (pn_error_handle_id => xn_error_handle_id,
                                           pn_error_sequence => xn_error_seq,
                                           pc_error_type => 'I',
                                           pc_error_text => 'INSERT resp_prepopulate IS' || ' '||SQLERRM);
  END;
  SELECT COUNT(1)
  INTO sch_req_cnt
  FROM ms_qsm_scheduler_details
  WHERE sch_req_id          =p_que_request_id
  AND indiviudal_respondenet=TO_CHAR(p_respondents);
  SELECT VALUE
  INTO l_delimeter
  FROM MS_QSM_PARAMS
  WHERE PARAM_GROUP  ='QSM_PARAMS'
  AND PARAMETER      = 'QUESTION_LOV_DELIMETER'
  AND ENABLED        ='Y';
  IF sch_req_cnt     > 0 THEN
    IF p_prepopulate = 'yes' THEN
      BEGIN
        SELECT MAX(process_instance_id)
        INTO l_resp_pid
        FROM ms_qsm_scheduler_details
        WHERE sch_req_id          =p_que_request_id
        AND indiviudal_respondenet=TO_CHAR(p_respondents);
        --                      ms_apps_mdf_errors_pkg.insert_log
        --                                  (pn_error_handle_id => xn_error_handle_id,
        --                                   pn_error_sequence => xn_error_seq,
        --                                   pc_error_type => 'I',
        --                                   pc_error_text => 'value of l_resp_pid is  '||l_resp_pid||'  '||p_respondents||' '||p_que_request_id);
      EXCEPTION
      WHEN OTHERS THEN
        l_resp_pid:=NULL;
        ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id => xn_error_handle_id, pn_error_sequence => xn_error_seq, pc_error_type => 'I', pc_error_text => 'within exception l_resp_pid is  '||l_resp_pid||'  '||p_respondents||' '||p_que_request_id);
      END;
    END IF;
    IF l_resp_pid IS NOT NULL THEN
      BEGIN
          
          SELECT max(instance_id)
          INTO l_resp_iid
          FROM ms_qsm_questnr_resp_dup_v
          WHERE process_instance_id=l_resp_pid
          and RESP_STATUS in (6,7,9);   
        
      EXCEPTION
      WHEN OTHERS THEN
        l_resp_iid:=NULL;
        ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id => xn_error_handle_id, pn_error_sequence => xn_error_seq, pc_error_type => 'I', pc_error_text => 'within exception l_resp_iid  '||NVL(l_resp_iid,2)||'  '||p_respondents||'  '||p_que_request_id);
      END;
    END IF;
    
--    l_temp_config_flag  := ms_qsm_utilities.get_tag_value(l_tmp_xml,'datapacket/data/nonmultirow/temp_config_flag/text()');
--    l_app_based_on_resp := ms_qsm_utilities.get_tag_value(l_tmp_xml,'datapacket/data/nonmultirow/app_based_on_resp/text()');
--    l_response_approver := ms_qsm_utilities.get_tag_value(l_tmp_xml,'datapacket/data/nonmultirow/response_approver/text()');

    
    IF l_resp_iid IS NOT NULL THEN
      BEGIN
        SELECT xmltype (ms_apps_mdf_infoletoutput_pkg.get_xml (p_metric_id,l_resp_pid,l_resp_iid))
        INTO l_tmp_previous_xml
        FROM dual;
        
       -- ms_qsm_log_activity('','if l_resp_iid is not null'||'@'||p_metric_id||'@'||l_resp_pid||'@'||l_resp_iid,l_tmp_xml.getclobval());
      EXCEPTION
      WHEN OTHERS THEN
        ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id => xn_error_handle_id, pn_error_sequence => xn_error_seq, pc_error_type => 'I', pc_error_text => ' issue while get_xml into p_response_xml '||sqlerrm);
      END;
            
      FOR qst_rec IN
      (SELECT question_pk,
            resp_req_approval ,
            question_name,
            questionnaire_id,
            response_type,
            resp_mlov,
            resp_dd,
            resp_radio,
            resp_checkbox,
            resp_radio_b,
            response_upload,
            to_number(instance_rec_num) instance_rec_num,
            resp_number,
            resp_date,
            response_field,
            checkbox_hidden_value,
            resp_attachment,
            resp_clob,
            resp_sprd,
            excel_resp_values,
            list_of_values_hidden
          FROM xmltable (xmlnamespaces('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:qst/msa:row' passing l_tmp_previous_xml 
                          columns question_pk VARCHAR2(255) path 'msa:question_pk', 
                          response_type VARCHAR2(4000) path 'msa:response_type', 
                          resp_dd VARCHAR2(4000) path 'msa:resp_dd', 
                          resp_mlov VARCHAR2(4000) path 'msa:resp_mlov', 
                          resp_radio VARCHAR2(4000) path 'msa:resp_radio', 
                          list_of_values_hidden VARCHAR2(4000) path 'msa:list_of_values_hidden', 
                          qst_response_id VARCHAR2(255) path 'msa:qst_response_id', 
                          qst_json_value VARCHAR2(4000) path 'msa:qst_json_value', 
                          resp_req_approval VARCHAR2(4000) path 'msa:resp_req_approval', 
                          resp_radio_b VARCHAR2(4000) path 'msa:resp_radio_b', 
                          resp_checkbox VARCHAR2(4000) path 'msa:resp_checkbox', 
                          question_name VARCHAR2(4000) path 'msa:question_name', 
                          questionnaire_id VARCHAR2(4000) path 'msa:questionnaire_id', 
                          instance_rec_num VARCHAR2(400) path 'msa:instance_rec_num', 
                          response_upload VARCHAR2(4000) path 'msa:response_upload',
                          resp_number VARCHAR2(4000) path 'msa:resp_number',
                          resp_date VARCHAR2(4000) path 'msa:resp_date',
                          response_field VARCHAR2(4000) path 'msa:response_field',
                          checkbox_hidden_value VARCHAR2(4000) path 'msa:checkbox_hidden_value',
                          resp_attachment VARCHAR2(4000) path 'msa:resp_attachment',
                          resp_clob VARCHAR2(4000) path 'msa:resp_clob',
                          resp_sprd VARCHAR2(4000) path 'msa:resp_sprd',
                          excel_resp_values VARCHAR2(4000) path 'msa:excel_resp_values')
          ORDER BY to_number(instance_rec_num)          
          
       )
        LOOP
            
            FOR qst_rec_update IN
                            (SELECT question_pk,
                                    resp_req_approval ,
                                    question_name,
                                    questionnaire_id,
                                    response_type,
                                    resp_mlov,
                                    resp_dd,
                                    resp_radio,
                                    resp_checkbox,
                                    resp_radio_b,
                                    response_upload,
                                    to_number(instance_rec_num) instance_rec_num,
                                    resp_number,
                                    resp_date,
                                    response_field,
                                    checkbox_hidden_value,
                                    resp_attachment,
                                    resp_clob,
                                    resp_sprd,
                                   -- excel_resp_values,
                                    list_of_values_hidden
                              FROM xmltable (xmlnamespaces('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:qst/msa:row' passing l_tmp_xml 
                                              columns question_pk VARCHAR2(255) path 'msa:question_pk', 
                                              response_type VARCHAR2(4000) path 'msa:response_type', 
                                              resp_dd VARCHAR2(4000) path 'msa:resp_dd', 
                                              resp_mlov VARCHAR2(4000) path 'msa:resp_mlov', 
                                              resp_radio VARCHAR2(4000) path 'msa:resp_radio', 
                                              list_of_values_hidden VARCHAR2(4000) path 'msa:list_of_values_hidden', 
                                              qst_response_id VARCHAR2(255) path 'msa:qst_response_id', 
                                              qst_json_value VARCHAR2(4000) path 'msa:qst_json_value', 
                                              resp_req_approval VARCHAR2(4000) path 'msa:resp_req_approval', 
                                              resp_radio_b VARCHAR2(4000) path 'msa:resp_radio_b', 
                                              resp_checkbox VARCHAR2(4000) path 'msa:resp_checkbox', 
                                              question_name VARCHAR2(4000) path 'msa:question_name', 
                                              questionnaire_id VARCHAR2(4000) path 'msa:questionnaire_id', 
                                              instance_rec_num VARCHAR2(400) path 'msa:instance_rec_num', 
                                              response_upload VARCHAR2(4000) path 'msa:response_upload',
                                              resp_number VARCHAR2(4000) path 'msa:resp_number',
                                              resp_date VARCHAR2(4000) path 'msa:resp_date',
                                              response_field VARCHAR2(4000) path 'msa:response_field',
                                              checkbox_hidden_value VARCHAR2(4000) path 'msa:checkbox_hidden_value',
                                              resp_attachment VARCHAR2(4000) path 'msa:resp_attachment',
                                              resp_clob VARCHAR2(4000) path 'msa:resp_clob',
                                              resp_sprd VARCHAR2(4000) path 'msa:resp_sprd'
                                             -- excel_resp_values VARCHAR2(4000) path 'msa:excel_resp_values'
                                              )
                              ORDER BY to_number(instance_rec_num)          
                             )
                 LOOP 
                
                      IF qst_rec_update.question_pk= qst_rec.question_pk THEN -- LOV
                        ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/qst/row[question_pk ='''||qst_rec_update.QUESTION_PK||''']/resp_mlov/text()',qst_rec.resp_mlov);
                        ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/qst/row[question_pk ='''||qst_rec_update.QUESTION_PK||''']/resp_dd/text()',qst_rec.resp_dd);
                        ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/qst/row[question_pk ='''||qst_rec_update.QUESTION_PK||''']/resp_number/text()',qst_rec.resp_number);
                        ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/qst/row[question_pk ='''||qst_rec_update.QUESTION_PK||''']/resp_date/text()',qst_rec.resp_date);
                        ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/qst/row[question_pk ='''||qst_rec_update.QUESTION_PK||''']/response_field/text()',qst_rec.response_field);
                        ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/qst/row[question_pk ='''||qst_rec_update.QUESTION_PK||''']/checkbox_hidden_value/text()',qst_rec.checkbox_hidden_value);
                        ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/qst/row[question_pk ='''||qst_rec_update.QUESTION_PK||''']/resp_radio/text()',qst_rec.resp_radio);
                        ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/qst/row[question_pk ='''||qst_rec_update.QUESTION_PK||''']/resp_attachment/text()',qst_rec.resp_attachment);
                        ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/qst/row[question_pk ='''||qst_rec_update.QUESTION_PK||''']/resp_clob/text()',qst_rec.resp_clob);
                        ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/qst/row[question_pk ='''||qst_rec_update.QUESTION_PK||''']/resp_radio_b/text()',qst_rec.resp_radio_b);
                        ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/qst/row[question_pk ='''||qst_rec_update.QUESTION_PK||''']/resp_checkbox/text()',qst_rec.resp_checkbox);
                        --ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/qst/row[question_pk ='''||qst_rec_update.QUESTION_PK||''']/resp_sprd/text()',qst_rec.resp_sprd); 
                        --ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/qst/row[question_pk ='''||qst_rec_update.QUESTION_PK||''']/excel_resp_values/text()',qst_rec.excel_resp_values);
                        ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/qst/row[question_pk ='''||qst_rec_update.QUESTION_PK||''']/list_of_values_hidden/text()',qst_rec.list_of_values_hidden);
                      END IF;
                     
                 END LOOP;
        
      END LOOP;
      
           /* Start - Prepopulating response in the case of offline template survey response*/
--      FOR non_multirow_rec IN
--      (SELECT response_upload
--      FROM XMLTABLE (xmlnamespaces('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:nonmultirow' PASSING l_tmp_previous_xml COLUMNS response_upload VARCHAR2(4000) path 'msa:response_upload')
--      )
--      LOOP
--      
--      
--        IF non_multirow_rec.response_upload='Y' THEN
--          FOR multirow_rec IN
--          (SELECT question_pk,
--            resp_req_approval ,
--            question_name,
--            questionnaire_id,
--            response_type,
--            resp_mlov,
--            resp_dd,
--            resp_radio,
--            resp_checkbox,
--            resp_radio_b,
--            response_upload,
--            to_number(instance_rec_num) instance_rec_num
--          FROM xmltable (xmlnamespaces('http://www.metricstream.com/appstudio/msa' AS "msa"), 'msa:datapacket/msa:data/msa:qst/msa:row' passing l_tmp_previous_xml columns question_pk VARCHAR2(255) path 'msa:question_pk', response_type VARCHAR2(4000) path 'msa:response_type', resp_dd VARCHAR2(4000) path 'msa:resp_dd', resp_mlov VARCHAR2(4000) path 'msa:resp_mlov', resp_radio VARCHAR2(4000) path 'msa:resp_radio', list_of_values_hidden VARCHAR2(4000) path 'msa:list_of_values_hidden', qst_response_id VARCHAR2(255) path 'msa:qst_response_id', qst_json_value VARCHAR2(4000) path 'msa:qst_json_value', resp_req_approval VARCHAR2(4000) path 'msa:resp_req_approval', resp_radio_b VARCHAR2(4000) path 'msa:resp_radio_b', resp_checkbox VARCHAR2(4000) path 'msa:resp_checkbox', question_name VARCHAR2(4000) path 'msa:question_name', questionnaire_id VARCHAR2(4000) path 'msa:questionnaire_id', instance_rec_num VARCHAR2(400) path 'msa:instance_rec_num', response_upload VARCHAR2(4000) path 'msa:response_upload' )
--          ORDER BY to_number(instance_rec_num)          
--          )
--          LOOP
--            SELECT ms_concat(stored_value)
--            INTO l_resp_stored_value
--            FROM MS_QSM_QST_LOV_DATA
--            WHERE INSTR(l_delimeter
--              ||DECODE(multirow_rec.response_type,'4',multirow_rec.resp_mlov,'6',multirow_rec.resp_radio,'7',multirow_rec.resp_dd,'10',multirow_rec.resp_radio_b,'11',multirow_rec.resp_checkbox,'')
--              ||l_delimeter,l_delimeter
--              ||display_value
--              ||l_delimeter,1)>0
--            AND locale_id     = '1009'
--              --and questionnaire_id = qst_rec.questionnaire_id
--            AND QUESTION_ID               = multirow_rec.question_pk;
--            IF multirow_rec.response_type = '4' THEN -- LOV
--              MS_QSM_UTILITIES.UPDATE_XML(l_tmp_xml, 'datapacket/data/qst/row[question_pk ='''||multirow_rec.QUESTION_PK||''']/resp_mlov/text()',L_RESP_STORED_VALUE);
--              ms_qsm_utilities.update_xml(l_tmp_xml, 'datapacket/data/qst/row[question_pk ='''||multirow_rec.question_pk||''']/list_of_values_hidden/text()', multirow_rec.resp_mlov);
--            ELSIF multirow_rec.response_type = '6' THEN -- Y/N
--              MS_QSM_UTILITIES.UPDATE_XML(l_tmp_xml, 'datapacket/data/qst/row[question_pk ='''||multirow_rec.QUESTION_PK||''']/resp_radio/text()', L_RESP_STORED_VALUE);
--              -- MS_QSM_UTILITIES.UPDATE_XML(L_OUT_XML, 'datapacket/data/qst/row[question_pk ="'||QST_REC.QUESTION_PK||'"]/resp_radio/text()', L_RESP_STORED_VALUE);
--            ELSIF multirow_rec.RESPONSE_TYPE = '7' THEN
--              MS_QSM_UTILITIES.UPDATE_XML(l_tmp_xml, 'datapacket/data/qst/row[question_pk ='''||multirow_rec.QUESTION_PK||''']/resp_dd/text()', L_RESP_STORED_VALUE);
--            ELSIF multirow_rec.RESPONSE_TYPE = '10' THEN
--              MS_QSM_UTILITIES.UPDATE_XML(l_tmp_xml, 'datapacket/data/qst/row[question_pk ='''||multirow_rec.QUESTION_PK||''']/resp_radio_b/text()', L_RESP_STORED_VALUE);
--            ELSIF multirow_rec.RESPONSE_TYPE = '11' THEN
--              MS_QSM_UTILITIES.UPDATE_XML(l_tmp_xml, 'datapacket/data/qst/row[question_pk ='''||multirow_rec.QUESTION_PK||''']/checkbox_hidden_value/text()', L_RESP_STORED_VALUE);
--            END IF;
--          END LOOP;
--        END IF;
--      END LOOP;
--      
     IF trim(p_sch_frequency) NOT IN ('6','8') THEN -- run now,specific date
        BEGIN
          SELECT period_id,
            period_name
          INTO l_period_id,
            l_reporting_period_disp
          FROM ms_qsm_reporting_period a,
            ms_qsm_questionnaire b
          WHERE a.period_type = b.reporting_period_type
          AND TRUNC(sysdate) BETWEEN TRUNC(a.assignment_start_date) AND TRUNC(a.assignment_end_date)
          AND b.internal_questnr_id = p_questionnaire_id;
        EXCEPTION
        WHEN OTHERS THEN
          l_period_id :=NULL;
          ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id => xn_error_handle_id, pn_error_sequence => xn_error_seq, pc_error_type => 'I', pc_error_text => 'l_period_id IN EXCEPTION - '||l_period_id);
        END;
        BEGIN
          ms_qsm_utilities.update_xml(l_tmp_xml, REPLACE(p_lv_path,'$','reporting_period'),l_period_id);
          l_tmp_xml :=ms_qsm_utilities.insert_xml(l_tmp_xml,'datapacket/data/nonmultirow/reporting_period',xmltype('<msa:reporting_period_display xmlns:msa="http://www.metricstream.com/appstudio/msa">'||l_reporting_period_disp||'</msa:reporting_period_display>'),'A');
        EXCEPTION
        WHEN OTHERS THEN
          ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id => xn_error_handle_id, pn_error_sequence => xn_error_seq, pc_error_type => 'I', pc_error_text => 'exception during update_xml and insert_xml '||sqlerrm);
        END;
      END IF;
    END IF;
    p_response_xml := l_tmp_xml;
  END IF;
  BEGIN
    ms_qsm_log_activity('','final fetching 11'||'@'||p_metric_id||'@'||l_resp_pid||'@'||l_resp_iid,l_tmp_xml.getclobval());
  EXCEPTION
  WHEN OTHERS THEN
    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id => xn_error_handle_id, pn_error_sequence => xn_error_seq, pc_error_type => 'I', pc_error_text => ' after fetching '||sqlerrm);
  END;
END PREPOPULATE_SURVEY_RESPONSE;
    
 PROCEDURE PREPOPULATE_RESPONSE_ONE_COPY(
                                          p_respondents      IN     CLOB,
                                          p_response_xml     IN OUT XMLTYPE,
                                          p_que_request_id   IN     VARCHAR2,
                                          p_prepopulate      IN     VARCHAR2,
                                          p_metric_id        IN     VARCHAR2,
                                          p_questionnaire_id IN     VARCHAR2,
                                          p_sch_frequency    IN     VARCHAR2,
                                          p_lv_path          IN     VARCHAR2
                                          )
        AS
    
        sch_req_cnt            number;
            l_resp_pid             number;
            l_resp_iid             number;
            xn_error_handle_id     number;
            xn_error_seq           number;
            l_period_id            number;
            l_reporting_period_disp varchar2(4000);
            l_tmp_xml              XMLTYPE;
            lx_child_xml          XMLTYPE;
            l_temp_config_flag    varchar2(500);
            l_app_based_on_resp   varchar2(500);
            l_response_approver   varchar2(500);
            l_delimeter           VARCHAR2(255);
            L_EXCEL_RESPONSE_VAL  VARCHAR2(4000);
            l_QST_BASED_ON_RESPONSE VARCHAR2(4000);
            l_parent_reponse_type VARCHAR2(4000);
            l_qsm_based_on_number VARCHAR2(4000);
            l_check_resp_disp     VARCHAR2(4000);
    
     begin
          l_tmp_xml:=null;     
          l_tmp_xml := p_response_xml;
         -- ms_qsm_log_activity('','in the begin'||'@'||p_metric_id||'@'||l_resp_pid||'@'||l_resp_iid,l_tmp_xml.getclobval());
    
          select count(1)
            into sch_req_cnt
            from ms_qsm_scheduler_details
            where sch_req_id=p_que_request_id;
     
     IF sch_req_cnt > 0 THEN
     
          if p_prepopulate = 'yes' then
           
             BEGIN
                select max(process_instance_id)
                  into l_resp_pid
                    from ms_qsm_scheduler_details
                    where sch_req_id=p_que_request_id;
                    
                    
--                      ms_apps_mdf_errors_pkg.insert_log 
--                                  (pn_error_handle_id => xn_error_handle_id,
--                                   pn_error_sequence => xn_error_seq, 
--                                   pc_error_type => 'I', 
--                                   pc_error_text => 'value of l_resp_pid is  '||l_resp_pid||'  '||p_respondents||' '||p_que_request_id);
             EXCEPTION
             WHEN OTHERS THEN 
                  l_resp_pid:=null;
                  ms_apps_mdf_errors_pkg.insert_log 
                                                (pn_error_handle_id => xn_error_handle_id,
                                                 pn_error_sequence => xn_error_seq, 
                                                 pc_error_type => 'I', 
                                                 pc_error_text => 'within exception l_resp_pid is  '||l_resp_pid||'  '||p_respondents||' '||p_que_request_id);
             END;
             
          end if;
             
          if l_resp_pid is not null then
             BEGIN

                SELECT max(instance_id)
                INTO l_resp_iid
                FROM ms_qsm_questnr_resp_dup_v
                WHERE process_instance_id=l_resp_pid;        

    
              EXCEPTION
              WHEN OTHERS THEN
                 l_resp_iid:=null;
                 ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id => xn_error_handle_id, pn_error_sequence => xn_error_seq, pc_error_type => 'I', pc_error_text => 'within exception l_resp_iid  '||nvl(l_resp_iid,2)||'  '||p_respondents||'  '||p_que_request_id);
               END;
          end if;
    
    
          if l_resp_iid is not null then
          
              BEGIN
                select xmltype (ms_apps_mdf_infoletoutput_pkg.get_xml (p_metric_id,l_resp_pid,l_resp_iid))
                       into l_tmp_xml
                      from dual; 
              EXCEPTION
              WHEN OTHERS THEN
                  ms_apps_mdf_errors_pkg.insert_log
                            (pn_error_handle_id => xn_error_handle_id, 
                             pn_error_sequence => xn_error_seq, 
                             pc_error_type => 'I', 
                             pc_error_text => ' issue while get_xml into p_response_xml '||sqlerrm);
              END;
    
    
                l_temp_config_flag :=  ms_qsm_utilities.get_tag_value(l_tmp_xml,'datapacket/data/nonmultirow/temp_config_flag/text()');
                l_app_based_on_resp := ms_qsm_utilities.get_tag_value(l_tmp_xml,'datapacket/data/nonmultirow/app_based_on_resp/text()');
                l_response_approver := ms_qsm_utilities.get_tag_value(l_tmp_xml,'datapacket/data/nonmultirow/response_approver/text()');
        
                ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/nonmultirow/que_response_id/text()','');
                ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/nonmultirow/instance_id/text()','');
                ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/nonmultirow/process_instance_id/text()','');
                ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/nonmultirow/reference_proc_id/text()','');
                ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/nonmultirow/certify_flag/text()','');
                ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/nonmultirow/certified_by/text()','');
                ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/nonmultirow/resp_status/text()','4');
                ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/nonmultirow/responded_on/text()','');
                ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/nonmultirow/responded_by/text()','');
                ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/qst/row/reference_pid/text()','');
                ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/nonmultirow/temp_pk_id/text()','');
                ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/nonmultirow/previous_stage/text()','RESPONSE');
                ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/nonmultirow/dd_current_stage/text()','RESPONSE');
                ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/nonmultirow/submit_action/text()','');
        
                ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/nonmultirow/temp_config_flag/text()',l_temp_config_flag);
                ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/nonmultirow/app_based_on_resp/text()',l_app_based_on_resp);
                ms_qsm_utilities.update_xml(l_tmp_xml,'datapacket/data/nonmultirow/response_approver/text()',l_response_approver);
        
            BEGIN
              ms_qsm_log_activity('','after fetching'||'@'||p_metric_id||'@'||l_resp_pid||'@'||l_resp_iid,l_tmp_xml.getclobval());
            EXCEPTION
            WHEN OTHERS THEN 
                 ms_apps_mdf_errors_pkg.insert_log
                            (pn_error_handle_id => xn_error_handle_id, 
                             pn_error_sequence => xn_error_seq, 
                             pc_error_type => 'I', 
                             pc_error_text => ' after fetching '||sqlerrm);
            END;
    
              FOR qst_rec in (select question_pk,
                                     resp_req_approval ,
                                     question_name,
                                     response_type,
                                     to_number(instance_rec_num) instance_rec_num
                                    from xmltable (xmlnamespaces('http://www.metricstream.com/appstudio/msa' as "msa"), 'msa:datapacket/msa:data/msa:qst/msa:row'
                                                                 passing l_tmp_xml
                                                                 columns question_pk varchar2(255) path 'msa:question_pk',
                                                                        response_type varchar2(4000)  path 'msa:response_type',
                                                                        resp_dd varchar2(4000)  path 'msa:resp_dd',
                                                                        resp_mlov varchar2(4000)  path 'msa:resp_mlov',
                                                                        resp_radio varchar2(4000)  path 'msa:resp_radio',
                                                                        list_of_values_hidden varchar2(4000)  path 'msa:list_of_values_hidden',
                                                                        qst_response_id varchar2(255) path 'msa:qst_response_id',
                                                                        qst_json_value  varchar2(4000) path 'msa:qst_json_value',
                                                                        resp_req_approval varchar2(4000) path 'msa:resp_req_approval',
                                                                        resp_radio_b varchar2(4000) path 'msa:resp_radio_b',
                                                                        resp_checkbox varchar2(4000) path 'msa:resp_checkbox',
                                                                        question_name varchar2(4000) path 'msa:question_name',
                                                                        instance_rec_num  varchar2(400) path    'msa:instance_rec_num'
                                                                        ) ORDER BY to_number(instance_rec_num)
                                   -- where response_type in ('4','6','7','10','11')
                                    )
              LOOP
              
                  IF qst_rec.response_type in ('4','6','7','10','11') THEN
    
                      select ms_concat(a.display_value)
                             into l_excel_response_val
                             from ms_qsm_qst_lov_data a
                             where a.question_id = qst_rec.question_pk;
    
                      BEGIN
                        l_tmp_xml :=ms_qsm_utilities.insert_xml(l_tmp_xml,'datapacket/data/qst/row[question_pk ="' || qst_rec.question_pk||'"]/qst_optional',xmltype('<msa:excel_resp_values xmlns:msa="http://www.metricstream.com/appstudio/msa">'||htf.escape_sc(l_excel_response_val)||'</msa:excel_resp_values>'),'A');
                      EXCEPTION
                      WHEN OTHERS THEN 
                          ms_apps_mdf_errors_pkg.insert_log
                          (pn_error_handle_id => xn_error_handle_id, pn_error_sequence => xn_error_seq, pc_error_type => 'I', pc_error_text => ' while xml node '||sqlerrm);
                      END;
    
                     -- ms_qsm_log_activity('','After inserting excel node'||'@'||p_metric_id||'@'||l_resp_pid||'@'||l_resp_iid,l_tmp_xml.getclobval());
        
                      select qst_based_on_response,
                             qst_based_on_number,
                             parent_response_type
                        into l_qst_based_on_response,
                             l_qsm_based_on_number,
                             l_parent_reponse_type
                        from ms_qsm_question 
                        where qst_id_pk=qst_rec.question_pk;
    
                      if l_parent_reponse_type in ('1','3') then
                         l_check_resp_disp:=l_qst_based_on_response||'~'||l_qsm_based_on_number;
                        
                      elsif l_parent_reponse_type in ('4','7','6','10','11') then
                         l_check_resp_disp:='5'||'~'||l_qst_based_on_response;
                        
                      elsif l_parent_reponse_type in ('6') then
                         l_check_resp_disp:='5'||'~'||l_qst_based_on_response;
                        
                      end if;
    
                      BEGIN
                        lx_child_xml :=ms_qsm_utilities.insert_xml(l_tmp_xml,'datapacket/data/qst/row/check_response',xmltype('<msa:check_response_disp xmlns:msa="http://www.metricstream.com/appstudio/msa">'||l_check_resp_disp||'</msa:check_response_disp>'),'A');
                      EXCEPTION
                      WHEN OTHERS THEN 
                        ms_apps_mdf_errors_pkg.insert_log
                                  (pn_error_handle_id => xn_error_handle_id, 
                                   pn_error_sequence => xn_error_seq, 
                                   pc_error_type => 'I', 
                                   pc_error_text => ' while child xml node '||sqlerrm);
                      END;
                  ELSE
                      l_tmp_xml :=ms_qsm_utilities.insert_xml(l_tmp_xml,'datapacket/data/qst/row[question_pk ="' || qst_rec.question_pk||'"]/qst_optional',xmltype('<msa:excel_resp_values xmlns:msa="http://www.metricstream.com/appstudio/msa">'||htf.escape_sc(l_excel_response_val)||'</msa:excel_resp_values>'),'A');
                     null;
                  END IF;
              END LOOP;
    
              if trim(p_sch_frequency) not in ('6','8') then -- run now,specific date
                 BEGIN
                  select period_id,
                       period_name
                  into l_period_id,
                       l_reporting_period_disp
                 from ms_qsm_reporting_period a,
                      ms_qsm_questionnaire b
                  where a.period_type = b.reporting_period_type
                  and trunc(sysdate) between trunc(a.assignment_start_date)
                  and trunc(a.assignment_end_date)
                  and b.internal_questnr_id = p_questionnaire_id;
    
                 EXCEPTION
                 WHEN OTHERS THEN 
                   l_period_id :=null;
                   ms_apps_mdf_errors_pkg.insert_log
                              (pn_error_handle_id => xn_error_handle_id, 
                               pn_error_sequence => xn_error_seq, 
                               pc_error_type => 'I', 
                               pc_error_text => 'l_period_id IN EXCEPTION - '||l_period_id);
                 END;
                 
                 BEGIN
                    ms_qsm_utilities.update_xml(l_tmp_xml, replace(p_lv_path,'$','reporting_period'),l_period_id);
                    l_tmp_xml :=ms_qsm_utilities.insert_xml(l_tmp_xml,'datapacket/data/nonmultirow/reporting_period',xmltype('<msa:reporting_period_display xmlns:msa="http://www.metricstream.com/appstudio/msa">'||l_reporting_period_disp||'</msa:reporting_period_display>'),'A');
                    
                 EXCEPTION
                 WHEN OTHERS THEN 
                    ms_apps_mdf_errors_pkg.insert_log
                                (pn_error_handle_id => xn_error_handle_id, 
                                 pn_error_sequence => xn_error_seq, 
                                 pc_error_type => 'I', 
                                 pc_error_text => 'exception during update_xml and insert_xml '||sqlerrm);
                 END;
    
              end if;
          end if;
              p_response_xml  := l_tmp_xml;
     END IF;
           BEGIN
              ms_qsm_log_activity('','final fetching one copy'||'@'||p_metric_id||'@'||l_resp_pid||'@'||l_resp_iid,l_tmp_xml.getclobval());
           EXCEPTION
           WHEN OTHERS THEN
             ms_apps_mdf_errors_pkg.insert_log
                        (pn_error_handle_id => xn_error_handle_id, 
                         pn_error_sequence => xn_error_seq, 
                         pc_error_type => 'I', 
                         pc_error_text => ' after fetching '||sqlerrm);
           END;
              
   END PREPOPULATE_RESPONSE_ONE_COPY;

    PROCEDURE  INITIATE_RESPONSE_FLOW (ip_respondents IN CLOB ,
                                                                 ip_response_xml IN XMLTYPE  ,
                                                                 ip_que_request_id IN VARCHAR2,
                                                                 ip_sequence_no IN  NUMBER DEFAULT 1,
                                                                 ip_excel_based IN VARCHAR2 DEFAULT 'no',
                                                                 ip_iteration_number IN VARCHAR2 DEFAULT 'ITR-1',
                                                                 xn_error_handle_id IN OUT NUMBER ,
                                                                 xn_error_seq IN OUT NUMBER,
                                                                 xn_error_code OUT NOCOPY NUMBER,
                                                                 xn_error_message OUT NOCOPY VARCHAR2 )
    AS
        lx_resp_xml                                                   XMLTYPE;
        ln_response_pid                                             NUMBER;
        ln_response_iid                                              NUMBER;
        lv_path                                                        VARCHAR2(100):='datapacket/data/nonmultirow/$/text()';
        ln_response_metric_id                                    NUMBER;
        l_error_message                                          VARCHAR2 (4000);
        l_sch_det_status                                        VARCHAR2(1);
        ln_error_code                                           NUMBER;
        l_locale_id                                             NUMBER;
        l_us_locale                                             NUMBER;
        x_questnr_id                                            VARCHAR2(255);
        l_resp_sprd                                             VARCHAR2(4000);
        lv_list_of_values                                       VARCHAR2(4000);
        lv_response_id                                          VARCHAR2(255);
        l_excel_xml                                              XMLTYPE;
   -- start by nagesh
        X_Pre_Populate_data                                      VARCHAR2 (4000);
        x_applies_to                                            VARCHAR2 (4000);
        x_context_field_hook                                    VARCHAR2 (4000);
        x_config_flg                                            VARCHAR2 (1);
        x_resp_sprd_id                                          VARCHAR2 (100);
        x_sprd_sht_hook                                         VARCHAR2 (4000);
        x_resp_id                                               NUMBER;

        ln_sprd_metric_id                                       NUMBER;
        l_sprd_pid                                              NUMBER;
        l_sprd_iid                                              NUMBER;

        x_qst_id                                                VARCHAR2 (4000);
        x_sprd_id                                               VARCHAR2 (4000);
        ln_proc_cd                                              VARCHAR2 (4000);
        ln_qst_json_value                                       varchar2 (4000);
        l_sprd_rec_cnt                                          NUMBER;
        ln_r_pid                                                varchar2 (4000);
        x_curr_usr_nm                                           varchar2 (4000);
        l_json                                                  varchar2 (4000);
        x_user_id                                               number;
        l_sprd_xml                                              xmltype;
        l_resp_metric_id                                        number;
        l_resp_metric_nm                                        varchar2 (4000) := 'MS_QSM_RESPONSE_SPREADSHEET';
        lv_child_path                                           varchar2(100):='row/$/text()';
        l_params                                                ms_param_tbl := ms_param_tbl ();
        l_event_log_id                                          number;
        l_error_code                                            varchar2 (100);
      -- end by nagesh
        BEGIN

                IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0)  THEN
                
                    ms_qsm_utilities.initialize_metric_maint ('QSM');
                END IF;

                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                pn_error_sequence    => xn_error_seq,
                pc_error_type        => 'E',
                pc_error_text        => 'INSIDE INITIATE RESPONSE FLOW ');


                l_sch_det_status :='S';
                lx_resp_xml := ip_response_xml;
                --2224
                
                 ms_qsm_log_activity('','first xml value',lx_resp_xml.getclobval());

                select metric_id
                into ln_response_metric_id
                 from si_metrics_t
                 where metric_name = MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM');

                ln_response_pid := si_process_instance_id_s.NEXTVAL;
             
                ln_response_iid := si_metric_results_s.NEXTVAL;

                BEGIN
                    SELECT LOCALE_ID
                    INTO l_locale_id
                    FROM SI_LOCALES
                    WHERE LOCALE_STRING=(SELECT LOCALE FROM SI_USERS_T WHERE USER_NAME =to_char(ip_respondents));
                EXCEPTION
                    WHEN OTHERS THEN

                        SELECT LOCALE_ID
                        INTO l_locale_id
                        FROM SI_LOCALES
                        WHERE LOCALE_STRING ='en_US';

                 END ;

                SELECT LOCALE_ID
                INTO l_us_locale
                FROM SI_LOCALES
                WHERE LOCALE_STRING ='en_US';

                x_questnr_id:=get_tag_value(lx_resp_xml, 'datapacket/data/nonmultirow/questionnaire_id/text()',g_namespace);
                ms_qsm_log_activity('','first-1 xml value',lx_resp_xml.getclobval());
                 -- start by nagesh
                x_curr_usr_nm := get_tag_value(lx_resp_xml, 'datapacket/data/nonmultirow/dd_current_user_name/text()',g_namespace);
                ms_qsm_log_activity('','first-2 xml value',lx_resp_xml.getclobval());
                 -- end by nagesh

               IF l_locale_id <> l_us_locale THEN

                   FOR qstr IN (SELECT * FROM MS_QSM_QUESTIONNAIRE_TL_V WHERE INTERNAL_QUESTNR_ID =x_questnr_id and locale_id=l_locale_id)
                   LOOP

                     --ms_qsm_utilities.update_xml(lx_resp_xml, REPLACE(lv_path,'$','que_name'),qstr.que_name_tl);
                     ms_qsm_utilities.update_xml(lx_resp_xml, REPLACE(lv_path,'$','instructions'),fn_remove_html_tags(qstr.instructions_tl));
                     ms_qsm_utilities.update_xml(lx_resp_xml, REPLACE(lv_path,'$','certification_text'),fn_remove_html_tags(qstr.certification_text_tl));
                     --update_xml (lx_resp_xml, 'datapacket/data/sec/row[section_id_pk =' ||x_sec_pk|| ']/section_name/text()', x_sec_name);

                   END LOOP;
                   
                    ms_qsm_log_activity('','first-3 xml value',lx_resp_xml.getclobval());
                    
                   FOR sec IN (SELECT * FROM MS_QSM_SECTION_TL_V WHERE section_questnr_fk =x_questnr_id and locale_id=l_locale_id)
                   LOOP

                       ms_qsm_utilities.update_xml (lx_resp_xml, 'datapacket/data/sec/row[section_id ='''||sec.section_id_pk||''']/section_name/text()', sec.section_name_tl);

                   END LOOP;
                   
                      ms_qsm_log_activity('','first-4 xml value',lx_resp_xml.getclobval());
                      
                   FOR qst IN (SELECT * FROM ms_qsm_question_tl WHERE QST_SECTION_ID in   --qst_section_fk
                                                    (select section_id_pk from ms_qsm_section_tl_v where section_questnr_fk =x_questnr_id and locale_id=l_locale_id) and locale_id=l_locale_id)
                   LOOP

                       ms_qsm_utilities.update_xml(lx_resp_xml, 'datapacket/data/qst/row[question_pk ='''||qst.qst_id_pk||''']/question_name/text()', qst.qst_name);
                       ms_qsm_utilities.update_xml(lx_resp_xml, 'datapacket/data/qst/row[question_pk ='''||qst.qst_id_pk||''']/question_description/text()', fn_remove_html_tags(substr(qst.qst_description,1,3000)));
                       --ms_qsm_utilities.update_xml(lx_resp_xml, 'datapacket/data/qst/row[question_pk ='''||qst.qst_id_pk||''']/qst_description/text()', qst.qst_list_of_values_tl);
                        ms_qsm_utilities.update_xml(lx_resp_xml, 'datapacket/data/qst/row[question_pk ='''||qst.qst_id_pk||''']/resp_action_plan/text()', qst.QST_ACTION_PLAN);
                         BEGIN
                           IF qst.qst_response_type IN ('9')
                           THEN
                              SELECT SPRD_SHEET_LINK
                                INTO l_resp_sprd
                                FROM MS_QSM_SPREADSHEET_TL
                               WHERE SPRD_SHEET_INTERNAL_ID = qst.qst_sprdsheet_template;
                           END IF;

                           ms_qsm_utilities.update_xml(lx_resp_xml, 'datapacket/data/qst/row[question_pk ='''||qst.qst_id_pk||''']/resp_sprd/text()',l_resp_sprd);

                        EXCEPTION
                           WHEN NO_DATA_FOUND
                           THEN
                              l_resp_sprd := NULL;
                        END;
  /*
                        BEGIN

                          select REPLACE(REPLACE(MS_CONCAT(REPLACE(display_value,',','#_#')),',','|'),'#_#',',') list_of_values
                          into lv_list_of_values
                          from MS_QSM_QST_LOV_DATA_TL
                          where QUESTION_ID_FK=qst.qst_id_pk
                          AND LOCALE_ID = l_locale_id
                          ORDER BY TO_NUMBER(SUBSTR(STORED_VALUE,4));

                          lv_list_of_values:= MS_QSM_UTILITIES.GET_CONCAT_LIST_OF_VALUES(qst.qst_id_pk,l_locale_id);

                          ms_qsm_utilities.update_xml(lx_resp_xml,'datapacket/data/qst/row[question_pk ='''||qst.qst_id_pk||''']/list_of_values_hidden/text()',lv_list_of_values);

                        EXCEPTION
                          WHEN OTHERS THEN
                            lv_list_of_values:=NULL;
                        END; */

                   END LOOP;


                end if;
                 --   ms_qsm_log_activity('','first-5 xml value',lx_resp_xml.getclobval());
                 /*
            start Nagesh    Populate Context Field Information
                */

                SELECT nvl(b.parameter_value,0)
                INTO x_config_flg
                FROM ms_qs_parameter_names a, ms_qs_parameter_values b, ms_qs_parameter_types c
                WHERE     a.parameter_id = b.parameter_id
                AND a.parameter_type_id = b.parameter_type_id
                AND a.parameter_type_id = c.parameter_type_id
                AND b.parameter_type_id = c.parameter_type_id
                AND c.parameter_type = 'MS_QSM_Configuration'
                AND a.parameter_name = 'Enable_Context_Field_Updation';

              /*  select PRE_POPULATE_DATA INTO x_config_flg
                FROM ms_qsm_question where qst_id_pk=x_qst_id;*/

                IF x_config_flg = 'Y' THEN
                    x_applies_to := get_tag_value(lx_resp_xml, 'datapacket/data/nonmultirow/applies_to/text()',g_namespace);

                    BEGIN
                        SELECT context_field_hook
                        INTO x_context_field_hook
                        FROM MS_QSM_APPLIES_TO WHERE object_name = x_applies_to AND LOCALE_ID = 1009 AND enable_context_field_hook = 'Y';
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        x_context_field_hook := NULL;
                    END;

                    IF x_context_field_hook IS NOT NULL THEN
                        EXECUTE IMMEDIATE 'SELECT ' || x_context_field_hook || '(:lx_resp_xml) FROM DUAL' INTO lx_resp_xml USING IN lx_resp_xml;
                    END IF;
                END IF;

                x_resp_id := ms_qsm_que_response_id_s.NEXTVAL;
                --  nagesh End of Populate Context Field Information


                lv_response_id :=ms_qsm_que_response_id_s.NEXTVAL;

                ms_qsm_utilities.update_xml(lx_resp_xml, REPLACE(lv_path,'$','que_response_id'),lv_response_id);
                ms_qsm_utilities.update_xml(lx_resp_xml, REPLACE(lv_path,'$','respondent'),ip_respondents);
--                ms_qsm_utilities.update_xml(lx_resp_xml, REPLACE(lv_path,'$','dd_event_user_name'),ip_respondents);
                ms_qsm_utilities.update_xml(lx_resp_xml,REPLACE(lv_path,'$', 'instance_id'),ln_response_iid);
                ms_qsm_utilities.update_xml(lx_resp_xml,REPLACE(lv_path,'$', 'certified_by'),ip_respondents);
                ms_qsm_utilities.update_xml(lx_resp_xml,REPLACE(lv_path,'$', 'process_instance_id'),ln_response_pid);
                ms_qsm_utilities.update_xml(lx_resp_xml,REPLACE(lv_path,'$', 'temp_pk_id'),ln_response_pid);
                ms_qsm_utilities.update_xml(lx_resp_xml,REPLACE(lv_path,'$', 'collaborative_parameter'),ln_response_metric_id||'~'||ln_response_pid);
                ms_qsm_utilities.update_xml(lx_resp_xml,REPLACE(lv_path,'$', 'dd_current_user_name'),ip_respondents);


                --ms_qsm_log_activity ('', 'RESPONSE XML~10', lx_resp_xml.getclobval());

                -- Start by nagesh
                   /*
                Pre populating the spreadsheet information
                */
                FOR qst IN (SELECT * FROM ms_qsm_question WHERE QST_SECTION_ID in   --qst_section_fk
                                                (select section_id_pk from ms_qsm_section where section_questnr_fk =x_questnr_id)
                                                and PRE_POPULATE_DATA = 'yes')
                LOOP
                    IF qst.qst_response_type IN ('9')
                    THEN
                        x_resp_sprd_id := qst.qst_sprdsheet_template;

                        BEGIN
                            SELECT DATA_PRE_POPULATION
                            INTO x_sprd_sht_hook
                            FROM MS_QSM_SPREADSHEET WHERE SPRD_SHEET_INTERNAL_ID = x_resp_sprd_id and ENABLE_DATA_PRE_POPULATION = 'yes';
                        EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                            x_sprd_sht_hook := NULL;
                        END;
                    ELSE
                        x_resp_sprd_id := 0;
                        x_sprd_sht_hook := NULL;
                    END IF;

                    IF x_sprd_sht_hook IS NOT NULL THEN

                        l_params.EXTEND;
                        l_params (1) :=  ms_param_obj (param_name     => 'GET_SPRD_TEMPLATE',
                                                       param_type     => ms_apps_constants.g_parameter_type_reference,
                                                       data_type      => ms_apps_constants.g_data_type_text,
                                                       mandatory      => ms_apps_constants.g_no,
                                                       text_value     => NULL,
                                                       number_value   => NULL,
                                                       date_value     => NULL,
                                                       clob_value     => null,
                                                       blob_value     => NULL,
                                                       bfile_value    => null);

                        ms_apps_businessevents.raise_business_event (i_event_name            => 'GET_SPRD_TEMPLATE',
                                                                     i_parent_event_log_id   => NULL,
                                                                     i_parameter_tab         => l_params,
                                                                     i_registration_name     => NULL,
                                                                     i_commit_flag           => TRUE,
                                                                     o_event_log_id          => l_event_log_id,
                                                                     o_error_code            => l_error_code,
                                                                     o_error_message         => l_error_message);

                        select xmltype(clob_value)
                        into l_sprd_xml
                        from ms_apps_event_param_logs
                        where event_log_id = l_event_log_id;

                        SELECT metric_id
                        INTO ln_sprd_metric_id
                        FROM si_metrics_t
                        WHERE metric_name = MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESSPR');

                        ms_qsm_utilities.get_multirow_template (p_multirow => l_sprd_xml, p_metric_id => ln_sprd_metric_id, p_full_blown => 'Y');
                        x_qst_id := qst.qst_id_pk;
                        x_sprd_id := qst.qst_sprdsheet_template;

                        EXECUTE IMMEDIATE  'begin '||x_sprd_sht_hook || '(:x_resp_id,:x_qst_id,:x_sprd_id,:lx_resp_xml,:l_sprd_xml, :l_sprd_pid,:l_sprd_iid,:l_sprd_rec_cnt); end;'
                        USING IN x_resp_id, IN x_qst_id, IN x_sprd_id, IN lx_resp_xml, IN OUT l_sprd_xml, OUT l_sprd_pid, OUT l_sprd_iid, OUT l_sprd_rec_cnt;

                        ln_qst_json_value := get_tag_value (lx_resp_xml, 'datapacket/data/qst/row[question_pk ='''||qst.qst_id_pk||''']/qst_json_value/text()',g_namespace);
                        ln_qst_json_value := replace (ln_qst_json_value, '}',',"ADDED_ROWS":"'||l_sprd_rec_cnt || '"}');
                        ms_qsm_utilities.update_xml(lx_resp_xml, 'datapacket/data/qst/row[question_pk ='''||qst.qst_id_pk||''']/qst_json_value/text()',ln_qst_json_value);

                        ln_r_pid := get_tag_value (lx_resp_xml, 'datapacket/data/qst/row[question_pk ='''||qst.qst_id_pk||''']/reference_pid/text()',g_namespace);

                        if ln_r_pid is not null then
                            ln_r_pid := replace (ln_r_pid, '}',',"RESP_SPRD_PID":"' || l_sprd_pid || '"}');
                        else
                            ln_r_pid := '{"RESP_SPRD_PID":"' || l_sprd_pid || '"}';
                        end if;

                        ms_qsm_utilities.update_xml(lx_resp_xml, 'datapacket/data/qst/row[question_pk ='''||qst.qst_id_pk||''']/reference_pid/text()',ln_r_pid);

                        select metric_id into l_resp_metric_id from si_metrics_t
                        where metric_name = l_resp_metric_nm and metric_run_mode = 3;

                        l_error_message:=ms_apps_mdf_infoletoutput_pkg.insert_xml(MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESSPR')||'_V',
                                                                                                                    l_resp_metric_id,
                                                                                                                    l_sprd_pid,
                                                                                                                    l_sprd_iid,
                                                                                                                    l_sprd_xml.getclobval());



                        IF l_error_message != 'SUCCESS' OR l_error_message IS NULL THEN
                            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                            pn_error_sequence    => xn_error_seq,
                            pc_error_type        => 'E',
                            pc_error_text        => 'Error While Inserting XML into Spreadsheet View in the MS_QSM_UTILITIES '||l_error_message || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
                        END IF;

                        ms_apps_mdf_engine_pkg.start_flow(pn_pid => l_sprd_pid
                                              ,pc_flow_code=>MS_QSM_UTILITIES.GET_FLOW_CODE('QSM - Response Spreadsheet Flow')
                                              ,pc_metric_name=>MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESSPR')
                                              ,xn_error_handle_id =>xn_error_handle_id
                                              ,xn_error_code=>xn_error_code);

                        IF ln_error_code = '-1'  THEN
                            l_sch_det_status :='E';
                            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                            pn_error_sequence    => xn_error_seq,
                            pc_error_type        => 'E',
                            pc_error_text        => 'Error While Starting the Spreadsheet Flow' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
                        END IF;
                    END IF;
                END LOOP;

                --end by nagesh
                     -- ms_qsm_log_activity ('', 'RESPONSE XML~12', lx_resp_xml.getclobval());
                
                l_error_message:=ms_apps_mdf_infoletoutput_pkg.insert_xml(MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM')||'_V',
                                                                                                            ln_response_metric_id,
                                                                                                            ln_response_pid,
                                                                                                            ln_response_iid,
                                                                                                            lx_resp_xml.getclobval());

                IF l_error_message != 'SUCCESS' OR l_error_message IS NULL THEN
                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'E',
                    pc_error_text        => 'Error While Inserting XML into Response View in the ms_QSM_INIQSM_INIQSM_PROD '||l_error_message || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
                END IF;

                ms_apps_mdf_engine_pkg.start_flow(pn_pid => ln_response_pid
                                      ,pc_flow_code=>MS_QSM_UTILITIES.GET_FLOW_CODE('QSM Respond questionnaire workflow')
                                      ,pc_metric_name=>MS_QSM_UTILITIES.g_tbl_metric_maintenance('RESQSM')
                                      ,xn_error_handle_id =>xn_error_handle_id
                                      ,xn_error_code=>xn_error_code);

                IF ln_error_code = '-1'  THEN
                    l_sch_det_status :='E';
                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'E',
                    pc_error_text        => 'Error While Starting the Response Flow' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
                END IF;

                MS_QSM_UTILITIES.insert_schedule_logs(i_request_id => ip_que_request_id
                                            ,i_respondents =>ip_respondents
                                            ,i_log_level => 'D'
                                            ,i_sequence_no => ip_sequence_no
                                            ,i_process_instance_id => ln_response_pid
                                            ,i_status=> l_sch_det_status
                                            ,i_response_id =>lv_response_id
                                            ,i_iteration_number =>ip_iteration_number
                                            ,o_error_code=>ln_error_code
                                            ,o_error_message=>l_error_message);

                ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                pn_error_sequence    => xn_error_seq,
                pc_error_type        => 'I',
                pc_error_text        => 'ASSIGNMENT SEND TO'||ip_respondents);

                IF UPPER(IP_EXCEL_BASED) = 'YES' THEN


                    l_excel_xml := MS_QSM_UTILITIES.INSERT_XML(lx_resp_xml,'datapacket/data',XMLTYPE(MS_QSM_UTILITIES.GET_SPRD_SHEET_XML(lv_response_id,x_questnr_id,ip_respondents)),'A');

                    insert into ms_qsm_excel_survey_status
                        (QUE_REQUEST_ID,QUE_RESPONSE_ID,XML_DATA,FILE_STATUS,REQUESTED_ON,UPLOAD_STATUS)
                    values
                        (ip_que_request_id,lv_response_id,l_excel_xml.getclobval(),'P',SYSDATE,'P');


                END IF;

        EXCEPTION
            WHEN OTHERS THEN
                    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                    pn_error_sequence    => xn_error_seq,
                    pc_error_type        => 'E',
                    pc_error_text        => 'Fatal Error While Starting the Response Flow' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);

        END;



  FUNCTION FN_DERIVE_SCHEDULE_DATE(p_Frequency                    IN  Ms_Qs_List_Of_Values_t.Stored_Value%Type,
                                                                                            p_Frequency_Lov_Name    IN  Ms_Qs_Lov_Names.Lov_Name%Type Default 'ABC',
                                                                                            p_start_Date                    IN  DATE)
  RETURN DATE
  IS
      l_Schedule_Frequency                                          VARCHAR2(100) := p_Frequency;
      l_Frequency_Lov                                                  Ms_Qs_Lov_Names.Lov_Name%Type := TRIM(p_Frequency_Lov_Name);
      l_Return                                                              BOOLEAN := FALSE;
      l_Assignment_Date                                               DATE:= p_start_Date;
      l_Proc                                                                 VARCHAR2(4000):= 'Fn_Derive_Schedule_Date => ';
      l_Base_Date                                                        DATE   := SYSDATE;
      l_error_sequence                                                NUMBER;

    BEGIN

        SELECT MS_APPS_UTILITIES.Get_Display_Value((SELECT Enterprise_Id FROM Si_Ent_Active_v),
                                                                                l_Frequency_Lov,
                                                                                l_Schedule_Frequency)
        INTO   l_Schedule_Frequency
        FROM   Dual;

        l_Schedule_Frequency := Trim(l_Schedule_Frequency);

        SELECT CASE WHEN (l_Schedule_Frequency = 'Daily') THEN
                                (l_Assignment_Date + 1)
                            WHEN (l_Schedule_Frequency = 'Weekly') THEN
                                (l_Assignment_Date + 7)
                            WHEN (l_Schedule_Frequency = 'Monthly') THEN
                                ADD_MONTHS(l_Assignment_Date,1)
                            WHEN (l_Schedule_Frequency = 'Quarterly') THEN
                                ADD_MONTHS(l_Assignment_Date,3)
                            WHEN (l_Schedule_Frequency = 'Semi-Annually') THEN
                                ADD_MONTHS(l_Assignment_Date,6)
                            WHEN (l_Schedule_Frequency = 'Annually') THEN
                                ADD_MONTHS(l_Assignment_Date,12)
        ELSE

            l_Assignment_Date

        END Next_Test_Schedule_Date
        INTO   l_Assignment_Date -- Over writing assignment date.
        FROM   DUAL;

        RETURN TRIM(l_Assignment_Date);

    EXCEPTION
        WHEN OTHERS THEN

        ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => '',
                                                              pn_error_sequence    => l_error_sequence,
                                                              pc_error_type        => 'E',
                                                              pc_error_text        => 'Fatal Error in the FN_DERIVE_SCHEDULE_DATE ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);

               RETURN NULL;

    END FN_DERIVE_SCHEDULE_DATE;

  procedure REFRESH_LOV_ORG_TABLE(error_code out varchar2)
    as
    l_error_sequence number:=101;
    pragma autonomous_transaction;
    begin
    execute immediate 'truncate table ms_qsm_lov_org_values';
    insert into Ms_Qsm_Lov_Org_Values select * from Ms_Qs_Lov_Org_Values_v;
    commit;

    error_code:='SUCESS';
    EXCEPTION
        WHEN OTHERS THEN

        ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => '',
                                           pn_error_sequence    => l_error_sequence,
                                           pc_error_type        => 'E',
                                           pc_error_text        => 'Fatal Error in the REFRESH_LOV_ORG_TABLE SCH infolet' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
        error_code:='ERROR';

    end REFRESH_LOV_ORG_TABLE;
    FUNCTION GET_FIND_ISS_DATA_FOR_REPORT(p_pid NUMBER)
    RETURN  MS_QSM_FND_ISS_DATA_TABLE
    PIPELINED
    IS PRAGMA AUTONOMOUS_TRANSACTION;

    l_sql_string VARCHAR2(4000);
    ln_pid NUMBER;
    l_error_handle_id   NUMBER := 999;
    l_error_sequence    NUMBER := 999;

     TYPE ty_saved_data IS RECORD (
            ISSUE_TITLE VARCHAR2 (4000),
            ACTION_TITLE VARCHAR2 (4000),
            ACTION_OWNER VARCHAR2 (4000),
            ACTION_DESCRIPTION VARCHAR2 (4000));

   l_saved_data    ty_saved_data;

   TYPE ty_saved_data_tab IS TABLE OF ty_saved_data
                                INDEX BY PLS_INTEGER;

   l_saved_data_tab   ty_saved_data_tab;

    BEGIN
    
    
                    ln_pid := p_pid;
                    
                    if p_pid is not null then
                    
--                    l_sql_string := 'select  ISSUE_TITLE,ISSUE_TYPE,ISSUE_OWNER_ORG,ISSUE_OWNER,ACTION_TITLE,ACTION_OWNER,ACTION_DESCRIPTION
--                                        FROM
--                                        (SELECT  ACTION_FK,FINDING_ID,process_instance_id, multirow_region_id,ISSUE_TITLE,ISSUE_TYPE,ISSUE_OWNER_ORG,
--                                        ISSUE_OWNER,ACTION_TITLE,ACTION_OWNER,ACTION_DESCRIPTION
--                                        FROM si_'||l_metric_id||'_v
--                                         where Process_instance_id ='||ln_pid||'
--                                          and instance_id=(SELECT MAX (instance_id) AS instid
--                                                           FROM si_'||l_metric_id||'_v where  Process_instance_id ='||ln_pid||')
--                                         and (FINDING_ID is not null or ACTION_FK is not null))
--                                    UNION
--                                         SELECT  ACTION_FK,ACTION_ID,process_instance_id, multirow_region_id,ISSUE_TITLE,ISSUE_TYPE,ISSUE_OWNER_ORG,
--                                         ISSUE_OWNER,ACTION_TITLE,ACTION_OWNER,ACTION_DESCRIPTION
--                                         FROM si_'||l_metric_id||'_v
--                                         where Process_instance_id ='||ln_pid||'
--                                               and instance_id=(SELECT MAX (instance_id) AS instid
--                                                           FROM si_'||l_metric_id||'_v where  Process_instance_id ='||ln_pid||')
--                                         and (ACTION_ID is not null))A
--                                         start with ACTION_FK is null
--                                     CONNECT BY PRIOR FINDING_ID =ACTION_FK';
--
                                        l_sql_string := 'SELECT (''<p>Issue Title: <a style="font-weight: normal;">''||A. ISSUE_TITLE||
                      ''</a>, Issue Type: <a style="font-weight: normal;"> ''|| (SELECT displayed_value
                      FROM ms_qs_list_of_values_t
                      WHERE lov_id =
                      ( SELECT lov_id
                      FROM ms_qs_lov_names
                      WHERE lov_name = ''MS_QSM_Finding_Type'')
                      AND stored_value =A. ISSUE_TYPE)||
                      ''</a>, Issue Owner Org: <a style="font-weight: normal;">''|| (select ORG_ENTITY_NAME from SI_ORG_ENTITIES_T where ORG_ENTITY_ID= A.ISSUE_OWNER_ORG)||
                      ''</a>, Issue Owner: <a style="font-weight: normal;">''||ms_qsm_utilities.get_user_names(A.ISSUE_OWNER)||''</a></p>'') As Issue_title
                      ,B.ACTION_TITLE,ms_qsm_utilities.get_user_names(B.ACTION_OWNER),B.ACTION_DESCRIPTION FROM MS_QSM_RESP_ISSUE A,MS_QSM_RESP_ACTION B
                      WHERE A.DD_PROCESS_INSTANCE_ID = '''||ln_pid||'''
                      AND A.FINDING_ID=B.ACTION_FK(+)
                      ORDER BY A.FINDING_ID';

                      ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => '',
                                                              pn_error_sequence    => l_error_sequence,
                                                              pc_error_type        => 'I',
                                                              pc_error_text        => 'l_sql_string ' || l_sql_string);

                    EXECUTE IMMEDIATE l_sql_string
                    BULK COLLECT INTO l_saved_data_tab;

                   FOR i IN l_saved_data_tab.FIRST .. l_saved_data_tab.LAST
                    LOOP
                     PIPE ROW (MS_QSM_FND_ISS_DATA (l_saved_data_tab(i).ISSUE_TITLE,
                                                        l_saved_data_tab(i).ACTION_TITLE,
                                                        l_saved_data_tab(i).ACTION_OWNER,
                                                        l_saved_data_tab(i).ACTION_DESCRIPTION));
                    END LOOP;

--                    IF ln_status = 0 THEN
--
--                        DELETE FROM SI_EVENT_ASSIGNMENTS
--                        WHERE INFOLET_ID = l_metric_id
--                        AND USER_ID = ms_apps_utilities.get_user_id(i_user_name)
--                        AND PROCESS_INSTANCE_ID = ln_pid;
--
--                    ELSIF ln_status <> 1 THEN
--
--                        UPDATE SI_EVENT_ASSIGNMENTS
--                        SET STATUS = ln_status
--                        WHERE INFOLET_ID = l_metric_id
--                        AND USER_ID = ms_apps_utilities.get_user_id(i_user_name)
--                        AND PROCESS_INSTANCE_ID = ln_pid;
--
--                    END IF;

                    commit;
              end if;
                    RETURN;
    EXCEPTION
        WHEN OTHERS THEN

        ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => '',
                                                              pn_error_sequence    => l_error_sequence,
                                                              pc_error_type        => 'E',
                                                              pc_error_text        => 'GET_FIND_ISS_DATA_FOR_REPORT ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);

         RETURN;

    END;

    FUNCTION get_Issue_Title (p_QUE_RESPONSE_ID IN VARCHAR2)
    RETURN VARCHAR2
    IS
            l_QUE_RESPONSE_ID VARCHAR2(250);
            l_Issue_title           VARCHAR2(4000);
            l_error_handle_id   NUMBER := 999;
            l_error_sequence    NUMBER := 999;
    BEGIN
             l_QUE_RESPONSE_ID :=p_QUE_RESPONSE_ID;

--            select ('<p><a style="color: #ff6600;font-weight: bold; courier: ;">Issue Title: </a>'||A. ISSUE_TITLE||
--            ',<a style="color: #ff6600;font-weight: bold; courier: ;"> Issue Type: </a> '|| (SELECT displayed_value
--                                               FROM ms_qs_list_of_values_t
--                                               WHERE lov_id =
--                                             ( SELECT lov_id
--                                                         FROM ms_qs_lov_names
--                                                        WHERE lov_name = 'MS_QSM_Finding_Type')
--                                               AND stored_value =A. ISSUE_TYPE)||
--            ',<a style="color: #ff6600;font-weight: bold; courier: ;"> Issue Owner Org: </a> '|| (select ORG_ENTITY_NAME from SI_ORG_ENTITIES_T where ORG_ENTITY_ID= ISSUE_OWNER_ORG)||
--            ',<a style="color: #ff6600;font-weight: bold; courier: ;"> Issue Owner: </a>'||ms_qsm_utilities.get_user_names(A.ISSUE_OWNER)||'.</p>') As Issue
--            INTO l_Issue_title
--            FROM MS_QSM_RESP_ISSUE A
--            WHERE A.FINDING_FK= l_QUE_RESPONSE_ID;


            select ('<p>Issue Title: <a style="font-weight: normal;">'||A. ISSUE_TITLE||
            '</a>, Issue Type: <a style="font-weight: normal;"> '|| (SELECT displayed_value
                                               FROM ms_qs_list_of_values_t
                                               WHERE lov_id =
                                             ( SELECT lov_id
                                                         FROM ms_qs_lov_names
                                                        WHERE lov_name = 'MS_QSM_Finding_Type')
                                               AND stored_value =A. ISSUE_TYPE)||
            '</a>, Issue Owner Org: <a style="font-weight: normal;"> '|| (select ORG_ENTITY_NAME from SI_ORG_ENTITIES_T where ORG_ENTITY_ID= ISSUE_OWNER_ORG)||
            '</a>, Issue Owner: <a style="font-weight: normal;">'||ms_qsm_utilities.get_user_names(A.ISSUE_OWNER)||'</a></p>') As Issue
            INTO l_Issue_title
            FROM MS_QSM_RESP_ISSUE A
            WHERE A.FINDING_FK= l_QUE_RESPONSE_ID;

            RETURN l_Issue_title;
    EXCEPTION
            WHEN OTHERS
            THEN
             ms_apps_mdf_errors_pkg.
             insert_log (pn_error_handle_id   => l_error_handle_id,
                         pn_error_sequence    => l_error_sequence,
                         pc_error_type        => 'ERROR',
                         pc_error_text        => 'Error while obtaining Issue title in Finding and Issue Report ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);
             RETURN NULL;
    END;

    FUNCTION CALCULATE_INFOLET_SCORE(
                                                                 p_question_id VARCHAR2,
                                                                 p_response_val VARCHAR2,
                                                                 p_pid NUMBER DEFAULT NULL,
                                                                 p_iid NUMBER DEFAULT NULL
                                                                )
   RETURN  VARCHAR2
   IS
    l_sql_string VARCHAR2(4000);
    l_error_handle_id   NUMBER := 999;
    l_error_sequence    NUMBER := 999;
    l_score_grade   VARCHAR2(4000) :=NULL;
    l_infolet_scoring_flag  VARCHAR2(10);
    l_scoring_infolet       VARCHAR2(255);
    l_db_function_name  VARCHAR2(30);


    BEGIN


            SELECT A.QST_INFOLET_SCORING,A.QST_SCR_INFOLET
            INTO l_infolet_scoring_flag,l_scoring_infolet
            FROM MS_QSM_QUESTION A
            WHERE a.QST_ID_PK=p_question_id;

--            l_infolet_scoring_flag :='1';
--            l_scoring_infolet :='10001';

            IF NVL(l_infolet_scoring_flag,'2') = '1' THEN

                SELECT DB_FUNCTION_NAME
                INTO l_db_function_name
                FROM MS_QSM_SCORING_INFOLETS
                WHERE INFOLET_ID = l_scoring_infolet
                AND ACTIVE ='Y';

                l_sql_string := 'SELECT '||l_db_function_name||'(:1,:2,:3,:4) FROM DUAL';


                EXECUTE IMMEDIATE l_sql_string
                INTO l_score_grade
                using p_pid,p_iid,p_question_id,p_response_val ;

            END IF;

            RETURN l_score_grade;

    EXCEPTION
        WHEN OTHERS THEN

        ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => '',
                                                              pn_error_sequence    => l_error_sequence,
                                                              pc_error_type        => 'E',
                                                              pc_error_text        => 'CALCULATE_INFOLET_SCORE ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);

         RETURN NULL;

    END;

FUNCTION get_config_parameters
      RETURN VARCHAR2
   IS
      CURSOR c_param
      IS
         SELECT a.parameter_name AS param_name,
                b.parameter_value AS param_val
           FROM ms_qs_parameter_names a,
                ms_qs_parameter_values b,
                ms_qs_parameter_types c
          WHERE a.parameter_id = b.parameter_id
            AND a.parameter_type_id = b.parameter_type_id
            AND a.parameter_type_id = c.parameter_type_id
            AND b.parameter_type_id = c.parameter_type_id
            AND c.parameter_type IN
                    ('MS_QSM_Configuration', 'MS_QSM_Email_Configuration');

      lv_config_values   VARCHAR2 (32000) := NULL;
   BEGIN
      FOR c_rec IN c_param
      LOOP
         IF lv_config_values IS NULL
         THEN
            lv_config_values :=
                  '{'
               || '"'
               || c_rec.param_name
               || '"'
               || ':'
               || '"'
               || c_rec.param_val
               || '"';
         ELSE
            lv_config_values :=
                  lv_config_values
               || ','
               || '"'
               || c_rec.param_name
               || '"'
               || ':'
               || '"'
               || c_rec.param_val
               || '"';
         END IF;
      END LOOP;

      lv_config_values := lv_config_values || '}';
      RETURN lv_config_values;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
   END get_config_parameters;

   FUNCTION fn_split_lov_values (i_string IN VARCHAR2)
      RETURN MS_QSM_VARCHAR2_ARRAY PIPELINED
   IS
      x_idx    PLS_INTEGER;
      x_list   VARCHAR2 (32767) := i_string;
      x_delimeter varchar2(10):=',';
   BEGIN
      LOOP
          SELECT VALUE
          INTO x_delimeter
          FROM ms_qsm_params
         WHERE     PARAM_GROUP = 'QSM_PARAMS'
               AND PARAMETER = 'QUESTION_LOV_DELIMETER'
               AND ENABLED = 'Y';

         x_idx := INSTR (x_list, x_delimeter);

         IF (x_idx > 0)
         THEN
            PIPE ROW (SUBSTR (x_list, 1, x_idx - 1));
            x_list := SUBSTR (x_list, x_idx + LENGTH (x_delimeter));
         ELSE
            PIPE ROW (x_list);
            EXIT;
         END IF;
      END LOOP;

      RETURN;

   END fn_split_lov_values;

FUNCTION GET_INFOLET_RESULT_DATA(i_infolet_id IN VARCHAR2,
                                            i_instance_id    IN VARCHAR2,
                                            i_column_list IN VARCHAR2)
    RETURN MS_QSM_INFOLET_RESULT_TABLE
    PIPELINED
    IS PRAGMA AUTONOMOUS_TRANSACTION;

    l_sql_string VARCHAR2(4000);
    l_error_handle_id   NUMBER := 999;
    l_error_sequence    NUMBER := 999;
    l_local_column      VARCHAR2(4000);

     TYPE ty_result_data IS RECORD (
            STORED_VALUE VARCHAR2(4000),
            DISPLAY_VALUE VARCHAR2(4000),
            LOCALE_ID NUMBER);


   l_result_data    ty_result_data;

   TYPE ty_result_data_tab IS TABLE OF ty_result_data
                                INDEX BY PLS_INTEGER;

   l_result_data_tab   ty_result_data_tab;

    BEGIN

            BEGIN

                SELECT ','||RESULT_COLUMN_NAME
                INTO l_local_column
                FROM SI_METRIC_COLUMNS
                WHERE METRIC_ID=i_infolet_id
                AND LOCALE_COLUMN_FLAG ='Y';

            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    l_local_column := ',1009 LOCALE_ID'  ;
            END;

            --l_sql_string := 'SELECT '||i_column_list||l_local_column||' FROM SI_'||i_infolet_id||'_T WHERE INSTANCE_ID='||i_instance_id;
            L_SQL_STRING := 'SELECT '||I_COLUMN_LIST||',b.LOCALE_ID FROM SI_'||I_INFOLET_ID||'_T,SI_ENABLED_LOCALES B WHERE INSTANCE_ID=:1';

            execute immediate L_SQL_STRING
            BULK COLLECT INTO l_result_data_tab using I_INSTANCE_ID;

           FOR i IN l_result_data_tab.FIRST .. l_result_data_tab.LAST
            LOOP
             PIPE ROW (MS_QSM_INFOLET_RESULT (l_result_data_tab (i).STORED_VALUE,
                                                 l_result_data_tab (i).DISPLAY_VALUE,
                                                 l_result_data_tab (i).LOCALE_ID));
            END LOOP;


            COMMIT;
            RETURN;
    EXCEPTION
        WHEN OTHERS THEN
                RETURN;
    END GET_INFOLET_RESULT_DATA;

    FUNCTION GET_SPREADSHEET_JSON (
       i_spread_sheet_id VARCHAR2,
       i_user_name  VARCHAR2)
       RETURN CLOB
    IS
       json_object            CLOB;
       json_cid               VARCHAR2 (4000);
       json_cname             VARCHAR2 (4000);
       json_ctype             VARCHAR2 (4000);
       json_sto_val           VARCHAR2 (4000);
       json_disp_val          VARCHAR2 (4000);
       json_infolet_name      VARCHAR2 (4000);
       json_param_list        VARCHAR2 (4000);
       json_upper_limit       VARCHAR2 (4000);
       json_lower_limit       VARCHAR2 (4000);
      -- json_lovs              VARCHAR2 (4000);
       --json_lovs_sto          VARCHAR2 (4000);
       json_lovs              CLOB;
       json_lovs_sto          CLOB;
       json_allow_past_date   VARCHAR2 (4000);
       json_unvalidate        VARCHAR2 (4000);
       ind                    NUMBER;
       lovs_sto_val           VARCHAR2 (4000);
       p_infolet_id            NUMBER;
       l_locale_id              NUMBER;
    BEGIN
        SELECT LOCALE_ID
        INTO l_locale_id
        FROM SI_LOCALES a,SI_USERS_T b
        WHERE B.USER_NAME= i_user_name
        AND A.LOCALE_STRING= B.LOCALE;

       json_object := '{';
       json_cid := '[';
       json_cname := '[';
       json_ctype := '[';
       json_sto_val := '[';
       json_disp_val := '[';
       json_infolet_name := '[';
       json_param_list := '[';
       json_upper_limit := '[';
       json_lower_limit := '[';
       json_lovs := '[';
       json_lovs_sto := '[';
       json_allow_past_date := '[';
       json_unvalidate := '[';
       ind := 0;
       lovs_sto_val := NULL;

       FOR fld_data IN (SELECT X.FLD_ID_PK,
                               NVL(Y.FIELD_NAME,HTF.ESCAPE_SC(X.FIELD_NAME)) FIELD_NAME,
                               X.FIELD_TYPE,
                               X.LOWER_LIMIT,
                               X.UPPER_LIMIT,
                               NVL(Y.FIELD_VALUE,X.FIELD_VALUE) FIELD_VALUE,
                               X.FLD_INFOLET,
                               X.FLD_PARAMETER,
                               X.ALLOW_PAST_DATE,
                               X.FLD_PARAMETER_FIELDS,
                               X.FLD_DISPLAY_VALUE,
                               X.FLD_STORED_VALUE,
                               X.ALLOW_UNVALIDATE_DATA,
                               X.SPRD_SHEET_INTERNAL_ID
                          FROM (SELECT  FLD_ID_PK,
                                                   FIELD_NAME,
                                                   FIELD_TYPE,
                                                   LOWER_LIMIT,
                                                   UPPER_LIMIT,
                                                   FIELD_VALUE,
                                                   FLD_INFOLET,
                                                   FLD_PARAMETER,
                                                   ALLOW_PAST_DATE,
                                                   FLD_PARAMETER_FIELDS,
                                                   FLD_DISPLAY_VALUE,
                                                   FLD_STORED_VALUE,
                                                   ALLOW_UNVALIDATE_DATA,
                                                   SPRD_SHEET_INTERNAL_ID,
                                                   LOCALE_ID
                                      FROM ms_qsm_spreadsheet_fld a,SI_ENABLED_LOCALES b
                                      WHERE  sprd_sheet_internal_id = i_spread_sheet_id )X ,ms_qsm_spreadsheet_fld_tl Y
                         WHERE X.sprd_sheet_internal_id = Y.sprd_sheet_internal_id(+)
                        AND X.FLD_ID_PK=Y.FLD_ID_PK(+)
                         AND X.LOCALE_ID = Y.LOCALE_ID(+)
                         AND X.locale_id = l_locale_id
                         ORDER BY TO_NUMBER(SUBSTR(X.FLD_ID_PK,4)))
       LOOP
            lovs_sto_val:=''; -- re - initialize stored value
          IF fld_data.field_type IN ('3')                --field type for Dropdown
          THEN
            BEGIN
             SELECT ms_concat (stored_value)
               INTO lovs_sto_val
               FROM MS_QSM_SPRD_LOV_DATA
              WHERE spreadsheet_id = i_spread_sheet_id
                    AND column_id = fld_data.fld_id_pk;
            EXCEPTION
            WHEN OTHERS THEN
               lovs_sto_val:='';
            END;
          END IF;

            p_infolet_id := 0; -- Re-initializing value
            IF  fld_data.fld_infolet is NOT NULL
                THEN
                BEGIN
                   SELECT metric_id
                     INTO p_infolet_id
                     FROM si_metrics_t
                    WHERE metric_name = fld_data.fld_infolet;
                EXCEPTION
                   WHEN OTHERS
                   THEN
                      p_infolet_id := 0;
                END;
            END if;


          IF ind = 0
          THEN
             json_cid := json_cid || '"' || fld_data.fld_id_pk || '"';
             json_cname := json_cname || '"' || fld_data.field_name || '"';
             json_ctype := json_ctype || '"' || fld_data.field_type || '"';
             json_sto_val := json_sto_val || '"' || fld_data.fld_stored_value || '"';
             json_disp_val := json_disp_val || '"' || fld_data.fld_display_value || '"';
             json_infolet_name := json_infolet_name || '"' || p_infolet_id || '"';
             json_param_list := json_param_list || '"' || fld_data.fld_parameter_fields || '"';
             json_upper_limit := json_upper_limit || '"' || fld_data.upper_limit || '"';
             json_lower_limit := json_lower_limit || '"' || fld_data.lower_limit || '"';
             json_lovs := json_lovs || '"' || fld_data.field_value || '"';
             json_lovs_sto := json_lovs_sto || '"' || lovs_sto_val || '"';
             json_allow_past_date := json_allow_past_date || '"' || fld_data.allow_past_date || '"';
             json_unvalidate := json_unvalidate || '"' || fld_data.allow_unvalidate_data || '"';
             ind := ind + 1;
          ELSE
             json_cid := json_cid || ',' || '"' || fld_data.fld_id_pk || '"';
             json_cname := json_cname || ',' || '"' || fld_data.field_name || '"';
             json_ctype := json_ctype || ',' || '"' || fld_data.field_type || '"';
             json_sto_val := json_sto_val || ',' || '"' || fld_data.fld_stored_value || '"';
             json_disp_val := json_disp_val || ',' || '"' || fld_data.fld_display_value || '"';
             json_infolet_name := json_infolet_name || ',' || '"' || p_infolet_id || '"';
             json_param_list := json_param_list || ',' || '"' || fld_data.fld_parameter_fields || '"';
             json_upper_limit := json_upper_limit || ',' || '"' || fld_data.upper_limit || '"';
             json_lower_limit := json_lower_limit || ',' || '"' || fld_data.lower_limit || '"';
             json_lovs := json_lovs || ',' || '"' || fld_data.field_value || '"';
             json_lovs_sto := json_lovs_sto || ',' || '"' || lovs_sto_val || '"';
             json_allow_past_date := json_allow_past_date || ',' || '"' || fld_data.allow_past_date || '"';
             json_unvalidate := json_unvalidate || ',' || '"' || fld_data.allow_unvalidate_data || '"';
          END IF;
       END LOOP;

       json_cid := json_cid || ']';
       json_cname := json_cname || ']';
       json_ctype := json_ctype || ']';
       json_sto_val := json_sto_val || ']';
       json_disp_val := json_disp_val || ']';
       json_infolet_name := json_infolet_name || ']';
       json_param_list := json_param_list || ']';
       json_upper_limit := json_upper_limit || ']';
       json_lower_limit := json_lower_limit || ']';
       json_lovs := json_lovs || ']';
       json_lovs_sto := json_lovs_sto || ']';
       json_allow_past_date := json_allow_past_date || ']';
       json_unvalidate := json_unvalidate || ']';

       json_object := json_object || '"CID" : ' || json_cid;
       json_object := json_object || ',' || '"CNAME" : ' || json_cname;
       json_object := json_object || ',' || '"CTYPE" : ' || json_ctype;
       json_object := json_object || ',' || '"STO_VAL" : ' || json_sto_val;
       json_object := json_object || ',' || '"DISP_VAL" : ' || json_disp_val;
       json_object :=
          json_object || ',' || '"INFOLET_NAME" : ' || json_infolet_name;
       json_object :=
          json_object || ',' || '"INFO_PARAM_LIST" : ' || json_param_list;
       json_object := json_object || ',' || '"UPPER_LIMIT" : ' || json_upper_limit;
       json_object := json_object || ',' || '"LOWER_LIMIT" : ' || json_lower_limit;
       json_object := json_object || ',' || '"LOVS" : ' || json_lovs;
       json_object := json_object || ',' || '"LOVS_STO" : ' || json_lovs_sto;
       json_object := json_object || ',' || '"ALLOW_PAST_DATE" : ' || json_allow_past_date;
       json_object := json_object || ',' || '"ALLOW_UNVALIDATE" : ' || json_unvalidate;

       json_object := json_object || '}';

       RETURN json_object;
    END GET_SPREADSHEET_JSON;

    PROCEDURE  UPDATE_METRIC_TABLE  (ip_metric_id IN NUMBER ,
                                                              ip_metric_columns IN VARCHAR2  ,
                                                              ip_modified_value IN VARCHAR2,
                                                              ip_column_type IN VARCHAR2,
                                                              ip_pid IN NUMBER,
                                                              xn_error_handle_id IN OUT NUMBER ,
                                                              xn_error_seq IN OUT NUMBER,
                                                              xn_error_code OUT NOCOPY NUMBER,
                                                              xn_error_message OUT NOCOPY VARCHAR2 )
    AS
        lv_sql_string                                                   VARCHAR2(4000);
        lv_column_string                                             VARCHAR2(4000);
        l_column_list_start                                          NUMBER:=1;
        l_column_val_start                                          NUMBER:=1;
        l_column_type_start                                        NUMBER:=1;
        l_no_of_columns                                             NUMBER;
        l_data_type                                                    VARCHAR2(10);
        l_metric_columns                                            VARCHAR2(4000) :=ip_metric_columns||',';
        l_modified_value                                             VARCHAR2(4000) :=ip_modified_value||',';
        l_column_type                                                VARCHAR2(4000) :=ip_column_type||',';

    BEGIN


        SELECT (LENGTH(TRIM(l_metric_columns))-LENGTH(REPLACE(TRIM(l_metric_columns),',')))
        INTO l_no_of_columns
        FROM DUAl;

        FOR i IN 1..l_no_of_columns loop

            l_data_type := SUBSTR(l_column_type,l_column_type_start,instr(l_column_type,',',1,i)-l_column_type_start);

            SELECT  lv_column_string||SUBSTR(l_metric_columns,l_column_list_start,instr(l_metric_columns,',',1,i)-l_column_list_start)||'='||DECODE(l_data_type,'N','TO_NUMBER(''','D','TO_DATE(''','''')|| SUBSTR(l_modified_value,l_column_val_start,instr(l_modified_value,',',1,i)-l_column_val_start)||DECODE(l_data_type,'N',''')','D',''',''MM/DD/YYYY'')','''') ||','
            INTO lv_column_string FROM DUAL;

            l_column_list_start := INSTR(l_metric_columns,',',1,i)+1;
            l_column_val_start := INSTR(l_modified_value,',',1,i)+1;
            l_column_type_start := INSTR(l_column_type,',',1,i)+1;

        END LOOP;


            LV_SQL_STRING := 'UPDATE  SI_'||IP_METRIC_ID||'_T SET '||RTRIM(LV_COLUMN_STRING,',')||' WHERE PROCESS_INSTANCE_ID =:1'||'
                                AND INSTANCE_ID = (SELECT MAX(INSTANCE_ID) FROM SI_'||ip_metric_id||'_T WHERE PROCESS_INSTANCE_ID =:2'||')';

            EXECUTE IMMEDIATE lv_sql_string using IP_PID,ip_pid;

           xn_error_code := 0;
           xn_error_message:='';

    EXCEPTION
        WHEN OTHERS THEN
              ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => xn_error_handle_id,
                     pn_error_sequence    => xn_error_seq,
                     pc_error_type        => 'E',
                     pc_error_text        => 'Fatal Error in the MS_QSM_UTILITIES.UPDATE_METRIC_TABLE :' ||lv_sql_string||':'|| DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM);

                     xn_error_code := 1;
                     xn_error_message :=  'Fatal Error in the MS_QSM_UTILITIES.UPDATE_METRIC_TABLE ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM;

    END UPDATE_METRIC_TABLE;

FUNCTION MODULE_OBJECT_CONTACT_LIST(i_applies_to_obect IN VARCHAR2)
    RETURN MS_QSM_USER_LIST_TABLE
    PIPELINED
    IS PRAGMA AUTONOMOUS_TRANSACTION;

    l_sql_string VARCHAR2(4000);
    ln_pid           NUMBER;
    ln_status       NUMBER;
    l_metric_id NUMBER;
    l_error_handle_id   NUMBER := 999;
    l_error_sequence    NUMBER := 999;

    l_locale_id                    NUMBER;
    L_ENTERPRICE_ID         NUMBER;
    l_applies_to              VARCHAR2(255);
    L_OBJECT                    CLOB;
    L_ITEM_FLAG               VARCHAR2 (10);
    l_applies_to_obect        VARCHAR2(4000);

     TYPE ty_user_list IS RECORD (
                                                USER_NAME VARCHAR2(4000),
                                                USER_FULL_NAME VARCHAR2(4000),
                                                OBJECT_ID VARCHAR2(4000),
                                                OBJECT_NAME VARCHAR2(4000));

   l_user_list    ty_user_list;

   TYPE ty_user_list_tab IS TABLE OF ty_user_list
    INDEX BY PLS_INTEGER;

   l_user_list_tab   ty_user_list_tab;

    BEGIN

      l_applies_to_obect:= i_applies_to_obect;

                    l_applies_to := SUBSTR(l_applies_to_obect,1,(INSTR(l_applies_to_obect,'~',1)-1));

                --    l_object := SUBSTR(l_applies_to_obect,(INSTR(l_applies_to_obect,'~',1,1)+1),(INSTR(l_applies_to_obect,'~',2,2)-(INSTR(l_applies_to_obect,'~',1,1)+1)));

                    l_object := SUBSTR(l_applies_to_obect,(INSTR(l_applies_to_obect,'~',1)+1));

                --    l_item_flag := RTRIM(SUBSTR(l_applies_to_obect,(INSTR(l_applies_to_obect,'~',2,2)+1)),'~');


                    IF l_applies_to ='8' OR l_applies_to = '13' OR l_applies_to = '14'  THEN

--                        l_sql_string:='SELECT CO_USER USER_NAME,User_Full_Name USER_FULL_NAME
--                                                FROM MS_AUD_CONTACT_PUB_V
--                                                WHERE CO_USER IS NOT NULL
--                                                AND l_applies_to=''14''
--                                                AND audit_id ='''||l_object||'''
--                                                UNION ALL
--                                                SELECT CT_USER_SYSTEM USER_NAME,MS_APPS_UTILITIES.GET_USER_FULL_NAME(CT_USER_SYSTEM) USER_FULL_NAME
--                                                FROM MS_SPI_OBJECT_CONTACT_VW
--                                                WHERE CT_USER_SYSTEM IS NOT NULL
--                                                AND ( l_applies_to=''13'' OR  l_applies_to=''8'')
--                                                AND OBJECT_ID = '''||l_object||'''';
                           IF L_APPLIES_TO = '14' THEN
                            L_SQL_STRING:='SELECT A.USER_NAME USER_NAME,A.User_Full_Name USER_FULL_NAME,A.audit_id OBJECT_ID,B.AUDIT_TITLE OBJECT_NAME
                                                FROM MS_AUD_CONTACT_PUB_V A,MS_AUD_HEADER_PUB_V B
                                                WHERE A.AUDIT_ID=B.AUDIT_ID
                                                AND USER_NAME IS NOT NULL
--                                                AND l_applies_to=''14''
                                                AND A.audit_id IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string ('''||l_object||''','','')))';
                         ELSE

                            l_sql_string:=' SELECT A.CT_USER_SYSTEM USER_NAME,MS_APPS_UTILITIES.GET_USER_FULL_NAME(A.CT_USER_SYSTEM) USER_FULL_NAME,A.OBJECT_ID OBJECT_ID,B.OBJECT_NAME OBJECT_NAME
                                                FROM MS_SPI_OBJECT_CONTACT_VW A,MS_GRC_CORE_OBJECT_PUB_V B
                                                WHERE A.OBJECT_ID=B.OBJECT_ID
                                                AND B.DD_OBJECT_TYPE IN (''MS_SPI_FACILITY'',''MS_SPI_SUPPLIER'')
                                                AND CT_USER_SYSTEM IS NOT NULL
--                                                AND ( l_applies_to=''13'' OR  l_applies_to=''8'')
                                                AND A.OBJECT_ID IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string ('''||l_object||''','','')))
                                                UNION ALL
                                                SELECT C.USER_NAME USER_NAME,MS_APPS_UTILITIES.GET_USER_FULL_NAME(C.USER_NAME) USER_FULL_NAME,A.OBJECT_ID OBJECT_ID,B.OBJECT_NAME OBJECT_NAME
                                                FROM MS_SPI_SUPPLIER_ROG_PUB_V A,MS_GRC_CORE_OBJECT_PUB_V B,SI_USERS_T C
                                                WHERE A.OBJECT_ID=B.OBJECT_ID
                                                AND B.DD_OBJECT_TYPE IN (''MS_SPI_FACILITY'',''MS_SPI_SUPPLIER'')
                                                AND to_number(nvl(a.rog_name,''0''))=c.user_id
                                                AND A.OBJECT_ID IN (SELECT COLUMN_VALUE FROM TABLE (ms_apps_utilities.parse_string ('''||l_object||''','','')))';
                         END IF;
--                                                DBMS_OUTPUT.PUT_LINE(l_sql_string);

                                            BEGIN

                                            EXECUTE IMMEDIATE l_sql_string
                                            BULK COLLECT INTO l_user_list_tab;

                                            EXCEPTION
                                                WHEN OTHERS THEN
                                                    NULL;
                                            END;

                    END IF;

                    IF l_user_list_tab.count >0 THEN

                       FOR i IN l_user_list_tab.FIRST .. l_user_list_tab.LAST
                        LOOP
                         PIPE ROW (MS_QSM_USER_LIST (L_USER_LIST_TAB (I).USER_NAME,
                                                             L_USER_LIST_TAB (I).USER_FULL_NAME,
                                                             L_USER_LIST_TAB (I).OBJECT_ID,
                                                             l_user_list_tab (i).OBJECT_NAME));
                        END LOOP;

                    END IF;

                    COMMIT;
                    RETURN;


    END;

FUNCTION GET_CONTACT_USER_AVAILABLE
RETURN VARCHAR2
AS
l_return    VARCHAR2(4000);
BEGIN

--    l_return := 'XY';
    SELECT  '{"CONTACT_USER_AVLBL_ITEMS":"'||MS_CONCAT(OBJECT_ID)||'"}'
--    select MS_CONCAT(OBJECT_ID)
    INTO l_return
    FROM (SELECT DISTINCT OBJECT_ID FROM MS_QSM_APPLIES_TO WHERE CONTACT_USER_AVAILABLE = 'Y') A;

    RETURN l_return;

EXCEPTION
    WHEN OTHERS THEN
    RETURN    NULL;
END;

PROCEDURE INSERT_INSTALLER_LOG (i_log_text  IN VARCHAR2,
                                            i_status IN VARCHAR2,
                                            i_file_name IN VARCHAR2,
                                            i_object_name IN VARCHAR2)
AS PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN

    IF i_log_text IS NOT NULL THEN

        INSERT INTO MS_QSM_INSTALLER_LOGS ( LOG_DATE,LOG_SEQUENCE,LOG_TEXT,STATUS,FILE_NAME,OBJECT_NAME)
        VALUES (SYSDATE,MS_QSM_INSTALLER_LOG_S.NEXTVAL,i_log_text,i_status,i_file_name,i_object_name);

        COMMIT;

    END IF;


EXCEPTION
WHEN OTHERS THEN
    NULL;
END;


FUNCTION GET_CONCAT_LIST_OF_VALUES (i_question_id IN VARCHAR2,
                                    i_locale_id IN NUMBER)
RETURN VARCHAR2
AS
  l_list_of_val VARCHAR2(4000):='';
  l_delimeter VARCHAR2(10);
  l_locale_id NUMBER;
BEGIN

  l_locale_id := i_locale_id;

  IF l_locale_id IS NULL THEN

    SELECT LOCALE_ID
    INTO l_locale_id
    FROM SI_LOCALES
    WHERE LOCALE_STRING = 'en_US';

  END IF;

  BEGIN
    SELECT VALUE
    INTO l_delimeter
    FROM MS_QSM_PARAMS
    WHERE PARAM_GROUP='QSM_PARAMS'
    AND PARAMETER = 'QUESTION_LOV_DELIMETER';
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
        l_delimeter:=',';
  END;
  FOR lo_data_cur IN (SELECT NVL(Y.DISPLAY_VALUE,X.DISPLAY_VALUE) DISPLAY_VALUE FROM
                        (SELECT display_value,STORED_VALUE,b.locale_id,question_id from MS_QSM_QST_LOV_DATA,si_enabled_locales b)X,MS_QSM_QST_LOV_DATA_TL Y
                        where X.question_id=i_question_id
                        AND X.question_id = Y.QUESTION_ID_FK(+)
                        AND X.LOCALE_ID= Y.LOCALE_ID(+)
                        AND X.LOCALE_ID=NVL(l_locale_id,X.LOCALE_ID)
                        AND X.STORED_VALUE <>'QST_NA'
                        ORDER BY TO_NUMBER(SUBSTR(X.STORED_VALUE,4))) LOOP

       l_list_of_val:= l_list_of_val||lo_data_cur.display_value||l_delimeter;


  END LOOP;

  l_list_of_val := RTRIM(l_list_of_val,l_delimeter);

  RETURN l_list_of_val;

EXCEPTION
WHEN OTHERS THEN
  RETURN NULL;
END;


FUNCTION GET_SPRD_SHEET_XML (IP_RESPONSE_ID VARCHAR2,
                                               IP_QUESTIONNAIRE_ID VARCHAR2,
                                               IP_USER_NAME VARCHAR2)

RETURN CLOB AS
L_XML_DATA XMLTYPE ;
l_heder_string_data CLOB;
l_detail_string_temp CLOB;
L_DETAIL_STRING_DATA CLOB;
L_SPREADSHEET_NAME VARCHAR2(4000);
L_LOCALE_ID NUMBER;
l_field_count NUMBER;
BEGIN

    BEGIN

        SELECT LOCALE_ID
        INTO l_locale_id
        FROM SI_USERS_T A,SI_LOCALES B
        WHERE A.LOCALE = B.LOCALE_STRING
        AND A.USER_NAME=IP_USER_NAME;

    EXCEPTION
        WHEN OTHERS THEN
          SELECT LOCALE_ID
          INTO l_locale_id
          FROM SI_LOCALES
          WHERE LOCALE_STRING='en_US';

    END;

    L_XML_DATA := XMLTYPE('<msa:spreadsheet xmlns:msa="http://www.metricstream.com/appstudio/msa"><msa:data></msa:data></msa:spreadsheet>');

    FOR SPRD_SHEET_QUEST IN (SELECT QST_SPRDSHEET_TEMPLATE,QST_ID_PK
                             FROM MS_QSM_QUESTION
                             WHERE QST_RESPONSE_TYPE = '9'
                             AND QST_SECTION_ID IN (SELECT SECTION_ID_PK
                                                      FROM MS_QSM_SECTION
                                                      WHERE SECTION_QUESTNR_FK = IP_QUESTIONNAIRE_ID)) LOOP

          SELECT SPRD_SHEET_NAME
          INTO L_SPREADSHEET_NAME
          FROM MS_QSM_SPREADSHEET
          WHERE SPRD_SHEET_INTERNAL_ID = SPRD_SHEET_QUEST.QST_SPRDSHEET_TEMPLATE;

          L_HEDER_STRING_DATA := '<msa:row xmlns:msa="http://www.metricstream.com/appstudio/msa">
                                  <msa:header>
                                      <msa:que_response_id>'||IP_RESPONSE_ID||'</msa:que_response_id>
                                      <msa:questionnaire_id>'||IP_QUESTIONNAIRE_ID||'</msa:questionnaire_id>
                                      <msa:question_id>'||SPRD_SHEET_QUEST.QST_ID_PK||'</msa:question_id>
                                      <msa:spreadsheet_id>'||SPRD_SHEET_QUEST.QST_SPRDSHEET_TEMPLATE||'</msa:spreadsheet_id>
                                      <msa:spreadsheet_name>'||l_spreadsheet_name||'</msa:spreadsheet_name>
                                  </msa:header>';

          L_DETAIL_STRING_DATA := '<msa:details>';

          l_field_count := 0;

          FOR fld_data IN (SELECT X.FLD_ID_PK,
                                  NVL(Y.FIELD_NAME,X.FIELD_NAME) FIELD_NAME,
                                  X.FIELD_TYPE,
                                  X.LOWER_LIMIT,
                                  X.UPPER_LIMIT,
                                  NVL(Y.FIELD_VALUE,X.FIELD_VALUE) FIELD_VALUE,
                                  X.ALLOW_PAST_DATE,
                                  X.FLD_DISPLAY_VALUE,
                                  X.FLD_STORED_VALUE,
                                  X.SPRD_SHEET_INTERNAL_ID,
                                  X.fld_infolet,
                                  X.FLD_PARAMETER_FIELDS,
                                  X.allow_unvalidate_data
                              FROM (SELECT  FLD_ID_PK,
                                                       FIELD_NAME,
                                                       FIELD_TYPE,
                                                       LOWER_LIMIT,
                                                       UPPER_LIMIT,
                                                       FIELD_VALUE,
                                                       ALLOW_PAST_DATE,
                                                       FLD_DISPLAY_VALUE,
                                                       FLD_STORED_VALUE,
                                                       SPRD_SHEET_INTERNAL_ID,
                                                       locale_id,
                                                       (SELECT METRIC_ID FROM SI_METRICS_T WHERE METRIC_NAME=fld_infolet) fld_infolet,
                                                       FLD_PARAMETER_FIELDS,
                                                       allow_unvalidate_data
                                          FROM ms_qsm_spreadsheet_fld a,SI_ENABLED_LOCALES b
                                          WHERE  sprd_sheet_internal_id = SPRD_SHEET_QUEST.QST_SPRDSHEET_TEMPLATE )X ,ms_qsm_spreadsheet_fld_tl Y
                             WHERE X.sprd_sheet_internal_id = Y.sprd_sheet_internal_id(+)
                            AND X.FLD_ID_PK=Y.FLD_ID_PK(+)
                             AND X.LOCALE_ID = Y.LOCALE_ID(+)
                             AND X.locale_id = l_locale_id
                             ORDER BY TO_NUMBER(SUBSTR(X.FLD_ID_PK,4)))
           LOOP
              l_field_count := l_field_count +1;

              l_detail_string_temp :='<msa:field>
                                                               <msa:fld_id_pk>'||fld_data.FLD_ID_PK||'</msa:fld_id_pk>
                                                               <msa:field_name>'||HTF.ESCAPE_SC(fld_data.FIELD_NAME)||' </msa:field_name>
                                                               <msa:field_type>'||fld_data.FIELD_TYPE||'</msa:field_type>
                                                               <msa:lower_limit>'||fld_data.LOWER_LIMIT||'</msa:lower_limit>
                                                               <msa:upper_limit>'||fld_data.UPPER_LIMIT||'</msa:upper_limit>
                                                               <msa:field_value>'||HTF.ESCAPE_SC(fld_data.FIELD_VALUE)||'</msa:field_value>
                                                               <msa:allow_past_date>'||fld_data.ALLOW_PAST_DATE||'</msa:allow_past_date>
                                                               <msa:fld_display_value>'||HTF.ESCAPE_SC(fld_data.FLD_DISPLAY_VALUE)||'</msa:fld_display_value>
                                                               <msa:fld_stored_value>'||fld_data.FLD_STORED_VALUE||'</msa:fld_stored_value>
                                                               <msa:sprd_sheet_internal_id>'||TO_CHAR(fld_data.SPRD_SHEET_INTERNAL_ID)||'</msa:sprd_sheet_internal_id>
                                                               <msa:fld_infolet>'||fld_data.fld_infolet||'</msa:fld_infolet>
                                                               <msa:fld_parameter>'||fld_data.FLD_PARAMETER_FIELDS||'</msa:fld_parameter>
                                                               <msa:allow_unvalidate_data>'||fld_data.allow_unvalidate_data||'</msa:allow_unvalidate_data>
                                                               <msa:instance_rec_num>'||l_field_count||'</msa:instance_rec_num>
                                                          </msa:field>';
              
              l_detail_string_data := l_detail_string_data||l_detail_string_temp;
              

          END LOOP;

          l_detail_string_data := l_detail_string_data||'</msa:details>';

          L_HEDER_STRING_DATA := L_HEDER_STRING_DATA||l_detail_string_data||'</msa:row>';


          --ms_qsm_log_activity ('', 'L_HEDER_STRING_DATA~', XMLTYPE(L_HEDER_STRING_DATA).getclobval());

          L_XML_DATA:=MS_QSM_UTILITIES.INSERT_XML(L_XML_DATA,'spreadsheet/data',XMLTYPE(L_HEDER_STRING_DATA),'A');

          --ms_qsm_log_activity ('', 'L_HEDER_STRING_DATA1~', l_xml_data.getclobval());

    END LOOP;

    RETURN L_XML_DATA.getclobval() ;

EXCEPTION
    WHEN OTHERS THEN

        ms_qsm_log_activity ('', 'Error In GET_SPRD_SHEET_XML~', DBMS_UTILITY.FORMAT_ERROR_BACKTRACE||'~'||SQLERRM);

        RETURN NULL;
END GET_SPRD_SHEET_XML;

 FUNCTION FN_GET_MLOV_VALUES (
      i_key_col VARCHAR2,
      i_column_name   VARCHAR2,
      i_table_name    VARCHAR2
   )
      RETURN CLOB
   IS
      TYPE c IS REF CURSOR;

      CUR_TYP    C;
      LV_VAL     VARCHAR2 (4000);
      lv_fval    CLOB;
      LV_QUERY   VARCHAR2 (4000);

   BEGIN
      lv_query :=
            'SELECT '
         || i_column_name
         || ' FROM '
         || I_TABLE_NAME
         || ' WHERE '||I_KEY_COL;
         /*' = '''
         || I_KEY_ID||'''';*/


      OPEN cur_typ FOR lv_query;

      LOOP
         FETCH cur_typ
          INTO lv_val;

         EXIT WHEN cur_typ%NOTFOUND;

         IF NVL (LENGTH (lv_fval), 0) <= 0
         THEN
            lv_fval := lv_val;
         ELSE
            lv_fval := lv_fval || ',' || lv_val;
         END IF;
      END LOOP;

      RETURN LV_FVAL;

   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
   END fn_get_mlov_values;
-- Added by Gaurav for questionnaire data upload
FUNCTION get_grc_form_url(pv_object_type varchar2, pv_object_id varchar2)
    return varchar2 result_cache
   IS
   /*
   Function for returning single select value
   */
      lv_exec_imd             VARCHAR2 (4000);
      lv_return_val           VARCHAR2 (4000);
      LV_DB_TABLE_NAME        VARCHAR2(100);
      ln_metric_id            NUMBER;
      ln_process_instance_id  NUMBER;
      ln_instance_id          NUMBER;
   BEGIN

       select metric_id
       into ln_metric_id
       from si_metrics_T where metric_name=pv_object_Type
       and metric_run_mode=3;

      lv_db_table_name:='si_'||ln_metric_id||'_t';

--      lv_exec_imd := 'select dd_process_instance_id, dd_instance_id from '
--      ||lv_db_table_name || ' where object_id = '''
--            || pv_object_id||'''';

  lv_exec_imd := ' select process_instance_id, instance_id from '
      ||lv_db_table_name || ' where process_instance_id = (select max(process_instance_id) from '||lv_db_table_name|| ' where object_id = '''
            ||pv_object_id||'''' ||')
            and instance_rec_num = 1';

     BEGIN
     execute immediate lv_exec_imd into ln_process_instance_id, ln_instance_id;
    EXCEPTION WHEN OTHERS THEN
      ms_qsm_log_activity ('','Error Occurred during execute statement'||sqlerrm,'');
    END;


     lv_return_val :=
            'Fastform?id='
         || ln_metric_id
         || CHR (38)
         || 'proc='
         || ln_process_instance_id
         || chr (38)
         || 'instid='
         ||ln_instance_id
         || CHR (38)
         || 'flag=1'
         || CHR (38)
         || 'wrapper=no'
         || CHR (38)
         || 'emd=3';

      RETURN lv_return_val;
   EXCEPTION
      WHEN OTHERS
      THEN
      ms_qsm_log_activity ('', 'Exception while getting form url: ' || DBMS_UTILITY.format_error_backtrace || '~' || SQLERRM, '');
         RETURN NULL;
   END GET_GRC_FORM_URL;



     PROCEDURE get_sprd_template_4_interface (i_event_log_id         IN            ms_apps_event_logs.event_log_id%TYPE,
                                           i_event_name           IN            ms_apps_events.event_name%TYPE,
                                           i_subscription_name    IN            ms_apps_event_subscriptions.subscription_name%TYPE,
                                           i_status               IN            PLS_INTEGER,
                                           i_action_text          IN            VARCHAR2,
                                           o_close_subscription      OUT NOCOPY VARCHAR2,
                                           o_notify_event_owner      OUT NOCOPY VARCHAR2,
                                           o_error_code              OUT NOCOPY NUMBER,
                                           o_error_message           OUT NOCOPY VARCHAR2)
   AS
      l_qsm_template        XMLTYPE;
      l_qsm_template_clob   CLOB;
      l_survey_metric_id     NUMBER;
      l_error_handle_id   NUMBER:=99;
      l_error_seq           NUMBER:=99;
   BEGIN
      IF NOT (ms_qsm_utilities.g_tbl_metric_maintenance.COUNT > 0)
      THEN

         ms_qsm_utilities.initialize_metric_maint ('QSM');

      END IF;

      l_survey_metric_id := ms_apps_utilities.get_infolet_id (ms_qsm_utilities.g_tbl_metric_maintenance ('RESSPR'));
      ms_qsm_utilities.get_multirow_template (p_multirow         => l_qsm_template,
                                              p_metric_id        => l_survey_metric_id,
                                              p_full_blown       => 'Y',
                                              p_with_multirows   => 'Y');

      SELECT XMLSERIALIZE (CONTENT l_qsm_template AS CLOB) INTO l_qsm_template_clob FROM DUAL;

     /* DELETE FROM ms_apps_event_param_logs
            WHERE parameter_name = 'GET_ISM_TEMPLATE' AND event_log_id <> i_event_log_id;*/

      UPDATE ms_apps_event_param_logs a
         SET a.clob_value = l_qsm_template_clob
       WHERE a.event_log_id = i_event_log_id;
   EXCEPTION WHEN OTHERS THEN
    ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => l_error_handle_id,
                                            pn_error_sequence    => l_error_seq,
                                            pc_error_type        => 'E',
                                            pc_error_text        => 'Failed in Retreiving the ISM Template :' || DBMS_UTILITY.format_error_backtrace || ':' || SQLERRM);

   END;

    FUNCTION CONVERT (
                      i_key_col varchar2
                     )
    RETURN NUMBER
    AS
    BEGIN


    EXCEPTION
      WHEN OTHERS THEN
        RETURN NULL;
    end ;


    FUNCTION dependency_filter_data (ip_main_string   IN VARCHAR2,
                                       lv_query_list    IN varchar2_array)
        RETURN NUMBER
    AS
        lv_main_list   varchar2_array := varchar2_array ();
        l_error_handle_id number;
        l_error_seq number;

    BEGIN

            ms_apps_mdf_errors_pkg.insert_log (pn_error_handle_id   => l_error_handle_id,
                                            pn_error_sequence    => l_error_seq,
                                            pc_error_type        => 'JAMMY',
                                            pc_error_text        => ip_main_string);


        SELECT COLUMN_VALUE
          BULK COLLECT INTO lv_main_list
          FROM TABLE (ms_apps_utilities.parse_string (ip_main_string, ','));

        IF lv_main_list.COUNT > 0
        THEN
            IF lv_query_list.COUNT > 0
            THEN
                FOR i IN 1 .. lv_query_list.COUNT
                LOOP
                    FOR j IN 1 .. lv_main_list.COUNT
                    LOOP
                        IF lv_query_list (i) = lv_main_list (j)
                        THEN
                            RETURN 1;
                        END IF;
                    END LOOP;
                END LOOP;
            END IF;
        END IF;

        RETURN 0;
    EXCEPTION
        WHEN OTHERS
        THEN
            RETURN 0;
    end dependency_filter_data;

function GET_SOUCE_API_NAME(i_source in  varchar2)
return varchar2
is
  x_api_name    varchar2(30);
begin

  begin
      select target_api_name
        into x_api_name
        from ms_qsm_posthook_interface
       where UPPER(source_type) = UPPER(i_source);
  exception
    when NO_DATA_FOUND then
      x_api_name :=  '-1 Post Hook Not Configured';
      return x_api_name;
  end;

  begin
    select event_name
      into x_api_name
      from ms_apps_events
     where upper(event_name) = upper(x_api_name);
       --and upper(module_name) = upper(i_source);

  exception
    when NO_DATA_FOUND then
      x_api_name := '-1 BusinessEvent NotRegistered';
      return x_api_name;
  end;

  return upper(x_api_name);

end;

FUNCTION GET_SPREADSHEET_DATA (i_spreadsheet_id IN VARCHAR2,
                                                 i_question_id    IN VARCHAR2,
                                                 i_response_id    IN VARCHAR2)
    RETURN ms_qsm_sprd_data_tab
    PIPELINED
    IS PRAGMA AUTONOMOUS_TRANSACTION;
    
    TYPE ty_sprd_data IS RECORD (ROW_NUMBER NUMBER,FIELD_1 VARCHAR2(4000),FIELD_2 VARCHAR2(4000),FIELD_3 VARCHAR2(4000),FIELD_4 VARCHAR2(4000),FIELD_5 VARCHAR2(4000),FIELD_6 VARCHAR2(4000),FIELD_7 VARCHAR2(4000),
    FIELD_8 VARCHAR2(4000),FIELD_9 VARCHAR2(4000),FIELD_10 VARCHAR2(4000),FIELD_11 VARCHAR2(4000),FIELD_12 VARCHAR2(4000),FIELD_13 VARCHAR2(4000),FIELD_14 VARCHAR2(4000),
    FIELD_15 VARCHAR2(4000),FIELD_16 VARCHAR2(4000),FIELD_17 VARCHAR2(4000),FIELD_18 VARCHAR2(4000),FIELD_19 VARCHAR2(4000),FIELD_20 VARCHAR2(4000));
        
    l_sprd_data    ty_sprd_data;
    
    TYPE ty_sprd_data_tab IS TABLE OF ty_sprd_data
                                  INDEX BY PLS_INTEGER;
    
    l_saved_data_tab   ty_sprd_data_tab;
    l_row NUMBER:=0;
    
    xn_error_handle_id  NUMBER;
    xn_error_seq NUMBER;
    L_SQL  VARCHAR2(4000);
    l_cnt NUMBER;

BEGIN

      ms_apps_mdf_errors_pkg.insert_log
                                          (pn_error_handle_id => xn_error_handle_id,
                                           pn_error_sequence => xn_error_seq,
                                           PC_ERROR_TYPE => 'E',
                                           pc_error_text => 'CALLED:'||i_response_id||'@'||i_question_id||SQLERRM);
       
    l_saved_data_tab(1).ROW_NUMBER:=1;
    
    SELECT ROWNUM+1,
      SUBSTR(FIELD_1,instr(FIELD_1,'#',1)+1)FIELD_1,
      SUBSTR(FIELD_2,INSTR(FIELD_2,'#',1)+1)FIELD_2,
      SUBSTR(FIELD_3,instr(FIELD_3,'#',1)+1)FIELD_3,
      SUBSTR(FIELD_4,instr(FIELD_4,'#',1)+1)FIELD_4,
      SUBSTR(FIELD_5,instr(FIELD_5,'#',1)+1)FIELD_5,
      SUBSTR(FIELD_6,instr(FIELD_6,'#',1)+1)FIELD_6,
      SUBSTR(FIELD_7,instr(FIELD_7,'#',1)+1)FIELD_7,
      SUBSTR(FIELD_8,instr(FIELD_8,'#',1)+1)FIELD_8,
      SUBSTR(FIELD_9,instr(FIELD_9,'#',1)+1)FIELD_9,
      SUBSTR(FIELD_10,instr(FIELD_10,'#',1)+1)FIELD_10,
      SUBSTR(FIELD_11,INSTR(FIELD_11,'#',1)+1)FIELD_11,
      SUBSTR(FIELD_12,instr(FIELD_12,'#',1)+1)FIELD_12,
      SUBSTR(FIELD_13,instr(FIELD_13,'#',1)+1)FIELD_13,
      SUBSTR(FIELD_14,instr(FIELD_14,'#',1)+1)FIELD_14,
      SUBSTR(FIELD_15,instr(FIELD_15,'#',1)+1)FIELD_15,
      SUBSTR(FIELD_16,instr(FIELD_16,'#',1)+1)FIELD_16,
      SUBSTR(FIELD_17,INSTR(FIELD_17,'#',1)+1)FIELD_17,
      SUBSTR(FIELD_18,instr(FIELD_18,'#',1)+1)FIELD_18,
      SUBSTR(FIELD_19,INSTR(FIELD_19,'#',1)+1)FIELD_19,
      SUBSTR(FIELD_20,INSTR(FIELD_20,'#',1)+1)FIELD_20      
    bulK COLLECT INTO l_saved_data_tab
    from ms_qsm_resp_sprdsheet_clm
    where response_id=i_response_id
    and question_id=i_question_id;
    
    l_cnt:=l_saved_data_tab.COUNT+1;
    
     FOR sprd_fld IN (SELECT FIELD_NAME from ms_qsm_spreadsheet_fld
                      where SPRD_SHEET_INTERNAL_ID = i_spreadsheet_id
                      Order by TO_NUMBER(SUBSTR(fld_id_pk,4))) LOOP
      l_row := l_row+1;
      if sprd_fld.FIELD_NAME IS NOT NULL THEN
               
            IF  l_row =1 then                                          
              l_saved_data_tab(l_cnt).FIELD_1 :=sprd_fld.FIELD_NAME;
            ELSIF  l_row =2 then                                          
              l_saved_data_tab(l_cnt).FIELD_2 :=sprd_fld.FIELD_NAME;
            ELSIF  l_row =3 then                                          
              l_saved_data_tab(l_cnt).FIELD_3 :=sprd_fld.FIELD_NAME;                   
            ELSIF  l_row =4 then                                          
              l_saved_data_tab(l_cnt).FIELD_4 :=sprd_fld.FIELD_NAME;            
            ELSIF  l_row =5 then                                          
              l_saved_data_tab(l_cnt).FIELD_5 :=sprd_fld.FIELD_NAME;
            ELSIF  l_row =6 then                                          
              l_saved_data_tab(l_cnt).FIELD_6 :=sprd_fld.FIELD_NAME;
            ELSIF  l_row =7 then                                          
              l_saved_data_tab(l_cnt).FIELD_7 :=sprd_fld.FIELD_NAME;
            ELSIF  L_ROW =8 THEN                                          
              l_saved_data_tab(l_cnt).FIELD_8 :=sprd_fld.FIELD_NAME;           
            ELSIF  l_row =9 then                                          
              l_saved_data_tab(l_cnt).FIELD_9 :=sprd_fld.FIELD_NAME;  
            ELSIF  l_row =10 then                                          
              l_saved_data_tab(l_cnt).FIELD_10 :=sprd_fld.FIELD_NAME;
            ELSIF  l_row =11 then                                          
              l_saved_data_tab(l_cnt).FIELD_11 :=sprd_fld.FIELD_NAME;
            ELSIF  l_row =12 then                                          
              l_saved_data_tab(l_cnt).FIELD_12 :=sprd_fld.FIELD_NAME;
            ELSIF  l_row =13 then                                          
              l_saved_data_tab(l_cnt).FIELD_13 :=sprd_fld.FIELD_NAME;
            ELSIF  l_row =14 then                                          
              l_saved_data_tab(l_cnt).FIELD_14 :=sprd_fld.FIELD_NAME;
            ELSIF  l_row =15 then                                          
              l_saved_data_tab(l_cnt).FIELD_15 :=sprd_fld.FIELD_NAME;
            ELSIF  l_row =16 then                                          
              l_saved_data_tab(l_cnt).FIELD_16 :=sprd_fld.FIELD_NAME;
            ELSIF  l_row =17 then                                          
              l_saved_data_tab(l_cnt).FIELD_17 :=sprd_fld.FIELD_NAME;
            ELSIF  l_row =18 then                                          
              l_saved_data_tab(l_cnt).FIELD_18 :=sprd_fld.FIELD_NAME;
            ELSIF  l_row =19 then                                          
              l_saved_data_tab(l_cnt).FIELD_19 :=sprd_fld.FIELD_NAME;
            ELSIF  l_row =20 then                                          
              l_saved_data_tab(l_cnt).FIELD_20 :=sprd_fld.FIELD_NAME;
            END IF;
            
            l_saved_data_tab(l_cnt).ROW_NUMBER :=1;
                           
      END IF;
    
    END LOOP;
    
      if l_saved_data_tab.count > 0 then
                       FOR i IN l_saved_data_tab.FIRST .. l_saved_data_tab.LAST
                        LOOP
                         PIPE ROW (ms_qsm_sprd_data_row (l_saved_data_tab (i).ROW_NUMBER,
                                                         l_saved_data_tab (i).FIELD_1,
                                                         l_saved_data_tab (i).FIELD_2,
                                                         l_saved_data_tab(i).FIELD_3,
                                                         l_saved_data_tab (i).FIELD_4,
                                                         l_saved_data_tab (i).FIELD_5,
                                                         l_saved_data_tab(i).FIELD_6,
                                                         l_saved_data_tab (i).FIELD_7,
                                                         l_saved_data_tab (i).FIELD_8,
                                                         l_saved_data_tab(i).FIELD_9,
                                                         l_saved_data_tab (i).FIELD_10,
                                                         l_saved_data_tab (i).FIELD_11,
                                                         l_saved_data_tab(i).FIELD_12,
                                                         l_saved_data_tab (i).FIELD_13,
                                                         l_saved_data_tab (i).FIELD_14,
                                                         l_saved_data_tab(i).FIELD_15,
                                                         l_saved_data_tab (i).FIELD_16,
                                                         l_saved_data_tab (i).FIELD_17,
                                                         l_saved_data_tab(i).FIELD_18,
                                                         l_saved_data_tab (i).FIELD_19,
                                                         l_saved_data_tab (i).FIELD_20));
                        END LOOP;
      End if;
    return;
EXCEPTION WHEN OTHERS THEN
       ms_apps_mdf_errors_pkg.insert_log
                                          (pn_error_handle_id => xn_error_handle_id,
                                           pn_error_sequence => xn_error_seq,
                                           pc_error_type => 'E',
                                           pc_error_text => 'Error:'||SQLERRM);
END;

function fn_response_details_rpt(l_filter_type varchar2,l_section varchar2,l_question varchar2,l_questnr_survey varchar2,l_Respondent varchar2,l_response varchar2) 
return tbl_response_det
        PIPELINED IS
        x_tbl_response_det tbl_response_det := tbl_response_det();
		
	Cursor c1 is SELECT   que_request_name,
							  que_request_id,
							  (SELECT que_name
							  FROM ms_Qsm_questionnaire
							  WHERE internal_questnr_id=questionnaire_id
							  ) AS questionnaire_name,
							  questionnaire_id AS questionnaire_id ,
							  section_name,
							  question_name,
							  question_pk,
							  SORT_ID,
							  (select first_name||' '||last_name from SI_USERS where user_name = case when (length(RESPONDENT)-length(replace(RESPONDENT,',','')))>0 then RESPONDED_BY else RESPONDENT end ) as Respondent,
							  response,
							  RESP_COMMENTS resp_comments,
                SPREADSHEET_ID,
                qst_response_id,
                QUESTION_ID
							FROM(
							select QUE_RESPONSE_ID,QUESTION_ID,que_request_name,que_request_id,    questionnaire_id,    section_name,    question_name,    question_pk,
								   SORT_ID,QUESTION_DESCRIPTION,response,RESPONDENT,RESP_COMMENTS,section_id,RESPONDED_BY,SPREADSHEET_ID,qst_response_id
							from (
							select QUE_RESPONSE_ID,QUESTION_ID,que_request_name,que_request_id,    questionnaire_id,    section_name,    question_name,    question_pk,
								   SORT_ID,QUESTION_DESCRIPTION,response,RESPONDENT,RESP_COMMENTS,section_id,RESPONDED_BY,SPREADSHEET_ID,qst_response_id
							from (
							select  QUE_RESPONSE_ID,QUESTION_ID,que_request_name,
                            que_request_id,
                            questionnaire_id,
                            section_name,
                            question_name,
                            question_pk,
                            response,
                            SORT_ID,
                            QUESTION_DESCRIPTION,
                            RESPONDENT,
                            RESP_COMMENTS,
                            section_id,
                            
                            RESPONDED_BY,
                            SPREADSHEET_ID,
                            qst_response_id
                            
								from (
							SELECT a.QUE_RESPONSE_ID,c.QUESTION_ID,que_request_name,
								que_request_id que_request_id ,
								questionnaire_id,
								section_name,
								question_name,
								question_pk question_pk,
								QUESTION_DESCRIPTION AS QUESTION_DESCRIPTION,
								DECODE(c.response_type,'1',TO_CHAR(c.resp_number),'2',TO_CHAR(c.resp_date),'3',c.resp_number,'4',   (SELECT ms_concat(lov.display_value)    FROM ms_qsm_resp_question_rml rml,      ms_qsm_qst_lov_data lov    WHERE rml.qst_response_id=a.que_response_id    AND rml.question_pk      =c.QUESTION_PK    AND rml.question_pk      =lov.question_id    AND rml.RESP_MLOV        =lov.stored_value    ),'5',c.resp_clob,'6',    (SELECT lov.display_value    FROM ms_qsm_qst_lov_data lov    WHERE LOV.QUESTION_ID = C.QUESTION_PK    AND lov.stored_value  = c.resp_radio    ),'7',    (SELECT lov.display_value    FROM ms_qsm_qst_lov_data lov    WHERE lov.question_id = c.question_pk    AND lov.stored_value  = c.resp_dd    ),'8',substr(resp_attachment,1,instr(resp_attachment,'#',1)-1),'9',substr(substr(qst_json_value,instr(qst_json_value,'"SPRD_LINK"',1)+13),1,instr(substr(qst_json_value,instr(qst_json_value,'"SPRD_LINK"',1)+13),'"',1)-1),'10',    (SELECT lov.display_value    FROM ms_qsm_qst_lov_data lov    WHERE LOV.QUESTION_ID = C.QUESTION_PK    AND lov.stored_value  = c.resp_radio_b    ),'11',    (SELECT ms_concat(lov.display_value)    FROM ms_qsm_resp_question_rml rml,      ms_qsm_qst_lov_data lov    WHERE rml.qst_response_id=a.que_response_id    AND rml.question_pk      =c.QUESTION_PK    AND rml.question_pk      =lov.question_id    AND rml.RESP_MLOV        =lov.stored_value    ))response,
								a.RESPONDENT,
								RESP_COMMENTS,
								section_id,
								
								RESPONDED_BY,
                SPREADSHEET_ID,
                qst_response_id
                
							   
							  FROM ms_qsm_questnr_resp a,
								ms_qsm_resp_section b,
								ms_qsm_resp_question c,
								ms_qsm_scheduler_details d,
								(
								 select nvl(FIELD_1,'NA')||' | '||nvl(FIELD_2,'NA')||' | '||nvl(FIELD_3,'NA')||' | '||nvl(FIELD_4,'NA')||' | '||nvl(FIELD_5,'NA')||' | '||nvl(FIELD_6,'NA')||' | '||nvl(FIELD_7,'NA')||' | '||nvl(FIELD_8,'NA')||' | '||nvl(FIELD_9,'NA')||' | '||nvl(FIELD_10,'NA')||' | '||nvl(FIELD_11,'NA')||' | '||nvl(FIELD_12,'NA')||' | '||nvl(FIELD_13,'NA')||' | '||nvl(FIELD_14,'NA')||' | '||nvl(FIELD_15,'NA')||' | '||nvl(FIELD_16,'NA')||' | '||nvl(FIELD_17,'NA')||' | '||nvl(FIELD_18,'NA')||' | '||nvl(FIELD_19,'NA')||' | '||nvl(FIELD_20,'NA') as Spread_sheet_Values
										,QUESTION_ID,RESPONSE_ID,DATA_ID_PK,SPREADSHEET_ID
								 from MS_QSM_RESP_SPRDSHEET_CLM 
								) e
							  WHERE a.que_response_id     =b.section_fk
							  AND a.que_response_id       =c.qst_response_id
							  AND b.SECTION_ID            = c.QUESTION_SEC_ID
							  AND a.DD_PROCESS_INSTANCE_ID=d.PROCESS_INSTANCE_ID
							  AND ((l_filter_type          ='1'
							  AND a.questionnaire_id      =l_questnr_survey)
							  OR (l_filter_type            ='2'
							  AND a.que_request_id        =l_questnr_survey))
							  AND (instr(','
								||NVL(l_section,b.SECTION_ID)
								||',',','
								||b.SECTION_ID
								||',',1,1)>0)
							  AND (instr(','
								||NVL(l_question,c.question_pk)
								||',',','
								||c.question_pk
								||',',1,1)     >0)
							  AND (instr(','
								||NVL(l_Respondent,case when (length(RESPONDENT)-length(replace(RESPONDENT,',','')))>0 then RESPONDED_BY else RESPONDENT end)
								||',',','
								||case when (length(RESPONDENT)-length(replace(RESPONDENT,',','')))>0 then RESPONDED_BY else RESPONDENT end
								||',',1,1)>0)
							  and e.QUESTION_ID = c.QUESTION_PK and e.RESPONSE_ID = a.QUE_RESPONSE_ID)
							union
							
							select 	QUE_RESPONSE_ID,QUESTION_ID,que_request_name,
									que_request_id,
									questionnaire_id,
									section_name,
									question_name,
									question_pk,
									response,
									SORT_ID,
									QUESTION_DESCRIPTION,
									RESPONDENT,
									RESP_COMMENTS,
									section_id,
									
									RESPONDED_BY,
                  SPREADSHEET_ID,
                  qst_response_id
              
							from (
							SELECT a.QUE_RESPONSE_ID,c.QUESTION_ID,que_request_name,
								que_request_id que_request_id,
								questionnaire_id,
								section_name,
								question_name,
								question_pk,
								QUESTION_DESCRIPTION AS QUESTION_DESCRIPTION,
								DECODE(c.response_type,'1',TO_CHAR(c.resp_number),'2',TO_CHAR(c.resp_date),'3',c.resp_number,'4',   (SELECT ms_concat(lov.display_value)    FROM ms_qsm_resp_question_rml rml,      ms_qsm_qst_lov_data lov    WHERE rml.qst_response_id=a.que_response_id    AND rml.question_pk      =c.QUESTION_PK    AND rml.question_pk      =lov.question_id    AND rml.RESP_MLOV        =lov.stored_value    ),'5',c.resp_clob,'6',    (SELECT lov.display_value    FROM ms_qsm_qst_lov_data lov    WHERE LOV.QUESTION_ID = C.QUESTION_PK    AND lov.stored_value  = c.resp_radio    ),'7',    (SELECT lov.display_value    FROM ms_qsm_qst_lov_data lov    WHERE lov.question_id = c.question_pk    AND lov.stored_value  = c.resp_dd    ),'8',substr(resp_attachment,1,instr(resp_attachment,'#',1)-1),'9',resp_sprd,'10',    (SELECT lov.display_value    FROM ms_qsm_qst_lov_data lov    WHERE LOV.QUESTION_ID = C.QUESTION_PK    AND lov.stored_value  = c.resp_radio_b    ),'11',    (SELECT ms_concat(lov.display_value)    FROM ms_qsm_resp_question_rml rml,      ms_qsm_qst_lov_data lov    WHERE rml.qst_response_id=a.que_response_id    AND rml.question_pk      =c.QUESTION_PK    AND rml.question_pk      =lov.question_id    AND rml.RESP_MLOV        =lov.stored_value    ))response,
								a.RESPONDENT,
								RESP_COMMENTS,
								section_id,
              
								RESPONDED_BY,
                null SPREADSHEET_ID,
                qst_response_id
                
								
							   FROM ms_qsm_questnr_resp a,
								ms_qsm_resp_section b,
								ms_qsm_resp_question c,
								ms_qsm_scheduler_details d
							 WHERE a.que_response_id     =b.section_fk
							  AND a.que_response_id       =c.qst_response_id
							  AND b.SECTION_ID            = c.QUESTION_SEC_ID
							  AND a.DD_PROCESS_INSTANCE_ID=d.PROCESS_INSTANCE_ID
							  AND ((l_filter_type          ='1'
							  AND a.questionnaire_id      =l_questnr_survey)
							  OR (l_filter_type            ='2'
							  AND a.que_request_id        =l_questnr_survey))
							  AND (instr(','
								||NVL(l_section,b.SECTION_ID)
								||',',','
								||b.SECTION_ID
								||',',1,1)>0)
							  AND (instr(','
								||NVL(l_question,c.question_pk)
								||',',','
								||c.question_pk
								||',',1,1)     >0)
							  AND (instr(','
								||NVL(l_Respondent,case when (length(RESPONDENT)-length(replace(RESPONDENT,',','')))>0 then RESPONDED_BY else RESPONDENT end)
								||',',','
								||case when (length(RESPONDENT)-length(replace(RESPONDENT,',','')))>0 then RESPONDED_BY else RESPONDENT end
								||',',1,1)>0)
							) a
							where nvl(response,'#_*') not in (select distinct nvl(resp_sprd,'NA') FROM ms_qsm_resp_question where a.que_response_id =qst_response_id)
							)))
              where (instr(','||NVL(l_response,response)||',',','||response||',',1,1)>0)
                --nvl(response,'$_$')=nvl(l_response,nvl(response,'$_$'))
							GROUP BY que_request_name,
							  que_request_id,
							  questionnaire_id,
							  section_name,
							  question_name,
							  question_pk,
							  SORT_ID,
							  response,
							  section_id,
							  case when (length(RESPONDENT)-length(replace(RESPONDENT,',','')))>0 then RESPONDED_BY else RESPONDENT end,
							  RESP_COMMENTS,
              
							  qst_response_id,
                SPREADSHEET_ID,
                QUESTION_ID
              ORDER BY SORT_ID;
	x_cnt        NUMBER DEFAULT 0;
  temp         number; 
  temp2        varchar2(4000);

BEGIN
    
        FOR rec_1 IN c1
        LOOP
            EXIT WHEN c1%NOTFOUND;
            x_cnt := x_cnt + 1;
            select nvl(20-count(*),0) into temp from MS_QSM_SPREADSHEET_FLD
            where SPRD_SHEET_INTERNAL_ID=rec_1.SPREADSHEET_ID; 
            
            if rec_1.SPREADSHEET_ID is not null then
            
            for i in (select nvl(substr(FIELD_1,instr(FIELD_1,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_2,instr(FIELD_2,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_3,instr(FIELD_3,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_4,instr(FIELD_4,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_5,instr(FIELD_5,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_6,instr(FIELD_6,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_7,instr(FIELD_7,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_8,instr(FIELD_8,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_9,instr(FIELD_9,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_10,instr(FIELD_10,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_11,instr(FIELD_11,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_12,instr(FIELD_12,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_13,instr(FIELD_13,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_14,instr(FIELD_14,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_15,instr(FIELD_15,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_16,instr(FIELD_16,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_17,instr(FIELD_17,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_18,instr(FIELD_18,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_19,instr(FIELD_19,'#',1)+1),'NA')||' | '||nvl(substr(FIELD_20,instr(FIELD_20,'#',1)+1),'NA') spreadsheet_data
            from table(GET_SPREADSHEET_DATA (rec_1.SPREADSHEET_ID,rec_1.question_pk,rec_1.qst_response_id)) order by ROW_NUMBER) 
            
            loop
            
            x_tbl_response_det.extend;
                      x_tbl_response_det (x_cnt) := typ_response_det (que_request_name => rec_1.que_request_name, 
                                                                      que_request_id => rec_1.que_request_id, 
                                                                      questionnaire_name => rec_1.questionnaire_name, 
                                                                      questionnaire_id => rec_1.questionnaire_id, 
                                                                      section_name => rec_1.section_name, 
                                                                      question_name => rec_1.question_name, 
                                                                      question_pk => rec_1.question_pk, 
                                                                      SORT_ID => rec_1.SORT_ID,
                                                                      response => rec_1.response,
                                                                      Respondent => rec_1.Respondent, 
                                                                      resp_comments => rec_1.resp_comments,
                                                                      --SPREAD_SHEET_VALUES => nvl(substr(rec_1.SPREAD_SHEET_VALUES,1,instr(rec_1.SPREAD_SHEET_VALUES,'| NA',-1,temp)-1),'NA'),
                                                                      SPREAD_SHEET_VALUES => nvl(substr(i.spreadsheet_data,1,instr(i.spreadsheet_data,'| NA',-1,temp)-1),'NA')
                                                                      );
                                        
                      BEGIN
                          PIPE ROW(x_tbl_response_det(x_cnt));
                      EXCEPTION
                          WHEN no_data_needed THEN
                              NULL;
                      END;
          end loop;
          
          else
          
                      x_tbl_response_det.extend;
                      x_tbl_response_det (x_cnt) := typ_response_det (que_request_name => rec_1.que_request_name, 
                                                                      que_request_id => rec_1.que_request_id, 
                                                                      questionnaire_name => rec_1.questionnaire_name, 
                                                                      questionnaire_id => rec_1.questionnaire_id, 
                                                                      section_name => rec_1.section_name, 
                                                                      question_name => rec_1.question_name, 
                                                                      question_pk => rec_1.question_pk, 
                                                                      SORT_ID => rec_1.SORT_ID,
                                                                      response => rec_1.response,
                                                                      Respondent => rec_1.Respondent, 
                                                                      resp_comments => rec_1.resp_comments,
                                                                      SPREAD_SHEET_VALUES => null
                                                                      --SPREAD_SHEET_VALUES => nvl(substr(i.spreadsheet_data,1,instr(i.spreadsheet_data,'| NA',-1,temp)-1),'NA'),
                                                                      );
                                        
                      BEGIN
                          PIPE ROW(x_tbl_response_det(x_cnt));
                      EXCEPTION
                          WHEN no_data_needed THEN
                              NULL;
                      END;
          End if;
          
        END LOOP;
    
        RETURN;
    EXCEPTION 
    WHEN OTHERS THEN
        NULL;
    END;

FUNCTION CHECK_CONDITIONAL_QUESTION (I_QUESTION_ID IN VARCHAR2,
                                     I_RESPONSE_ID IN VARCHAR2,
                                     I_CHECK_RESPONSE IN  VARCHAR2)
RETURN VARCHAR2
IS  
  XN_ERROR_HANDLE_ID    NUMBER;
  XN_ERROR_SEQ          NUMBER;
  L_RESP_VAL            VARCHAR2(4000);
  L_ACT_RESP            VARCHAR2(4000);
  L_RULE                VARCHAR2(10);
  L_STATUS              VARCHAR2(10) := 'FALSE';
BEGIN
     
  SELECT RESP_VAL
  INTO L_RESP_VAL
  FROM( 
      SELECT DECODE(A.RESPONSE_TYPE,'1',TO_CHAR(A.RESP_NUMBER),'2',TO_CHAR(A.RESP_DATE),'3',A.RESP_NUMBER,
      '4',A.RESP_MLOV,
      '5',A.RESP_CLOB,
      '6', A.resp_radio,
      '7', A.resp_dd,
      '8',SUBSTR(RESP_ATTACHMENT,1,INSTR(RESP_ATTACHMENT,'#',1)-1),
      '9',RESP_SPRD,
      '10',A.RESP_RADIO_B,
      '11',A.CHECKBOX_HIDDEN_VALUE)
      AS RESP_VAL,
      MAX(INSTANCE_ID) OVER (PARTITION BY QUE_RESPONSE_ID) MAX_ID, INSTANCE_ID
      FROM MS_QSM_QUESTNR_RESP_DUP_V A
      WHERE QUE_RESPONSE_ID = I_RESPONSE_ID
      AND QUESTION_PK= I_QUESTION_ID) A
  WHERE INSTANCE_ID=MAX_ID;
  
  L_ACT_RESP := SUBSTR(I_CHECK_RESPONSE,3);
  L_RULE :=  SUBSTR(I_CHECK_RESPONSE,1,1);
  
   ms_apps_mdf_errors_pkg.insert_log
                                          (pn_error_handle_id => xn_error_handle_id,
                                           pn_error_sequence => xn_error_seq,
                                           PC_ERROR_TYPE => 'E',
                                           PC_ERROR_TEXT => 'VALUES:'||L_RESP_VAL||'@'||L_ACT_RESP||'@'||L_RULE||'@'|| INSTR(','||TRIM(L_RESP_VAL)||',',','||L_ACT_RESP||',',1));
        
  IF L_RULE='5' AND INSTR(','||TRIM(L_RESP_VAL)||',',','||L_ACT_RESP||',',1)>0 THEN    
    L_STATUS:= 'TRUE';          
  ELSIF L_RULE='3' AND TO_NUMBER(NVL(L_RESP_VAL,'0')) > TO_NUMBER(NVL(L_ACT_RESP,'0'))  THEN
     L_STATUS:= 'TRUE';  
  ELSIF L_RULE='4' AND TO_NUMBER(NVL(L_RESP_VAL,'0')) < TO_NUMBER(NVL(L_ACT_RESP,'0')) THEN
     L_STATUS:= 'TRUE'; 
  ELSE 
    L_STATUS:= 'FALSE';  
  END IF;
  
  RETURN  L_STATUS;
  
EXCEPTION
  WHEN OTHERS THEN
          ms_apps_mdf_errors_pkg.insert_log
                                          (pn_error_handle_id => xn_error_handle_id,
                                           pn_error_sequence => xn_error_seq,
                                           PC_ERROR_TYPE => 'E',
                                           PC_ERROR_TEXT => 'Error:'||SQLERRM);
  RETURN L_STATUS;
END;


END ms_qsm_utilities; 
 
/
  CREATE OR REPLACE TYPE "NOVT_DEV"."MS_QSM_VARCHAR2_ARRAY" AS TABLE OF VARCHAR2(4000); 

 
/
